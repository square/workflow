{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Square Workflow \u00b6 A unidirectional data flow library for Kotlin and Swift, emphasizing: Strong support for state-machine driven UI and navigation. Composition and scaling. Effortless separation of business and UI concerns. This project is currently in development and the API subject to breaking changes without notice. Follow Square\u2019s engineering blog, The Corner , to see when this project becomes stable. While the API is not yet stable, this code is in heavy production use in Android and iOS apps with millions of users. Using Workflows in your project \u00b6 Swift \u00b6 See the square/workflow-swift repository. Kotlin \u00b6 See the square/workflow-kotlin repository. Resources \u00b6 Square Workflow \u2013 Droidcon NYC 2019 ( slides ) SF Android GDG @ Square 2019 - Hello Workflow (live coding) Android Dialogs 5-part Coding Series 1 , 2 , 3 , 4 , 5 Reactive Workflows a Year Later \u2013 Droidcon NYC 2018 The Reactive Workflow Pattern \u2013 Fragmented Podcast The Reactive Workflow Pattern Update \u2013 Droidcon SF 2017 The Rx Workflow Pattern \u2013 Droidcon NYC 2017 ( slides ) Support & Contact \u00b6 Workflow maintainers hang out in the #squarelibraries channel on the Kotlin Slack . Releasing and Deploying \u00b6 See RELEASING.md . License \u00b6 Copyright 2019 Square Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#square-workflow","text":"A unidirectional data flow library for Kotlin and Swift, emphasizing: Strong support for state-machine driven UI and navigation. Composition and scaling. Effortless separation of business and UI concerns. This project is currently in development and the API subject to breaking changes without notice. Follow Square\u2019s engineering blog, The Corner , to see when this project becomes stable. While the API is not yet stable, this code is in heavy production use in Android and iOS apps with millions of users.","title":"Square Workflow"},{"location":"#using-workflows-in-your-project","text":"","title":"Using Workflows in your project"},{"location":"#swift","text":"See the square/workflow-swift repository.","title":"Swift"},{"location":"#kotlin","text":"See the square/workflow-kotlin repository.","title":"Kotlin"},{"location":"#resources","text":"Square Workflow \u2013 Droidcon NYC 2019 ( slides ) SF Android GDG @ Square 2019 - Hello Workflow (live coding) Android Dialogs 5-part Coding Series 1 , 2 , 3 , 4 , 5 Reactive Workflows a Year Later \u2013 Droidcon NYC 2018 The Reactive Workflow Pattern \u2013 Fragmented Podcast The Reactive Workflow Pattern Update \u2013 Droidcon SF 2017 The Rx Workflow Pattern \u2013 Droidcon NYC 2017 ( slides )","title":"Resources"},{"location":"#support-contact","text":"Workflow maintainers hang out in the #squarelibraries channel on the Kotlin Slack .","title":"Support &amp; Contact"},{"location":"#releasing-and-deploying","text":"See RELEASING.md .","title":"Releasing and Deploying"},{"location":"#license","text":"Copyright 2019 Square Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"CHANGELOG/","text":"Changelog \u00b6 You can find the changelogs for the library in the respective language repositories: Kotlin Swift","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"You can find the changelogs for the library in the respective language repositories: Kotlin Swift","title":"Changelog"},{"location":"CODE_OF_CONDUCT/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure ourcommunity continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure ourcommunity continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"CODE_OF_CONDUCT/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"CODE_OF_CONDUCT/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"CODE_OF_CONDUCT/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"CODE_OF_CONDUCT/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 If you would like to contribute code to Workflow you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . If you\u2019re using IntelliJ IDEA, we use Square\u2019s code style definitions . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"If you would like to contribute code to Workflow you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . If you\u2019re using IntelliJ IDEA, we use Square\u2019s code style definitions . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"RELEASING/","text":"Releasing workflow \u00b6 Deploying the documentation website \u00b6 Official Workflow documentation lives at https://square.github.io/workflow . The website content consists of three parts: Markdown documentation: Lives in the docs/ folder, and consists of a set of hand-written Markdown files that document high-level concepts. The static site generator mkdocs (with Material theming) is used to convert the Markdown to static, styled HTML. Kotlin API reference: Kdoc embedded in Kotlin source files is converted to GitHub-flavored Markdown by Dokka and then included in the statically-generated website. Swift API reference: Markup comments from Swift files are converted Markdown by Sourcedocs and then included in the statically-generated website. Note: The documentation site is automatically built and deployed whenever a version tag is pushed. You only need these steps if you want to work on the site locally. Setting up the site generators \u00b6 If you\u2019ve already done this, you can skip to Deploying the website to production below. Kotlin: Dokka \u00b6 Dokka runs as a Gradle plugin, so you need to be able to build the Kotlin source with Gradle, but that\u2019s it. To generate the docs manually, run: cd kotlin ./gradlew dokka Swift: Sourcedocs \u00b6 Sourcedocs generates a Markdown site from Swift files. You need Ruby, rubygems, bundler (2.x), Xcode 10.2+, CocoaPods, and of course Sourcedocs itself, to run it. Assuming you\u2019ve already got Xcode, Ruby, and rubygems set up, install the rest of the dependencies: gem install bundler cocoapods brew install sourcedocs You will also need a checkout of the Swift repo: git clone https://github.com/square/workflow-swift.git cd workflow-swift Then generate an Xcode project before running Sourcedocs: cd Samples/SampleApp/ bundle exec pod install # If this is your first time running CocoaPods, that will fail and you'll need to run this instead: #bundle exec pod install --repo-update You can manually generate the docs to verify everything is working correctly by running: #cd Samples/SampleApp/ sourcedocs generate -- -scheme Workflow -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowUI -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowTesting -workspace SampleApp.xcworkspace Note that currently sourcedocs only supports Xcode 10, if you run it with Xcode 11 you might see an error about Catalyst and only empty READMEs will get generated. mkdocs \u00b6 Mkdocs is written in Python, so you\u2019ll need Python 3 and pip in order to run it. Assuming those are set up, run: pip install -r requirements.txt Generate the site manually with: mkdocs build While you\u2019re working on the documentation files, you can run the site locally with: mkdocs serve Deploying the website to production \u00b6 Note: The documentation site is automatically built and deployed by a Github Workflow whenever a version tag is pushed. You only need these steps if you want to publish the site manually. Before deploying the website for real, you need to export our Google Analytics key in an environment variable so that it will get added to the HTML. Get the key from one of the project maintainers, then add the following to your .bashrc and re-source it: export WORKFLOW_GOOGLE_ANALYTICS_KEY = UA-__________-1 Now you\u2019re ready to publish the site! Just choose a tag or SHA to deploy from, and run: ./deploy_website.sh TAG_OR_SHA # For example: #./deploy_website.sh v0.18.0 This will clone the repo to a temporary directory, checkout the right SHA, build Kotlin and Swift API docs, generate HTML, and push the newly-generated content to the gh-pages branch on GitHub. Validating Markdown \u00b6 Since all of our high-level documentation is written in Markdown, we run a linter in CI to ensure we use consistent formatting. Lint errors will fail your PR builds, so to run locally, install markdownlint : gem install mdl Run the linter using the lint_docs.sh : ./lint_docs.sh Rules can be configured by editing .markdownlint.rb . Kotlin Notes \u00b6 Development \u00b6 To build and install the current version to your local Maven repository ( ~/.m2 ), run: ./gradlew clean installArchives Deploying \u00b6 Configuration \u00b6 In order to deploy artifacts to a Maven repository, you\u2019ll need to set 4 properties in your private Gradle properties file ( ~/.gradle/gradle.properties ): RELEASE_REPOSITORY_URL=<url of release repository> SNAPSHOT_REPOSITORY_URL=<url of snapshot repository SONATYPE_NEXUS_USERNAME=<username> SONATYPE_NEXUS_PASSWORD=<password> Snapshot Releases \u00b6 Double-check that gradle.properties correctly contains the -SNAPSHOT suffix, then upload snapshot artifacts to Sonatype just like you would for a production release: ./gradlew clean build && ./gradlew uploadArchives --no-parallel --no-daemon You can verify the artifacts are available by visiting https://oss.sonatype.org/content/repositories/snapshots/com/squareup/workflow/ .","title":"Releasing workflow"},{"location":"RELEASING/#releasing-workflow","text":"","title":"Releasing workflow"},{"location":"RELEASING/#deploying-the-documentation-website","text":"Official Workflow documentation lives at https://square.github.io/workflow . The website content consists of three parts: Markdown documentation: Lives in the docs/ folder, and consists of a set of hand-written Markdown files that document high-level concepts. The static site generator mkdocs (with Material theming) is used to convert the Markdown to static, styled HTML. Kotlin API reference: Kdoc embedded in Kotlin source files is converted to GitHub-flavored Markdown by Dokka and then included in the statically-generated website. Swift API reference: Markup comments from Swift files are converted Markdown by Sourcedocs and then included in the statically-generated website. Note: The documentation site is automatically built and deployed whenever a version tag is pushed. You only need these steps if you want to work on the site locally.","title":"Deploying the documentation website"},{"location":"RELEASING/#setting-up-the-site-generators","text":"If you\u2019ve already done this, you can skip to Deploying the website to production below.","title":"Setting up the site generators"},{"location":"RELEASING/#kotlin-dokka","text":"Dokka runs as a Gradle plugin, so you need to be able to build the Kotlin source with Gradle, but that\u2019s it. To generate the docs manually, run: cd kotlin ./gradlew dokka","title":"Kotlin: Dokka"},{"location":"RELEASING/#swift-sourcedocs","text":"Sourcedocs generates a Markdown site from Swift files. You need Ruby, rubygems, bundler (2.x), Xcode 10.2+, CocoaPods, and of course Sourcedocs itself, to run it. Assuming you\u2019ve already got Xcode, Ruby, and rubygems set up, install the rest of the dependencies: gem install bundler cocoapods brew install sourcedocs You will also need a checkout of the Swift repo: git clone https://github.com/square/workflow-swift.git cd workflow-swift Then generate an Xcode project before running Sourcedocs: cd Samples/SampleApp/ bundle exec pod install # If this is your first time running CocoaPods, that will fail and you'll need to run this instead: #bundle exec pod install --repo-update You can manually generate the docs to verify everything is working correctly by running: #cd Samples/SampleApp/ sourcedocs generate -- -scheme Workflow -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowUI -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowTesting -workspace SampleApp.xcworkspace Note that currently sourcedocs only supports Xcode 10, if you run it with Xcode 11 you might see an error about Catalyst and only empty READMEs will get generated.","title":"Swift: Sourcedocs"},{"location":"RELEASING/#mkdocs","text":"Mkdocs is written in Python, so you\u2019ll need Python 3 and pip in order to run it. Assuming those are set up, run: pip install -r requirements.txt Generate the site manually with: mkdocs build While you\u2019re working on the documentation files, you can run the site locally with: mkdocs serve","title":"mkdocs"},{"location":"RELEASING/#deploying-the-website-to-production","text":"Note: The documentation site is automatically built and deployed by a Github Workflow whenever a version tag is pushed. You only need these steps if you want to publish the site manually. Before deploying the website for real, you need to export our Google Analytics key in an environment variable so that it will get added to the HTML. Get the key from one of the project maintainers, then add the following to your .bashrc and re-source it: export WORKFLOW_GOOGLE_ANALYTICS_KEY = UA-__________-1 Now you\u2019re ready to publish the site! Just choose a tag or SHA to deploy from, and run: ./deploy_website.sh TAG_OR_SHA # For example: #./deploy_website.sh v0.18.0 This will clone the repo to a temporary directory, checkout the right SHA, build Kotlin and Swift API docs, generate HTML, and push the newly-generated content to the gh-pages branch on GitHub.","title":"Deploying the website to production"},{"location":"RELEASING/#validating-markdown","text":"Since all of our high-level documentation is written in Markdown, we run a linter in CI to ensure we use consistent formatting. Lint errors will fail your PR builds, so to run locally, install markdownlint : gem install mdl Run the linter using the lint_docs.sh : ./lint_docs.sh Rules can be configured by editing .markdownlint.rb .","title":"Validating Markdown"},{"location":"RELEASING/#kotlin-notes","text":"","title":"Kotlin Notes"},{"location":"RELEASING/#development","text":"To build and install the current version to your local Maven repository ( ~/.m2 ), run: ./gradlew clean installArchives","title":"Development"},{"location":"RELEASING/#deploying","text":"","title":"Deploying"},{"location":"RELEASING/#configuration","text":"In order to deploy artifacts to a Maven repository, you\u2019ll need to set 4 properties in your private Gradle properties file ( ~/.gradle/gradle.properties ): RELEASE_REPOSITORY_URL=<url of release repository> SNAPSHOT_REPOSITORY_URL=<url of snapshot repository SONATYPE_NEXUS_USERNAME=<username> SONATYPE_NEXUS_PASSWORD=<password>","title":"Configuration"},{"location":"RELEASING/#snapshot-releases","text":"Double-check that gradle.properties correctly contains the -SNAPSHOT suffix, then upload snapshot artifacts to Sonatype just like you would for a production release: ./gradlew clean build && ./gradlew uploadArchives --no-parallel --no-daemon You can verify the artifacts are available by visiting https://oss.sonatype.org/content/repositories/snapshots/com/squareup/workflow/ .","title":"Snapshot Releases"},{"location":"code-recipes/","text":"Code Receipes \u00b6 Coming soon!","title":"Code Recipes"},{"location":"code-recipes/#code-receipes","text":"Coming soon!","title":"Code Receipes"},{"location":"development-process/","text":"Development Process \u00b6 Coming soon!","title":"Development Process"},{"location":"development-process/#development-process","text":"Coming soon!","title":"Development Process"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 Isn\u2019t this basically React/Elm? \u00b6 React and the Elm architecture were both strong influences for this library. However both those libraries are written for JavaScript. Workflows are written in and for both Kotlin and Swift, making use of features of those languages, and with usability from those languages as a major design goal. There are also a few architectural differences: React Elm Workflow Modularity Component TK Workflow is analogous to React\u2019s Component State Each Component has a state property that is read directly and updated via a setState method. State is called Model in Elm. Workflow s have an associated state type. The state can only be updated when the props change, or with a WorkflowAction . Views Component s have a render method that returns a tree of elements. Elm applications have a view function that returns a tree of elements. Since workflows are not tied to any particular UI view layer, they can have an arbitrary rendering type. The render() method returns this type. Dependencies React allows parent components to pass \u201cprops\u201d down to their children. TK In Swift, Workflow s are often structs that need to be initialized with their dependencies and configuration data from their parent. In Kotlin, they have a separate type parameter ( PropsT ) that is always passed down from the parent. Workflow instances can also inject dependencies, and play nicely with dependency injection frameworks. Composability TK TK TK Event Handling TK TK TK How is this different than MvRx? \u00b6 Besides being very Android and Rx specific, MvRx solves view modeling problems only per screen. Workflow was mainly inspired by the need to manage and compose navigation in apps with dozens or hundreds of screens. How do I get involved and/or contribute? \u00b6 Workflow is open source! See our CONTRIBUTING doc to get started. Stay tuned! We\u2019re considering hosting a public Slack channel for open source contributors. This seems clever. Can I stick with a traditional development approach? \u00b6 Of course! Workflow was designed to make complex application architecture predictable and safe for large development teams. We\u2019re confident that it brings benefits even to smaller projects, but there is never only one right way to build software. We recommend to follow good practices and use an architecture that makes sense for your project . Why do we need another architecture? \u00b6 Architectural patterns with weak access controls and heavy use of shared mutable state make it incredibly difficult to fully understand the behavior of the code that we are writing. This quickly devolves into an arms race as the codebase grows: if every feature or component in the codebase might change anything at any time, bug fixes turn into a really sad game of whack-a-mole. We have seen this pattern occur repeatedly in traditional mobile applications using patterns like MVC. Workflow defines strong boundaries and contracts between separate parts of the application to ensure that our code remains predictable and maintainable as the size and complexity of the codebase grows.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#isnt-this-basically-reactelm","text":"React and the Elm architecture were both strong influences for this library. However both those libraries are written for JavaScript. Workflows are written in and for both Kotlin and Swift, making use of features of those languages, and with usability from those languages as a major design goal. There are also a few architectural differences: React Elm Workflow Modularity Component TK Workflow is analogous to React\u2019s Component State Each Component has a state property that is read directly and updated via a setState method. State is called Model in Elm. Workflow s have an associated state type. The state can only be updated when the props change, or with a WorkflowAction . Views Component s have a render method that returns a tree of elements. Elm applications have a view function that returns a tree of elements. Since workflows are not tied to any particular UI view layer, they can have an arbitrary rendering type. The render() method returns this type. Dependencies React allows parent components to pass \u201cprops\u201d down to their children. TK In Swift, Workflow s are often structs that need to be initialized with their dependencies and configuration data from their parent. In Kotlin, they have a separate type parameter ( PropsT ) that is always passed down from the parent. Workflow instances can also inject dependencies, and play nicely with dependency injection frameworks. Composability TK TK TK Event Handling TK TK TK","title":"Isn't this basically React/Elm?"},{"location":"faq/#how-is-this-different-than-mvrx","text":"Besides being very Android and Rx specific, MvRx solves view modeling problems only per screen. Workflow was mainly inspired by the need to manage and compose navigation in apps with dozens or hundreds of screens.","title":"How is this different than MvRx?"},{"location":"faq/#how-do-i-get-involved-andor-contribute","text":"Workflow is open source! See our CONTRIBUTING doc to get started. Stay tuned! We\u2019re considering hosting a public Slack channel for open source contributors.","title":"How do I get involved and/or contribute?"},{"location":"faq/#this-seems-clever-can-i-stick-with-a-traditional-development-approach","text":"Of course! Workflow was designed to make complex application architecture predictable and safe for large development teams. We\u2019re confident that it brings benefits even to smaller projects, but there is never only one right way to build software. We recommend to follow good practices and use an architecture that makes sense for your project .","title":"This seems clever. Can I stick with a traditional development approach?"},{"location":"faq/#why-do-we-need-another-architecture","text":"Architectural patterns with weak access controls and heavy use of shared mutable state make it incredibly difficult to fully understand the behavior of the code that we are writing. This quickly devolves into an arms race as the codebase grows: if every feature or component in the codebase might change anything at any time, bug fixes turn into a really sad game of whack-a-mole. We have seen this pattern occur repeatedly in traditional mobile applications using patterns like MVC. Workflow defines strong boundaries and contracts between separate parts of the application to ensure that our code remains predictable and maintainable as the size and complexity of the codebase grows.","title":"Why do we need another architecture?"},{"location":"kotlin/api/workflow/com.squareup.tracing/","text":"// workflow / com.squareup.tracing Package com.squareup.tracing \u00b6 Types \u00b6 Name Summary TimeMark [jvm] Content interface TimeMark More info Interface that represents a time point. TraceEncoder [jvm] Content class TraceEncoder ( scope : CoroutineScope, start : TimeMark , ioDispatcher : CoroutineDispatcher, sinkProvider : () -> BufferedSink) : Closeable More info Encodes and writes trace events to an Okio BufferedSink. TraceEvent [jvm] Content sealed class TraceEvent More info Represents a single event in a trace. TraceLogger [jvm] Content interface TraceLogger More info Logs TraceEvent s to a TraceEncoder under a given process and thread name.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/#package-comsquareuptracing","text":"","title":"Package com.squareup.tracing"},{"location":"kotlin/api/workflow/com.squareup.tracing/#types","text":"Name Summary TimeMark [jvm] Content interface TimeMark More info Interface that represents a time point. TraceEncoder [jvm] Content class TraceEncoder ( scope : CoroutineScope, start : TimeMark , ioDispatcher : CoroutineDispatcher, sinkProvider : () -> BufferedSink) : Closeable More info Encodes and writes trace events to an Okio BufferedSink. TraceEvent [jvm] Content sealed class TraceEvent More info Represents a single event in a trace. TraceLogger [jvm] Content interface TraceLogger More info Logs TraceEvent s to a TraceEncoder under a given process and thread name.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.tracing/-time-mark/","text":"// workflow / com.squareup.tracing / TimeMark TimeMark \u00b6 [jvm] interface TimeMark Interface that represents a time point. Remains bound to the time source it was taken from and allows querying for the duration of time elapsed from that point (see the val elapsedNow ). Properties \u00b6 Name Summary elapsedNow [jvm] abstract val elapsedNow : Long Returns the amount of time passed from this mark measured with the time source from which this mark was taken.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-time-mark/#timemark","text":"[jvm] interface TimeMark Interface that represents a time point. Remains bound to the time source it was taken from and allows querying for the duration of time elapsed from that point (see the val elapsedNow ).","title":"TimeMark"},{"location":"kotlin/api/workflow/com.squareup.tracing/-time-mark/#properties","text":"Name Summary elapsedNow [jvm] abstract val elapsedNow : Long Returns the amount of time passed from this mark measured with the time source from which this mark was taken.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-time-mark/elapsed-now/","text":"// workflow / com.squareup.tracing / TimeMark / elapsedNow elapsedNow \u00b6 [jvm] Content abstract val elapsedNow : Long More info Returns the amount of time passed from this mark measured with the time source from which this mark was taken. Note that the content of this val can change on subsequent invocations.","title":"Elapsed now"},{"location":"kotlin/api/workflow/com.squareup.tracing/-time-mark/elapsed-now/#elapsednow","text":"[jvm] Content abstract val elapsedNow : Long More info Returns the amount of time passed from this mark measured with the time source from which this mark was taken. Note that the content of this val can change on subsequent invocations.","title":"elapsedNow"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/","text":"// workflow / com.squareup.tracing / TraceEncoder TraceEncoder \u00b6 [jvm] class TraceEncoder ( scope : CoroutineScope, start : TimeMark , ioDispatcher : CoroutineDispatcher, sinkProvider : () -> BufferedSink) : Closeable Encodes and writes trace events to an Okio BufferedSink. Parameters \u00b6 jvm scope The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start The TimeMark to consider the beginning timestamp of the trace. All trace events\u2019 timestamps are relative to this mark. TimeSource.Monotonic . markNow by default. ioDispatcher The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider Returns the BufferedSink to use to write trace events to. Called on a background thread. Constructors \u00b6 TraceEncoder [jvm] fun TraceEncoder (scope: CoroutineScope, start: TimeMark = TraceEncoderTimeMark, ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () -> BufferedSink)The CoroutineScope that defines the lifetime for the encoder. Functions \u00b6 Name Summary close [jvm] Content open override fun close () createLogger [jvm] Content fun createLogger (processName: String = \u201c\u201d, threadName: String = \u201c\u201d): TraceLogger More info Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/#traceencoder","text":"[jvm] class TraceEncoder ( scope : CoroutineScope, start : TimeMark , ioDispatcher : CoroutineDispatcher, sinkProvider : () -> BufferedSink) : Closeable Encodes and writes trace events to an Okio BufferedSink.","title":"TraceEncoder"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/#parameters","text":"jvm scope The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start The TimeMark to consider the beginning timestamp of the trace. All trace events\u2019 timestamps are relative to this mark. TimeSource.Monotonic . markNow by default. ioDispatcher The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider Returns the BufferedSink to use to write trace events to. Called on a background thread.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/#constructors","text":"TraceEncoder [jvm] fun TraceEncoder (scope: CoroutineScope, start: TimeMark = TraceEncoderTimeMark, ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () -> BufferedSink)The CoroutineScope that defines the lifetime for the encoder.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/#functions","text":"Name Summary close [jvm] Content open override fun close () createLogger [jvm] Content fun createLogger (processName: String = \u201c\u201d, threadName: String = \u201c\u201d): TraceLogger More info Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/-trace-encoder/","text":"// workflow / com.squareup.tracing / TraceEncoder / TraceEncoder TraceEncoder \u00b6 [jvm] Content fun TraceEncoder (scope: CoroutineScope, start: TimeMark = TraceEncoderTimeMark, ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () -> BufferedSink) More info Parameters \u00b6 jvm scope The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start The TimeMark to consider the beginning timestamp of the trace. All trace events\u2019 timestamps are relative to this mark. TimeSource.Monotonic . markNow by default. ioDispatcher The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider Returns the BufferedSink to use to write trace events to. Called on a background thread.","title":" trace encoder"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/-trace-encoder/#traceencoder","text":"[jvm] Content fun TraceEncoder (scope: CoroutineScope, start: TimeMark = TraceEncoderTimeMark, ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () -> BufferedSink) More info","title":"TraceEncoder"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/-trace-encoder/#parameters","text":"jvm scope The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start The TimeMark to consider the beginning timestamp of the trace. All trace events\u2019 timestamps are relative to this mark. TimeSource.Monotonic . markNow by default. ioDispatcher The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider Returns the BufferedSink to use to write trace events to. Called on a background thread.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/close/","text":"// workflow / com.squareup.tracing / TraceEncoder / close close \u00b6 [jvm] Content open override fun close ()","title":"Close"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/close/#close","text":"[jvm] Content open override fun close ()","title":"close"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/create-logger/","text":"// workflow / com.squareup.tracing / TraceEncoder / createLogger createLogger \u00b6 [jvm] Content fun createLogger (processName: String = \u201c\u201d, threadName: String = \u201c\u201d): TraceLogger More info Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID. Note this does not do anything with actual threads, it just affects the thread ID used in trace events.","title":"Create logger"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/create-logger/#createlogger","text":"[jvm] Content fun createLogger (processName: String = \u201c\u201d, threadName: String = \u201c\u201d): TraceLogger More info Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID. Note this does not do anything with actual threads, it just affects the thread ID used in trace events.","title":"createLogger"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/","text":"// workflow / com.squareup.tracing / TraceEvent TraceEvent \u00b6 [jvm] sealed class TraceEvent Represents a single event in a trace. Types \u00b6 Name Summary AsyncDurationBegin [jvm] Content data class AsyncDurationBegin ( id : Any , name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent AsyncDurationEnd [jvm] Content data class AsyncDurationEnd ( id : Any , name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent Counter [jvm] Content data class Counter ( name : String , series : Map < String , Number >, id : Long ?) : TraceEvent DurationBegin [jvm] Content data class DurationBegin ( name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent DurationEnd [jvm] Content data class DurationEnd ( name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent Instant [jvm] Content data class Instant ( name : String , args : Map < String , Any ?>, scope : TraceEvent.Instant.InstantScope , category : String ?) : TraceEvent ObjectCreated [jvm] Content data class ObjectCreated ( id : Long , objectType : String ) : TraceEvent ObjectDestroyed [jvm] Content data class ObjectDestroyed ( id : Long , objectType : String ) : TraceEvent ObjectSnapshot [jvm] Content data class ObjectSnapshot ( id : Long , objectType : String , snapshot : Any ) : TraceEvent Properties \u00b6 Name Summary category [jvm] open val category : String ? Inheritors \u00b6 Name TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/#traceevent","text":"[jvm] sealed class TraceEvent Represents a single event in a trace.","title":"TraceEvent"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/#types","text":"Name Summary AsyncDurationBegin [jvm] Content data class AsyncDurationBegin ( id : Any , name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent AsyncDurationEnd [jvm] Content data class AsyncDurationEnd ( id : Any , name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent Counter [jvm] Content data class Counter ( name : String , series : Map < String , Number >, id : Long ?) : TraceEvent DurationBegin [jvm] Content data class DurationBegin ( name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent DurationEnd [jvm] Content data class DurationEnd ( name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent Instant [jvm] Content data class Instant ( name : String , args : Map < String , Any ?>, scope : TraceEvent.Instant.InstantScope , category : String ?) : TraceEvent ObjectCreated [jvm] Content data class ObjectCreated ( id : Long , objectType : String ) : TraceEvent ObjectDestroyed [jvm] Content data class ObjectDestroyed ( id : Long , objectType : String ) : TraceEvent ObjectSnapshot [jvm] Content data class ObjectSnapshot ( id : Long , objectType : String , snapshot : Any ) : TraceEvent","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/#properties","text":"Name Summary category [jvm] open val category : String ?","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/#inheritors","text":"Name TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent TraceEvent","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/category/","text":"// workflow / com.squareup.tracing / TraceEvent / category category \u00b6 [jvm] Content open val category : String ?","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/category/#category","text":"[jvm] Content open val category : String ?","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin AsyncDurationBegin \u00b6 [jvm] data class AsyncDurationBegin ( id : Any , name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent Properties \u00b6 Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null id [jvm] val id : Any name [jvm] val name : String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/#asyncdurationbegin","text":"[jvm] data class AsyncDurationBegin ( id : Any , name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent","title":"AsyncDurationBegin"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/#properties","text":"Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null id [jvm] val id : Any name [jvm] val name : String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/-async-duration-begin/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / AsyncDurationBegin AsyncDurationBegin \u00b6 [jvm] Content fun AsyncDurationBegin (id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":" async duration begin"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/-async-duration-begin/#asyncdurationbegin","text":"[jvm] Content fun AsyncDurationBegin (id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"AsyncDurationBegin"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/args/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / args args \u00b6 [jvm] Content val args : Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/args/#args","text":"[jvm] Content val args : Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/category/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / category category \u00b6 [jvm] Content open override val category : String ? = null","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/category/#category","text":"[jvm] Content open override val category : String ? = null","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/id/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / id id \u00b6 [jvm] Content val id : Any","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/id/#id","text":"[jvm] Content val id : Any","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/name/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd AsyncDurationEnd \u00b6 [jvm] data class AsyncDurationEnd ( id : Any , name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent Properties \u00b6 Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null id [jvm] val id : Any name [jvm] val name : String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/#asyncdurationend","text":"[jvm] data class AsyncDurationEnd ( id : Any , name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent","title":"AsyncDurationEnd"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/#properties","text":"Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null id [jvm] val id : Any name [jvm] val name : String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/-async-duration-end/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / AsyncDurationEnd AsyncDurationEnd \u00b6 [jvm] Content fun AsyncDurationEnd (id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":" async duration end"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/-async-duration-end/#asyncdurationend","text":"[jvm] Content fun AsyncDurationEnd (id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"AsyncDurationEnd"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/args/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / args args \u00b6 [jvm] Content val args : Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/args/#args","text":"[jvm] Content val args : Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/category/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / category category \u00b6 [jvm] Content open override val category : String ? = null","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/category/#category","text":"[jvm] Content open override val category : String ? = null","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/id/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / id id \u00b6 [jvm] Content val id : Any","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/id/#id","text":"[jvm] Content val id : Any","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/name/","text":"// workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/","text":"// workflow / com.squareup.tracing / TraceEvent / Counter Counter \u00b6 [jvm] data class Counter ( name : String , series : Map < String , Number >, id : Long ?) : TraceEvent Properties \u00b6 Name Summary category [jvm] open val category : String ? id [jvm] val id : Long ? = null name [jvm] val name : String series [jvm] val series : Map < String , Number >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/#counter","text":"[jvm] data class Counter ( name : String , series : Map < String , Number >, id : Long ?) : TraceEvent","title":"Counter"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/#properties","text":"Name Summary category [jvm] open val category : String ? id [jvm] val id : Long ? = null name [jvm] val name : String series [jvm] val series : Map < String , Number >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/-counter/","text":"// workflow / com.squareup.tracing / TraceEvent / Counter / Counter Counter \u00b6 [jvm] Content fun Counter (name: String , series: Map < String , Number >, id: Long ? = null)","title":" counter"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/-counter/#counter","text":"[jvm] Content fun Counter (name: String , series: Map < String , Number >, id: Long ? = null)","title":"Counter"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/id/","text":"// workflow / com.squareup.tracing / TraceEvent / Counter / id id \u00b6 [jvm] Content val id : Long ? = null","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/id/#id","text":"[jvm] Content val id : Long ? = null","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/name/","text":"// workflow / com.squareup.tracing / TraceEvent / Counter / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/series/","text":"// workflow / com.squareup.tracing / TraceEvent / Counter / series series \u00b6 [jvm] Content val series : Map < String , Number >","title":"Series"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/series/#series","text":"[jvm] Content val series : Map < String , Number >","title":"series"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationBegin DurationBegin \u00b6 [jvm] data class DurationBegin ( name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent Properties \u00b6 Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null name [jvm] val name : String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/#durationbegin","text":"[jvm] data class DurationBegin ( name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent","title":"DurationBegin"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/#properties","text":"Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null name [jvm] val name : String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/-duration-begin/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationBegin / DurationBegin DurationBegin \u00b6 [jvm] Content fun DurationBegin (name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":" duration begin"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/-duration-begin/#durationbegin","text":"[jvm] Content fun DurationBegin (name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"DurationBegin"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/args/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationBegin / args args \u00b6 [jvm] Content val args : Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/args/#args","text":"[jvm] Content val args : Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/category/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationBegin / category category \u00b6 [jvm] Content open override val category : String ? = null","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/category/#category","text":"[jvm] Content open override val category : String ? = null","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/name/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationBegin / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationEnd DurationEnd \u00b6 [jvm] data class DurationEnd ( name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent Properties \u00b6 Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null name [jvm] val name : String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/#durationend","text":"[jvm] data class DurationEnd ( name : String , args : Map < String , Any ?>, category : String ?) : TraceEvent","title":"DurationEnd"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/#properties","text":"Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null name [jvm] val name : String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/-duration-end/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationEnd / DurationEnd DurationEnd \u00b6 [jvm] Content fun DurationEnd (name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":" duration end"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/-duration-end/#durationend","text":"[jvm] Content fun DurationEnd (name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"DurationEnd"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/args/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationEnd / args args \u00b6 [jvm] Content val args : Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/args/#args","text":"[jvm] Content val args : Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/category/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationEnd / category category \u00b6 [jvm] Content open override val category : String ? = null","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/category/#category","text":"[jvm] Content open override val category : String ? = null","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/name/","text":"// workflow / com.squareup.tracing / TraceEvent / DurationEnd / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant Instant \u00b6 [jvm] data class Instant ( name : String , args : Map < String , Any ?>, scope : TraceEvent.Instant.InstantScope , category : String ?) : TraceEvent Types \u00b6 Name Summary InstantScope [jvm] Content enum InstantScope : Enum < TraceEvent.Instant.InstantScope > Properties \u00b6 Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null name [jvm] val name : String scope [jvm] val scope : TraceEvent.Instant.InstantScope","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/#instant","text":"[jvm] data class Instant ( name : String , args : Map < String , Any ?>, scope : TraceEvent.Instant.InstantScope , category : String ?) : TraceEvent","title":"Instant"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/#types","text":"Name Summary InstantScope [jvm] Content enum InstantScope : Enum < TraceEvent.Instant.InstantScope >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/#properties","text":"Name Summary args [jvm] val args : Map < String , Any ?> category [jvm] open override val category : String ? = null name [jvm] val name : String scope [jvm] val scope : TraceEvent.Instant.InstantScope","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / Instant Instant \u00b6 [jvm] Content fun Instant (name: String , args: Map < String , Any ?> = emptyMap(), scope: TraceEvent.Instant.InstantScope = THREAD, category: String ? = null)","title":" instant"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant/#instant","text":"[jvm] Content fun Instant (name: String , args: Map < String , Any ?> = emptyMap(), scope: TraceEvent.Instant.InstantScope = THREAD, category: String ? = null)","title":"Instant"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/args/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / args args \u00b6 [jvm] Content val args : Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/args/#args","text":"[jvm] Content val args : Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/category/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / category category \u00b6 [jvm] Content open override val category : String ? = null","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/category/#category","text":"[jvm] Content open override val category : String ? = null","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/name/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/scope/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / scope scope \u00b6 [jvm] Content val scope : TraceEvent.Instant.InstantScope","title":"Scope"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/scope/#scope","text":"[jvm] Content val scope : TraceEvent.Instant.InstantScope","title":"scope"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope InstantScope \u00b6 [jvm] enum InstantScope : Enum < TraceEvent.Instant.InstantScope > Entries \u00b6 GLOBAL [jvm] GLOBAL () PROCESS [jvm] PROCESS () THREAD [jvm] THREAD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/#instantscope","text":"[jvm] enum InstantScope : Enum < TraceEvent.Instant.InstantScope >","title":"InstantScope"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/#entries","text":"GLOBAL [jvm] GLOBAL () PROCESS [jvm] PROCESS () THREAD [jvm] THREAD ()","title":"Entries"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / GLOBAL GLOBAL \u00b6 [jvm] GLOBAL () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/#global","text":"[jvm] GLOBAL ()","title":"GLOBAL"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/name/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / GLOBAL / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/ordinal/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / GLOBAL / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / PROCESS PROCESS \u00b6 [jvm] PROCESS () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/#process","text":"[jvm] PROCESS ()","title":"PROCESS"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/name/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / PROCESS / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/ordinal/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / PROCESS / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / THREAD THREAD \u00b6 [jvm] THREAD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/#thread","text":"[jvm] THREAD ()","title":"THREAD"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/name/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / THREAD / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/ordinal/","text":"// workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / THREAD / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectCreated ObjectCreated \u00b6 [jvm] data class ObjectCreated ( id : Long , objectType : String ) : TraceEvent Properties \u00b6 Name Summary category [jvm] open val category : String ? id [jvm] val id : Long objectType [jvm] val objectType : String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/#objectcreated","text":"[jvm] data class ObjectCreated ( id : Long , objectType : String ) : TraceEvent","title":"ObjectCreated"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/#properties","text":"Name Summary category [jvm] open val category : String ? id [jvm] val id : Long objectType [jvm] val objectType : String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/-object-created/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectCreated / ObjectCreated ObjectCreated \u00b6 [jvm] Content fun ObjectCreated (id: Long , objectType: String )","title":" object created"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/-object-created/#objectcreated","text":"[jvm] Content fun ObjectCreated (id: Long , objectType: String )","title":"ObjectCreated"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/id/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectCreated / id id \u00b6 [jvm] Content val id : Long","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/id/#id","text":"[jvm] Content val id : Long","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/object-type/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectCreated / objectType objectType \u00b6 [jvm] Content val objectType : String","title":"Object type"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/object-type/#objecttype","text":"[jvm] Content val objectType : String","title":"objectType"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectDestroyed ObjectDestroyed \u00b6 [jvm] data class ObjectDestroyed ( id : Long , objectType : String ) : TraceEvent Properties \u00b6 Name Summary category [jvm] open val category : String ? id [jvm] val id : Long objectType [jvm] val objectType : String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/#objectdestroyed","text":"[jvm] data class ObjectDestroyed ( id : Long , objectType : String ) : TraceEvent","title":"ObjectDestroyed"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/#properties","text":"Name Summary category [jvm] open val category : String ? id [jvm] val id : Long objectType [jvm] val objectType : String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/-object-destroyed/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectDestroyed / ObjectDestroyed ObjectDestroyed \u00b6 [jvm] Content fun ObjectDestroyed (id: Long , objectType: String )","title":" object destroyed"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/-object-destroyed/#objectdestroyed","text":"[jvm] Content fun ObjectDestroyed (id: Long , objectType: String )","title":"ObjectDestroyed"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/id/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectDestroyed / id id \u00b6 [jvm] Content val id : Long","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/id/#id","text":"[jvm] Content val id : Long","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/object-type/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectDestroyed / objectType objectType \u00b6 [jvm] Content val objectType : String","title":"Object type"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/object-type/#objecttype","text":"[jvm] Content val objectType : String","title":"objectType"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot ObjectSnapshot \u00b6 [jvm] data class ObjectSnapshot ( id : Long , objectType : String , snapshot : Any ) : TraceEvent Properties \u00b6 Name Summary category [jvm] open val category : String ? id [jvm] val id : Long objectType [jvm] val objectType : String snapshot [jvm] val snapshot : Any","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/#objectsnapshot","text":"[jvm] data class ObjectSnapshot ( id : Long , objectType : String , snapshot : Any ) : TraceEvent","title":"ObjectSnapshot"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/#properties","text":"Name Summary category [jvm] open val category : String ? id [jvm] val id : Long objectType [jvm] val objectType : String snapshot [jvm] val snapshot : Any","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/-object-snapshot/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot / ObjectSnapshot ObjectSnapshot \u00b6 [jvm] Content fun ObjectSnapshot (id: Long , objectType: String , snapshot: Any )","title":" object snapshot"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/-object-snapshot/#objectsnapshot","text":"[jvm] Content fun ObjectSnapshot (id: Long , objectType: String , snapshot: Any )","title":"ObjectSnapshot"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/id/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot / id id \u00b6 [jvm] Content val id : Long","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/id/#id","text":"[jvm] Content val id : Long","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/object-type/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot / objectType objectType \u00b6 [jvm] Content val objectType : String","title":"Object type"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/object-type/#objecttype","text":"[jvm] Content val objectType : String","title":"objectType"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/snapshot/","text":"// workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot / snapshot snapshot \u00b6 [jvm] Content val snapshot : Any","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/snapshot/#snapshot","text":"[jvm] Content val snapshot : Any","title":"snapshot"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/","text":"// workflow / com.squareup.tracing / TraceLogger TraceLogger \u00b6 [jvm] interface TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name. Create with TraceEncoder.createLogger . Functions \u00b6 Name Summary log [jvm] Content abstract fun log (event: TraceEvent ) More info Tags event with the current timestamp and then enqueues it to be written to the trace file. [jvm] Content abstract fun log (eventBatch: List < TraceEvent >) More info Tags all events with the current timestamp and then enqueues them to be written to the trace file.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/#tracelogger","text":"[jvm] interface TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name. Create with TraceEncoder.createLogger .","title":"TraceLogger"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/#functions","text":"Name Summary log [jvm] Content abstract fun log (event: TraceEvent ) More info Tags event with the current timestamp and then enqueues it to be written to the trace file. [jvm] Content abstract fun log (eventBatch: List < TraceEvent >) More info Tags all events with the current timestamp and then enqueues them to be written to the trace file.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/log/","text":"// workflow / com.squareup.tracing / TraceLogger / log log \u00b6 [jvm] Content abstract fun log (eventBatch: List < TraceEvent >) More info Tags all events with the current timestamp and then enqueues them to be written to the trace file. [jvm] Content abstract fun log (event: TraceEvent ) More info Tags event with the current timestamp and then enqueues it to be written to the trace file.","title":"Log"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/log/#log","text":"[jvm] Content abstract fun log (eventBatch: List < TraceEvent >) More info Tags all events with the current timestamp and then enqueues them to be written to the trace file. [jvm] Content abstract fun log (event: TraceEvent ) More info Tags event with the current timestamp and then enqueues it to be written to the trace file.","title":"log"},{"location":"kotlin/api/workflow/com.squareup.workflow1/","text":"// workflow / com.squareup.workflow1 Package com.squareup.workflow1 \u00b6 Types \u00b6 Name Summary BaseRenderContext [jvm] Content interface BaseRenderContext PropsT , StateT , in OutputT > More info Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. ExperimentalWorkflowApi [jvm] Content annotation class ExperimentalWorkflowApi More info Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. ImpostorWorkflow [jvm] Content @ ExperimentalWorkflowApi () interface ImpostorWorkflow More info Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. LifecycleWorker [jvm] Content abstract class LifecycleWorker : Worker < Nothing > More info Worker that performs some action when the worker is started and/or stopped. NoopWorkflowInterceptor [jvm] Content @ ExperimentalWorkflowApi () object NoopWorkflowInterceptor : WorkflowInterceptor More info A WorkflowInterceptor that does not intercept anything. RenderingAndSnapshot [jvm] Content class RenderingAndSnapshot RenderingT >( rendering : RenderingT , snapshot : TreeSnapshot ) More info Tuple of rendering and snapshot used by renderWorkflowIn . SimpleLoggingWorkflowInterceptor [jvm] Content open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor More info A WorkflowInterceptor that just prints all method calls using log. Sink [jvm] Content fun fun interface Sink T > More info An object that receives values (commonly events or WorkflowAction ). Snapshot [jvm] Content class Snapshot More info A lazy wrapper of ByteString. StatefulWorkflow [jvm] Content abstract class StatefulWorkflow PropsT , StateT , out OutputT , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > More info A composable, stateful object that can handle events , delegate to children, subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow [jvm] Content abstract class StatelessWorkflow PropsT , out OutputT , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > More info Minimal implementation of Workflow that maintains no state of its own. TreeSnapshot [jvm] Content class TreeSnapshot More info Aggregate of all the snapshots of a tree of workflows. Worker [jvm] Content interface Worker OutputT > More info Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workflow [jvm] Content interface Workflow PropsT , out OutputT , out RenderingT > More info A composable, optionally-stateful object that can RenderContext. WorkflowAction [jvm] Content abstract class WorkflowAction PropsT , StateT , out OutputT > More info An atomic operation that updates the state of a Workflow , and also optionally emits an output. WorkflowIdentifier [jvm] Content @ ExperimentalWorkflowApi () class WorkflowIdentifier More info Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. WorkflowInterceptor [jvm] Content @ ExperimentalWorkflowApi () interface WorkflowInterceptor More info Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. WorkflowOutput [jvm] Content class WorkflowOutput OutputT >( value : OutputT ) More info Wrapper around a potentially-nullable OutputT value. Functions \u00b6 Name Summary action [jvm] Content inline fun < PropsT , StateT , OutputT > action (crossinline name: () -> String , crossinline apply: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > inline fun < PropsT , StateT , OutputT > action (name: String = \u201c\u201d, crossinline apply: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Creates a WorkflowAction from the apply lambda. [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . applyTo [jvm] Content @ ExperimentalWorkflowApi () fun < PropsT , StateT , OutputT > WorkflowAction < PropsT , StateT , OutputT >. applyTo (props: PropsT , state: StateT ): Pair < StateT , WorkflowOutput < OutputT >?> More info Applies this WorkflowAction to state . asWorker [jvm] Content inline fun < OutputT > Flow< OutputT >. asWorker (): Worker < OutputT > More info Returns a Worker that will, when performed, emit whatever this Flow receives. contraMap [jvm] Content fun < T1 , T2 > Sink < T1 >. contraMap (transform: ( T2 ) -> T1 ): Sink < T2 > More info Generates a new sink of type T2 . invoke [jvm] Content operator fun EventHandler< Unit >. invoke () More info EventHandlers of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument. mapRendering [jvm] Content fun < PropsT , OutputT , FromRenderingT , ToRenderingT > Workflow < PropsT , OutputT , FromRenderingT >. mapRendering (transform: ( FromRenderingT ) -> ToRenderingT ): Workflow < PropsT , OutputT , ToRenderingT > More info Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , parse [jvm] Content inline fun < T > ByteString. parse (block: (BufferedSource) -> T ): T More info Runs block with a BufferedSource that will read from this ByteString. readBooleanFromInt [jvm] Content fun BufferedSource. readBooleanFromInt (): Boolean readByteStringWithLength [jvm] Content fun BufferedSource. readByteStringWithLength (): ByteString readEnumByOrdinal [jvm] Content inline fun < T : Enum < T >> BufferedSource. readEnumByOrdinal (): T readFloat [jvm] Content fun BufferedSource. readFloat (): Float readList [jvm] Content inline fun < T > BufferedSource. readList (reader: BufferedSource.() -> T ): List < T > readNullable [jvm] Content fun < T : Any > BufferedSource. readNullable (reader: BufferedSource.() -> T ): T ? readOptionalEnumByOrdinal [jvm] Content inline fun < T : Enum < T >> BufferedSource. readOptionalEnumByOrdinal (): T ? readOptionalUtf8WithLength [jvm] Content fun BufferedSource. readOptionalUtf8WithLength (): String ? readUtf8WithLength [jvm] Content fun BufferedSource. readUtf8WithLength (): String renderChild [jvm] Content fun < PropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , Nothing , ChildRenderingT >, key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output. [jvm] Content fun < PropsT , ChildPropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < ChildPropsT , Nothing , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. [jvm] Content fun < PropsT , StateT , OutputT , ChildOutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , ChildOutputT , ChildRenderingT >, key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. RenderContext [jvm] Content fun < PropsT , OutputT , RenderingT > RenderContext (baseContext: BaseRenderContext < PropsT , *, OutputT >, workflow: StatelessWorkflow < PropsT , OutputT , RenderingT >): StatelessWorkflow.RenderContext < PropsT , OutputT , RenderingT > More info Creates a RenderContext from a BaseRenderContext for the given StatelessWorkflow . [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderContext (baseContext: BaseRenderContext < PropsT , StateT , OutputT >, workflow: StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >): StatefulWorkflow.RenderContext < PropsT , StateT , OutputT , RenderingT > More info Creates a RenderContext from a BaseRenderContext for the given StatefulWorkflow . rendering [jvm] Content fun < RenderingT > Workflow.Companion . rendering (rendering: RenderingT ): Workflow < Unit , Nothing , RenderingT > More info Returns a workflow that does nothing but echo the given rendering . renderWorkflowIn [jvm] Content fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow < PropsT , OutputT , RenderingT >, scope: CoroutineScope, props: StateFlow< PropsT >, initialSnapshot: TreeSnapshot ? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend ( OutputT ) -> Unit ): StateFlow< RenderingAndSnapshot < RenderingT >> More info Launches the workflow in a new coroutine in scope and returns a StateFlow of its renderings and snapshots . runningWorker [jvm] Content inline fun < W : Worker < Nothing >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d) More info Ensures a Worker that never emits anything is running. [jvm] Content inline fun < T , W : Worker < T >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d, noinline handler: ( T ) -> WorkflowAction < PropsT , StateT , OutputT >) More info Ensures worker is running. stateful [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (initialState: StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT ): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given function. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT ) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT , Snapshot ?) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?, crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Returns a stateful Workflow implemented via the given functions. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( Snapshot ?) -> StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given functions. stateless [jvm] Content inline fun < PropsT , OutputT , RenderingT > Workflow.Companion . stateless (crossinline render: BaseRenderContext < PropsT , Nothing , OutputT >.( PropsT ) -> RenderingT ): Workflow < PropsT , OutputT , RenderingT > More info Returns a stateless Workflow via the given render function. transform [jvm] Content fun < T , R > Worker < T >. transform (transform: (Flow< T >) -> Flow< R >): Worker < R > More info Returns a Worker that transforms this Worker \u2018s Flow by calling transform . unsnapshottableIdentifier [jvm] Content @ ExperimentalWorkflowApi () fun unsnapshottableIdentifier (type: KType ): WorkflowIdentifier More info Creates a WorkflowIdentifier that is not capable of being snapshotted and will cause any ImpostorWorkflow workflow identified by it to also not be snapshotted. writeBooleanAsInt [jvm] Content fun BufferedSink. writeBooleanAsInt (bool: Boolean ): BufferedSink writeByteStringWithLength [jvm] Content fun BufferedSink. writeByteStringWithLength (bytes: ByteString): BufferedSink writeEnumByOrdinal [jvm] Content fun < T : Enum < T >> BufferedSink. writeEnumByOrdinal (enumVal: T ): BufferedSink writeFloat [jvm] Content fun BufferedSink. writeFloat (float: Float ): BufferedSink writeList [jvm] Content inline fun < T > BufferedSink. writeList (values: List < T >, writer: BufferedSink.( T ) -> Unit ): BufferedSink writeNullable [jvm] Content fun < T : Any > BufferedSink. writeNullable (obj: T ?, writer: BufferedSink.( T ) -> Unit ): BufferedSink writeOptionalEnumByOrdinal [jvm] Content fun < T : Enum < T >> BufferedSink. writeOptionalEnumByOrdinal (enumVal: T ?): BufferedSink writeOptionalUtf8WithLength [jvm] Content fun BufferedSink. writeOptionalUtf8WithLength (str: String ?): BufferedSink writeUtf8WithLength [jvm] Content fun BufferedSink. writeUtf8WithLength (str: String ): BufferedSink Properties \u00b6 Name Summary identifier [jvm] @ ExperimentalWorkflowApi () val Workflow <*, *, *>. identifier : WorkflowIdentifier The WorkflowIdentifier that identifies this Workflow . workflowIdentifier [jvm] @ ExperimentalWorkflowApi () val KClass <out Workflow <*, *, *>>. workflowIdentifier : WorkflowIdentifier The WorkflowIdentifier that identifies the workflow this KClass represents.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#package-comsquareupworkflow1","text":"","title":"Package com.squareup.workflow1"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#types","text":"Name Summary BaseRenderContext [jvm] Content interface BaseRenderContext PropsT , StateT , in OutputT > More info Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. ExperimentalWorkflowApi [jvm] Content annotation class ExperimentalWorkflowApi More info Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. ImpostorWorkflow [jvm] Content @ ExperimentalWorkflowApi () interface ImpostorWorkflow More info Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. LifecycleWorker [jvm] Content abstract class LifecycleWorker : Worker < Nothing > More info Worker that performs some action when the worker is started and/or stopped. NoopWorkflowInterceptor [jvm] Content @ ExperimentalWorkflowApi () object NoopWorkflowInterceptor : WorkflowInterceptor More info A WorkflowInterceptor that does not intercept anything. RenderingAndSnapshot [jvm] Content class RenderingAndSnapshot RenderingT >( rendering : RenderingT , snapshot : TreeSnapshot ) More info Tuple of rendering and snapshot used by renderWorkflowIn . SimpleLoggingWorkflowInterceptor [jvm] Content open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor More info A WorkflowInterceptor that just prints all method calls using log. Sink [jvm] Content fun fun interface Sink T > More info An object that receives values (commonly events or WorkflowAction ). Snapshot [jvm] Content class Snapshot More info A lazy wrapper of ByteString. StatefulWorkflow [jvm] Content abstract class StatefulWorkflow PropsT , StateT , out OutputT , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > More info A composable, stateful object that can handle events , delegate to children, subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow [jvm] Content abstract class StatelessWorkflow PropsT , out OutputT , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > More info Minimal implementation of Workflow that maintains no state of its own. TreeSnapshot [jvm] Content class TreeSnapshot More info Aggregate of all the snapshots of a tree of workflows. Worker [jvm] Content interface Worker OutputT > More info Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workflow [jvm] Content interface Workflow PropsT , out OutputT , out RenderingT > More info A composable, optionally-stateful object that can RenderContext. WorkflowAction [jvm] Content abstract class WorkflowAction PropsT , StateT , out OutputT > More info An atomic operation that updates the state of a Workflow , and also optionally emits an output. WorkflowIdentifier [jvm] Content @ ExperimentalWorkflowApi () class WorkflowIdentifier More info Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. WorkflowInterceptor [jvm] Content @ ExperimentalWorkflowApi () interface WorkflowInterceptor More info Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. WorkflowOutput [jvm] Content class WorkflowOutput OutputT >( value : OutputT ) More info Wrapper around a potentially-nullable OutputT value.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#functions","text":"Name Summary action [jvm] Content inline fun < PropsT , StateT , OutputT > action (crossinline name: () -> String , crossinline apply: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > inline fun < PropsT , StateT , OutputT > action (name: String = \u201c\u201d, crossinline apply: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Creates a WorkflowAction from the apply lambda. [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . applyTo [jvm] Content @ ExperimentalWorkflowApi () fun < PropsT , StateT , OutputT > WorkflowAction < PropsT , StateT , OutputT >. applyTo (props: PropsT , state: StateT ): Pair < StateT , WorkflowOutput < OutputT >?> More info Applies this WorkflowAction to state . asWorker [jvm] Content inline fun < OutputT > Flow< OutputT >. asWorker (): Worker < OutputT > More info Returns a Worker that will, when performed, emit whatever this Flow receives. contraMap [jvm] Content fun < T1 , T2 > Sink < T1 >. contraMap (transform: ( T2 ) -> T1 ): Sink < T2 > More info Generates a new sink of type T2 . invoke [jvm] Content operator fun EventHandler< Unit >. invoke () More info EventHandlers of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument. mapRendering [jvm] Content fun < PropsT , OutputT , FromRenderingT , ToRenderingT > Workflow < PropsT , OutputT , FromRenderingT >. mapRendering (transform: ( FromRenderingT ) -> ToRenderingT ): Workflow < PropsT , OutputT , ToRenderingT > More info Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , parse [jvm] Content inline fun < T > ByteString. parse (block: (BufferedSource) -> T ): T More info Runs block with a BufferedSource that will read from this ByteString. readBooleanFromInt [jvm] Content fun BufferedSource. readBooleanFromInt (): Boolean readByteStringWithLength [jvm] Content fun BufferedSource. readByteStringWithLength (): ByteString readEnumByOrdinal [jvm] Content inline fun < T : Enum < T >> BufferedSource. readEnumByOrdinal (): T readFloat [jvm] Content fun BufferedSource. readFloat (): Float readList [jvm] Content inline fun < T > BufferedSource. readList (reader: BufferedSource.() -> T ): List < T > readNullable [jvm] Content fun < T : Any > BufferedSource. readNullable (reader: BufferedSource.() -> T ): T ? readOptionalEnumByOrdinal [jvm] Content inline fun < T : Enum < T >> BufferedSource. readOptionalEnumByOrdinal (): T ? readOptionalUtf8WithLength [jvm] Content fun BufferedSource. readOptionalUtf8WithLength (): String ? readUtf8WithLength [jvm] Content fun BufferedSource. readUtf8WithLength (): String renderChild [jvm] Content fun < PropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , Nothing , ChildRenderingT >, key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output. [jvm] Content fun < PropsT , ChildPropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < ChildPropsT , Nothing , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. [jvm] Content fun < PropsT , StateT , OutputT , ChildOutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , ChildOutputT , ChildRenderingT >, key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. RenderContext [jvm] Content fun < PropsT , OutputT , RenderingT > RenderContext (baseContext: BaseRenderContext < PropsT , *, OutputT >, workflow: StatelessWorkflow < PropsT , OutputT , RenderingT >): StatelessWorkflow.RenderContext < PropsT , OutputT , RenderingT > More info Creates a RenderContext from a BaseRenderContext for the given StatelessWorkflow . [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderContext (baseContext: BaseRenderContext < PropsT , StateT , OutputT >, workflow: StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >): StatefulWorkflow.RenderContext < PropsT , StateT , OutputT , RenderingT > More info Creates a RenderContext from a BaseRenderContext for the given StatefulWorkflow . rendering [jvm] Content fun < RenderingT > Workflow.Companion . rendering (rendering: RenderingT ): Workflow < Unit , Nothing , RenderingT > More info Returns a workflow that does nothing but echo the given rendering . renderWorkflowIn [jvm] Content fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow < PropsT , OutputT , RenderingT >, scope: CoroutineScope, props: StateFlow< PropsT >, initialSnapshot: TreeSnapshot ? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend ( OutputT ) -> Unit ): StateFlow< RenderingAndSnapshot < RenderingT >> More info Launches the workflow in a new coroutine in scope and returns a StateFlow of its renderings and snapshots . runningWorker [jvm] Content inline fun < W : Worker < Nothing >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d) More info Ensures a Worker that never emits anything is running. [jvm] Content inline fun < T , W : Worker < T >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d, noinline handler: ( T ) -> WorkflowAction < PropsT , StateT , OutputT >) More info Ensures worker is running. stateful [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (initialState: StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT ): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given function. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT ) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT , Snapshot ?) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?, crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Returns a stateful Workflow implemented via the given functions. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( Snapshot ?) -> StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given functions. stateless [jvm] Content inline fun < PropsT , OutputT , RenderingT > Workflow.Companion . stateless (crossinline render: BaseRenderContext < PropsT , Nothing , OutputT >.( PropsT ) -> RenderingT ): Workflow < PropsT , OutputT , RenderingT > More info Returns a stateless Workflow via the given render function. transform [jvm] Content fun < T , R > Worker < T >. transform (transform: (Flow< T >) -> Flow< R >): Worker < R > More info Returns a Worker that transforms this Worker \u2018s Flow by calling transform . unsnapshottableIdentifier [jvm] Content @ ExperimentalWorkflowApi () fun unsnapshottableIdentifier (type: KType ): WorkflowIdentifier More info Creates a WorkflowIdentifier that is not capable of being snapshotted and will cause any ImpostorWorkflow workflow identified by it to also not be snapshotted. writeBooleanAsInt [jvm] Content fun BufferedSink. writeBooleanAsInt (bool: Boolean ): BufferedSink writeByteStringWithLength [jvm] Content fun BufferedSink. writeByteStringWithLength (bytes: ByteString): BufferedSink writeEnumByOrdinal [jvm] Content fun < T : Enum < T >> BufferedSink. writeEnumByOrdinal (enumVal: T ): BufferedSink writeFloat [jvm] Content fun BufferedSink. writeFloat (float: Float ): BufferedSink writeList [jvm] Content inline fun < T > BufferedSink. writeList (values: List < T >, writer: BufferedSink.( T ) -> Unit ): BufferedSink writeNullable [jvm] Content fun < T : Any > BufferedSink. writeNullable (obj: T ?, writer: BufferedSink.( T ) -> Unit ): BufferedSink writeOptionalEnumByOrdinal [jvm] Content fun < T : Enum < T >> BufferedSink. writeOptionalEnumByOrdinal (enumVal: T ?): BufferedSink writeOptionalUtf8WithLength [jvm] Content fun BufferedSink. writeOptionalUtf8WithLength (str: String ?): BufferedSink writeUtf8WithLength [jvm] Content fun BufferedSink. writeUtf8WithLength (str: String ): BufferedSink","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#properties","text":"Name Summary identifier [jvm] @ ExperimentalWorkflowApi () val Workflow <*, *, *>. identifier : WorkflowIdentifier The WorkflowIdentifier that identifies this Workflow . workflowIdentifier [jvm] @ ExperimentalWorkflowApi () val KClass <out Workflow <*, *, *>>. workflowIdentifier : WorkflowIdentifier The WorkflowIdentifier that identifies the workflow this KClass represents.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-render-context/","text":"// workflow / com.squareup.workflow1 / RenderContext RenderContext \u00b6 [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderContext (baseContext: BaseRenderContext < PropsT , StateT , OutputT >, workflow: StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >): StatefulWorkflow.RenderContext < PropsT , StateT , OutputT , RenderingT > More info Creates a RenderContext from a BaseRenderContext for the given StatefulWorkflow . [jvm] Content fun < PropsT , OutputT , RenderingT > RenderContext (baseContext: BaseRenderContext < PropsT , *, OutputT >, workflow: StatelessWorkflow < PropsT , OutputT , RenderingT >): StatelessWorkflow.RenderContext < PropsT , OutputT , RenderingT > More info Creates a RenderContext from a BaseRenderContext for the given StatelessWorkflow .","title":" render context"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-render-context/#rendercontext","text":"[jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderContext (baseContext: BaseRenderContext < PropsT , StateT , OutputT >, workflow: StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >): StatefulWorkflow.RenderContext < PropsT , StateT , OutputT , RenderingT > More info Creates a RenderContext from a BaseRenderContext for the given StatefulWorkflow . [jvm] Content fun < PropsT , OutputT , RenderingT > RenderContext (baseContext: BaseRenderContext < PropsT , *, OutputT >, workflow: StatelessWorkflow < PropsT , OutputT , RenderingT >): StatelessWorkflow.RenderContext < PropsT , OutputT , RenderingT > More info Creates a RenderContext from a BaseRenderContext for the given StatelessWorkflow .","title":"RenderContext"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/","text":"// workflow / com.squareup.workflow1 / action action \u00b6 [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . Parameters \u00b6 jvm name A string describing the update for debugging, included in toString. update Function that defines the workflow update. [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . Parameters \u00b6 jvm name Function that returns a string describing the update for debugging, included in toString. update Function that defines the workflow update. [jvm] Content fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . Parameters \u00b6 jvm name A string describing the update for debugging, included in toString . update Function that defines the workflow update. [jvm] Content fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . Parameters \u00b6 jvm name Function that returns a string describing the update for debugging, included in toString . update Function that defines the workflow update. [jvm] Content inline fun < PropsT , StateT , OutputT > action (name: String = \u201c\u201d, crossinline apply: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString. If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types. See also \u00b6 jvm StatelessWorkflow.action StatefulWorkflow.action Parameters \u00b6 jvm name A string describing the update for debugging. apply Function that defines the workflow update. [jvm] Content inline fun < PropsT , StateT , OutputT > action (crossinline name: () -> String , crossinline apply: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString. If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types. See also \u00b6 jvm StatelessWorkflow.action StatefulWorkflow.action Parameters \u00b6 jvm name Function that returns a string describing the update for debugging. apply Function that defines the workflow update.","title":"Action"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#action","text":"[jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"action"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters","text":"jvm name A string describing the update for debugging, included in toString. update Function that defines the workflow update. [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_1","text":"jvm name Function that returns a string describing the update for debugging, included in toString. update Function that defines the workflow update. [jvm] Content fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_2","text":"jvm name A string describing the update for debugging, included in toString . update Function that defines the workflow update. [jvm] Content fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_3","text":"jvm name Function that returns a string describing the update for debugging, included in toString . update Function that defines the workflow update. [jvm] Content inline fun < PropsT , StateT , OutputT > action (name: String = \u201c\u201d, crossinline apply: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString. If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#see-also","text":"jvm StatelessWorkflow.action StatefulWorkflow.action","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_4","text":"jvm name A string describing the update for debugging. apply Function that defines the workflow update. [jvm] Content inline fun < PropsT , StateT , OutputT > action (crossinline name: () -> String , crossinline apply: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString. If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#see-also_1","text":"jvm StatelessWorkflow.action StatefulWorkflow.action","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_5","text":"jvm name Function that returns a string describing the update for debugging. apply Function that defines the workflow update.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/apply-to/","text":"// workflow / com.squareup.workflow1 / applyTo applyTo \u00b6 [jvm] Content @ ExperimentalWorkflowApi () fun < PropsT , StateT , OutputT > WorkflowAction < PropsT , StateT , OutputT >. applyTo (props: PropsT , state: StateT ): Pair < StateT , WorkflowOutput < OutputT >?> More info Applies this WorkflowAction to state .","title":"Apply to"},{"location":"kotlin/api/workflow/com.squareup.workflow1/apply-to/#applyto","text":"[jvm] Content @ ExperimentalWorkflowApi () fun < PropsT , StateT , OutputT > WorkflowAction < PropsT , StateT , OutputT >. applyTo (props: PropsT , state: StateT ): Pair < StateT , WorkflowOutput < OutputT >?> More info Applies this WorkflowAction to state .","title":"applyTo"},{"location":"kotlin/api/workflow/com.squareup.workflow1/as-worker/","text":"// workflow / com.squareup.workflow1 / asWorker asWorker \u00b6 [jvm] Content inline fun < OutputT > Flow< OutputT >. asWorker (): Worker < OutputT > More info Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"As worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/as-worker/#asworker","text":"[jvm] Content inline fun < OutputT > Flow< OutputT >. asWorker (): Worker < OutputT > More info Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"asWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/contra-map/","text":"// workflow / com.squareup.workflow1 / contraMap contraMap \u00b6 [jvm] Content fun < T1 , T2 > Sink < T1 >. contraMap (transform: ( T2 ) -> T1 ): Sink < T2 > More info Generates a new sink of type T2 . Given a transform closure, the following code is functionally equivalent: 1 2 3 sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap? - map turns Type into Type via (T)->U. - contraMap turns Type into Type via (U)->T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API.","title":"Contra map"},{"location":"kotlin/api/workflow/com.squareup.workflow1/contra-map/#contramap","text":"[jvm] Content fun < T1 , T2 > Sink < T1 >. contraMap (transform: ( T2 ) -> T1 ): Sink < T2 > More info Generates a new sink of type T2 . Given a transform closure, the following code is functionally equivalent: 1 2 3 sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap? - map turns Type into Type via (T)->U. - contraMap turns Type into Type via (U)->T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API.","title":"contraMap"},{"location":"kotlin/api/workflow/com.squareup.workflow1/identifier/","text":"// workflow / com.squareup.workflow1 / identifier identifier \u00b6 [jvm] Content @ ExperimentalWorkflowApi () val Workflow <*, *, *>. identifier : WorkflowIdentifier More info The WorkflowIdentifier that identifies this Workflow .","title":"Identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/identifier/#identifier","text":"[jvm] Content @ ExperimentalWorkflowApi () val Workflow <*, *, *>. identifier : WorkflowIdentifier More info The WorkflowIdentifier that identifies this Workflow .","title":"identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/invoke/","text":"// workflow / com.squareup.workflow1 / invoke invoke \u00b6 [jvm] Content operator fun EventHandler< Unit >. invoke () More info EventHandlers of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"Invoke"},{"location":"kotlin/api/workflow/com.squareup.workflow1/invoke/#invoke","text":"[jvm] Content operator fun EventHandler< Unit >. invoke () More info EventHandlers of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"invoke"},{"location":"kotlin/api/workflow/com.squareup.workflow1/map-rendering/","text":"// workflow / com.squareup.workflow1 / mapRendering mapRendering \u00b6 [jvm] Content fun < PropsT , OutputT , FromRenderingT , ToRenderingT > Workflow < PropsT , OutputT , FromRenderingT >. mapRendering (transform: ( FromRenderingT ) -> ToRenderingT ): Workflow < PropsT , OutputT , ToRenderingT > More info Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Map rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/map-rendering/#maprendering","text":"[jvm] Content fun < PropsT , OutputT , FromRenderingT , ToRenderingT > Workflow < PropsT , OutputT , FromRenderingT >. mapRendering (transform: ( FromRenderingT ) -> ToRenderingT ): Workflow < PropsT , OutputT , ToRenderingT > More info Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"mapRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/parse/","text":"// workflow / com.squareup.workflow1 / parse parse \u00b6 [jvm] Content inline fun < T > ByteString. parse (block: (BufferedSource) -> T ): T More info Runs block with a BufferedSource that will read from this ByteString. Lets you do stuff like: myBlob.parse { MyValueObject( name = it.readUtf8WithLength(), age = it.readInt() ) }","title":"Parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/parse/#parse","text":"[jvm] Content inline fun < T > ByteString. parse (block: (BufferedSource) -> T ): T More info Runs block with a BufferedSource that will read from this ByteString. Lets you do stuff like: myBlob.parse { MyValueObject( name = it.readUtf8WithLength(), age = it.readInt() ) }","title":"parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-boolean-from-int/","text":"// workflow / com.squareup.workflow1 / readBooleanFromInt readBooleanFromInt \u00b6 [jvm] Content fun BufferedSource. readBooleanFromInt (): Boolean","title":"Read boolean from int"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-boolean-from-int/#readbooleanfromint","text":"[jvm] Content fun BufferedSource. readBooleanFromInt (): Boolean","title":"readBooleanFromInt"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-byte-string-with-length/","text":"// workflow / com.squareup.workflow1 / readByteStringWithLength readByteStringWithLength \u00b6 [jvm] Content fun BufferedSource. readByteStringWithLength (): ByteString","title":"Read byte string with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-byte-string-with-length/#readbytestringwithlength","text":"[jvm] Content fun BufferedSource. readByteStringWithLength (): ByteString","title":"readByteStringWithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-enum-by-ordinal/","text":"// workflow / com.squareup.workflow1 / readEnumByOrdinal readEnumByOrdinal \u00b6 [jvm] Content inline fun < T : Enum < T >> BufferedSource. readEnumByOrdinal (): T","title":"Read enum by ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-enum-by-ordinal/#readenumbyordinal","text":"[jvm] Content inline fun < T : Enum < T >> BufferedSource. readEnumByOrdinal (): T","title":"readEnumByOrdinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-float/","text":"// workflow / com.squareup.workflow1 / readFloat readFloat \u00b6 [jvm] Content fun BufferedSource. readFloat (): Float","title":"Read float"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-float/#readfloat","text":"[jvm] Content fun BufferedSource. readFloat (): Float","title":"readFloat"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-list/","text":"// workflow / com.squareup.workflow1 / readList readList \u00b6 [jvm] Content inline fun < T > BufferedSource. readList (reader: BufferedSource.() -> T ): List < T >","title":"Read list"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-list/#readlist","text":"[jvm] Content inline fun < T > BufferedSource. readList (reader: BufferedSource.() -> T ): List < T >","title":"readList"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-nullable/","text":"// workflow / com.squareup.workflow1 / readNullable readNullable \u00b6 [jvm] Content fun < T : Any > BufferedSource. readNullable (reader: BufferedSource.() -> T ): T ?","title":"Read nullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-nullable/#readnullable","text":"[jvm] Content fun < T : Any > BufferedSource. readNullable (reader: BufferedSource.() -> T ): T ?","title":"readNullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-optional-enum-by-ordinal/","text":"// workflow / com.squareup.workflow1 / readOptionalEnumByOrdinal readOptionalEnumByOrdinal \u00b6 [jvm] Content inline fun < T : Enum < T >> BufferedSource. readOptionalEnumByOrdinal (): T ?","title":"Read optional enum by ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-optional-enum-by-ordinal/#readoptionalenumbyordinal","text":"[jvm] Content inline fun < T : Enum < T >> BufferedSource. readOptionalEnumByOrdinal (): T ?","title":"readOptionalEnumByOrdinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-optional-utf8-with-length/","text":"// workflow / com.squareup.workflow1 / readOptionalUtf8WithLength readOptionalUtf8WithLength \u00b6 [jvm] Content fun BufferedSource. readOptionalUtf8WithLength (): String ?","title":"Read optional utf8 with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-optional-utf8-with-length/#readoptionalutf8withlength","text":"[jvm] Content fun BufferedSource. readOptionalUtf8WithLength (): String ?","title":"readOptionalUtf8WithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-utf8-with-length/","text":"// workflow / com.squareup.workflow1 / readUtf8WithLength readUtf8WithLength \u00b6 [jvm] Content fun BufferedSource. readUtf8WithLength (): String","title":"Read utf8 with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/read-utf8-with-length/#readutf8withlength","text":"[jvm] Content fun BufferedSource. readUtf8WithLength (): String","title":"readUtf8WithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-child/","text":"// workflow / com.squareup.workflow1 / renderChild renderChild \u00b6 [jvm] Content fun < PropsT , StateT , OutputT , ChildOutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , ChildOutputT , ChildRenderingT >, key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. [jvm] Content fun < PropsT , ChildPropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < ChildPropsT , Nothing , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. [jvm] Content fun < PropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , Nothing , ChildRenderingT >, key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output.","title":"Render child"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-child/#renderchild","text":"[jvm] Content fun < PropsT , StateT , OutputT , ChildOutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , ChildOutputT , ChildRenderingT >, key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. [jvm] Content fun < PropsT , ChildPropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < ChildPropsT , Nothing , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. [jvm] Content fun < PropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , Nothing , ChildRenderingT >, key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output.","title":"renderChild"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/","text":"// workflow / com.squareup.workflow1 / renderWorkflowIn renderWorkflowIn \u00b6 [jvm] Content fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow < PropsT , OutputT , RenderingT >, scope: CoroutineScope, props: StateFlow< PropsT >, initialSnapshot: TreeSnapshot ? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend ( OutputT ) -> Unit ): StateFlow< RenderingAndSnapshot < RenderingT >> More info Launches the workflow in a new coroutine in scope and returns a StateFlow of its renderings and snapshots . The workflow tree is seeded with initialSnapshot and the current value value of props . Subsequent values emitted from props will be used to re-render the workflow. This is the primary low-level entry point into the workflow runtime. If you are writing an app, you should probably be using a higher-level entry point that will also let you define UI bindings for your renderings. Initialization \u00b6 When this function is called, the workflow runtime is started immediately, before the function even returns. The current value of the props is used to perform the initial render pass. The result of this render pass is used to initialize the StateFlow of renderings and snapshots that is returned. Once the initial render pass is complete, the workflow runtime will continue executing in a new coroutine launched in scope . Scoping \u00b6 The workflow runtime makes use of structured concurrency . The runtime is started in scope , which defines the context for the entire workflow tree \u2013 most importantly, the Job that governs the runtime\u2019s lifetime and exception reporting path, and the CoroutineDispatcher that decides on what thread(s) to run workflow code. Note that if the scope\u2019s dispatcher executes on threads different than the caller, then the initial render pass will occur on the current thread but all subsequent render passes, and actions, will be executed on that dispatcher. This shouldn\u2019t affect well-written workflows, since the render method should not perform side effects anyway. All workers that are run by this runtime will be collected in coroutines that are children of scope . When the root workflow emits an output, onOutput will be invoked in a child of scope . To stop the workflow runtime, simply cancel scope . Any running workers will be cancelled, and if onOutput is currently running it will be cancelled as well. Error handling \u00b6 If the initial render pass throws an exception, that exception will be thrown from this function. Any exceptions thrown from the runtime (and any workflows or workers) after that will bubble up and be handled by scope (usually by cancelling it). Since the onOutput function is executed in scope , any exceptions it throws will also bubble up to scope . Any exceptions thrown by subscribers of the returned StateFlow will not cancel scope or cancel the runtime, but will be handled in the CoroutineScope of the subscriber. Return \u00b6 A StateFlow of RenderingAndSnapshot s that will emit any time the root workflow creates a new rendering. Parameters \u00b6 jvm workflow The root workflow to render. scope The CoroutineScope in which to launch the workflow runtime. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. props Specifies the initial PropsT to use to render the root workflow, and will cause a re-render when new props are emitted. If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. To only pass a single props value, simply create a MutableStateFlow with the value. initialSnapshot If not null or empty, used to restore the workflow. Should be obtained from a previous runtime\u2019s RenderingAndSnapshot . interceptors An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to-length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel, for example.","title":"Render workflow in"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#renderworkflowin","text":"[jvm] Content fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow < PropsT , OutputT , RenderingT >, scope: CoroutineScope, props: StateFlow< PropsT >, initialSnapshot: TreeSnapshot ? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend ( OutputT ) -> Unit ): StateFlow< RenderingAndSnapshot < RenderingT >> More info Launches the workflow in a new coroutine in scope and returns a StateFlow of its renderings and snapshots . The workflow tree is seeded with initialSnapshot and the current value value of props . Subsequent values emitted from props will be used to re-render the workflow. This is the primary low-level entry point into the workflow runtime. If you are writing an app, you should probably be using a higher-level entry point that will also let you define UI bindings for your renderings.","title":"renderWorkflowIn"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#initialization","text":"When this function is called, the workflow runtime is started immediately, before the function even returns. The current value of the props is used to perform the initial render pass. The result of this render pass is used to initialize the StateFlow of renderings and snapshots that is returned. Once the initial render pass is complete, the workflow runtime will continue executing in a new coroutine launched in scope .","title":"Initialization"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#scoping","text":"The workflow runtime makes use of structured concurrency . The runtime is started in scope , which defines the context for the entire workflow tree \u2013 most importantly, the Job that governs the runtime\u2019s lifetime and exception reporting path, and the CoroutineDispatcher that decides on what thread(s) to run workflow code. Note that if the scope\u2019s dispatcher executes on threads different than the caller, then the initial render pass will occur on the current thread but all subsequent render passes, and actions, will be executed on that dispatcher. This shouldn\u2019t affect well-written workflows, since the render method should not perform side effects anyway. All workers that are run by this runtime will be collected in coroutines that are children of scope . When the root workflow emits an output, onOutput will be invoked in a child of scope . To stop the workflow runtime, simply cancel scope . Any running workers will be cancelled, and if onOutput is currently running it will be cancelled as well.","title":"Scoping"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#error-handling","text":"If the initial render pass throws an exception, that exception will be thrown from this function. Any exceptions thrown from the runtime (and any workflows or workers) after that will bubble up and be handled by scope (usually by cancelling it). Since the onOutput function is executed in scope , any exceptions it throws will also bubble up to scope . Any exceptions thrown by subscribers of the returned StateFlow will not cancel scope or cancel the runtime, but will be handled in the CoroutineScope of the subscriber.","title":"Error handling"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#return","text":"A StateFlow of RenderingAndSnapshot s that will emit any time the root workflow creates a new rendering.","title":"Return"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#parameters","text":"jvm workflow The root workflow to render. scope The CoroutineScope in which to launch the workflow runtime. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. props Specifies the initial PropsT to use to render the root workflow, and will cause a re-render when new props are emitted. If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. To only pass a single props value, simply create a MutableStateFlow with the value. initialSnapshot If not null or empty, used to restore the workflow. Should be obtained from a previous runtime\u2019s RenderingAndSnapshot . interceptors An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to-length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel, for example.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/rendering/","text":"// workflow / com.squareup.workflow1 / rendering rendering \u00b6 [jvm] Content fun < RenderingT > Workflow.Companion . rendering (rendering: RenderingT ): Workflow < Unit , Nothing , RenderingT > More info Returns a workflow that does nothing but echo the given rendering . Handy for testing.","title":"Rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/rendering/#rendering","text":"[jvm] Content fun < RenderingT > Workflow.Companion . rendering (rendering: RenderingT ): Workflow < Unit , Nothing , RenderingT > More info Returns a workflow that does nothing but echo the given rendering . Handy for testing.","title":"rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/running-worker/","text":"// workflow / com.squareup.workflow1 / runningWorker runningWorker \u00b6 [jvm] Content inline fun < W : Worker < Nothing >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d) More info Ensures a Worker that never emits anything is running. Since worker can\u2019t emit anything, it can\u2019t trigger any WorkflowAction s. A simple way to create workers that don\u2019t output anything is using Worker.createSideEffect . Parameters \u00b6 jvm key An optional string key that is used to distinguish between identical Worker s. [jvm] Content inline fun < T , W : Worker < T >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d, noinline handler: ( T ) -> WorkflowAction < PropsT , StateT , OutputT >) More info Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). Like workflows, workers are kept alive across multiple render passes if they\u2019re the same type, and different workers of distinct types can be run concurrently. However, unlike workflows, workers are compared by their declared type, not their actual type. This means that if you pass a worker stored in a variable to this function, the type that will be used to compare the worker will be the type of the variable, not the type of the object the variable refers to. Parameters \u00b6 jvm key An optional string key that is used to distinguish between identical Worker s.","title":"Running worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/running-worker/#runningworker","text":"[jvm] Content inline fun < W : Worker < Nothing >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d) More info Ensures a Worker that never emits anything is running. Since worker can\u2019t emit anything, it can\u2019t trigger any WorkflowAction s. A simple way to create workers that don\u2019t output anything is using Worker.createSideEffect .","title":"runningWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/running-worker/#parameters","text":"jvm key An optional string key that is used to distinguish between identical Worker s. [jvm] Content inline fun < T , W : Worker < T >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d, noinline handler: ( T ) -> WorkflowAction < PropsT , StateT , OutputT >) More info Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). Like workflows, workers are kept alive across multiple render passes if they\u2019re the same type, and different workers of distinct types can be run concurrently. However, unlike workflows, workers are compared by their declared type, not their actual type. This means that if you pass a worker stored in a variable to this function, the type that will be used to compare the worker will be the type of the variable, not the type of the object the variable refers to.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/running-worker/#parameters_1","text":"jvm key An optional string key that is used to distinguish between identical Worker s.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/stateful/","text":"// workflow / com.squareup.workflow1 / stateful stateful \u00b6 [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT , Snapshot ?) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?, crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Returns a stateful Workflow implemented via the given functions. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( Snapshot ?) -> StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given functions. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT ) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Returns a stateful Workflow implemented via the given functions. This overload does not support snapshotting, but there are other overloads that do. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (initialState: StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT ): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given function. This overload does not support snapshots, but there are others that do.","title":"Stateful"},{"location":"kotlin/api/workflow/com.squareup.workflow1/stateful/#stateful","text":"[jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT , Snapshot ?) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?, crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Returns a stateful Workflow implemented via the given functions. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( Snapshot ?) -> StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given functions. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT ) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Returns a stateful Workflow implemented via the given functions. This overload does not support snapshotting, but there are other overloads that do. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (initialState: StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT ): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given function. This overload does not support snapshots, but there are others that do.","title":"stateful"},{"location":"kotlin/api/workflow/com.squareup.workflow1/stateless/","text":"// workflow / com.squareup.workflow1 / stateless stateless \u00b6 [jvm] Content inline fun < PropsT , OutputT , RenderingT > Workflow.Companion . stateless (crossinline render: BaseRenderContext < PropsT , Nothing , OutputT >.( PropsT ) -> RenderingT ): Workflow < PropsT , OutputT , RenderingT > More info Returns a stateless Workflow via the given render function. Note that while the returned workflow doesn\u2019t have any internal state of its own, it may use props received from its parent, and it may render child workflows that do have their own internal state.","title":"Stateless"},{"location":"kotlin/api/workflow/com.squareup.workflow1/stateless/#stateless","text":"[jvm] Content inline fun < PropsT , OutputT , RenderingT > Workflow.Companion . stateless (crossinline render: BaseRenderContext < PropsT , Nothing , OutputT >.( PropsT ) -> RenderingT ): Workflow < PropsT , OutputT , RenderingT > More info Returns a stateless Workflow via the given render function. Note that while the returned workflow doesn\u2019t have any internal state of its own, it may use props received from its parent, and it may render child workflows that do have their own internal state.","title":"stateless"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/","text":"// workflow / com.squareup.workflow1 / transform transform \u00b6 [jvm] Content fun < T , R > Worker < T >. transform (transform: (Flow< T >) -> Flow< R >): Worker < R > More info Returns a Worker that transforms this Worker \u2018s Flow by calling transform . The returned worker is considered equivalent with any other worker returned by this function with the same receiver. Examples \u00b6 Workers from the same source are equivalent \u00b6 val secondsWorker = millisWorker.transform { it.map { millis -> millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = millisWorker.transform { it.map { millis -> millis.toSeconds() } } assert(secondsWorker.doesSameWorkAs(otherSecondsWorker)) Workers from different sources are not equivalent \u00b6 val secondsWorker = millisWorker.transform { it.map { millis -> millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = secondsWorker.transform { it } assert(!secondsWorker.doesSameWorkAs(otherSecondsWorker))","title":"Transform"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/#transform","text":"[jvm] Content fun < T , R > Worker < T >. transform (transform: (Flow< T >) -> Flow< R >): Worker < R > More info Returns a Worker that transforms this Worker \u2018s Flow by calling transform . The returned worker is considered equivalent with any other worker returned by this function with the same receiver.","title":"transform"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/#examples","text":"","title":"Examples"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/#workers-from-the-same-source-are-equivalent","text":"val secondsWorker = millisWorker.transform { it.map { millis -> millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = millisWorker.transform { it.map { millis -> millis.toSeconds() } } assert(secondsWorker.doesSameWorkAs(otherSecondsWorker))","title":"Workers from the same source are equivalent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/#workers-from-different-sources-are-not-equivalent","text":"val secondsWorker = millisWorker.transform { it.map { millis -> millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = secondsWorker.transform { it } assert(!secondsWorker.doesSameWorkAs(otherSecondsWorker))","title":"Workers from different sources are not equivalent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/unsnapshottable-identifier/","text":"// workflow / com.squareup.workflow1 / unsnapshottableIdentifier unsnapshottableIdentifier \u00b6 [jvm] Content @ ExperimentalWorkflowApi () fun unsnapshottableIdentifier (type: KType ): WorkflowIdentifier More info Creates a WorkflowIdentifier that is not capable of being snapshotted and will cause any ImpostorWorkflow workflow identified by it to also not be snapshotted. This function should not be used for ImpostorWorkflow s that wrap arbitrary workflows , since those workflows may expect to be on snapshotted. Using such identifiers anywhere in the ImpostorWorkflow.realIdentifier chain will disable snapshotting for that workflow. This function should only be used for ImpostorWorkflow s that wrap a closed set of known workflow types.","title":"Unsnapshottable identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/unsnapshottable-identifier/#unsnapshottableidentifier","text":"[jvm] Content @ ExperimentalWorkflowApi () fun unsnapshottableIdentifier (type: KType ): WorkflowIdentifier More info Creates a WorkflowIdentifier that is not capable of being snapshotted and will cause any ImpostorWorkflow workflow identified by it to also not be snapshotted. This function should not be used for ImpostorWorkflow s that wrap arbitrary workflows , since those workflows may expect to be on snapshotted. Using such identifiers anywhere in the ImpostorWorkflow.realIdentifier chain will disable snapshotting for that workflow. This function should only be used for ImpostorWorkflow s that wrap a closed set of known workflow types.","title":"unsnapshottableIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/workflow-identifier/","text":"// workflow / com.squareup.workflow1 / workflowIdentifier workflowIdentifier \u00b6 [jvm] Content @ ExperimentalWorkflowApi () val KClass <out Workflow <*, *, *>>. workflowIdentifier : WorkflowIdentifier More info The WorkflowIdentifier that identifies the workflow this KClass represents. This workflow must not be an ImpostorWorkflow , or this property will throw an IllegalArgumentException . To create an identifier from the class of an ImpostorWorkflow , use the impostorWorkflowIdentifier function.","title":"Workflow identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/workflow-identifier/#workflowidentifier","text":"[jvm] Content @ ExperimentalWorkflowApi () val KClass <out Workflow <*, *, *>>. workflowIdentifier : WorkflowIdentifier More info The WorkflowIdentifier that identifies the workflow this KClass represents. This workflow must not be an ImpostorWorkflow , or this property will throw an IllegalArgumentException . To create an identifier from the class of an ImpostorWorkflow , use the impostorWorkflowIdentifier function.","title":"workflowIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-boolean-as-int/","text":"// workflow / com.squareup.workflow1 / writeBooleanAsInt writeBooleanAsInt \u00b6 [jvm] Content fun BufferedSink. writeBooleanAsInt (bool: Boolean ): BufferedSink","title":"Write boolean as int"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-boolean-as-int/#writebooleanasint","text":"[jvm] Content fun BufferedSink. writeBooleanAsInt (bool: Boolean ): BufferedSink","title":"writeBooleanAsInt"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-byte-string-with-length/","text":"// workflow / com.squareup.workflow1 / writeByteStringWithLength writeByteStringWithLength \u00b6 [jvm] Content fun BufferedSink. writeByteStringWithLength (bytes: ByteString): BufferedSink","title":"Write byte string with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-byte-string-with-length/#writebytestringwithlength","text":"[jvm] Content fun BufferedSink. writeByteStringWithLength (bytes: ByteString): BufferedSink","title":"writeByteStringWithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-enum-by-ordinal/","text":"// workflow / com.squareup.workflow1 / writeEnumByOrdinal writeEnumByOrdinal \u00b6 [jvm] Content fun < T : Enum < T >> BufferedSink. writeEnumByOrdinal (enumVal: T ): BufferedSink","title":"Write enum by ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-enum-by-ordinal/#writeenumbyordinal","text":"[jvm] Content fun < T : Enum < T >> BufferedSink. writeEnumByOrdinal (enumVal: T ): BufferedSink","title":"writeEnumByOrdinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-float/","text":"// workflow / com.squareup.workflow1 / writeFloat writeFloat \u00b6 [jvm] Content fun BufferedSink. writeFloat (float: Float ): BufferedSink","title":"Write float"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-float/#writefloat","text":"[jvm] Content fun BufferedSink. writeFloat (float: Float ): BufferedSink","title":"writeFloat"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-list/","text":"// workflow / com.squareup.workflow1 / writeList writeList \u00b6 [jvm] Content inline fun < T > BufferedSink. writeList (values: List < T >, writer: BufferedSink.( T ) -> Unit ): BufferedSink","title":"Write list"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-list/#writelist","text":"[jvm] Content inline fun < T > BufferedSink. writeList (values: List < T >, writer: BufferedSink.( T ) -> Unit ): BufferedSink","title":"writeList"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-nullable/","text":"// workflow / com.squareup.workflow1 / writeNullable writeNullable \u00b6 [jvm] Content fun < T : Any > BufferedSink. writeNullable (obj: T ?, writer: BufferedSink.( T ) -> Unit ): BufferedSink","title":"Write nullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-nullable/#writenullable","text":"[jvm] Content fun < T : Any > BufferedSink. writeNullable (obj: T ?, writer: BufferedSink.( T ) -> Unit ): BufferedSink","title":"writeNullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-optional-enum-by-ordinal/","text":"// workflow / com.squareup.workflow1 / writeOptionalEnumByOrdinal writeOptionalEnumByOrdinal \u00b6 [jvm] Content fun < T : Enum < T >> BufferedSink. writeOptionalEnumByOrdinal (enumVal: T ?): BufferedSink","title":"Write optional enum by ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-optional-enum-by-ordinal/#writeoptionalenumbyordinal","text":"[jvm] Content fun < T : Enum < T >> BufferedSink. writeOptionalEnumByOrdinal (enumVal: T ?): BufferedSink","title":"writeOptionalEnumByOrdinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-optional-utf8-with-length/","text":"// workflow / com.squareup.workflow1 / writeOptionalUtf8WithLength writeOptionalUtf8WithLength \u00b6 [jvm] Content fun BufferedSink. writeOptionalUtf8WithLength (str: String ?): BufferedSink","title":"Write optional utf8 with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-optional-utf8-with-length/#writeoptionalutf8withlength","text":"[jvm] Content fun BufferedSink. writeOptionalUtf8WithLength (str: String ?): BufferedSink","title":"writeOptionalUtf8WithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-utf8-with-length/","text":"// workflow / com.squareup.workflow1 / writeUtf8WithLength writeUtf8WithLength \u00b6 [jvm] Content fun BufferedSink. writeUtf8WithLength (str: String ): BufferedSink","title":"Write utf8 with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/write-utf8-with-length/#writeutf8withlength","text":"[jvm] Content fun BufferedSink. writeUtf8WithLength (str: String ): BufferedSink","title":"writeUtf8WithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/","text":"// workflow / com.squareup.workflow1 / BaseRenderContext BaseRenderContext \u00b6 [jvm] interface BaseRenderContext PropsT , StateT , in OutputT > Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. Handling events from the UI \u00b6 While a workflow\u2019s rendering can represent whatever you need it to, it is common for the rendering to contain the data for some part of your UI. In addition to shuttling data to the UI, the rendering can also contain functions that the UI can call to send events to the workflow. E.g. data class Rendering( val radioButtonTexts: List , val onSelected: (index: Int) -> Unit ) To create populate such functions from your render method, you first need to define a WorkflowAction to handle the event by changing state, emitting an output, or both. Then, just pass a lambda to your rendering that instantiates the action and passes it to actionSink.send . Performing asynchronous work \u00b6 See runningWorker . Composing children \u00b6 See renderChild . Functions \u00b6 Name Summary eventHandler [jvm] Content open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 ) -> Unit open fun < EventT > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( EventT ) -> Unit ): ( EventT ) -> Unit open fun < E1 , E2 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 ) -> Unit ): ( E1 , E2 ) -> Unit open fun < E1 , E2 , E3 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 ) -> Unit ): ( E1 , E2 , E3 ) -> Unit open fun < E1 , E2 , E3 , E4 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 ) -> Unit ): ( E1 , E2 , E3 , E4 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 ) -> Unit [jvm] Content open fun eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): () -> Unit More info Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . renderChild [jvm] Content abstract fun < ChildPropsT , ChildOutputT , ChildRenderingT > renderChild (child: Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Ensures child is running as a child of this workflow, and returns the result of its render method. runningSideEffect [jvm] Content abstract fun runningSideEffect (key: String , sideEffect: suspend CoroutineScope.() -> Unit ) More info Ensures sideEffect is running with the given key . Properties \u00b6 Name Summary actionSink [jvm] abstract val actionSink : Sink < WorkflowAction < PropsT , StateT , OutputT >>Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null. Inheritors \u00b6 Name StatefulWorkflow StatelessWorkflow Extensions \u00b6 Name Summary renderChild [jvm] Content fun < PropsT , StateT , OutputT , ChildOutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , ChildOutputT , ChildRenderingT >, key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. [jvm] Content fun < PropsT , ChildPropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < ChildPropsT , Nothing , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. [jvm] Content fun < PropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , Nothing , ChildRenderingT >, key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output. runningWorker [jvm] Content inline fun < W : Worker < Nothing >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d) More info Ensures a Worker that never emits anything is running. [jvm] Content inline fun < T , W : Worker < T >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d, noinline handler: ( T ) -> WorkflowAction < PropsT , StateT , OutputT >) More info Ensures worker is running.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#baserendercontext","text":"[jvm] interface BaseRenderContext PropsT , StateT , in OutputT > Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function.","title":"BaseRenderContext"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#handling-events-from-the-ui","text":"While a workflow\u2019s rendering can represent whatever you need it to, it is common for the rendering to contain the data for some part of your UI. In addition to shuttling data to the UI, the rendering can also contain functions that the UI can call to send events to the workflow. E.g. data class Rendering( val radioButtonTexts: List , val onSelected: (index: Int) -> Unit ) To create populate such functions from your render method, you first need to define a WorkflowAction to handle the event by changing state, emitting an output, or both. Then, just pass a lambda to your rendering that instantiates the action and passes it to actionSink.send .","title":"Handling events from the UI"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#performing-asynchronous-work","text":"See runningWorker .","title":"Performing asynchronous work"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#composing-children","text":"See renderChild .","title":"Composing children"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#functions","text":"Name Summary eventHandler [jvm] Content open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 ) -> Unit open fun < EventT > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( EventT ) -> Unit ): ( EventT ) -> Unit open fun < E1 , E2 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 ) -> Unit ): ( E1 , E2 ) -> Unit open fun < E1 , E2 , E3 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 ) -> Unit ): ( E1 , E2 , E3 ) -> Unit open fun < E1 , E2 , E3 , E4 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 ) -> Unit ): ( E1 , E2 , E3 , E4 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 ) -> Unit [jvm] Content open fun eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): () -> Unit More info Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . renderChild [jvm] Content abstract fun < ChildPropsT , ChildOutputT , ChildRenderingT > renderChild (child: Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Ensures child is running as a child of this workflow, and returns the result of its render method. runningSideEffect [jvm] Content abstract fun runningSideEffect (key: String , sideEffect: suspend CoroutineScope.() -> Unit ) More info Ensures sideEffect is running with the given key .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#properties","text":"Name Summary actionSink [jvm] abstract val actionSink : Sink < WorkflowAction < PropsT , StateT , OutputT >>Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#inheritors","text":"Name StatefulWorkflow StatelessWorkflow","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#extensions","text":"Name Summary renderChild [jvm] Content fun < PropsT , StateT , OutputT , ChildOutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , ChildOutputT , ChildRenderingT >, key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. [jvm] Content fun < PropsT , ChildPropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < ChildPropsT , Nothing , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. [jvm] Content fun < PropsT , StateT , OutputT , ChildRenderingT > BaseRenderContext < PropsT , StateT , OutputT >. renderChild (child: Workflow < Unit , Nothing , ChildRenderingT >, key: String = \u201c\u201d): ChildRenderingT More info Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output. runningWorker [jvm] Content inline fun < W : Worker < Nothing >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d) More info Ensures a Worker that never emits anything is running. [jvm] Content inline fun < T , W : Worker < T >, PropsT , StateT , OutputT > BaseRenderContext < PropsT , StateT , OutputT >. runningWorker (worker: W , key: String = \u201c\u201d, noinline handler: ( T ) -> WorkflowAction < PropsT , StateT , OutputT >) More info Ensures worker is running.","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/action-sink/","text":"// workflow / com.squareup.workflow1 / BaseRenderContext / actionSink actionSink \u00b6 [jvm] Content abstract val actionSink : Sink < WorkflowAction < PropsT , StateT , OutputT >> More info Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null.","title":"Action sink"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/action-sink/#actionsink","text":"[jvm] Content abstract val actionSink : Sink < WorkflowAction < PropsT , StateT , OutputT >> More info Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null.","title":"actionSink"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/event-handler/","text":"// workflow / com.squareup.workflow1 / BaseRenderContext / eventHandler eventHandler \u00b6 [jvm] Content open fun eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): () -> Unit More info Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . Handy for attaching event handlers to renderings. Parameters \u00b6 jvm name A string describing the update, included in the action\u2019s toString as a debugging aid update Function that defines the workflow update. [jvm] Content open fun < EventT > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( EventT ) -> Unit ): ( EventT ) -> Unit open fun < E1 , E2 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 ) -> Unit ): ( E1 , E2 ) -> Unit open fun < E1 , E2 , E3 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 ) -> Unit ): ( E1 , E2 , E3 ) -> Unit open fun < E1 , E2 , E3 , E4 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 ) -> Unit ): ( E1 , E2 , E3 , E4 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 ) -> Unit","title":"Event handler"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/event-handler/#eventhandler","text":"[jvm] Content open fun eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): () -> Unit More info Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . Handy for attaching event handlers to renderings.","title":"eventHandler"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/event-handler/#parameters","text":"jvm name A string describing the update, included in the action\u2019s toString as a debugging aid update Function that defines the workflow update. [jvm] Content open fun < EventT > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( EventT ) -> Unit ): ( EventT ) -> Unit open fun < E1 , E2 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 ) -> Unit ): ( E1 , E2 ) -> Unit open fun < E1 , E2 , E3 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 ) -> Unit ): ( E1 , E2 , E3 ) -> Unit open fun < E1 , E2 , E3 , E4 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 ) -> Unit ): ( E1 , E2 , E3 , E4 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 ) -> Unit open fun < E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 > eventHandler (name: () -> String = { \u201ceventHandler\u201d }, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 ) -> Unit ): ( E1 , E2 , E3 , E4 , E5 , E6 , E7 , E8 , E9 , E10 ) -> Unit","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/render-child/","text":"// workflow / com.squareup.workflow1 / BaseRenderContext / renderChild renderChild \u00b6 [jvm] Content abstract fun < ChildPropsT , ChildOutputT , ChildRenderingT > renderChild (child: Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Ensures child is running as a child of this workflow, and returns the result of its render method. Never call StatefulWorkflow.render or StatelessWorkflow.render directly, always do it through this context method. If the child *wasn't* already running, it will be started either from [initialState](../-stateful-workflow/initial-state.md) or its snapshot. If the child *was* already running, The workflow's [onPropsChanged](../-stateful-workflow/on-props-changed.md) method is invoked with the previous input and this one. The child's render method is invoked with input and the child's state. After this method returns, if something happens that trigger\u2019s one of child\u2019s handlers, and that handler emits an output, the function passed as handler will be invoked with that output. Parameters \u00b6 jvm key An optional string key that is used to distinguish between workflows of the same type.","title":"Render child"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/render-child/#renderchild","text":"[jvm] Content abstract fun < ChildPropsT , ChildOutputT , ChildRenderingT > renderChild (child: Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >, props: ChildPropsT , key: String = \u201c\u201d, handler: ( ChildOutputT ) -> WorkflowAction < PropsT , StateT , OutputT >): ChildRenderingT More info Ensures child is running as a child of this workflow, and returns the result of its render method. Never call StatefulWorkflow.render or StatelessWorkflow.render directly, always do it through this context method. If the child *wasn't* already running, it will be started either from [initialState](../-stateful-workflow/initial-state.md) or its snapshot. If the child *was* already running, The workflow's [onPropsChanged](../-stateful-workflow/on-props-changed.md) method is invoked with the previous input and this one. The child's render method is invoked with input and the child's state. After this method returns, if something happens that trigger\u2019s one of child\u2019s handlers, and that handler emits an output, the function passed as handler will be invoked with that output.","title":"renderChild"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/render-child/#parameters","text":"jvm key An optional string key that is used to distinguish between workflows of the same type.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/running-side-effect/","text":"// workflow / com.squareup.workflow1 / BaseRenderContext / runningSideEffect runningSideEffect \u00b6 [jvm] Content abstract fun runningSideEffect (key: String , sideEffect: suspend CoroutineScope.() -> Unit ) More info Ensures sideEffect is running with the given key . The first render pass in which this method is called, sideEffect will be launched in a new coroutine that will be scoped to the rendering Workflow . Subsequent render passes that invoke this method with the same key will not launch the coroutine again, but let it keep running. Note that if a different function is passed with the same key, the side effect will not be restarted, the new function will simply be ignored. The next render pass in which the workflow does not call this method with the same key, the coroutine running sideEffect will be cancelled . The coroutine will run with the same CoroutineContext that the workflow runtime is running in. The side effect coroutine will not be started until after the first render call than runs it returns. Parameters \u00b6 jvm key The string key that is used to distinguish between side effects. sideEffect The suspend function that will be launched in a coroutine to perform the side effect.","title":"Running side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/running-side-effect/#runningsideeffect","text":"[jvm] Content abstract fun runningSideEffect (key: String , sideEffect: suspend CoroutineScope.() -> Unit ) More info Ensures sideEffect is running with the given key . The first render pass in which this method is called, sideEffect will be launched in a new coroutine that will be scoped to the rendering Workflow . Subsequent render passes that invoke this method with the same key will not launch the coroutine again, but let it keep running. Note that if a different function is passed with the same key, the side effect will not be restarted, the new function will simply be ignored. The next render pass in which the workflow does not call this method with the same key, the coroutine running sideEffect will be cancelled . The coroutine will run with the same CoroutineContext that the workflow runtime is running in. The side effect coroutine will not be started until after the first render call than runs it returns.","title":"runningSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/running-side-effect/#parameters","text":"jvm key The string key that is used to distinguish between side effects. sideEffect The suspend function that will be launched in a coroutine to perform the side effect.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/","text":"// workflow / com.squareup.workflow1 / ExperimentalWorkflowApi ExperimentalWorkflowApi \u00b6 [jvm] annotation class ExperimentalWorkflowApi Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. Constructors \u00b6 ExperimentalWorkflowApi [jvm] fun ExperimentalWorkflowApi ()","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/#experimentalworkflowapi","text":"[jvm] annotation class ExperimentalWorkflowApi Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"ExperimentalWorkflowApi"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/#constructors","text":"ExperimentalWorkflowApi [jvm] fun ExperimentalWorkflowApi ()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/-experimental-workflow-api/","text":"// workflow / com.squareup.workflow1 / ExperimentalWorkflowApi / ExperimentalWorkflowApi ExperimentalWorkflowApi \u00b6 [jvm] Content fun ExperimentalWorkflowApi ()","title":" experimental workflow api"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/-experimental-workflow-api/#experimentalworkflowapi","text":"[jvm] Content fun ExperimentalWorkflowApi ()","title":"ExperimentalWorkflowApi"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/","text":"// workflow / com.squareup.workflow1 / ImpostorWorkflow ImpostorWorkflow \u00b6 [jvm] @ ExperimentalWorkflowApi () interface ImpostorWorkflow Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. Two ImpostorWorkflow s with the same concrete class, but different realIdentifier s will be considered different workflows by the runtime. This is intended to be used for helper workflows that implement things like operators by wrapping and delegating to other workflows, and which need to be able to express that the identity of the operator workflow is derived from the identity of the wrapped workflow. Functions \u00b6 Name Summary describeRealIdentifier [jvm] Content open fun describeRealIdentifier (): String ? More info Returns a string that describes how this workflow is related to realIdentifier . Properties \u00b6 Name Summary realIdentifier [jvm] abstract val realIdentifier : WorkflowIdentifier The WorkflowIdentifier of another workflow to be combined with the identifier of this workflow, as obtained by Workflow.identifier .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/#impostorworkflow","text":"[jvm] @ ExperimentalWorkflowApi () interface ImpostorWorkflow Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. Two ImpostorWorkflow s with the same concrete class, but different realIdentifier s will be considered different workflows by the runtime. This is intended to be used for helper workflows that implement things like operators by wrapping and delegating to other workflows, and which need to be able to express that the identity of the operator workflow is derived from the identity of the wrapped workflow.","title":"ImpostorWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/#functions","text":"Name Summary describeRealIdentifier [jvm] Content open fun describeRealIdentifier (): String ? More info Returns a string that describes how this workflow is related to realIdentifier .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/#properties","text":"Name Summary realIdentifier [jvm] abstract val realIdentifier : WorkflowIdentifier The WorkflowIdentifier of another workflow to be combined with the identifier of this workflow, as obtained by Workflow.identifier .","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/describe-real-identifier/","text":"// workflow / com.squareup.workflow1 / ImpostorWorkflow / describeRealIdentifier describeRealIdentifier \u00b6 [jvm] Content open fun describeRealIdentifier (): String ? More info Returns a string that describes how this workflow is related to realIdentifier .","title":"Describe real identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/describe-real-identifier/#describerealidentifier","text":"[jvm] Content open fun describeRealIdentifier (): String ? More info Returns a string that describes how this workflow is related to realIdentifier .","title":"describeRealIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/real-identifier/","text":"// workflow / com.squareup.workflow1 / ImpostorWorkflow / realIdentifier realIdentifier \u00b6 [jvm] Content abstract val realIdentifier : WorkflowIdentifier More info The WorkflowIdentifier of another workflow to be combined with the identifier of this workflow, as obtained by Workflow.identifier . For workflows that implement operators, this should be the identifier of the upstream Workflow that this workflow wraps.","title":"Real identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/real-identifier/#realidentifier","text":"[jvm] Content abstract val realIdentifier : WorkflowIdentifier More info The WorkflowIdentifier of another workflow to be combined with the identifier of this workflow, as obtained by Workflow.identifier . For workflows that implement operators, this should be the identifier of the upstream Workflow that this workflow wraps.","title":"realIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/","text":"// workflow / com.squareup.workflow1 / LifecycleWorker LifecycleWorker \u00b6 [jvm] abstract class LifecycleWorker : Worker < Nothing > Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down. Constructors \u00b6 LifecycleWorker [jvm] fun LifecycleWorker () Functions \u00b6 Name Summary doesSameWorkAs [jvm] Content open override fun doesSameWorkAs (otherWorker: Worker <*>): Boolean More info Equates LifecycleWorker s that have the same concrete class. onStarted [jvm] Content open fun onStarted () More info Called when this worker is started. onStopped [jvm] Content open fun onStopped () More info Called when this worker has been torn down. run [jvm] Content override fun run (): Flow< Nothing > More info Returns a Flow to execute the work represented by this worker.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/#lifecycleworker","text":"[jvm] abstract class LifecycleWorker : Worker < Nothing > Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down.","title":"LifecycleWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/#constructors","text":"LifecycleWorker [jvm] fun LifecycleWorker ()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/#functions","text":"Name Summary doesSameWorkAs [jvm] Content open override fun doesSameWorkAs (otherWorker: Worker <*>): Boolean More info Equates LifecycleWorker s that have the same concrete class. onStarted [jvm] Content open fun onStarted () More info Called when this worker is started. onStopped [jvm] Content open fun onStopped () More info Called when this worker has been torn down. run [jvm] Content override fun run (): Flow< Nothing > More info Returns a Flow to execute the work represented by this worker.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/-lifecycle-worker/","text":"// workflow / com.squareup.workflow1 / LifecycleWorker / LifecycleWorker LifecycleWorker \u00b6 [jvm] Content fun LifecycleWorker ()","title":" lifecycle worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/-lifecycle-worker/#lifecycleworker","text":"[jvm] Content fun LifecycleWorker ()","title":"LifecycleWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/does-same-work-as/","text":"// workflow / com.squareup.workflow1 / LifecycleWorker / doesSameWorkAs doesSameWorkAs \u00b6 [jvm] Content open override fun doesSameWorkAs (otherWorker: Worker <*>): Boolean More info Equates LifecycleWorker s that have the same concrete class.","title":"Does same work as"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/does-same-work-as/#doessameworkas","text":"[jvm] Content open override fun doesSameWorkAs (otherWorker: Worker <*>): Boolean More info Equates LifecycleWorker s that have the same concrete class.","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/on-started/","text":"// workflow / com.squareup.workflow1 / LifecycleWorker / onStarted onStarted \u00b6 [jvm] Content open fun onStarted () More info Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStopped , and it will always be called first. Invoked on the dispatcher running the workflow.","title":"On started"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/on-started/#onstarted","text":"[jvm] Content open fun onStarted () More info Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStopped , and it will always be called first. Invoked on the dispatcher running the workflow.","title":"onStarted"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/on-stopped/","text":"// workflow / com.squareup.workflow1 / LifecycleWorker / onStopped onStopped \u00b6 [jvm] Content open fun onStopped () More info Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStarted , and it will always be called second. Invoked on the dispatcher running the workflow.","title":"On stopped"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/on-stopped/#onstopped","text":"[jvm] Content open fun onStopped () More info Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStarted , and it will always be called second. Invoked on the dispatcher running the workflow.","title":"onStopped"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/run/","text":"// workflow / com.squareup.workflow1 / LifecycleWorker / run run \u00b6 [jvm] Content override fun run (): Flow< Nothing > More info Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker ). Coroutine Context \u00b6 When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don't care which thread they're executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString) and the key specified by the workflow running the worker. Exceptions \u00b6 If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Run"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/run/#run","text":"[jvm] Content override fun run (): Flow< Nothing > More info Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker ).","title":"run"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/run/#coroutine-context","text":"When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don't care which thread they're executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString) and the key specified by the workflow running the worker.","title":"Coroutine Context"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/run/#exceptions","text":"If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-noop-workflow-interceptor/","text":"// workflow / com.squareup.workflow1 / NoopWorkflowInterceptor NoopWorkflowInterceptor \u00b6 [jvm] @ ExperimentalWorkflowApi () object NoopWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that does not intercept anything. Functions \u00b6 Name Summary onInitialState [jvm] Content open fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState . onPropsChanged [jvm] Content open fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged . onRender [jvm] Content open fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render . onSessionStarted [jvm] Content open fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState . onSnapshotState [jvm] Content open fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-noop-workflow-interceptor/#noopworkflowinterceptor","text":"[jvm] @ ExperimentalWorkflowApi () object NoopWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that does not intercept anything.","title":"NoopWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-noop-workflow-interceptor/#functions","text":"Name Summary onInitialState [jvm] Content open fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState . onPropsChanged [jvm] Content open fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged . onRender [jvm] Content open fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render . onSessionStarted [jvm] Content open fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState . onSnapshotState [jvm] Content open fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/","text":"// workflow / com.squareup.workflow1 / RenderingAndSnapshot RenderingAndSnapshot \u00b6 [jvm] class RenderingAndSnapshot RenderingT >( rendering : RenderingT , snapshot : TreeSnapshot ) Tuple of rendering and snapshot used by renderWorkflowIn . Note that this class keeps the default identity equality implementation it inherits from Any, rather than comparing its rendering or snapshot . Constructors \u00b6 RenderingAndSnapshot [jvm] fun RenderingT > RenderingAndSnapshot (rendering: RenderingT , snapshot: TreeSnapshot ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): RenderingT component2 [jvm] Content operator fun component2 (): TreeSnapshot Properties \u00b6 Name Summary rendering [jvm] val rendering : RenderingT snapshot [jvm] val snapshot : TreeSnapshot","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/#renderingandsnapshot","text":"[jvm] class RenderingAndSnapshot RenderingT >( rendering : RenderingT , snapshot : TreeSnapshot ) Tuple of rendering and snapshot used by renderWorkflowIn . Note that this class keeps the default identity equality implementation it inherits from Any, rather than comparing its rendering or snapshot .","title":"RenderingAndSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/#constructors","text":"RenderingAndSnapshot [jvm] fun RenderingT > RenderingAndSnapshot (rendering: RenderingT , snapshot: TreeSnapshot )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): RenderingT component2 [jvm] Content operator fun component2 (): TreeSnapshot","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/#properties","text":"Name Summary rendering [jvm] val rendering : RenderingT snapshot [jvm] val snapshot : TreeSnapshot","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/-rendering-and-snapshot/","text":"// workflow / com.squareup.workflow1 / RenderingAndSnapshot / RenderingAndSnapshot RenderingAndSnapshot \u00b6 [jvm] Content fun RenderingT > RenderingAndSnapshot (rendering: RenderingT , snapshot: TreeSnapshot )","title":" rendering and snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/-rendering-and-snapshot/#renderingandsnapshot","text":"[jvm] Content fun RenderingT > RenderingAndSnapshot (rendering: RenderingT , snapshot: TreeSnapshot )","title":"RenderingAndSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/component1/","text":"// workflow / com.squareup.workflow1 / RenderingAndSnapshot / component1 component1 \u00b6 [jvm] Content operator fun component1 (): RenderingT","title":"Component1"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/component1/#component1","text":"[jvm] Content operator fun component1 (): RenderingT","title":"component1"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/component2/","text":"// workflow / com.squareup.workflow1 / RenderingAndSnapshot / component2 component2 \u00b6 [jvm] Content operator fun component2 (): TreeSnapshot","title":"Component2"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/component2/#component2","text":"[jvm] Content operator fun component2 (): TreeSnapshot","title":"component2"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/rendering/","text":"// workflow / com.squareup.workflow1 / RenderingAndSnapshot / rendering rendering \u00b6 [jvm] Content val rendering : RenderingT","title":"Rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/rendering/#rendering","text":"[jvm] Content val rendering : RenderingT","title":"rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/snapshot/","text":"// workflow / com.squareup.workflow1 / RenderingAndSnapshot / snapshot snapshot \u00b6 [jvm] Content val snapshot : TreeSnapshot","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/snapshot/#snapshot","text":"[jvm] Content val snapshot : TreeSnapshot","title":"snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/","text":"// workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor SimpleLoggingWorkflowInterceptor \u00b6 [jvm] open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that just prints all method calls using log. Constructors \u00b6 SimpleLoggingWorkflowInterceptor [jvm] fun SimpleLoggingWorkflowInterceptor () Functions \u00b6 Name Summary onInitialState [jvm] Content open override fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState . onPropsChanged [jvm] Content open override fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged . onRender [jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render . onSessionStarted [jvm] Content open override fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState . onSnapshotState [jvm] Content open override fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/#simpleloggingworkflowinterceptor","text":"[jvm] open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that just prints all method calls using log.","title":"SimpleLoggingWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/#constructors","text":"SimpleLoggingWorkflowInterceptor [jvm] fun SimpleLoggingWorkflowInterceptor ()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/#functions","text":"Name Summary onInitialState [jvm] Content open override fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState . onPropsChanged [jvm] Content open override fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged . onRender [jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render . onSessionStarted [jvm] Content open override fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState . onSnapshotState [jvm] Content open override fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/-simple-logging-workflow-interceptor/","text":"// workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / SimpleLoggingWorkflowInterceptor SimpleLoggingWorkflowInterceptor \u00b6 [jvm] Content fun SimpleLoggingWorkflowInterceptor ()","title":" simple logging workflow interceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/-simple-logging-workflow-interceptor/#simpleloggingworkflowinterceptor","text":"[jvm] Content fun SimpleLoggingWorkflowInterceptor ()","title":"SimpleLoggingWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-initial-state/","text":"// workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onInitialState onInitialState \u00b6 [jvm] Content open override fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState .","title":"On initial state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-initial-state/#oninitialstate","text":"[jvm] Content open override fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState .","title":"onInitialState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-props-changed/","text":"// workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onPropsChanged onPropsChanged \u00b6 [jvm] Content open override fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"On props changed"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-props-changed/#onpropschanged","text":"[jvm] Content open override fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"onPropsChanged"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-render/","text":"// workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onRender onRender \u00b6 [jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render .","title":"On render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-render/#onrender","text":"[jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render .","title":"onRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-session-started/","text":"// workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onSessionStarted onSessionStarted \u00b6 [jvm] Content open override fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState . Parameters \u00b6 jvm workflowScope The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"On session started"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-session-started/#onsessionstarted","text":"[jvm] Content open override fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState .","title":"onSessionStarted"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-session-started/#parameters","text":"jvm workflowScope The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-snapshot-state/","text":"// workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onSnapshotState onSnapshotState \u00b6 [jvm] Content open override fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState .","title":"On snapshot state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-snapshot-state/#onsnapshotstate","text":"[jvm] Content open override fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState .","title":"onSnapshotState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/","text":"// workflow / com.squareup.workflow1 / Sink Sink \u00b6 [jvm] fun fun interface Sink T > An object that receives values (commonly events or WorkflowAction ). RenderContext.actionSink implements this interface. Functions \u00b6 Name Summary send [jvm] Content abstract fun send (value: T ) Extensions \u00b6 Name Summary contraMap [jvm] Content fun < T1 , T2 > Sink < T1 >. contraMap (transform: ( T2 ) -> T1 ): Sink < T2 > More info Generates a new sink of type T2 .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/#sink","text":"[jvm] fun fun interface Sink T > An object that receives values (commonly events or WorkflowAction ). RenderContext.actionSink implements this interface.","title":"Sink"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/#functions","text":"Name Summary send [jvm] Content abstract fun send (value: T )","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/#extensions","text":"Name Summary contraMap [jvm] Content fun < T1 , T2 > Sink < T1 >. contraMap (transform: ( T2 ) -> T1 ): Sink < T2 > More info Generates a new sink of type T2 .","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/send/","text":"// workflow / com.squareup.workflow1 / Sink / send send \u00b6 [jvm] Content abstract fun send (value: T )","title":"Send"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/send/#send","text":"[jvm] Content abstract fun send (value: T )","title":"send"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/","text":"// workflow / com.squareup.workflow1 / Snapshot Snapshot \u00b6 [jvm] class Snapshot A lazy wrapper of ByteString. Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean More info Compares Snapshots by comparing their bytes . hashCode [jvm] Content open override fun hashCode (): Int More info Calculates hashcode using bytes . toString [jvm] Content open override fun toString (): String More info Returns a String describing the bytes of this Snapshot. Properties \u00b6 Name Summary bytes [jvm] val bytes : ByteString Extensions \u00b6 Name Summary toParcelable [androidJvm] Content inline fun < T : Parcelable > Snapshot . toParcelable (): T ?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#snapshot","text":"[jvm] class Snapshot A lazy wrapper of ByteString. Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work.","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean More info Compares Snapshots by comparing their bytes . hashCode [jvm] Content open override fun hashCode (): Int More info Calculates hashcode using bytes . toString [jvm] Content open override fun toString (): String More info Returns a String describing the bytes of this Snapshot.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#properties","text":"Name Summary bytes [jvm] val bytes : ByteString","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#extensions","text":"Name Summary toParcelable [androidJvm] Content inline fun < T : Parcelable > Snapshot . toParcelable (): T ?","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/bytes/","text":"// workflow / com.squareup.workflow1 / Snapshot / bytes bytes \u00b6 [jvm] Content val bytes : ByteString","title":"Bytes"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/bytes/#bytes","text":"[jvm] Content val bytes : ByteString","title":"bytes"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/equals/","text":"// workflow / com.squareup.workflow1 / Snapshot / equals equals \u00b6 [jvm] Content open operator override fun equals (other: Any ?): Boolean More info Compares Snapshots by comparing their bytes . This method forces serialization, calling it may be expensive.","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/equals/#equals","text":"[jvm] Content open operator override fun equals (other: Any ?): Boolean More info Compares Snapshots by comparing their bytes . This method forces serialization, calling it may be expensive.","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/hash-code/","text":"// workflow / com.squareup.workflow1 / Snapshot / hashCode hashCode \u00b6 [jvm] Content open override fun hashCode (): Int More info Calculates hashcode using bytes . This method forces serialization, calling it may be expensive.","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/hash-code/#hashcode","text":"[jvm] Content open override fun hashCode (): Int More info Calculates hashcode using bytes . This method forces serialization, calling it may be expensive.","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/to-string/","text":"// workflow / com.squareup.workflow1 / Snapshot / toString toString \u00b6 [jvm] Content open override fun toString (): String More info Returns a String describing the bytes of this Snapshot. This method forces serialization, calling it may be expensive.","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/to-string/#tostring","text":"[jvm] Content open override fun toString (): String More info Returns a String describing the bytes of this Snapshot. This method forces serialization, calling it may be expensive.","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/-companion/","text":"// workflow / com.squareup.workflow1 / Snapshot / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary of [jvm] Content @ JvmStatic () fun of (lazy: () -> ByteString): Snapshot @ JvmStatic () fun of (integer: Int ): Snapshot @ JvmStatic () fun of (string: String ): Snapshot @ JvmStatic () fun of (byteString: ByteString): Snapshot write [jvm] Content @ JvmStatic () fun write (lazy: (BufferedSink) -> Unit ): Snapshot More info Create a snapshot by writing to a nice ergonomic BufferedSink.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/-companion/#functions","text":"Name Summary of [jvm] Content @ JvmStatic () fun of (lazy: () -> ByteString): Snapshot @ JvmStatic () fun of (integer: Int ): Snapshot @ JvmStatic () fun of (string: String ): Snapshot @ JvmStatic () fun of (byteString: ByteString): Snapshot write [jvm] Content @ JvmStatic () fun write (lazy: (BufferedSink) -> Unit ): Snapshot More info Create a snapshot by writing to a nice ergonomic BufferedSink.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/-companion/of/","text":"// workflow / com.squareup.workflow1 / Snapshot / Companion / of of \u00b6 [jvm] Content @ JvmStatic () fun of (string: String ): Snapshot @ JvmStatic () fun of (byteString: ByteString): Snapshot @ JvmStatic () fun of (lazy: () -> ByteString): Snapshot @ JvmStatic () fun of (integer: Int ): Snapshot","title":"Of"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/-companion/of/#of","text":"[jvm] Content @ JvmStatic () fun of (string: String ): Snapshot @ JvmStatic () fun of (byteString: ByteString): Snapshot @ JvmStatic () fun of (lazy: () -> ByteString): Snapshot @ JvmStatic () fun of (integer: Int ): Snapshot","title":"of"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/-companion/write/","text":"// workflow / com.squareup.workflow1 / Snapshot / Companion / write write \u00b6 [jvm] Content @ JvmStatic () fun write (lazy: (BufferedSink) -> Unit ): Snapshot More info Create a snapshot by writing to a nice ergonomic BufferedSink.","title":"Write"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/-companion/write/#write","text":"[jvm] Content @ JvmStatic () fun write (lazy: (BufferedSink) -> Unit ): Snapshot More info Create a snapshot by writing to a nice ergonomic BufferedSink.","title":"write"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/","text":"// workflow / com.squareup.workflow1 / StatefulWorkflow StatefulWorkflow \u00b6 [jvm] abstract class StatefulWorkflow PropsT , StateT , out OutputT , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > A composable, stateful object that can handle events , delegate to children, subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow. Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree. Avoid capturing stale state \u00b6 Workflows may not perform side effects in their render methods, but may perform side effects by running Worker s and getting events from RenderingT s via WorkflowAction s. A WorkflowAction defines how to update the StateT and what OutputT s to emit. Actions get access to the current workflow\u2019s state, and they must use that view of the state. If an action is defined inline, it is incorrect to capture, or close over, the StateT passed to render in the action. Workflows are executed synchronously, but external events may not be, so captured state may be stale when the action is invoked. See also \u00b6 jvm com.squareup.workflow1.StatelessWorkflow Parameters \u00b6 jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn\u2019t care about for its children, and may just use star (*) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. Constructors \u00b6 StatefulWorkflow [jvm] fun StatefulWorkflow ()Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. Types \u00b6 Name Summary RenderContext [jvm] Content inner class RenderContext : BaseRenderContext <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT > Functions \u00b6 Name Summary asStatefulWorkflow [jvm] Content override fun asStatefulWorkflow (): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Satisfies the Workflow interface by returning this. initialState [jvm] Content abstract fun initialState (props: PropsT , snapshot: Snapshot ?): StateT More info Called from RenderContext.renderChild when the state machine is first started, to get the initial state. onPropsChanged [jvm] Content open fun onPropsChanged (old: PropsT , new: PropsT , state: StateT ): StateT More info Called from RenderContext.renderChild instead of initialState when the workflow is already running. render [jvm] Content abstract fun render (renderProps: PropsT , renderState: StateT , context: StatefulWorkflow.RenderContext < PropsT , StateT , OutputT , RenderingT >): RenderingT More info Called at least once\u2020 any time one of the following things happens: This workflow\u2019s renderProps changes (via the parent passing a different one in). This workflow\u2019s renderState changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. snapshotState [jvm] Content abstract fun snapshotState (state: StateT ): Snapshot ? More info Called whenever the state changes to generate a new Snapshot of the state. Extensions \u00b6 Name Summary action [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . launchForTestingFromStateWith [jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (props: PropsT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < StateT , OutputT , RenderingT > StatefulWorkflow < Unit , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> Unit ) More info Creates a WorkflowTestRuntime to run this workflow for unit testing. launchForTestingWith [jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingWith (props: PropsT , testParams: WorkflowTestParams < StateT > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. testRender [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. testRender (props: PropsT , initialState: StateT ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#statefulworkflow","text":"[jvm] abstract class StatefulWorkflow PropsT , StateT , out OutputT , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > A composable, stateful object that can handle events , delegate to children, subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow. Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree.","title":"StatefulWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#avoid-capturing-stale-state","text":"Workflows may not perform side effects in their render methods, but may perform side effects by running Worker s and getting events from RenderingT s via WorkflowAction s. A WorkflowAction defines how to update the StateT and what OutputT s to emit. Actions get access to the current workflow\u2019s state, and they must use that view of the state. If an action is defined inline, it is incorrect to capture, or close over, the StateT passed to render in the action. Workflows are executed synchronously, but external events may not be, so captured state may be stale when the action is invoked.","title":"Avoid capturing stale state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#see-also","text":"jvm com.squareup.workflow1.StatelessWorkflow","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#parameters","text":"jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn\u2019t care about for its children, and may just use star (*) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#constructors","text":"StatefulWorkflow [jvm] fun StatefulWorkflow ()Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#types","text":"Name Summary RenderContext [jvm] Content inner class RenderContext : BaseRenderContext <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#functions","text":"Name Summary asStatefulWorkflow [jvm] Content override fun asStatefulWorkflow (): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Satisfies the Workflow interface by returning this. initialState [jvm] Content abstract fun initialState (props: PropsT , snapshot: Snapshot ?): StateT More info Called from RenderContext.renderChild when the state machine is first started, to get the initial state. onPropsChanged [jvm] Content open fun onPropsChanged (old: PropsT , new: PropsT , state: StateT ): StateT More info Called from RenderContext.renderChild instead of initialState when the workflow is already running. render [jvm] Content abstract fun render (renderProps: PropsT , renderState: StateT , context: StatefulWorkflow.RenderContext < PropsT , StateT , OutputT , RenderingT >): RenderingT More info Called at least once\u2020 any time one of the following things happens: This workflow\u2019s renderProps changes (via the parent passing a different one in). This workflow\u2019s renderState changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. snapshotState [jvm] Content abstract fun snapshotState (state: StateT ): Snapshot ? More info Called whenever the state changes to generate a new Snapshot of the state.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#extensions","text":"Name Summary action [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , StateT , OutputT >.() -> Unit ): WorkflowAction < PropsT , StateT , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . launchForTestingFromStateWith [jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (props: PropsT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < StateT , OutputT , RenderingT > StatefulWorkflow < Unit , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> Unit ) More info Creates a WorkflowTestRuntime to run this workflow for unit testing. launchForTestingWith [jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingWith (props: PropsT , testParams: WorkflowTestParams < StateT > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. testRender [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. testRender (props: PropsT , initialState: StateT ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow.","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-stateful-workflow/","text":"// workflow / com.squareup.workflow1 / StatefulWorkflow / StatefulWorkflow StatefulWorkflow \u00b6 [jvm] Content fun StatefulWorkflow () More info Parameters \u00b6 jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn\u2019t care about for its children, and may just use star (*) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type.","title":" stateful workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-stateful-workflow/#statefulworkflow","text":"[jvm] Content fun StatefulWorkflow () More info","title":"StatefulWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-stateful-workflow/#parameters","text":"jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn\u2019t care about for its children, and may just use star (*) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/as-stateful-workflow/","text":"// workflow / com.squareup.workflow1 / StatefulWorkflow / asStatefulWorkflow asStatefulWorkflow \u00b6 [jvm] Content override fun asStatefulWorkflow (): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Satisfies the Workflow interface by returning this.","title":"As stateful workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/as-stateful-workflow/#asstatefulworkflow","text":"[jvm] Content override fun asStatefulWorkflow (): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Satisfies the Workflow interface by returning this.","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/initial-state/","text":"// workflow / com.squareup.workflow1 / StatefulWorkflow / initialState initialState \u00b6 [jvm] Content abstract fun initialState (props: PropsT , snapshot: Snapshot ?): StateT More info Called from RenderContext.renderChild when the state machine is first started, to get the initial state. Parameters \u00b6 jvm snapshot If the workflow is being created fresh, OR the workflow is being restored from a null or empty Snapshot , snapshot will be null. A snapshot is considered \u201cempty\u201d if Snapshot.bytes returns an empty ByteString, probably because snapshotState returned null. If the workflow is being restored from a Snapshot , snapshot will be the last value returned from snapshotState , and implementations that return something other than null should create their initial state by parsing their snapshot.","title":"Initial state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/initial-state/#initialstate","text":"[jvm] Content abstract fun initialState (props: PropsT , snapshot: Snapshot ?): StateT More info Called from RenderContext.renderChild when the state machine is first started, to get the initial state.","title":"initialState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/initial-state/#parameters","text":"jvm snapshot If the workflow is being created fresh, OR the workflow is being restored from a null or empty Snapshot , snapshot will be null. A snapshot is considered \u201cempty\u201d if Snapshot.bytes returns an empty ByteString, probably because snapshotState returned null. If the workflow is being restored from a Snapshot , snapshot will be the last value returned from snapshotState , and implementations that return something other than null should create their initial state by parsing their snapshot.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/on-props-changed/","text":"// workflow / com.squareup.workflow1 / StatefulWorkflow / onPropsChanged onPropsChanged \u00b6 [jvm] Content open fun onPropsChanged (old: PropsT , new: PropsT , state: StateT ): StateT More info Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. Default implementation does nothing.","title":"On props changed"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/on-props-changed/#onpropschanged","text":"[jvm] Content open fun onPropsChanged (old: PropsT , new: PropsT , state: StateT ): StateT More info Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. Default implementation does nothing.","title":"onPropsChanged"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/render/","text":"// workflow / com.squareup.workflow1 / StatefulWorkflow / render render \u00b6 [jvm] Content abstract fun render (renderProps: PropsT , renderState: StateT , context: StatefulWorkflow.RenderContext < PropsT , StateT , OutputT , RenderingT >): RenderingT More info Called at least once\u2020 any time one of the following things happens: This workflow's [renderProps](render.md) changes (via the parent passing a different one in). This workflow's [renderState](render.md) changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To nest the rendering of a child workflow in your own, pass the child and any required props to RenderContext.renderChild. This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context . \u2020 This method is guaranteed to be called at least once for every state, but may be called multiple times. Allowing this method to be invoked multiple times makes the internals simpler.","title":"Render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/render/#render","text":"[jvm] Content abstract fun render (renderProps: PropsT , renderState: StateT , context: StatefulWorkflow.RenderContext < PropsT , StateT , OutputT , RenderingT >): RenderingT More info Called at least once\u2020 any time one of the following things happens: This workflow's [renderProps](render.md) changes (via the parent passing a different one in). This workflow's [renderState](render.md) changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To nest the rendering of a child workflow in your own, pass the child and any required props to RenderContext.renderChild. This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context . \u2020 This method is guaranteed to be called at least once for every state, but may be called multiple times. Allowing this method to be invoked multiple times makes the internals simpler.","title":"render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/snapshot-state/","text":"// workflow / com.squareup.workflow1 / StatefulWorkflow / snapshotState snapshotState \u00b6 [jvm] Content abstract fun snapshotState (state: StateT ): Snapshot ? More info Called whenever the state changes to generate a new Snapshot of the state. Snapshots must be lazy. Serialization must not be done at the time this method is called, since the state will be snapshotted frequently but the serialized form may only be needed very rarely. If the workflow does not have any state, or should always be started from scratch, return null from this method. See also \u00b6 jvm com.squareup.workflow1.StatefulWorkflow","title":"Snapshot state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/snapshot-state/#snapshotstate","text":"[jvm] Content abstract fun snapshotState (state: StateT ): Snapshot ? More info Called whenever the state changes to generate a new Snapshot of the state. Snapshots must be lazy. Serialization must not be done at the time this method is called, since the state will be snapshotted frequently but the serialized form may only be needed very rarely. If the workflow does not have any state, or should always be started from scratch, return null from this method.","title":"snapshotState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/snapshot-state/#see-also","text":"jvm com.squareup.workflow1.StatefulWorkflow","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-render-context/","text":"// workflow / com.squareup.workflow1 / StatefulWorkflow / RenderContext RenderContext \u00b6 [jvm] inner class RenderContext : BaseRenderContext <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT > Functions \u00b6 Name Summary eventHandler [jvm] Content open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(EventT) -> Unit ): (EventT) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2) -> Unit ): (E1, E2) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3) -> Unit ): (E1, E2, E3) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4) -> Unit ): (E1, E2, E3, E4) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5) -> Unit ): (E1, E2, E3, E4, E5) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6) -> Unit ): (E1, E2, E3, E4, E5, E6) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7) -> Unit ): (E1, E2, E3, E4, E5, E6, E7) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8) -> Unit [jvm] Content open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.() -> Unit ): () -> Unit More info Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . renderChild [jvm] Content open override fun renderChild (child: Workflow , props: ChildPropsT, key: String , handler: (ChildOutputT) -> WorkflowAction <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >): ChildRenderingT More info Ensures child is running as a child of this workflow, and returns the result of its render method. runningSideEffect [jvm] Content open override fun runningSideEffect (key: String , sideEffect: suspend CoroutineScope.() -> Unit ) More info Ensures sideEffect is running with the given key. Properties \u00b6 Name Summary actionSink [jvm] open override val actionSink : Sink < WorkflowAction <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >>Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-render-context/#rendercontext","text":"[jvm] inner class RenderContext : BaseRenderContext <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >","title":"RenderContext"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-render-context/#functions","text":"Name Summary eventHandler [jvm] Content open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(EventT) -> Unit ): (EventT) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2) -> Unit ): (E1, E2) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3) -> Unit ): (E1, E2, E3) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4) -> Unit ): (E1, E2, E3, E4) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5) -> Unit ): (E1, E2, E3, E4, E5) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6) -> Unit ): (E1, E2, E3, E4, E5, E6) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7) -> Unit ): (E1, E2, E3, E4, E5, E6, E7) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8) -> Unit [jvm] Content open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >.() -> Unit ): () -> Unit More info Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . renderChild [jvm] Content open override fun renderChild (child: Workflow , props: ChildPropsT, key: String , handler: (ChildOutputT) -> WorkflowAction <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >): ChildRenderingT More info Ensures child is running as a child of this workflow, and returns the result of its render method. runningSideEffect [jvm] Content open override fun runningSideEffect (key: String , sideEffect: suspend CoroutineScope.() -> Unit ) More info Ensures sideEffect is running with the given key.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-render-context/#properties","text":"Name Summary actionSink [jvm] open override val actionSink : Sink < WorkflowAction <@ UnsafeVariance () PropsT , StateT , @ UnsafeVariance () OutputT >>Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/","text":"// workflow / com.squareup.workflow1 / StatelessWorkflow StatelessWorkflow \u00b6 [jvm] abstract class StatelessWorkflow PropsT , out OutputT , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > Minimal implementation of Workflow that maintains no state of its own. See also \u00b6 jvm com.squareup.workflow1.StatefulWorkflow Parameters \u00b6 jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. Constructors \u00b6 StatelessWorkflow [jvm] fun StatelessWorkflow ()Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. Types \u00b6 Name Summary RenderContext [jvm] Content inner class RenderContext : BaseRenderContext <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT > Functions \u00b6 Name Summary asStatefulWorkflow [jvm] Content override fun asStatefulWorkflow (): StatefulWorkflow < PropsT , *, OutputT , RenderingT > More info Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. render [jvm] Content abstract fun render (renderProps: PropsT , context: StatelessWorkflow.RenderContext < PropsT , OutputT , RenderingT >): RenderingT More info Called at least once any time one of the following things happens: This workflow\u2019s renderProps change (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. Extensions \u00b6 Name Summary action [jvm] Content fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#statelessworkflow","text":"[jvm] abstract class StatelessWorkflow PropsT , out OutputT , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > Minimal implementation of Workflow that maintains no state of its own.","title":"StatelessWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#see-also","text":"jvm com.squareup.workflow1.StatefulWorkflow","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#parameters","text":"jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#constructors","text":"StatelessWorkflow [jvm] fun StatelessWorkflow ()Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#types","text":"Name Summary RenderContext [jvm] Content inner class RenderContext : BaseRenderContext <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#functions","text":"Name Summary asStatefulWorkflow [jvm] Content override fun asStatefulWorkflow (): StatefulWorkflow < PropsT , *, OutputT , RenderingT > More info Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. render [jvm] Content abstract fun render (renderProps: PropsT , context: StatelessWorkflow.RenderContext < PropsT , OutputT , RenderingT >): RenderingT More info Called at least once any time one of the following things happens: This workflow\u2019s renderProps change (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#extensions","text":"Name Summary action [jvm] Content fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: String = \u201c\u201d, update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > fun < PropsT , OutputT , RenderingT > StatelessWorkflow < PropsT , OutputT , RenderingT >. action (name: () -> String , update: WorkflowAction.Updater < PropsT , *, OutputT >.() -> Unit ): WorkflowAction < PropsT , Nothing , OutputT > More info Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow .","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-stateless-workflow/","text":"// workflow / com.squareup.workflow1 / StatelessWorkflow / StatelessWorkflow StatelessWorkflow \u00b6 [jvm] Content fun StatelessWorkflow () More info Parameters \u00b6 jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type.","title":" stateless workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-stateless-workflow/#statelessworkflow","text":"[jvm] Content fun StatelessWorkflow () More info","title":"StatelessWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-stateless-workflow/#parameters","text":"jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/as-stateful-workflow/","text":"// workflow / com.squareup.workflow1 / StatelessWorkflow / asStatefulWorkflow asStatefulWorkflow \u00b6 [jvm] Content override fun asStatefulWorkflow (): StatefulWorkflow < PropsT , *, OutputT , RenderingT > More info Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. This method is called a few times per instance, but we don\u2019t need to allocate a new StatefulWorkflow every time, so we store it in a private property.","title":"As stateful workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/as-stateful-workflow/#asstatefulworkflow","text":"[jvm] Content override fun asStatefulWorkflow (): StatefulWorkflow < PropsT , *, OutputT , RenderingT > More info Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. This method is called a few times per instance, but we don\u2019t need to allocate a new StatefulWorkflow every time, so we store it in a private property.","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/render/","text":"// workflow / com.squareup.workflow1 / StatelessWorkflow / render render \u00b6 [jvm] Content abstract fun render (renderProps: PropsT , context: StatelessWorkflow.RenderContext < PropsT , OutputT , RenderingT >): RenderingT More info Called at least once any time one of the following things happens: This workflow's [renderProps](render.md) change (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To get the rendering from a child workflow, pass the child and any required props to RenderContext.renderChild. This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context .","title":"Render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/render/#render","text":"[jvm] Content abstract fun render (renderProps: PropsT , context: StatelessWorkflow.RenderContext < PropsT , OutputT , RenderingT >): RenderingT More info Called at least once any time one of the following things happens: This workflow's [renderProps](render.md) change (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To get the rendering from a child workflow, pass the child and any required props to RenderContext.renderChild. This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context .","title":"render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-render-context/","text":"// workflow / com.squareup.workflow1 / StatelessWorkflow / RenderContext RenderContext \u00b6 [jvm] inner class RenderContext : BaseRenderContext <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT > Functions \u00b6 Name Summary eventHandler [jvm] Content open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(EventT) -> Unit ): (EventT) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2) -> Unit ): (E1, E2) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3) -> Unit ): (E1, E2, E3) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4) -> Unit ): (E1, E2, E3, E4) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5) -> Unit ): (E1, E2, E3, E4, E5) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6) -> Unit ): (E1, E2, E3, E4, E5, E6) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7) -> Unit ): (E1, E2, E3, E4, E5, E6, E7) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8) -> Unit [jvm] Content open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.() -> Unit ): () -> Unit More info Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . renderChild [jvm] Content open override fun renderChild (child: Workflow , props: ChildPropsT, key: String , handler: (ChildOutputT) -> WorkflowAction <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >): ChildRenderingT More info Ensures child is running as a child of this workflow, and returns the result of its render method. runningSideEffect [jvm] Content open override fun runningSideEffect (key: String , sideEffect: suspend CoroutineScope.() -> Unit ) More info Ensures sideEffect is running with the given key. Properties \u00b6 Name Summary actionSink [jvm] open override val actionSink : Sink < WorkflowAction <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >>Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-render-context/#rendercontext","text":"[jvm] inner class RenderContext : BaseRenderContext <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >","title":"RenderContext"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-render-context/#functions","text":"Name Summary eventHandler [jvm] Content open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(EventT) -> Unit ): (EventT) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2) -> Unit ): (E1, E2) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3) -> Unit ): (E1, E2, E3) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4) -> Unit ): (E1, E2, E3, E4) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5) -> Unit ): (E1, E2, E3, E4, E5) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6) -> Unit ): (E1, E2, E3, E4, E5, E6) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7) -> Unit ): (E1, E2, E3, E4, E5, E6, E7) -> Unit open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.(E1, E2, E3, E4, E5, E6, E7, E8) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8) -> Unit [jvm] Content open override fun eventHandler (name: () -> String , update: WorkflowAction.Updater <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >.() -> Unit ): () -> Unit More info Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . renderChild [jvm] Content open override fun renderChild (child: Workflow , props: ChildPropsT, key: String , handler: (ChildOutputT) -> WorkflowAction <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >): ChildRenderingT More info Ensures child is running as a child of this workflow, and returns the result of its render method. runningSideEffect [jvm] Content open override fun runningSideEffect (key: String , sideEffect: suspend CoroutineScope.() -> Unit ) More info Ensures sideEffect is running with the given key.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-render-context/#properties","text":"Name Summary actionSink [jvm] open override val actionSink : Sink < WorkflowAction <@ UnsafeVariance () PropsT , Nothing , @ UnsafeVariance () OutputT >>Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/","text":"// workflow / com.squareup.workflow1 / TreeSnapshot TreeSnapshot \u00b6 [jvm] class TreeSnapshot Aggregate of all the snapshots of a tree of workflows. Can be serialized with toByteString and deserialized with parse . For tests, you can get a TreeSnapshot from a RenderingAndSnapshot or by creating one for your root workflow only by calling forRootOnly . Parameters \u00b6 jvm childTreeSnapshots A function that will lazily parse the child snapshots for this tree when invoked. It will be cached in the childTreeSnapshots property. Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toByteString [jvm] Content fun toByteString (): ByteString More info Writes this Snapshot and all its children into a ByteString.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/#treesnapshot","text":"[jvm] class TreeSnapshot Aggregate of all the snapshots of a tree of workflows. Can be serialized with toByteString and deserialized with parse . For tests, you can get a TreeSnapshot from a RenderingAndSnapshot or by creating one for your root workflow only by calling forRootOnly .","title":"TreeSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/#parameters","text":"jvm childTreeSnapshots A function that will lazily parse the child snapshots for this tree when invoked. It will be cached in the childTreeSnapshots property.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toByteString [jvm] Content fun toByteString (): ByteString More info Writes this Snapshot and all its children into a ByteString.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/equals/","text":"// workflow / com.squareup.workflow1 / TreeSnapshot / equals equals \u00b6 [jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/equals/#equals","text":"[jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/hash-code/","text":"// workflow / com.squareup.workflow1 / TreeSnapshot / hashCode hashCode \u00b6 [jvm] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/hash-code/#hashcode","text":"[jvm] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/to-byte-string/","text":"// workflow / com.squareup.workflow1 / TreeSnapshot / toByteString toByteString \u00b6 [jvm] Content fun toByteString (): ByteString More info Writes this Snapshot and all its children into a ByteString. The snapshot can be restored with parse . Any children snapshots for workflows whose WorkflowIdentifier s are unsnapshottable will not be serialized.","title":"To byte string"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/to-byte-string/#tobytestring","text":"[jvm] Content fun toByteString (): ByteString More info Writes this Snapshot and all its children into a ByteString. The snapshot can be restored with parse . Any children snapshots for workflows whose WorkflowIdentifier s are unsnapshottable will not be serialized.","title":"toByteString"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/-companion/","text":"// workflow / com.squareup.workflow1 / TreeSnapshot / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary forRootOnly [jvm] Content fun forRootOnly (rootSnapshot: Snapshot ?): TreeSnapshot More info Returns a TreeSnapshot that only contains a Snapshot for the root workflow, and no child snapshots. parse [jvm] Content fun parse (bytes: ByteString): TreeSnapshot More info Parses a \u201croot\u201d snapshot and the list of child snapshots with associated WorkflowNodeIds from a ByteString returned by toByteString .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/-companion/#functions","text":"Name Summary forRootOnly [jvm] Content fun forRootOnly (rootSnapshot: Snapshot ?): TreeSnapshot More info Returns a TreeSnapshot that only contains a Snapshot for the root workflow, and no child snapshots. parse [jvm] Content fun parse (bytes: ByteString): TreeSnapshot More info Parses a \u201croot\u201d snapshot and the list of child snapshots with associated WorkflowNodeIds from a ByteString returned by toByteString .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/-companion/for-root-only/","text":"// workflow / com.squareup.workflow1 / TreeSnapshot / Companion / forRootOnly forRootOnly \u00b6 [jvm] Content fun forRootOnly (rootSnapshot: Snapshot ?): TreeSnapshot More info Returns a TreeSnapshot that only contains a Snapshot for the root workflow, and no child snapshots.","title":"For root only"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/-companion/for-root-only/#forrootonly","text":"[jvm] Content fun forRootOnly (rootSnapshot: Snapshot ?): TreeSnapshot More info Returns a TreeSnapshot that only contains a Snapshot for the root workflow, and no child snapshots.","title":"forRootOnly"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/-companion/parse/","text":"// workflow / com.squareup.workflow1 / TreeSnapshot / Companion / parse parse \u00b6 [jvm] Content fun parse (bytes: ByteString): TreeSnapshot More info Parses a \u201croot\u201d snapshot and the list of child snapshots with associated WorkflowNodeIds from a ByteString returned by toByteString . Never returns an empty root snapshot: if the root snapshot is empty it will be null. Child snapshots, however, are always returned as-is. They must be recursively passed to this function to continue parsing the tree. Note that this method is mostly lazy. It will parse the list of child TreeSnapshot s, but will not recursively parse each of those.","title":"Parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/-companion/parse/#parse","text":"[jvm] Content fun parse (bytes: ByteString): TreeSnapshot More info Parses a \u201croot\u201d snapshot and the list of child snapshots with associated WorkflowNodeIds from a ByteString returned by toByteString . Never returns an empty root snapshot: if the root snapshot is empty it will be null. Child snapshots, however, are always returned as-is. They must be recursively passed to this function to continue parsing the tree. Note that this method is mostly lazy. It will parse the list of child TreeSnapshot s, but will not recursively parse each of those.","title":"parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/","text":"// workflow / com.squareup.workflow1 / Worker Worker \u00b6 [jvm] interface Worker OutputT > Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workers allow you to execute arbitrary, possibly asynchronous tasks in a declarative manner. To perform their tasks, workers return a Flow. Workers are effectively Flows that can be compared to determine equivalence between render passes. A Workflow uses Workers to perform asynchronous work during the render pass by calling RenderContext.runningWorker. See the documentation on run for more information on the returned Flow is consumed and how to implement asynchronous work. See the documentation on doesSameWorkAs for more details on how and when workers are compared and the worker lifecycle. Example: Network request \u00b6 Let\u2019s say you have a network service with an API that returns a number, and you want to call that service from a Workflow . interface TimeService { suspend fun getTime(timezone: String): Long } The first step is to define a Worker that can call this service, and maybe an extension function on your service class: fun TimeService.getTimeWorker(timezone: String): Worker = TimeWorker(timezone, this) private class TimeWorker( val timezone: String, val service: TimeService ): Worker { override fun run(): Flow = flow { val time = service.getTime(timezone) emit(time) } } You also need to define how to determine if a previous Worker is already doing the same work. This will ensure that if the same request is made by the same Workflow in adjacent render passes, we\u2019ll keep the request alive from the first pass. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is TimeWorker && timezone == otherWorker.timezone Now you can request the time from your Workflow : class MyWorkflow(private val timeWorker: TimeWorker) { override fun render(\u2026): Foo { context.onWorkerOutput(timeWorker) { time -> emitOutput(\u201cThe time is $time\u201d) } } Alternatively, if the response is a unique type, unlikely to be shared by any other workers, you don\u2019t even need to create your own Worker class, you can use a builder, and the worker will automatically be distinguished by that response type: interface TimeService { fun getTime(timezone: String): Deferred } fun TimeService.getTimeWorker(timezone: String): Worker = Worker.from { getTime(timezone).await()) } See also \u00b6 jvm com.squareup.workflow1.Worker.Companion Deferred.asWorker BroadcastChannel.asWorker Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary doesSameWorkAs [jvm] Content open fun doesSameWorkAs (otherWorker: Worker <*>): Boolean More info Override this method to define equivalence between Worker s. run [jvm] Content abstract fun run (): Flow< OutputT > More info Returns a Flow to execute the work represented by this worker. Inheritors \u00b6 Name LifecycleWorker PublisherWorker WorkerSink Extensions \u00b6 Name Summary test [jvm] Content fun < T > Worker < T >. test (timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester < T >.() -> Unit ) More info Test a Worker by defining assertions on its output within block . transform [jvm] Content fun < T , R > Worker < T >. transform (transform: (Flow< T >) -> Flow< R >): Worker < R > More info Returns a Worker that transforms this Worker \u2018s Flow by calling transform .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#worker","text":"[jvm] interface Worker OutputT > Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workers allow you to execute arbitrary, possibly asynchronous tasks in a declarative manner. To perform their tasks, workers return a Flow. Workers are effectively Flows that can be compared to determine equivalence between render passes. A Workflow uses Workers to perform asynchronous work during the render pass by calling RenderContext.runningWorker. See the documentation on run for more information on the returned Flow is consumed and how to implement asynchronous work. See the documentation on doesSameWorkAs for more details on how and when workers are compared and the worker lifecycle.","title":"Worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#example-network-request","text":"Let\u2019s say you have a network service with an API that returns a number, and you want to call that service from a Workflow . interface TimeService { suspend fun getTime(timezone: String): Long } The first step is to define a Worker that can call this service, and maybe an extension function on your service class: fun TimeService.getTimeWorker(timezone: String): Worker = TimeWorker(timezone, this) private class TimeWorker( val timezone: String, val service: TimeService ): Worker { override fun run(): Flow = flow { val time = service.getTime(timezone) emit(time) } } You also need to define how to determine if a previous Worker is already doing the same work. This will ensure that if the same request is made by the same Workflow in adjacent render passes, we\u2019ll keep the request alive from the first pass. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is TimeWorker && timezone == otherWorker.timezone Now you can request the time from your Workflow : class MyWorkflow(private val timeWorker: TimeWorker) { override fun render(\u2026): Foo { context.onWorkerOutput(timeWorker) { time -> emitOutput(\u201cThe time is $time\u201d) } } Alternatively, if the response is a unique type, unlikely to be shared by any other workers, you don\u2019t even need to create your own Worker class, you can use a builder, and the worker will automatically be distinguished by that response type: interface TimeService { fun getTime(timezone: String): Deferred } fun TimeService.getTimeWorker(timezone: String): Worker = Worker.from { getTime(timezone).await()) }","title":"Example: Network request"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#see-also","text":"jvm com.squareup.workflow1.Worker.Companion Deferred.asWorker BroadcastChannel.asWorker","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#functions","text":"Name Summary doesSameWorkAs [jvm] Content open fun doesSameWorkAs (otherWorker: Worker <*>): Boolean More info Override this method to define equivalence between Worker s. run [jvm] Content abstract fun run (): Flow< OutputT > More info Returns a Flow to execute the work represented by this worker.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#inheritors","text":"Name LifecycleWorker PublisherWorker WorkerSink","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#extensions","text":"Name Summary test [jvm] Content fun < T > Worker < T >. test (timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester < T >.() -> Unit ) More info Test a Worker by defining assertions on its output within block . transform [jvm] Content fun < T , R > Worker < T >. transform (transform: (Flow< T >) -> Flow< R >): Worker < R > More info Returns a Worker that transforms this Worker \u2018s Flow by calling transform .","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/does-same-work-as/","text":"// workflow / com.squareup.workflow1 / Worker / doesSameWorkAs doesSameWorkAs \u00b6 [jvm] Content open fun doesSameWorkAs (otherWorker: Worker <*>): Boolean More info Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Workers are compared by their declared type. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Workers for which doesSameWorkAs returns false will also be restarted. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data. Most implementations of this method should compare constructor parameters. E.g: class SearchWorker(private val query: String): Worker { // run omitted for example. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is SearchWorker && otherWorker.query == query }","title":"Does same work as"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/does-same-work-as/#doessameworkas","text":"[jvm] Content open fun doesSameWorkAs (otherWorker: Worker <*>): Boolean More info Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Workers are compared by their declared type. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Workers for which doesSameWorkAs returns false will also be restarted. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data. Most implementations of this method should compare constructor parameters. E.g: class SearchWorker(private val query: String): Worker { // run omitted for example. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is SearchWorker && otherWorker.query == query }","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/run/","text":"// workflow / com.squareup.workflow1 / Worker / run run \u00b6 [jvm] Content abstract fun run (): Flow< OutputT > More info Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker ). Coroutine Context \u00b6 When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don't care which thread they're executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString) and the key specified by the workflow running the worker. Exceptions \u00b6 If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Run"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/run/#run","text":"[jvm] Content abstract fun run (): Flow< OutputT > More info Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker ).","title":"run"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/run/#coroutine-context","text":"When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don't care which thread they're executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString) and the key specified by the workflow running the worker.","title":"Coroutine Context"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/run/#exceptions","text":"If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/","text":"// workflow / com.squareup.workflow1 / Worker / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary create [jvm] Content inline fun < OutputT > create (noinline block: suspend FlowCollector< OutputT >.() -> Unit ): Worker < OutputT > More info Shorthand for flow { block() }.asWorker(). createSideEffect [jvm] Content fun createSideEffect (block: suspend () -> Unit ): Worker < Nothing > More info Creates a Worker that just performs some side effects and doesn\u2019t emit anything. finished [jvm] Content fun < T > finished (): Worker < T > More info Returns a Worker that finishes immediately without emitting anything. from [jvm] Content inline fun < OutputT > from (noinline block: suspend () -> OutputT ): Worker < OutputT > More info Creates a Worker from a function that returns a single value. fromNullable [jvm] Content inline fun < OutputT > fromNullable (noinline block: suspend () -> OutputT ?): Worker < OutputT > More info Creates a Worker from a function that returns a single value. timer [jvm] Content fun timer (delayMs: Long , key: String = \u201c\u201d): Worker < Unit > More info Creates a Worker that will emit Unit and then finish after delayMs milliseconds.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/#functions","text":"Name Summary create [jvm] Content inline fun < OutputT > create (noinline block: suspend FlowCollector< OutputT >.() -> Unit ): Worker < OutputT > More info Shorthand for flow { block() }.asWorker(). createSideEffect [jvm] Content fun createSideEffect (block: suspend () -> Unit ): Worker < Nothing > More info Creates a Worker that just performs some side effects and doesn\u2019t emit anything. finished [jvm] Content fun < T > finished (): Worker < T > More info Returns a Worker that finishes immediately without emitting anything. from [jvm] Content inline fun < OutputT > from (noinline block: suspend () -> OutputT ): Worker < OutputT > More info Creates a Worker from a function that returns a single value. fromNullable [jvm] Content inline fun < OutputT > fromNullable (noinline block: suspend () -> OutputT ?): Worker < OutputT > More info Creates a Worker from a function that returns a single value. timer [jvm] Content fun timer (delayMs: Long , key: String = \u201c\u201d): Worker < Unit > More info Creates a Worker that will emit Unit and then finish after delayMs milliseconds.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/create-side-effect/","text":"// workflow / com.squareup.workflow1 / Worker / Companion / createSideEffect createSideEffect \u00b6 [jvm] Content fun createSideEffect (block: suspend () -> Unit ): Worker < Nothing > More info Creates a Worker that just performs some side effects and doesn\u2019t emit anything. Run the worker from your render method using RenderContext.runningWorker. E.g.: fun logOnEntered(message: String) = Worker.createSideEffect() { println(\u201cEntered state: $message\u201d) } Note that all workers created with this method are equivalent from the point of view of their [Worker.doesSameWorkAs] methods. A workflow that needs multiple simultaneous side effects can either bundle them all together into a single createSideEffect call, or can use the key parameter to [RenderContext.runningWorker] to prevent conflicts.","title":"Create side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/create-side-effect/#createsideeffect","text":"[jvm] Content fun createSideEffect (block: suspend () -> Unit ): Worker < Nothing > More info Creates a Worker that just performs some side effects and doesn\u2019t emit anything. Run the worker from your render method using RenderContext.runningWorker. E.g.: fun logOnEntered(message: String) = Worker.createSideEffect() { println(\u201cEntered state: $message\u201d) } Note that all workers created with this method are equivalent from the point of view of their [Worker.doesSameWorkAs] methods. A workflow that needs multiple simultaneous side effects can either bundle them all together into a single createSideEffect call, or can use the key parameter to [RenderContext.runningWorker] to prevent conflicts.","title":"createSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/create/","text":"// workflow / com.squareup.workflow1 / Worker / Companion / create create \u00b6 [jvm] Content inline fun < OutputT > create (noinline block: suspend FlowCollector< OutputT >.() -> Unit ): Worker < OutputT > More info Shorthand for flow { block() }.asWorker(). Note: If your worker just needs to perform side effects and doesn\u2019t need to emit anything, use createSideEffect instead (since Nothing can\u2019t be used as a reified type parameter).","title":"Create"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/create/#create","text":"[jvm] Content inline fun < OutputT > create (noinline block: suspend FlowCollector< OutputT >.() -> Unit ): Worker < OutputT > More info Shorthand for flow { block() }.asWorker(). Note: If your worker just needs to perform side effects and doesn\u2019t need to emit anything, use createSideEffect instead (since Nothing can\u2019t be used as a reified type parameter).","title":"create"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/finished/","text":"// workflow / com.squareup.workflow1 / Worker / Companion / finished finished \u00b6 [jvm] Content fun < T > finished (): Worker < T > More info Returns a Worker that finishes immediately without emitting anything.","title":"Finished"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/finished/#finished","text":"[jvm] Content fun < T > finished (): Worker < T > More info Returns a Worker that finishes immediately without emitting anything.","title":"finished"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/from-nullable/","text":"// workflow / com.squareup.workflow1 / Worker / Companion / fromNullable fromNullable \u00b6 [jvm] Content inline fun < OutputT > fromNullable (noinline block: suspend () -> OutputT ?): Worker < OutputT > More info Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"From nullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/from-nullable/#fromnullable","text":"[jvm] Content inline fun < OutputT > fromNullable (noinline block: suspend () -> OutputT ?): Worker < OutputT > More info Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"fromNullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/from/","text":"// workflow / com.squareup.workflow1 / Worker / Companion / from from \u00b6 [jvm] Content inline fun < OutputT > from (noinline block: suspend () -> OutputT ): Worker < OutputT > More info Creates a Worker from a function that returns a single value. Shorthand for flow { emit(block()) }.asWorker(). The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"From"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/from/#from","text":"[jvm] Content inline fun < OutputT > from (noinline block: suspend () -> OutputT ): Worker < OutputT > More info Creates a Worker from a function that returns a single value. Shorthand for flow { emit(block()) }.asWorker(). The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"from"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/timer/","text":"// workflow / com.squareup.workflow1 / Worker / Companion / timer timer \u00b6 [jvm] Content fun timer (delayMs: Long , key: String = \u201c\u201d): Worker < Unit > More info Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Workers returned by this function will be compared by key .","title":"Timer"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/-companion/timer/#timer","text":"[jvm] Content fun timer (delayMs: Long , key: String = \u201c\u201d): Worker < Unit > More info Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Workers returned by this function will be compared by key .","title":"timer"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/","text":"// workflow / com.squareup.workflow1 / Workflow Workflow \u00b6 [jvm] interface Workflow PropsT , out OutputT , out RenderingT > A composable, optionally-stateful object that can RenderContext.onEvent, RenderContext.renderChild, RenderContext.onWorkerOutput to arbitrary asynchronous events from the outside world. The basic purpose of a Workflow is to take some input (in the form of PropsT ) and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its RenderContext.onEvent and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow. Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagates down the tree, outputs and renderings propagate up the tree. Implementing Workflow \u00b6 The Workflow interface is useful as a facade for your API. You can publish an interface that extends Workflow, and keep the implementation (e.g. is your workflow state*ful* or state*less* a private implementation detail. You should almost never implement Workflow directly, however. There are two abstract classes that you should subclass instead: StatefulWorkflow and StatelessWorkflow . The differences between them are described below, but both type have a render method that you implement to generate renderings from your props and interact with the runtime (e.g. by changing state or emitting outputs). Stateful Workflows \u00b6 If your workflow needs to keep track of internal state, subclass StatefulWorkflow . It has an additional type parameter, StateT, requires you to specify how to create the initial state and how to snapshot /restore your state, and passes the current state to the StatefulWorkflow.render method. Stateless Workflows \u00b6 If your workflow does not have any state of its own and simply needs to delegate to other workflows (e.g. transforming props, outputs, or renderings), subclass StatelessWorkflow and implement its sole StatelessWorkflow.render method, or just pass a lambda to the stateless function. Interacting with events and other workflows \u00b6 All workflows are passed a RenderContext in their render methods. This context allows the workflow to interact with the outside world by doing things like listening for events, subscribing to streams of data, rendering child workflows, and performing cleanup when the workflow is about to be torn down by its parent. See the documentation on RenderContext for more information about what it can do. Things to avoid \u00b6 Mutable instance state \u00b6 Classes that implement Workflow should not contain mutable properties. Such properties are instance-specific state and can introduce buggy behavior. Instead, subclass StatefulWorkflow and move all your state to the workflow\u2019s StateT type. For example, setting a property will not cause your workflow to be re-rendered \u2013 the runtime has no way of knowing that some data it doesn\u2019t know about has changed. It can also break consumers of your workflows, who may be expecting to be able to re-use the same instance of your workflow type in different places in the workflow tree \u2013 this works if all the workflow\u2019s state is contained in its StateT, but not if the instance has its own properties. (Note that storing dependencies, which are effectively static relative to the workflow instance, in properties is fine.) Render side effects \u00b6 Workflows\u2019 render methods must not perform side effects or read mutable state. They can contain logic, but the logic must be based on the PropsT , the StateT if present, and the renderings from other workflows. They must declare what work to perform (via Worker s), and what data to render (via RenderingT s and child workflows). For this reason, programming with workflows can be considered declarative-style programming. See also \u00b6 jvm com.squareup.workflow1.StatefulWorkflow com.squareup.workflow1.StatelessWorkflow Parameters \u00b6 jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. Types \u00b6 Name Summary Companion [jvm] Content object Companion More info Empty companion serves as a hook point to allow us to create Workflow.foo extension methods elsewhere. Functions \u00b6 Name Summary asStatefulWorkflow [jvm] Content abstract fun asStatefulWorkflow (): StatefulWorkflow < PropsT , *, OutputT , RenderingT > More info Provides a StatefulWorkflow view of this workflow. Inheritors \u00b6 Name StatefulWorkflow StatelessWorkflow Extensions \u00b6 Name Summary identifier [jvm] Content @ ExperimentalWorkflowApi () val Workflow <*, *, *>. identifier : WorkflowIdentifier More info The WorkflowIdentifier that identifies this Workflow . launchForTestingFromStartWith [jvm] Content @TestOnly() fun < T , PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. launchForTestingFromStartWith (props: PropsT , testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < T , OutputT , RenderingT > Workflow < Unit , OutputT , RenderingT >. launchForTestingFromStartWith (testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. mapRendering [jvm] Content fun < PropsT , OutputT , FromRenderingT , ToRenderingT > Workflow < PropsT , OutputT , FromRenderingT >. mapRendering (transform: ( FromRenderingT ) -> ToRenderingT ): Workflow < PropsT , OutputT , ToRenderingT > More info Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , testRender [jvm] Content fun < PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. testRender (props: PropsT ): RenderTester < PropsT , *, OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#workflow","text":"[jvm] interface Workflow PropsT , out OutputT , out RenderingT > A composable, optionally-stateful object that can RenderContext.onEvent, RenderContext.renderChild, RenderContext.onWorkerOutput to arbitrary asynchronous events from the outside world. The basic purpose of a Workflow is to take some input (in the form of PropsT ) and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its RenderContext.onEvent and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow. Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagates down the tree, outputs and renderings propagate up the tree.","title":"Workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#implementing-workflow","text":"The Workflow interface is useful as a facade for your API. You can publish an interface that extends Workflow, and keep the implementation (e.g. is your workflow state*ful* or state*less* a private implementation detail. You should almost never implement Workflow directly, however. There are two abstract classes that you should subclass instead: StatefulWorkflow and StatelessWorkflow . The differences between them are described below, but both type have a render method that you implement to generate renderings from your props and interact with the runtime (e.g. by changing state or emitting outputs).","title":"Implementing Workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#stateful-workflows","text":"If your workflow needs to keep track of internal state, subclass StatefulWorkflow . It has an additional type parameter, StateT, requires you to specify how to create the initial state and how to snapshot /restore your state, and passes the current state to the StatefulWorkflow.render method.","title":"Stateful Workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#stateless-workflows","text":"If your workflow does not have any state of its own and simply needs to delegate to other workflows (e.g. transforming props, outputs, or renderings), subclass StatelessWorkflow and implement its sole StatelessWorkflow.render method, or just pass a lambda to the stateless function.","title":"Stateless Workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#interacting-with-events-and-other-workflows","text":"All workflows are passed a RenderContext in their render methods. This context allows the workflow to interact with the outside world by doing things like listening for events, subscribing to streams of data, rendering child workflows, and performing cleanup when the workflow is about to be torn down by its parent. See the documentation on RenderContext for more information about what it can do.","title":"Interacting with events and other workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#things-to-avoid","text":"","title":"Things to avoid"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#mutable-instance-state","text":"Classes that implement Workflow should not contain mutable properties. Such properties are instance-specific state and can introduce buggy behavior. Instead, subclass StatefulWorkflow and move all your state to the workflow\u2019s StateT type. For example, setting a property will not cause your workflow to be re-rendered \u2013 the runtime has no way of knowing that some data it doesn\u2019t know about has changed. It can also break consumers of your workflows, who may be expecting to be able to re-use the same instance of your workflow type in different places in the workflow tree \u2013 this works if all the workflow\u2019s state is contained in its StateT, but not if the instance has its own properties. (Note that storing dependencies, which are effectively static relative to the workflow instance, in properties is fine.)","title":"Mutable instance state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#render-side-effects","text":"Workflows\u2019 render methods must not perform side effects or read mutable state. They can contain logic, but the logic must be based on the PropsT , the StateT if present, and the renderings from other workflows. They must declare what work to perform (via Worker s), and what data to render (via RenderingT s and child workflows). For this reason, programming with workflows can be considered declarative-style programming.","title":"Render side effects"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#see-also","text":"jvm com.squareup.workflow1.StatefulWorkflow com.squareup.workflow1.StatelessWorkflow","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#parameters","text":"jvm PropsT Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#types","text":"Name Summary Companion [jvm] Content object Companion More info Empty companion serves as a hook point to allow us to create Workflow.foo extension methods elsewhere.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#functions","text":"Name Summary asStatefulWorkflow [jvm] Content abstract fun asStatefulWorkflow (): StatefulWorkflow < PropsT , *, OutputT , RenderingT > More info Provides a StatefulWorkflow view of this workflow.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#inheritors","text":"Name StatefulWorkflow StatelessWorkflow","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#extensions","text":"Name Summary identifier [jvm] Content @ ExperimentalWorkflowApi () val Workflow <*, *, *>. identifier : WorkflowIdentifier More info The WorkflowIdentifier that identifies this Workflow . launchForTestingFromStartWith [jvm] Content @TestOnly() fun < T , PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. launchForTestingFromStartWith (props: PropsT , testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < T , OutputT , RenderingT > Workflow < Unit , OutputT , RenderingT >. launchForTestingFromStartWith (testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. mapRendering [jvm] Content fun < PropsT , OutputT , FromRenderingT , ToRenderingT > Workflow < PropsT , OutputT , FromRenderingT >. mapRendering (transform: ( FromRenderingT ) -> ToRenderingT ): Workflow < PropsT , OutputT , ToRenderingT > More info Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , testRender [jvm] Content fun < PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. testRender (props: PropsT ): RenderTester < PropsT , *, OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state .","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/as-stateful-workflow/","text":"// workflow / com.squareup.workflow1 / Workflow / asStatefulWorkflow asStatefulWorkflow \u00b6 [jvm] Content abstract fun asStatefulWorkflow (): StatefulWorkflow < PropsT , *, OutputT , RenderingT > More info Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"As stateful workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/as-stateful-workflow/#asstatefulworkflow","text":"[jvm] Content abstract fun asStatefulWorkflow (): StatefulWorkflow < PropsT , *, OutputT , RenderingT > More info Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/-companion/","text":"// workflow / com.squareup.workflow1 / Workflow / Companion Companion \u00b6 [jvm] object Companion Empty companion serves as a hook point to allow us to create Workflow.foo extension methods elsewhere. Extensions \u00b6 Name Summary rendering [jvm] Content fun < RenderingT > Workflow.Companion . rendering (rendering: RenderingT ): Workflow < Unit , Nothing , RenderingT > More info Returns a workflow that does nothing but echo the given rendering . stateful [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT , Snapshot ?) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?, crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT ) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Returns a stateful Workflow implemented via the given functions. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( Snapshot ?) -> StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given functions. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (initialState: StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT ): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given function. stateless [jvm] Content inline fun < PropsT , OutputT , RenderingT > Workflow.Companion . stateless (crossinline render: BaseRenderContext < PropsT , Nothing , OutputT >.( PropsT ) -> RenderingT ): Workflow < PropsT , OutputT , RenderingT > More info Returns a stateless Workflow via the given render function.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/-companion/#companion","text":"[jvm] object Companion Empty companion serves as a hook point to allow us to create Workflow.foo extension methods elsewhere.","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/-companion/#extensions","text":"Name Summary rendering [jvm] Content fun < RenderingT > Workflow.Companion . rendering (rendering: RenderingT ): Workflow < Unit , Nothing , RenderingT > More info Returns a workflow that does nothing but echo the given rendering . stateful [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT , Snapshot ?) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?, crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > inline fun < PropsT , StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( PropsT ) -> StateT , crossinline render: BaseRenderContext < PropsT , StateT , OutputT >.( PropsT , StateT ) -> RenderingT , crossinline onPropsChanged: ( PropsT , PropsT , StateT ) -> StateT = { _, _, state -> state }): StatefulWorkflow < PropsT , StateT , OutputT , RenderingT > More info Returns a stateful Workflow implemented via the given functions. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (crossinline initialState: ( Snapshot ?) -> StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT , crossinline snapshot: ( StateT ) -> Snapshot ?): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given functions. [jvm] Content inline fun < StateT , OutputT , RenderingT > Workflow.Companion . stateful (initialState: StateT , crossinline render: BaseRenderContext < Unit , StateT , OutputT >.( StateT ) -> RenderingT ): StatefulWorkflow < Unit , StateT , OutputT , RenderingT > More info Returns a stateful Workflow , with no props, implemented via the given function. stateless [jvm] Content inline fun < PropsT , OutputT , RenderingT > Workflow.Companion . stateless (crossinline render: BaseRenderContext < PropsT , Nothing , OutputT >.( PropsT ) -> RenderingT ): Workflow < PropsT , OutputT , RenderingT > More info Returns a stateless Workflow via the given render function.","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/","text":"// workflow / com.squareup.workflow1 / WorkflowAction WorkflowAction \u00b6 [jvm] abstract class WorkflowAction PropsT , StateT , out OutputT > An atomic operation that updates the state of a Workflow , and also optionally emits an output. Constructors \u00b6 WorkflowAction [jvm] fun WorkflowAction () Types \u00b6 Name Summary Companion [jvm] Content object Companion Updater [jvm] Content inner class Updater ( props : @ UnsafeVariance () PropsT , state : StateT ) More info The context for calls to WorkflowAction.apply . Functions \u00b6 Name Summary apply [jvm] Content abstract fun WorkflowAction.Updater < PropsT , StateT , OutputT >. apply () More info Executes the logic for this action, including any side effects, updating state , and setting the OutputT to emit. Extensions \u00b6 Name Summary applyTo [jvm] Content @ ExperimentalWorkflowApi () fun < PropsT , StateT , OutputT > WorkflowAction < PropsT , StateT , OutputT >. applyTo (props: PropsT , state: StateT ): Pair < StateT , WorkflowOutput < OutputT >?> More info Applies this WorkflowAction to state .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#workflowaction","text":"[jvm] abstract class WorkflowAction PropsT , StateT , out OutputT > An atomic operation that updates the state of a Workflow , and also optionally emits an output.","title":"WorkflowAction"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#constructors","text":"WorkflowAction [jvm] fun WorkflowAction ()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#types","text":"Name Summary Companion [jvm] Content object Companion Updater [jvm] Content inner class Updater ( props : @ UnsafeVariance () PropsT , state : StateT ) More info The context for calls to WorkflowAction.apply .","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#functions","text":"Name Summary apply [jvm] Content abstract fun WorkflowAction.Updater < PropsT , StateT , OutputT >. apply () More info Executes the logic for this action, including any side effects, updating state , and setting the OutputT to emit.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#extensions","text":"Name Summary applyTo [jvm] Content @ ExperimentalWorkflowApi () fun < PropsT , StateT , OutputT > WorkflowAction < PropsT , StateT , OutputT >. applyTo (props: PropsT , state: StateT ): Pair < StateT , WorkflowOutput < OutputT >?> More info Applies this WorkflowAction to state .","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-workflow-action/","text":"// workflow / com.squareup.workflow1 / WorkflowAction / WorkflowAction WorkflowAction \u00b6 [jvm] Content fun WorkflowAction ()","title":" workflow action"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-workflow-action/#workflowaction","text":"[jvm] Content fun WorkflowAction ()","title":"WorkflowAction"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/apply/","text":"// workflow / com.squareup.workflow1 / WorkflowAction / apply apply \u00b6 [jvm] Content abstract fun WorkflowAction.Updater < PropsT , StateT , OutputT >. apply () More info Executes the logic for this action, including any side effects, updating state , and setting the OutputT to emit.","title":"Apply"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/apply/#apply","text":"[jvm] Content abstract fun WorkflowAction.Updater < PropsT , StateT , OutputT >. apply () More info Executes the logic for this action, including any side effects, updating state , and setting the OutputT to emit.","title":"apply"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-companion/","text":"// workflow / com.squareup.workflow1 / WorkflowAction / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary noAction [jvm] Content fun < PropsT , StateT , OutputT > noAction (): WorkflowAction < PropsT , StateT , OutputT > More info Returns a WorkflowAction that does nothing: no output will be emitted, and the state will not change.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-companion/#functions","text":"Name Summary noAction [jvm] Content fun < PropsT , StateT , OutputT > noAction (): WorkflowAction < PropsT , StateT , OutputT > More info Returns a WorkflowAction that does nothing: no output will be emitted, and the state will not change.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-companion/no-action/","text":"// workflow / com.squareup.workflow1 / WorkflowAction / Companion / noAction noAction \u00b6 [jvm] Content fun < PropsT , StateT , OutputT > noAction (): WorkflowAction < PropsT , StateT , OutputT > More info Returns a WorkflowAction that does nothing: no output will be emitted, and the state will not change. Use this to, for example, ignore the output of a child workflow or worker.","title":"No action"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-companion/no-action/#noaction","text":"[jvm] Content fun < PropsT , StateT , OutputT > noAction (): WorkflowAction < PropsT , StateT , OutputT > More info Returns a WorkflowAction that does nothing: no output will be emitted, and the state will not change. Use this to, for example, ignore the output of a child workflow or worker.","title":"noAction"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/","text":"// workflow / com.squareup.workflow1 / WorkflowAction / Updater Updater \u00b6 [jvm] inner class Updater ( props : @ UnsafeVariance () PropsT , state : StateT ) The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput . Parameters \u00b6 jvm state the state that the workflow should move to. Default is the current state. Constructors \u00b6 Updater [jvm] fun Updater (props: @ UnsafeVariance () PropsT , state: StateT )the state that the workflow should move to. Functions \u00b6 Name Summary setOutput [jvm] Content fun setOutput (output: @ UnsafeVariance () OutputT ) More info Sets the value the workflow will emit as output when this action is applied. Properties \u00b6 Name Summary props [jvm] val props : @ UnsafeVariance () PropsT state [jvm] var state : StateT the state that the workflow should move to.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#updater","text":"[jvm] inner class Updater ( props : @ UnsafeVariance () PropsT , state : StateT ) The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput .","title":"Updater"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#parameters","text":"jvm state the state that the workflow should move to. Default is the current state.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#constructors","text":"Updater [jvm] fun Updater (props: @ UnsafeVariance () PropsT , state: StateT )the state that the workflow should move to.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#functions","text":"Name Summary setOutput [jvm] Content fun setOutput (output: @ UnsafeVariance () OutputT ) More info Sets the value the workflow will emit as output when this action is applied.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#properties","text":"Name Summary props [jvm] val props : @ UnsafeVariance () PropsT state [jvm] var state : StateT the state that the workflow should move to.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/-updater/","text":"// workflow / com.squareup.workflow1 / WorkflowAction / Updater / Updater Updater \u00b6 [jvm] Content fun Updater (props: @ UnsafeVariance () PropsT , state: StateT ) More info Parameters \u00b6 jvm state the state that the workflow should move to. Default is the current state.","title":" updater"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/-updater/#updater","text":"[jvm] Content fun Updater (props: @ UnsafeVariance () PropsT , state: StateT ) More info","title":"Updater"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/-updater/#parameters","text":"jvm state the state that the workflow should move to. Default is the current state.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/props/","text":"// workflow / com.squareup.workflow1 / WorkflowAction / Updater / props props \u00b6 [jvm] Content val props : @ UnsafeVariance () PropsT","title":"Props"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/props/#props","text":"[jvm] Content val props : @ UnsafeVariance () PropsT","title":"props"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/set-output/","text":"// workflow / com.squareup.workflow1 / WorkflowAction / Updater / setOutput setOutput \u00b6 [jvm] Content fun setOutput (output: @ UnsafeVariance () OutputT ) More info Sets the value the workflow will emit as output when this action is applied. If this method is not called, there will be no output.","title":"Set output"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/set-output/#setoutput","text":"[jvm] Content fun setOutput (output: @ UnsafeVariance () OutputT ) More info Sets the value the workflow will emit as output when this action is applied. If this method is not called, there will be no output.","title":"setOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/state/","text":"// workflow / com.squareup.workflow1 / WorkflowAction / Updater / state state \u00b6 [jvm] Content var state : StateT More info Parameters \u00b6 jvm state the state that the workflow should move to. Default is the current state.","title":"State"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/state/#state","text":"[jvm] Content var state : StateT More info","title":"state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/state/#parameters","text":"jvm state the state that the workflow should move to. Default is the current state.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/","text":"// workflow / com.squareup.workflow1 / WorkflowIdentifier WorkflowIdentifier \u00b6 [jvm] @ ExperimentalWorkflowApi () class WorkflowIdentifier Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. A workflow\u2019s identity consists primarily of its concrete type (i.e. the class that implements the Workflow interface). Two workflows of the same concrete type are considered identical. However, if a workflow class implements ImpostorWorkflow , the identifier will also include that workflow\u2019s ImpostorWorkflow.realIdentifier . Instances of this class are equatable and hashable . Identifiers and snapshots \u00b6 Since workflows can be serialized , workflows\u2019 identifiers must also be serializable in order to match workflows back up with their snapshots when restoring. However, some WorkflowIdentifier s may represent workflows that cannot be snapshotted. When an identifier is not snapshottable, toByteStringOrNull will return null, and any identifiers that reference ImpostorWorkflow s whose ImpostorWorkflow.realIdentifier is not snapshottable will also not be snapshottable. Such identifiers are created with unsnapshottableIdentifier , but should not be used to wrap arbitrary workflows since those workflows may expect to be snapshotted. Parameters \u00b6 jvm type The KClass of the Workflow this identifier identifies, or the KType of an unsnapshottableIdentifier . proxiedIdentifier An optional identifier from ImpostorWorkflow.realIdentifier that will be used to further narrow the scope of this identifier. description Implementation of describeRealIdentifier. Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getRealIdentifierType [jvm] Content @TestOnly() fun getRealIdentifierType (): KAnnotatedElement More info Returns either a KClass or KType representing the \u201creal\u201d type that this identifier identifies \u2013 i.e. hashCode [jvm] Content open override fun hashCode (): Int toByteStringOrNull [jvm] Content fun toByteStringOrNull (): ByteString? More info If this identifier is snapshottable, returns the serialized form of the identifier. toString [jvm] Content open override fun toString (): String More info If this identifier identifies an ImpostorWorkflow , returns the result of that workflow\u2019s ImpostorWorkflow.describeRealIdentifier method, otherwise returns a description of this identifier including the name of its workflow type and any ImpostorWorkflow.realIdentifier s.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/#workflowidentifier","text":"[jvm] @ ExperimentalWorkflowApi () class WorkflowIdentifier Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. A workflow\u2019s identity consists primarily of its concrete type (i.e. the class that implements the Workflow interface). Two workflows of the same concrete type are considered identical. However, if a workflow class implements ImpostorWorkflow , the identifier will also include that workflow\u2019s ImpostorWorkflow.realIdentifier . Instances of this class are equatable and hashable .","title":"WorkflowIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/#identifiers-and-snapshots","text":"Since workflows can be serialized , workflows\u2019 identifiers must also be serializable in order to match workflows back up with their snapshots when restoring. However, some WorkflowIdentifier s may represent workflows that cannot be snapshotted. When an identifier is not snapshottable, toByteStringOrNull will return null, and any identifiers that reference ImpostorWorkflow s whose ImpostorWorkflow.realIdentifier is not snapshottable will also not be snapshottable. Such identifiers are created with unsnapshottableIdentifier , but should not be used to wrap arbitrary workflows since those workflows may expect to be snapshotted.","title":"Identifiers and snapshots"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/#parameters","text":"jvm type The KClass of the Workflow this identifier identifies, or the KType of an unsnapshottableIdentifier . proxiedIdentifier An optional identifier from ImpostorWorkflow.realIdentifier that will be used to further narrow the scope of this identifier. description Implementation of describeRealIdentifier.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getRealIdentifierType [jvm] Content @TestOnly() fun getRealIdentifierType (): KAnnotatedElement More info Returns either a KClass or KType representing the \u201creal\u201d type that this identifier identifies \u2013 i.e. hashCode [jvm] Content open override fun hashCode (): Int toByteStringOrNull [jvm] Content fun toByteStringOrNull (): ByteString? More info If this identifier is snapshottable, returns the serialized form of the identifier. toString [jvm] Content open override fun toString (): String More info If this identifier identifies an ImpostorWorkflow , returns the result of that workflow\u2019s ImpostorWorkflow.describeRealIdentifier method, otherwise returns a description of this identifier including the name of its workflow type and any ImpostorWorkflow.realIdentifier s.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/equals/","text":"// workflow / com.squareup.workflow1 / WorkflowIdentifier / equals equals \u00b6 [jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/equals/#equals","text":"[jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/get-real-identifier-type/","text":"// workflow / com.squareup.workflow1 / WorkflowIdentifier / getRealIdentifierType getRealIdentifierType \u00b6 [jvm] Content @TestOnly() fun getRealIdentifierType (): KAnnotatedElement More info Returns either a KClass or KType representing the \u201creal\u201d type that this identifier identifies \u2013 i.e. which is not an ImpostorWorkflow .","title":"Get real identifier type"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/get-real-identifier-type/#getrealidentifiertype","text":"[jvm] Content @TestOnly() fun getRealIdentifierType (): KAnnotatedElement More info Returns either a KClass or KType representing the \u201creal\u201d type that this identifier identifies \u2013 i.e. which is not an ImpostorWorkflow .","title":"getRealIdentifierType"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/hash-code/","text":"// workflow / com.squareup.workflow1 / WorkflowIdentifier / hashCode hashCode \u00b6 [jvm] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/hash-code/#hashcode","text":"[jvm] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/to-byte-string-or-null/","text":"// workflow / com.squareup.workflow1 / WorkflowIdentifier / toByteStringOrNull toByteStringOrNull \u00b6 [jvm] Content fun toByteStringOrNull (): ByteString? More info If this identifier is snapshottable, returns the serialized form of the identifier. If it is not snapshottable, returns null.","title":"To byte string or null"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/to-byte-string-or-null/#tobytestringornull","text":"[jvm] Content fun toByteStringOrNull (): ByteString? More info If this identifier is snapshottable, returns the serialized form of the identifier. If it is not snapshottable, returns null.","title":"toByteStringOrNull"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/to-string/","text":"// workflow / com.squareup.workflow1 / WorkflowIdentifier / toString toString \u00b6 [jvm] Content open override fun toString (): String More info If this identifier identifies an ImpostorWorkflow , returns the result of that workflow\u2019s ImpostorWorkflow.describeRealIdentifier method, otherwise returns a description of this identifier including the name of its workflow type and any ImpostorWorkflow.realIdentifier s.","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/to-string/#tostring","text":"[jvm] Content open override fun toString (): String More info If this identifier identifies an ImpostorWorkflow , returns the result of that workflow\u2019s ImpostorWorkflow.describeRealIdentifier method, otherwise returns a description of this identifier including the name of its workflow type and any ImpostorWorkflow.realIdentifier s.","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/-companion/","text":"// workflow / com.squareup.workflow1 / WorkflowIdentifier / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary parse [jvm] Content fun parse (bytes: ByteString): WorkflowIdentifier ? More info Reads a WorkflowIdentifier from a ByteString as written by toByteStringOrNull .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/-companion/#functions","text":"Name Summary parse [jvm] Content fun parse (bytes: ByteString): WorkflowIdentifier ? More info Reads a WorkflowIdentifier from a ByteString as written by toByteStringOrNull .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/-companion/parse/","text":"// workflow / com.squareup.workflow1 / WorkflowIdentifier / Companion / parse parse \u00b6 [jvm] Content fun parse (bytes: ByteString): WorkflowIdentifier ? More info Reads a WorkflowIdentifier from a ByteString as written by toByteStringOrNull . Throws \u00b6 kotlin.IllegalArgumentException if the source does not contain a valid WorkflowIdentifier java.lang.ClassNotFoundException if one of the workflow types can\u2019t be found in the class loader","title":"Parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/-companion/parse/#parse","text":"[jvm] Content fun parse (bytes: ByteString): WorkflowIdentifier ? More info Reads a WorkflowIdentifier from a ByteString as written by toByteStringOrNull .","title":"parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/-companion/parse/#throws","text":"kotlin.IllegalArgumentException if the source does not contain a valid WorkflowIdentifier java.lang.ClassNotFoundException if one of the workflow types can\u2019t be found in the class loader","title":"Throws"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor WorkflowInterceptor \u00b6 [jvm] @ ExperimentalWorkflowApi () interface WorkflowInterceptor Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. This interface\u2019s methods mirror the methods of StatefulWorkflow . It also has one additional method, onSessionStarted , that is notified when a workflow is started. Each method returns the same thing as the corresponding method on StatefulWorkflow , and receives the same parameters as well as two extra parameters: **proceed** \u2013 A function that *exactly* mirrors the corresponding function on [StatefulWorkflow](../-stateful-workflow/index.md), accepting the same parameters and returning the same thing. An interceptor can call this function to run the actual workflow, but it may also decide to not call it at all, or call it multiple times. **session** \u2013 A [WorkflowSession](-workflow-session/index.md) object that can be queried for information about the workflow being intercepted. All methods have default no-op implementations. Workflow sessions \u00b6 A single workflow may be rendered by different parents at the same time, or the same parent at different, disjoint times. Each continuous sequence of renderings of a particular workflow type, with the same key passed to BaseRenderContext.renderChild , is called an \u201csession\u201d of that workflow. The workflow\u2019s StatefulWorkflow.initialState method will be called at the start of the session, and its state will be maintained by the runtime until the session is finished. Each session is identified by the WorkflowSession object passed into the corresponding method in a WorkflowInterceptor . In addition to the WorkflowIdentifier of the type of the workflow being rendered, this object also knows the key used to render the workflow and the WorkflowSession of the parent workflow that is rendering it. Each session is also assigned a numerical ID that uniquely identifies the session over the life of the entire runtime. This value will remain constant as long as the workflow\u2019s parent is rendering it, and then it will never be used again. If this workflow stops being rendered, and then starts again, the value will be different. Types \u00b6 Name Summary RenderContextInterceptor [jvm] Content interface RenderContextInterceptor < P , S , O > More info Provides hooks for intercepting calls to a BaseRenderContext , to be used from onRender . WorkflowSession [jvm] Content @ ExperimentalWorkflowApi () interface WorkflowSession More info Information about the session of a workflow in the runtime that a WorkflowInterceptor method is intercepting. Functions \u00b6 Name Summary onInitialState [jvm] Content open fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState . onPropsChanged [jvm] Content open fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged . onRender [jvm] Content open fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render . onSessionStarted [jvm] Content open fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState . onSnapshotState [jvm] Content open fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState . Inheritors \u00b6 Name SimpleLoggingWorkflowInterceptor NoopWorkflowInterceptor RenderIdempotencyChecker TracingWorkflowInterceptor","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#workflowinterceptor","text":"[jvm] @ ExperimentalWorkflowApi () interface WorkflowInterceptor Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. This interface\u2019s methods mirror the methods of StatefulWorkflow . It also has one additional method, onSessionStarted , that is notified when a workflow is started. Each method returns the same thing as the corresponding method on StatefulWorkflow , and receives the same parameters as well as two extra parameters: **proceed** \u2013 A function that *exactly* mirrors the corresponding function on [StatefulWorkflow](../-stateful-workflow/index.md), accepting the same parameters and returning the same thing. An interceptor can call this function to run the actual workflow, but it may also decide to not call it at all, or call it multiple times. **session** \u2013 A [WorkflowSession](-workflow-session/index.md) object that can be queried for information about the workflow being intercepted. All methods have default no-op implementations.","title":"WorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#workflow-sessions","text":"A single workflow may be rendered by different parents at the same time, or the same parent at different, disjoint times. Each continuous sequence of renderings of a particular workflow type, with the same key passed to BaseRenderContext.renderChild , is called an \u201csession\u201d of that workflow. The workflow\u2019s StatefulWorkflow.initialState method will be called at the start of the session, and its state will be maintained by the runtime until the session is finished. Each session is identified by the WorkflowSession object passed into the corresponding method in a WorkflowInterceptor . In addition to the WorkflowIdentifier of the type of the workflow being rendered, this object also knows the key used to render the workflow and the WorkflowSession of the parent workflow that is rendering it. Each session is also assigned a numerical ID that uniquely identifies the session over the life of the entire runtime. This value will remain constant as long as the workflow\u2019s parent is rendering it, and then it will never be used again. If this workflow stops being rendered, and then starts again, the value will be different.","title":"Workflow sessions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#types","text":"Name Summary RenderContextInterceptor [jvm] Content interface RenderContextInterceptor < P , S , O > More info Provides hooks for intercepting calls to a BaseRenderContext , to be used from onRender . WorkflowSession [jvm] Content @ ExperimentalWorkflowApi () interface WorkflowSession More info Information about the session of a workflow in the runtime that a WorkflowInterceptor method is intercepting.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#functions","text":"Name Summary onInitialState [jvm] Content open fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState . onPropsChanged [jvm] Content open fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged . onRender [jvm] Content open fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render . onSessionStarted [jvm] Content open fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState . onSnapshotState [jvm] Content open fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#inheritors","text":"Name SimpleLoggingWorkflowInterceptor NoopWorkflowInterceptor RenderIdempotencyChecker TracingWorkflowInterceptor","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-initial-state/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / onInitialState onInitialState \u00b6 [jvm] Content open fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState .","title":"On initial state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-initial-state/#oninitialstate","text":"[jvm] Content open fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.initialState .","title":"onInitialState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-props-changed/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / onPropsChanged onPropsChanged \u00b6 [jvm] Content open fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"On props changed"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-props-changed/#onpropschanged","text":"[jvm] Content open fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S More info Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"onPropsChanged"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-render/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / onRender onRender \u00b6 [jvm] Content open fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render .","title":"On render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-render/#onrender","text":"[jvm] Content open fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R More info Intercepts calls to StatefulWorkflow.render .","title":"onRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-session-started/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / onSessionStarted onSessionStarted \u00b6 [jvm] Content open fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState . Parameters \u00b6 jvm workflowScope The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"On session started"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-session-started/#onsessionstarted","text":"[jvm] Content open fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) More info Called when the session is starting, before onInitialState .","title":"onSessionStarted"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-session-started/#parameters","text":"jvm workflowScope The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-snapshot-state/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / onSnapshotState onSnapshotState \u00b6 [jvm] Content open fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState .","title":"On snapshot state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-snapshot-state/#onsnapshotstate","text":"[jvm] Content open fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ? More info Intercepts calls to StatefulWorkflow.snapshotState .","title":"onSnapshotState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / RenderContextInterceptor RenderContextInterceptor \u00b6 [jvm] interface RenderContextInterceptor < P , S , O > Provides hooks for intercepting calls to a BaseRenderContext , to be used from onRender . For use by onRender methods that want to hook into action and side effect events. See documentation on methods for more information about the individual hooks: [RenderContextInterceptor.onActionSent](on-action-sent.md) [RenderContextInterceptor.onRunningSideEffect](on-running-side-effect.md) E.g.: override fun onRender( renderProps: P, renderState: S, proceed: (P, S, RenderContextInterceptor ) -> R, session: WorkflowSession ): R = proceed(renderProps, renderState, object : RenderContextInterceptor { override fun onActionSent( action: WorkflowAction , proceed: (WorkflowAction ) -> Unit ) { log(\u201cAction sent: $action\u201d) proceed(action) } override fun onRunningSideEffect( key: String, sideEffect: suspend () -> Unit, proceed: (key: String, sideEffect: suspend () -> Unit) -> Unit ) { proceed(key) { log(\u201cSide effect started: $key\u201d) sideEffect() log(\u201cSide effect ended: $key\u201d) } } }) Functions \u00b6 Name Summary onActionSent [jvm] Content open fun onActionSent (action: WorkflowAction < P , S , O >, proceed: ( WorkflowAction < P , S , O >) -> Unit ) More info Intercepts calls to send on the BaseRenderContext.actionSink . onRenderChild [jvm] Content open fun < CP , CO , CR > onRenderChild (child: Workflow < CP , CO , CR >, childProps: CP , key: String , handler: ( CO ) -> WorkflowAction < P , S , O >, proceed: (child: Workflow < CP , CO , CR >, CP , key: String , handler: ( CO ) -> WorkflowAction < P , S , O >) -> CR ): CR More info Intercepts calls to BaseRenderContext.renderChild , allowing the interceptor to wrap or replace the child Workflow, its childProps , key , and the handler function to be applied to the child\u2019s output. onRunningSideEffect [jvm] Content open fun onRunningSideEffect (key: String , sideEffect: suspend () -> Unit , proceed: (key: String , sideEffect: suspend () -> Unit ) -> Unit ) More info Intercepts calls to BaseRenderContext.runningSideEffect , allowing the interceptor to wrap or replace the sideEffect and its key .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/#rendercontextinterceptor","text":"[jvm] interface RenderContextInterceptor < P , S , O > Provides hooks for intercepting calls to a BaseRenderContext , to be used from onRender . For use by onRender methods that want to hook into action and side effect events. See documentation on methods for more information about the individual hooks: [RenderContextInterceptor.onActionSent](on-action-sent.md) [RenderContextInterceptor.onRunningSideEffect](on-running-side-effect.md) E.g.: override fun onRender( renderProps: P, renderState: S, proceed: (P, S, RenderContextInterceptor ) -> R, session: WorkflowSession ): R = proceed(renderProps, renderState, object : RenderContextInterceptor { override fun onActionSent( action: WorkflowAction , proceed: (WorkflowAction ) -> Unit ) { log(\u201cAction sent: $action\u201d) proceed(action) } override fun onRunningSideEffect( key: String, sideEffect: suspend () -> Unit, proceed: (key: String, sideEffect: suspend () -> Unit) -> Unit ) { proceed(key) { log(\u201cSide effect started: $key\u201d) sideEffect() log(\u201cSide effect ended: $key\u201d) } } })","title":"RenderContextInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/#functions","text":"Name Summary onActionSent [jvm] Content open fun onActionSent (action: WorkflowAction < P , S , O >, proceed: ( WorkflowAction < P , S , O >) -> Unit ) More info Intercepts calls to send on the BaseRenderContext.actionSink . onRenderChild [jvm] Content open fun < CP , CO , CR > onRenderChild (child: Workflow < CP , CO , CR >, childProps: CP , key: String , handler: ( CO ) -> WorkflowAction < P , S , O >, proceed: (child: Workflow < CP , CO , CR >, CP , key: String , handler: ( CO ) -> WorkflowAction < P , S , O >) -> CR ): CR More info Intercepts calls to BaseRenderContext.renderChild , allowing the interceptor to wrap or replace the child Workflow, its childProps , key , and the handler function to be applied to the child\u2019s output. onRunningSideEffect [jvm] Content open fun onRunningSideEffect (key: String , sideEffect: suspend () -> Unit , proceed: (key: String , sideEffect: suspend () -> Unit ) -> Unit ) More info Intercepts calls to BaseRenderContext.runningSideEffect , allowing the interceptor to wrap or replace the sideEffect and its key .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-action-sent/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / RenderContextInterceptor / onActionSent onActionSent \u00b6 [jvm] Content open fun onActionSent (action: WorkflowAction < P , S , O >, proceed: ( WorkflowAction < P , S , O >) -> Unit ) More info Intercepts calls to send on the BaseRenderContext.actionSink . This method will be called from inside the actual Sink.send stack frame, so any stack traces captured from it will include the code that is actually making the send call.","title":"On action sent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-action-sent/#onactionsent","text":"[jvm] Content open fun onActionSent (action: WorkflowAction < P , S , O >, proceed: ( WorkflowAction < P , S , O >) -> Unit ) More info Intercepts calls to send on the BaseRenderContext.actionSink . This method will be called from inside the actual Sink.send stack frame, so any stack traces captured from it will include the code that is actually making the send call.","title":"onActionSent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-render-child/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / RenderContextInterceptor / onRenderChild onRenderChild \u00b6 [jvm] Content open fun < CP , CO , CR > onRenderChild (child: Workflow < CP , CO , CR >, childProps: CP , key: String , handler: ( CO ) -> WorkflowAction < P , S , O >, proceed: (child: Workflow < CP , CO , CR >, CP , key: String , handler: ( CO ) -> WorkflowAction < P , S , O >) -> CR ): CR More info Intercepts calls to BaseRenderContext.renderChild , allowing the interceptor to wrap or replace the child Workflow, its childProps , key , and the handler function to be applied to the child\u2019s output.","title":"On render child"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-render-child/#onrenderchild","text":"[jvm] Content open fun < CP , CO , CR > onRenderChild (child: Workflow < CP , CO , CR >, childProps: CP , key: String , handler: ( CO ) -> WorkflowAction < P , S , O >, proceed: (child: Workflow < CP , CO , CR >, CP , key: String , handler: ( CO ) -> WorkflowAction < P , S , O >) -> CR ): CR More info Intercepts calls to BaseRenderContext.renderChild , allowing the interceptor to wrap or replace the child Workflow, its childProps , key , and the handler function to be applied to the child\u2019s output.","title":"onRenderChild"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-running-side-effect/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / RenderContextInterceptor / onRunningSideEffect onRunningSideEffect \u00b6 [jvm] Content open fun onRunningSideEffect (key: String , sideEffect: suspend () -> Unit , proceed: (key: String , sideEffect: suspend () -> Unit ) -> Unit ) More info Intercepts calls to BaseRenderContext.runningSideEffect , allowing the interceptor to wrap or replace the sideEffect and its key . This could be used to prevent a side effect from running, or to augment it with further effects. The sideEffect function will perform the actual suspending side effect, and only return when the side effect is complete \u2013 this may be far in the future. This means the interceptor can be notified when the side effect ends by simply running code after sideEffect returns or throws. The interceptor may run sideEffect in a different CoroutineContext , e.g to change its dispatcher or name, but should take care to use the original Job, or otherwise ensure that the structured concurrency contract is not broken.","title":"On running side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-running-side-effect/#onrunningsideeffect","text":"[jvm] Content open fun onRunningSideEffect (key: String , sideEffect: suspend () -> Unit , proceed: (key: String , sideEffect: suspend () -> Unit ) -> Unit ) More info Intercepts calls to BaseRenderContext.runningSideEffect , allowing the interceptor to wrap or replace the sideEffect and its key . This could be used to prevent a side effect from running, or to augment it with further effects. The sideEffect function will perform the actual suspending side effect, and only return when the side effect is complete \u2013 this may be far in the future. This means the interceptor can be notified when the side effect ends by simply running code after sideEffect returns or throws. The interceptor may run sideEffect in a different CoroutineContext , e.g to change its dispatcher or name, but should take care to use the original Job, or otherwise ensure that the structured concurrency contract is not broken.","title":"onRunningSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession WorkflowSession \u00b6 [jvm] @ ExperimentalWorkflowApi () interface WorkflowSession Information about the session of a workflow in the runtime that a WorkflowInterceptor method is intercepting. Properties \u00b6 Name Summary identifier [jvm] abstract val identifier : WorkflowIdentifier The WorkflowIdentifier that represents the type of this workflow. parent [jvm] abstract val parent : WorkflowInterceptor.WorkflowSession ?The parent WorkflowSession of this workflow, or null if this is the root workflow. renderKey [jvm] abstract val renderKey : String The string key argument that was passed to BaseRenderContext.renderChild to render this workflow. sessionId [jvm] abstract val sessionId : Long A unique value that identifies the currently-running session of this workflow in the runtime.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/#workflowsession","text":"[jvm] @ ExperimentalWorkflowApi () interface WorkflowSession Information about the session of a workflow in the runtime that a WorkflowInterceptor method is intercepting.","title":"WorkflowSession"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/#properties","text":"Name Summary identifier [jvm] abstract val identifier : WorkflowIdentifier The WorkflowIdentifier that represents the type of this workflow. parent [jvm] abstract val parent : WorkflowInterceptor.WorkflowSession ?The parent WorkflowSession of this workflow, or null if this is the root workflow. renderKey [jvm] abstract val renderKey : String The string key argument that was passed to BaseRenderContext.renderChild to render this workflow. sessionId [jvm] abstract val sessionId : Long A unique value that identifies the currently-running session of this workflow in the runtime.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/identifier/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession / identifier identifier \u00b6 [jvm] Content abstract val identifier : WorkflowIdentifier More info The WorkflowIdentifier that represents the type of this workflow.","title":"Identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/identifier/#identifier","text":"[jvm] Content abstract val identifier : WorkflowIdentifier More info The WorkflowIdentifier that represents the type of this workflow.","title":"identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/parent/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession / parent parent \u00b6 [jvm] Content abstract val parent : WorkflowInterceptor.WorkflowSession ? More info The parent WorkflowSession of this workflow, or null if this is the root workflow.","title":"Parent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/parent/#parent","text":"[jvm] Content abstract val parent : WorkflowInterceptor.WorkflowSession ? More info The parent WorkflowSession of this workflow, or null if this is the root workflow.","title":"parent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/render-key/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession / renderKey renderKey \u00b6 [jvm] Content abstract val renderKey : String More info The string key argument that was passed to BaseRenderContext.renderChild to render this workflow.","title":"Render key"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/render-key/#renderkey","text":"[jvm] Content abstract val renderKey : String More info The string key argument that was passed to BaseRenderContext.renderChild to render this workflow.","title":"renderKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/session-id/","text":"// workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession / sessionId sessionId \u00b6 [jvm] Content abstract val sessionId : Long More info A unique value that identifies the currently-running session of this workflow in the runtime. See the documentation on WorkflowInterceptor for more information about what this value represents.","title":"Session id"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/session-id/#sessionid","text":"[jvm] Content abstract val sessionId : Long More info A unique value that identifies the currently-running session of this workflow in the runtime. See the documentation on WorkflowInterceptor for more information about what this value represents.","title":"sessionId"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/","text":"// workflow / com.squareup.workflow1 / WorkflowOutput WorkflowOutput \u00b6 [jvm] class WorkflowOutput OutputT >( value : OutputT ) Wrapper around a potentially-nullable OutputT value. Constructors \u00b6 WorkflowOutput [jvm] fun OutputT > WorkflowOutput (value: OutputT ) Functions \u00b6 Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary value [jvm] val value : OutputT","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/#workflowoutput","text":"[jvm] class WorkflowOutput OutputT >( value : OutputT ) Wrapper around a potentially-nullable OutputT value.","title":"WorkflowOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/#constructors","text":"WorkflowOutput [jvm] fun OutputT > WorkflowOutput (value: OutputT )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/#properties","text":"Name Summary value [jvm] val value : OutputT","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/-workflow-output/","text":"// workflow / com.squareup.workflow1 / WorkflowOutput / WorkflowOutput WorkflowOutput \u00b6 [jvm] Content fun OutputT > WorkflowOutput (value: OutputT )","title":" workflow output"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/-workflow-output/#workflowoutput","text":"[jvm] Content fun OutputT > WorkflowOutput (value: OutputT )","title":"WorkflowOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/equals/","text":"// workflow / com.squareup.workflow1 / WorkflowOutput / equals equals \u00b6 [jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/equals/#equals","text":"[jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/hash-code/","text":"// workflow / com.squareup.workflow1 / WorkflowOutput / hashCode hashCode \u00b6 [jvm] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/hash-code/#hashcode","text":"[jvm] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/to-string/","text":"// workflow / com.squareup.workflow1 / WorkflowOutput / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/value/","text":"// workflow / com.squareup.workflow1 / WorkflowOutput / value value \u00b6 [jvm] Content val value : OutputT","title":"Value"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/value/#value","text":"[jvm] Content val value : OutputT","title":"value"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing Package com.squareup.workflow1.diagnostic.tracing \u00b6 Types \u00b6 Name Summary MemoryStats [jvm] Content interface MemoryStats More info Reports free/available memory. RuntimeMemoryStats [jvm] Content object RuntimeMemoryStats : MemoryStats More info A MemoryStats that reports memory stats using this Runtime instance. TracingWorkflowInterceptor [jvm] Content class TracingWorkflowInterceptor : WorkflowInterceptor More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing. Functions \u00b6 Name Summary TracingWorkflowInterceptor [jvm] Content fun TracingWorkflowInterceptor (file: File , name: String = \u201c\u201d): TracingWorkflowInterceptor fun TracingWorkflowInterceptor (name: String = \u201c\u201d, memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) -> TraceEncoder ): TracingWorkflowInterceptor More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/#package-comsquareupworkflow1diagnostictracing","text":"","title":"Package com.squareup.workflow1.diagnostic.tracing"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/#types","text":"Name Summary MemoryStats [jvm] Content interface MemoryStats More info Reports free/available memory. RuntimeMemoryStats [jvm] Content object RuntimeMemoryStats : MemoryStats More info A MemoryStats that reports memory stats using this Runtime instance. TracingWorkflowInterceptor [jvm] Content class TracingWorkflowInterceptor : WorkflowInterceptor More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/#functions","text":"Name Summary TracingWorkflowInterceptor [jvm] Content fun TracingWorkflowInterceptor (file: File , name: String = \u201c\u201d): TracingWorkflowInterceptor fun TracingWorkflowInterceptor (name: String = \u201c\u201d, memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) -> TraceEncoder ): TracingWorkflowInterceptor More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor TracingWorkflowInterceptor \u00b6 [jvm] Content fun TracingWorkflowInterceptor (file: File , name: String = \u201c\u201d): TracingWorkflowInterceptor More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing. Parameters \u00b6 jvm file The File to write the trace to. name If non-empty, will be used to set the \u201cprocess name\u201d in the trace file. If empty, the workflow type is used for the process name. [jvm] Content fun TracingWorkflowInterceptor (name: String = \u201c\u201d, memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) -> TraceEncoder ): TracingWorkflowInterceptor More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing. Parameters \u00b6 jvm name If non-empty, will be used to set the \u201cprocess name\u201d in the trace file. If empty, the workflow type is used for the process name. encoderProvider A function that returns a TraceEncoder that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in.","title":" tracing workflow interceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#tracingworkflowinterceptor","text":"[jvm] Content fun TracingWorkflowInterceptor (file: File , name: String = \u201c\u201d): TracingWorkflowInterceptor More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing.","title":"TracingWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#parameters","text":"jvm file The File to write the trace to. name If non-empty, will be used to set the \u201cprocess name\u201d in the trace file. If empty, the workflow type is used for the process name. [jvm] Content fun TracingWorkflowInterceptor (name: String = \u201c\u201d, memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) -> TraceEncoder ): TracingWorkflowInterceptor More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#parameters_1","text":"jvm name If non-empty, will be used to set the \u201cprocess name\u201d in the trace file. If empty, the workflow type is used for the process name. encoderProvider A function that returns a TraceEncoder that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / MemoryStats MemoryStats \u00b6 [jvm] interface MemoryStats Reports free/available memory. See also \u00b6 jvm com.squareup.workflow1.diagnostic.tracing.RuntimeMemoryStats Functions \u00b6 Name Summary freeMemory [jvm] Content abstract fun freeMemory (): Long totalMemory [jvm] Content abstract fun totalMemory (): Long Inheritors \u00b6 Name RuntimeMemoryStats","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/#memorystats","text":"[jvm] interface MemoryStats Reports free/available memory.","title":"MemoryStats"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/#see-also","text":"jvm com.squareup.workflow1.diagnostic.tracing.RuntimeMemoryStats","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/#functions","text":"Name Summary freeMemory [jvm] Content abstract fun freeMemory (): Long totalMemory [jvm] Content abstract fun totalMemory (): Long","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/#inheritors","text":"Name RuntimeMemoryStats","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/free-memory/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / MemoryStats / freeMemory freeMemory \u00b6 [jvm] Content abstract fun freeMemory (): Long","title":"Free memory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/free-memory/#freememory","text":"[jvm] Content abstract fun freeMemory (): Long","title":"freeMemory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/total-memory/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / MemoryStats / totalMemory totalMemory \u00b6 [jvm] Content abstract fun totalMemory (): Long","title":"Total memory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/total-memory/#totalmemory","text":"[jvm] Content abstract fun totalMemory (): Long","title":"totalMemory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / RuntimeMemoryStats RuntimeMemoryStats \u00b6 [jvm] object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance. Functions \u00b6 Name Summary freeMemory [jvm] Content open override fun freeMemory (): Long totalMemory [jvm] Content open override fun totalMemory (): Long","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/#runtimememorystats","text":"[jvm] object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance.","title":"RuntimeMemoryStats"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/#functions","text":"Name Summary freeMemory [jvm] Content open override fun freeMemory (): Long totalMemory [jvm] Content open override fun totalMemory (): Long","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/free-memory/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / RuntimeMemoryStats / freeMemory freeMemory \u00b6 [jvm] Content open override fun freeMemory (): Long","title":"Free memory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/free-memory/#freememory","text":"[jvm] Content open override fun freeMemory (): Long","title":"freeMemory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/total-memory/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / RuntimeMemoryStats / totalMemory totalMemory \u00b6 [jvm] Content open override fun totalMemory (): Long","title":"Total memory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/total-memory/#totalmemory","text":"[jvm] Content open override fun totalMemory (): Long","title":"totalMemory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor TracingWorkflowInterceptor \u00b6 [jvm] class TracingWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing. Constructors \u00b6 TracingWorkflowInterceptor [jvm] fun TracingWorkflowInterceptor (memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) -> TraceLogger )A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing. Functions \u00b6 Name Summary onInitialState [jvm] Content open override fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S onPropsChanged [jvm] Content open override fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S onRender [jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R onSessionStarted [jvm] Content open override fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) onSnapshotState [jvm] Content open override fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#tracingworkflowinterceptor","text":"[jvm] class TracingWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing.","title":"TracingWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#constructors","text":"TracingWorkflowInterceptor [jvm] fun TracingWorkflowInterceptor (memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) -> TraceLogger )A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#functions","text":"Name Summary onInitialState [jvm] Content open override fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S onPropsChanged [jvm] Content open override fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S onRender [jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R onSessionStarted [jvm] Content open override fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) onSnapshotState [jvm] Content open override fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ?","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/-tracing-workflow-interceptor/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / TracingWorkflowInterceptor TracingWorkflowInterceptor \u00b6 [jvm] Content fun TracingWorkflowInterceptor (memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) -> TraceLogger ) More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing. Parameters \u00b6 jvm loggerProvider A function that returns a TraceLogger that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in, as well as a description of the type of the workflow.","title":" tracing workflow interceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/-tracing-workflow-interceptor/#tracingworkflowinterceptor","text":"[jvm] Content fun TracingWorkflowInterceptor (memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) -> TraceLogger ) More info A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing.","title":"TracingWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/-tracing-workflow-interceptor/#parameters","text":"jvm loggerProvider A function that returns a TraceLogger that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in, as well as a description of the type of the workflow.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-initial-state/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onInitialState onInitialState \u00b6 [jvm] Content open override fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S","title":"On initial state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-initial-state/#oninitialstate","text":"[jvm] Content open override fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S","title":"onInitialState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-props-changed/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onPropsChanged onPropsChanged \u00b6 [jvm] Content open override fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S","title":"On props changed"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-props-changed/#onpropschanged","text":"[jvm] Content open override fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S","title":"onPropsChanged"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-render/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onRender onRender \u00b6 [jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R","title":"On render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-render/#onrender","text":"[jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R","title":"onRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-session-started/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onSessionStarted onSessionStarted \u00b6 [jvm] Content open override fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession )","title":"On session started"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-session-started/#onsessionstarted","text":"[jvm] Content open override fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession )","title":"onSessionStarted"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-snapshot-state/","text":"// workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onSnapshotState onSnapshotState \u00b6 [jvm] Content open override fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ?","title":"On snapshot state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-snapshot-state/#onsnapshotstate","text":"[jvm] Content open override fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ?","title":"onSnapshotState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/","text":"// workflow / com.squareup.workflow1.rx2 Package com.squareup.workflow1.rx2 \u00b6 Types \u00b6 Name Summary PublisherWorker [jvm] Content abstract class PublisherWorker OutputT : Any > : Worker < OutputT > More info An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow. Functions \u00b6 Name Summary asWorker [jvm] Content fun Completable. asWorker (): Worker < Nothing > More info Creates a Worker from this Completable. [jvm] Content inline fun < T : Any > Maybe T ?>. asWorker (): Worker < T > More info Creates a Worker from this Maybe. [jvm] Content inline fun < T : Any > Observable T ?>. asWorker (): Worker < T > More info Creates a Worker from this Observable. [jvm] Content inline fun < T : Any > Single T ?>. asWorker (): Worker < T > More info Creates a Worker from this Single. [jvm] Content inline fun < T : Any > Publisher T ?>. asWorker (): Worker < T > More info Creates a Worker from this Publisher (Flowable is a Publisher).","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/#package-comsquareupworkflow1rx2","text":"","title":"Package com.squareup.workflow1.rx2"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/#types","text":"Name Summary PublisherWorker [jvm] Content abstract class PublisherWorker OutputT : Any > : Worker < OutputT > More info An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/#functions","text":"Name Summary asWorker [jvm] Content fun Completable. asWorker (): Worker < Nothing > More info Creates a Worker from this Completable. [jvm] Content inline fun < T : Any > Maybe T ?>. asWorker (): Worker < T > More info Creates a Worker from this Maybe. [jvm] Content inline fun < T : Any > Observable T ?>. asWorker (): Worker < T > More info Creates a Worker from this Observable. [jvm] Content inline fun < T : Any > Single T ?>. asWorker (): Worker < T > More info Creates a Worker from this Single. [jvm] Content inline fun < T : Any > Publisher T ?>. asWorker (): Worker < T > More info Creates a Worker from this Publisher (Flowable is a Publisher).","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/as-worker/","text":"// workflow / com.squareup.workflow1.rx2 / asWorker asWorker \u00b6 [jvm] Content inline fun < T : Any > Observable T ?>. asWorker (): Worker < T > More info Creates a Worker from this Observable. The Observable will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability. [jvm] Content inline fun < T : Any > Publisher T ?>. asWorker (): Worker < T > More info Creates a Worker from this Publisher (Flowable is a Publisher). The Publisher will be subscribed to when the Worker is started, and cancelled when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability. [jvm] Content inline fun < T : Any > Maybe T ?>. asWorker (): Worker < T > More info Creates a Worker from this Maybe. The Maybe will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability. [jvm] Content inline fun < T : Any > Single T ?>. asWorker (): Worker < T > More info Creates a Worker from this Single. The Single will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability. [jvm] Content fun Completable. asWorker (): Worker < Nothing > More info Creates a Worker from this Completable. The Completable will be subscribed to when the Worker is started, and disposed when it is cancelled. The key is required for this operator because there is no type information available to distinguish workers.","title":"As worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/as-worker/#asworker","text":"[jvm] Content inline fun < T : Any > Observable T ?>. asWorker (): Worker < T > More info Creates a Worker from this Observable. The Observable will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability. [jvm] Content inline fun < T : Any > Publisher T ?>. asWorker (): Worker < T > More info Creates a Worker from this Publisher (Flowable is a Publisher). The Publisher will be subscribed to when the Worker is started, and cancelled when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability. [jvm] Content inline fun < T : Any > Maybe T ?>. asWorker (): Worker < T > More info Creates a Worker from this Maybe. The Maybe will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability. [jvm] Content inline fun < T : Any > Single T ?>. asWorker (): Worker < T > More info Creates a Worker from this Single. The Single will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability. [jvm] Content fun Completable. asWorker (): Worker < Nothing > More info Creates a Worker from this Completable. The Completable will be subscribed to when the Worker is started, and disposed when it is cancelled. The key is required for this operator because there is no type information available to distinguish workers.","title":"asWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/","text":"// workflow / com.squareup.workflow1.rx2 / PublisherWorker PublisherWorker \u00b6 [jvm] abstract class PublisherWorker OutputT : Any > : Worker < OutputT > An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow. If you\u2019re using RxJava, Flowable is a Publisher. Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher. Constructors \u00b6 PublisherWorker [jvm] fun PublisherWorker () Functions \u00b6 Name Summary doesSameWorkAs [jvm] Content open fun doesSameWorkAs (otherWorker: Worker <*>): Boolean run [jvm] Content override fun run (): Flow< OutputT > runPublisher [jvm] Content abstract fun runPublisher (): Publisher OutputT > More info Returns a Flowable to execute the work represented by this worker.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/#publisherworker","text":"[jvm] abstract class PublisherWorker OutputT : Any > : Worker < OutputT > An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow. If you\u2019re using RxJava, Flowable is a Publisher. Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher.","title":"PublisherWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/#constructors","text":"PublisherWorker [jvm] fun PublisherWorker ()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/#functions","text":"Name Summary doesSameWorkAs [jvm] Content open fun doesSameWorkAs (otherWorker: Worker <*>): Boolean run [jvm] Content override fun run (): Flow< OutputT > runPublisher [jvm] Content abstract fun runPublisher (): Publisher OutputT > More info Returns a Flowable to execute the work represented by this worker.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/-publisher-worker/","text":"// workflow / com.squareup.workflow1.rx2 / PublisherWorker / PublisherWorker PublisherWorker \u00b6 [jvm] Content fun PublisherWorker ()","title":" publisher worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/-publisher-worker/#publisherworker","text":"[jvm] Content fun PublisherWorker ()","title":"PublisherWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run-publisher/","text":"// workflow / com.squareup.workflow1.rx2 / PublisherWorker / runPublisher runPublisher \u00b6 [jvm] Content abstract fun runPublisher (): Publisher OutputT > More info Returns a Flowable to execute the work represented by this worker. If you have an io.reactivex.Observable instead, just call toFlowable to convert it. The Flowable is subscribed to in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the subscription will be disposed.","title":"Run publisher"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run-publisher/#runpublisher","text":"[jvm] Content abstract fun runPublisher (): Publisher OutputT > More info Returns a Flowable to execute the work represented by this worker. If you have an io.reactivex.Observable instead, just call toFlowable to convert it. The Flowable is subscribed to in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the subscription will be disposed.","title":"runPublisher"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run/","text":"// workflow / com.squareup.workflow1.rx2 / PublisherWorker / run run \u00b6 [jvm] Content override fun run (): Flow< OutputT >","title":"Run"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run/#run","text":"[jvm] Content override fun run (): Flow< OutputT >","title":"run"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/","text":"// workflow / com.squareup.workflow1.testing Package com.squareup.workflow1.testing \u00b6 Types \u00b6 Name Summary RenderIdempotencyChecker [jvm] Content object RenderIdempotencyChecker : WorkflowInterceptor More info Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. RenderTester [jvm] Content abstract class RenderTester < PropsT , StateT , OutputT , RenderingT > More info The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and (optionally) expectWorker calls. RenderTestResult [jvm] Content interface RenderTestResult < PropsT , StateT , OutputT > More info Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action. WorkerSink [jvm] Content class WorkerSink < T >( name : String , type : KClass <*>) : Worker < T > More info Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. WorkerTester [jvm] Content interface WorkerTester < T > WorkflowTestParams [jvm] Content @TestOnly() class WorkflowTestParams StateT >( startFrom : WorkflowTestParams.StartMode < StateT >, checkRenderIdempotence : Boolean ) More info Defines configuration for workflow testing infrastructure such as testRender, testFromStart. WorkflowTestRuntime [jvm] Content class WorkflowTestRuntime < PropsT , OutputT , RenderingT > More info Runs a Workflow and provides access to its renderings , outputs , and snapshots . Functions \u00b6 Name Summary expectSideEffect [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectSideEffect (key: String ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a particular side effect. expectWorker [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (expected: WorkerT , key: String = \u201c\u201d, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerClass: KClass WorkerT >, key: String = \u201c\u201d, crossinline assertWorker: ( WorkerT ) -> Unit = {}, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given workerClass . [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerType: KType , key: String = \u201c\u201d, assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker whose KType matches workerType . expectWorkerOutputting [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkerOutputting (outputType: KType , key: String = \u201c\u201d, crossinline assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given outputType . expectWorkflow [jvm] Content @ ExperimentalWorkflowApi () inline fun < ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , key: String = \u201c\u201d, description: String = \u201c\u201d, noinline assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > @ ExperimentalWorkflowApi () fun < ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , output: WorkflowOutput < ChildOutputT >?, key: String = \u201c\u201d, description: String = \u201c\u201d, assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > inline fun < ChildPropsT , ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (workflowType: KClass <out Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >>, rendering: ChildRenderingT , key: String = \u201c\u201d, crossinline assertProps: ( ChildPropsT ) -> Unit = {}, output: WorkflowOutput < ChildOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow. launchForTestingFromStartWith [jvm] Content @TestOnly() fun < T , OutputT , RenderingT > Workflow < Unit , OutputT , RenderingT >. launchForTestingFromStartWith (testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < T , PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. launchForTestingFromStartWith (props: PropsT , testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. launchForTestingFromStateWith [jvm] Content @TestOnly() fun < StateT , OutputT , RenderingT > StatefulWorkflow < Unit , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> Unit ) @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (props: PropsT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. launchForTestingWith [jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingWith (props: PropsT , testParams: WorkflowTestParams < StateT > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. test [jvm] Content fun < T > Worker < T >. test (timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester < T >.() -> Unit ) More info Test a Worker by defining assertions on its output within block . testRender [jvm] Content fun < PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. testRender (props: PropsT ): RenderTester < PropsT , *, OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. testRender (props: PropsT , initialState: StateT ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow. WorkerSink [jvm] Content inline fun < T > WorkerSink (name: String ): WorkerSink < T >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/#package-comsquareupworkflow1testing","text":"","title":"Package com.squareup.workflow1.testing"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/#types","text":"Name Summary RenderIdempotencyChecker [jvm] Content object RenderIdempotencyChecker : WorkflowInterceptor More info Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. RenderTester [jvm] Content abstract class RenderTester < PropsT , StateT , OutputT , RenderingT > More info The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and (optionally) expectWorker calls. RenderTestResult [jvm] Content interface RenderTestResult < PropsT , StateT , OutputT > More info Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action. WorkerSink [jvm] Content class WorkerSink < T >( name : String , type : KClass <*>) : Worker < T > More info Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. WorkerTester [jvm] Content interface WorkerTester < T > WorkflowTestParams [jvm] Content @TestOnly() class WorkflowTestParams StateT >( startFrom : WorkflowTestParams.StartMode < StateT >, checkRenderIdempotence : Boolean ) More info Defines configuration for workflow testing infrastructure such as testRender, testFromStart. WorkflowTestRuntime [jvm] Content class WorkflowTestRuntime < PropsT , OutputT , RenderingT > More info Runs a Workflow and provides access to its renderings , outputs , and snapshots .","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/#functions","text":"Name Summary expectSideEffect [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectSideEffect (key: String ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a particular side effect. expectWorker [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (expected: WorkerT , key: String = \u201c\u201d, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerClass: KClass WorkerT >, key: String = \u201c\u201d, crossinline assertWorker: ( WorkerT ) -> Unit = {}, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given workerClass . [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerType: KType , key: String = \u201c\u201d, assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker whose KType matches workerType . expectWorkerOutputting [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkerOutputting (outputType: KType , key: String = \u201c\u201d, crossinline assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given outputType . expectWorkflow [jvm] Content @ ExperimentalWorkflowApi () inline fun < ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , key: String = \u201c\u201d, description: String = \u201c\u201d, noinline assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > @ ExperimentalWorkflowApi () fun < ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , output: WorkflowOutput < ChildOutputT >?, key: String = \u201c\u201d, description: String = \u201c\u201d, assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > inline fun < ChildPropsT , ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (workflowType: KClass <out Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >>, rendering: ChildRenderingT , key: String = \u201c\u201d, crossinline assertProps: ( ChildPropsT ) -> Unit = {}, output: WorkflowOutput < ChildOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow. launchForTestingFromStartWith [jvm] Content @TestOnly() fun < T , OutputT , RenderingT > Workflow < Unit , OutputT , RenderingT >. launchForTestingFromStartWith (testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < T , PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. launchForTestingFromStartWith (props: PropsT , testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. launchForTestingFromStateWith [jvm] Content @TestOnly() fun < StateT , OutputT , RenderingT > StatefulWorkflow < Unit , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> Unit ) @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (props: PropsT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. launchForTestingWith [jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingWith (props: PropsT , testParams: WorkflowTestParams < StateT > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. test [jvm] Content fun < T > Worker < T >. test (timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester < T >.() -> Unit ) More info Test a Worker by defining assertions on its output within block . testRender [jvm] Content fun < PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. testRender (props: PropsT ): RenderTester < PropsT , *, OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. testRender (props: PropsT , initialState: StateT ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow. WorkerSink [jvm] Content inline fun < T > WorkerSink (name: String ): WorkerSink < T >","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/","text":"// workflow / com.squareup.workflow1.testing / WorkerSink WorkerSink \u00b6 [jvm] Content inline fun < T > WorkerSink (name: String ): WorkerSink < T >","title":" worker sink"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#workersink","text":"[jvm] Content inline fun < T > WorkerSink (name: String ): WorkerSink < T >","title":"WorkerSink"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-side-effect/","text":"// workflow / com.squareup.workflow1.testing / expectSideEffect expectSideEffect \u00b6 [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectSideEffect (key: String ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a particular side effect. Parameters \u00b6 jvm key The key passed to com.squareup.workflow1.RenderContext.runningSideEffect when rendering this workflow.","title":"Expect side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-side-effect/#expectsideeffect","text":"[jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectSideEffect (key: String ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a particular side effect.","title":"expectSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-side-effect/#parameters","text":"jvm key The key passed to com.squareup.workflow1.RenderContext.runningSideEffect when rendering this workflow.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker-outputting/","text":"// workflow / com.squareup.workflow1.testing / expectWorkerOutputting expectWorkerOutputting \u00b6 [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkerOutputting (outputType: KType , key: String = \u201c\u201d, crossinline assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given outputType . Parameters \u00b6 jvm outputType the KType of the Worker \u2018s OutputT type parameter. key The key passed to runningWorker when rendering this workflow. output If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages.","title":"Expect worker outputting"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker-outputting/#expectworkeroutputting","text":"[jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkerOutputting (outputType: KType , key: String = \u201c\u201d, crossinline assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given outputType .","title":"expectWorkerOutputting"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker-outputting/#parameters","text":"jvm outputType the KType of the Worker \u2018s OutputT type parameter. key The key passed to runningWorker when rendering this workflow. output If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/","text":"// workflow / com.squareup.workflow1.testing / expectWorker expectWorker \u00b6 [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (expected: WorkerT , key: String = \u201c\u201d, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. If a worker is ran that matches the type of expected , but the actual worker\u2019s doesSameWorkAs returns false, then an AssertionError will be thrown. If you need to perform custom assertions, use the overload of this method that takes an assertWhen parameter. Parameters \u00b6 jvm expected Worker passed to the actual worker\u2019s doesSameWorkAs method to assert the worker matches. key The key passed to runningWorker when rendering this workflow. output If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerClass: KClass WorkerT >, key: String = \u201c\u201d, crossinline assertWorker: ( WorkerT ) -> Unit = {}, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given workerClass . The worker\u2019s output type is not taken into consideration. Parameters \u00b6 jvm workerClass The KClass of the worker that is expected to be run. key The key passed to runningWorker when rendering this workflow. assertWorker A function that will be passed the actual worker that matches this expectation and can perform custom assertions on the worker instance. output If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages. [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerType: KType , key: String = \u201c\u201d, assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker whose KType matches workerType . Parameters \u00b6 jvm workerType The KType of the Worker that is expected to be run. This will be compared against the concrete type of the worker that is passed to com.squareup.workflow.runningWorker, but may be a supertype of that type. E.g. an expected worker type of typeOf >>() will match a worker that has the type SomeConcreteWorker >. key The key passed to runningWorker when rendering this workflow. assertWorker A function that will be passed the actual worker that matches this expectation and can perform custom assertions on the worker instance. output If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages.","title":"Expect worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/#expectworker","text":"[jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (expected: WorkerT , key: String = \u201c\u201d, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. If a worker is ran that matches the type of expected , but the actual worker\u2019s doesSameWorkAs returns false, then an AssertionError will be thrown. If you need to perform custom assertions, use the overload of this method that takes an assertWhen parameter.","title":"expectWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/#parameters","text":"jvm expected Worker passed to the actual worker\u2019s doesSameWorkAs method to assert the worker matches. key The key passed to runningWorker when rendering this workflow. output If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerClass: KClass WorkerT >, key: String = \u201c\u201d, crossinline assertWorker: ( WorkerT ) -> Unit = {}, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given workerClass . The worker\u2019s output type is not taken into consideration.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/#parameters_1","text":"jvm workerClass The KClass of the worker that is expected to be run. key The key passed to runningWorker when rendering this workflow. assertWorker A function that will be passed the actual worker that matches this expectation and can perform custom assertions on the worker instance. output If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages. [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerType: KType , key: String = \u201c\u201d, assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker whose KType matches workerType .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/#parameters_2","text":"jvm workerType The KType of the Worker that is expected to be run. This will be compared against the concrete type of the worker that is passed to com.squareup.workflow.runningWorker, but may be a supertype of that type. E.g. an expected worker type of typeOf >>() will match a worker that has the type SomeConcreteWorker >. key The key passed to runningWorker when rendering this workflow. assertWorker A function that will be passed the actual worker that matches this expectation and can perform custom assertions on the worker instance. output If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/","text":"// workflow / com.squareup.workflow1.testing / expectWorkflow expectWorkflow \u00b6 [jvm] Content @ ExperimentalWorkflowApi () inline fun < ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , key: String = \u201c\u201d, description: String = \u201c\u201d, noinline assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it. Expecting impostor workflows \u00b6 If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild( childWorkflow.mapRendering { \u2026 } .mapOutput { \u2026 } ) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026) Parameters \u00b6 jvm identifier The WorkflowIdentifier of the expected workflow. May identify any supertype of the actual rendered workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering The rendering to return from com.squareup.workflow1.RenderContext.renderChild when this workflow is rendered. key The key passed to com.squareup.workflow1.RenderContext.renderChild when rendering this workflow. assertProps A function that performs assertions on the props passed to com.squareup.workflow1.RenderContext.renderChild. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages. [jvm] Content @ ExperimentalWorkflowApi () fun < ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , output: WorkflowOutput < ChildOutputT >?, key: String = \u201c\u201d, description: String = \u201c\u201d, assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it. Expecting impostor workflows \u00b6 If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild( childWorkflow.mapRendering { \u2026 } .mapOutput { \u2026 } ) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026) Parameters \u00b6 jvm identifier The WorkflowIdentifier of the expected workflow. May identify any supertype of the actual rendered workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering The rendering to return from com.squareup.workflow1.RenderContext.renderChild when this workflow is rendered. key The key passed to com.squareup.workflow1.RenderContext.renderChild when rendering this workflow. assertProps A function that performs assertions on the props passed to com.squareup.workflow1.RenderContext.renderChild. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages. [jvm] Content inline fun < ChildPropsT , ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (workflowType: KClass <out Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >>, rendering: ChildRenderingT , key: String = \u201c\u201d, crossinline assertProps: ( ChildPropsT ) -> Unit = {}, output: WorkflowOutput < ChildOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it. Expecting impostor workflows \u00b6 If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild(childWorkflow.mapRendering { \u2026 }) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026) Parameters \u00b6 jvm workflowType The KClass of the expected workflow. May also be any of the supertypes of the expected workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering The rendering to return from com.squareup.workflow1.RenderContext.renderChild when this workflow is rendered. key The key passed to com.squareup.workflow1.RenderContext.renderChild when rendering this workflow. assertProps A function that performs assertions on the props passed to com.squareup.workflow1.RenderContext.renderChild. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages.","title":"Expect workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#expectworkflow","text":"[jvm] Content @ ExperimentalWorkflowApi () inline fun < ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , key: String = \u201c\u201d, description: String = \u201c\u201d, noinline assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it.","title":"expectWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#expecting-impostor-workflows","text":"If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild( childWorkflow.mapRendering { \u2026 } .mapOutput { \u2026 } ) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026)","title":"Expecting impostor workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#parameters","text":"jvm identifier The WorkflowIdentifier of the expected workflow. May identify any supertype of the actual rendered workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering The rendering to return from com.squareup.workflow1.RenderContext.renderChild when this workflow is rendered. key The key passed to com.squareup.workflow1.RenderContext.renderChild when rendering this workflow. assertProps A function that performs assertions on the props passed to com.squareup.workflow1.RenderContext.renderChild. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages. [jvm] Content @ ExperimentalWorkflowApi () fun < ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , output: WorkflowOutput < ChildOutputT >?, key: String = \u201c\u201d, description: String = \u201c\u201d, assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#expecting-impostor-workflows_1","text":"If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild( childWorkflow.mapRendering { \u2026 } .mapOutput { \u2026 } ) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026)","title":"Expecting impostor workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#parameters_1","text":"jvm identifier The WorkflowIdentifier of the expected workflow. May identify any supertype of the actual rendered workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering The rendering to return from com.squareup.workflow1.RenderContext.renderChild when this workflow is rendered. key The key passed to com.squareup.workflow1.RenderContext.renderChild when rendering this workflow. assertProps A function that performs assertions on the props passed to com.squareup.workflow1.RenderContext.renderChild. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages. [jvm] Content inline fun < ChildPropsT , ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (workflowType: KClass <out Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >>, rendering: ChildRenderingT , key: String = \u201c\u201d, crossinline assertProps: ( ChildPropsT ) -> Unit = {}, output: WorkflowOutput < ChildOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#expecting-impostor-workflows_2","text":"If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild(childWorkflow.mapRendering { \u2026 }) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026)","title":"Expecting impostor workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#parameters_2","text":"jvm workflowType The KClass of the expected workflow. May also be any of the supertypes of the expected workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering The rendering to return from com.squareup.workflow1.RenderContext.renderChild when this workflow is rendered. key The key passed to com.squareup.workflow1.RenderContext.renderChild when rendering this workflow. assertProps A function that performs assertions on the props passed to com.squareup.workflow1.RenderContext.renderChild. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description Optional string that will be used to describe this expectation in error messages.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-from-start-with/","text":"// workflow / com.squareup.workflow1.testing / launchForTestingFromStartWith launchForTestingFromStartWith \u00b6 [jvm] Content @TestOnly() fun < T , PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. launchForTestingFromStartWith (props: PropsT , testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < T , OutputT , RenderingT > Workflow < Unit , OutputT , RenderingT >. launchForTestingFromStartWith (testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"Launch for testing from start with"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-from-start-with/#launchfortestingfromstartwith","text":"[jvm] Content @TestOnly() fun < T , PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. launchForTestingFromStartWith (props: PropsT , testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < T , OutputT , RenderingT > Workflow < Unit , OutputT , RenderingT >. launchForTestingFromStartWith (testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"launchForTestingFromStartWith"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-from-state-with/","text":"// workflow / com.squareup.workflow1.testing / launchForTestingFromStateWith launchForTestingFromStateWith \u00b6 [jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (props: PropsT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < StateT , OutputT , RenderingT > StatefulWorkflow < Unit , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> Unit ) More info Creates a WorkflowTestRuntime to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . All workflow-related coroutines are cancelled when the block exits.","title":"Launch for testing from state with"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-from-state-with/#launchfortestingfromstatewith","text":"[jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (props: PropsT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T @TestOnly() fun < StateT , OutputT , RenderingT > StatefulWorkflow < Unit , StateT , OutputT , RenderingT >. launchForTestingFromStateWith (initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT , RenderingT >.() -> Unit ) More info Creates a WorkflowTestRuntime to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . All workflow-related coroutines are cancelled when the block exits.","title":"launchForTestingFromStateWith"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-with/","text":"// workflow / com.squareup.workflow1.testing / launchForTestingWith launchForTestingWith \u00b6 [jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingWith (props: PropsT , testParams: WorkflowTestParams < StateT > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"Launch for testing with"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-with/#launchfortestingwith","text":"[jvm] Content @TestOnly() fun < T , PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. launchForTestingWith (props: PropsT , testParams: WorkflowTestParams < StateT > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < PropsT , OutputT , RenderingT >.() -> T ): T More info Creates a WorkflowTestRuntime to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"launchForTestingWith"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/test-render/","text":"// workflow / com.squareup.workflow1.testing / testRender testRender \u00b6 [jvm] Content fun < PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. testRender (props: PropsT ): RenderTester < PropsT , *, OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . See RenderTester for usage documentation. [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. testRender (props: PropsT , initialState: StateT ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow. See RenderTester for usage documentation.","title":"Test render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/test-render/#testrender","text":"[jvm] Content fun < PropsT , OutputT , RenderingT > Workflow < PropsT , OutputT , RenderingT >. testRender (props: PropsT ): RenderTester < PropsT , *, OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . See RenderTester for usage documentation. [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > StatefulWorkflow < PropsT , StateT , OutputT , RenderingT >. testRender (props: PropsT , initialState: StateT ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Create a RenderTester to unit test an individual render pass of this workflow. See RenderTester for usage documentation.","title":"testRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/test/","text":"// workflow / com.squareup.workflow1.testing / test test \u00b6 [jvm] Content fun < T > Worker < T >. test (timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester < T >.() -> Unit ) More info Test a Worker by defining assertions on its output within block .","title":"Test"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/test/#test","text":"[jvm] Content fun < T > Worker < T >. test (timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester < T >.() -> Unit ) More info Test a Worker by defining assertions on its output within block .","title":"test"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/","text":"// workflow / com.squareup.workflow1.testing / RenderIdempotencyChecker RenderIdempotencyChecker \u00b6 [jvm] object RenderIdempotencyChecker : WorkflowInterceptor Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. The first render pass is the real one, the second one is a no-op and child workflow renderings will be played back, in order, to their renderChild calls. Functions \u00b6 Name Summary onInitialState [jvm] Content open fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S onPropsChanged [jvm] Content open fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S onRender [jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R onSessionStarted [jvm] Content open fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) onSnapshotState [jvm] Content open fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/#renderidempotencychecker","text":"[jvm] object RenderIdempotencyChecker : WorkflowInterceptor Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. The first render pass is the real one, the second one is a no-op and child workflow renderings will be played back, in order, to their renderChild calls.","title":"RenderIdempotencyChecker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/#functions","text":"Name Summary onInitialState [jvm] Content open fun < P , S > onInitialState (props: P , snapshot: Snapshot ?, proceed: ( P , Snapshot ?) -> S , session: WorkflowInterceptor.WorkflowSession ): S onPropsChanged [jvm] Content open fun < P , S > onPropsChanged (old: P , new: P , state: S , proceed: ( P , P , S ) -> S , session: WorkflowInterceptor.WorkflowSession ): S onRender [jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R onSessionStarted [jvm] Content open fun onSessionStarted (workflowScope: CoroutineScope, session: WorkflowInterceptor.WorkflowSession ) onSnapshotState [jvm] Content open fun < S > onSnapshotState (state: S , proceed: ( S ) -> Snapshot ?, session: WorkflowInterceptor.WorkflowSession ): Snapshot ?","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/on-render/","text":"// workflow / com.squareup.workflow1.testing / RenderIdempotencyChecker / onRender onRender \u00b6 [jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R","title":"On render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/on-render/#onrender","text":"[jvm] Content open override fun < P , S , O , R > onRender (renderProps: P , renderState: S , context: BaseRenderContext < P , S , O >, proceed: ( P , S , WorkflowInterceptor.RenderContextInterceptor < P , S , O >?) -> R , session: WorkflowInterceptor.WorkflowSession ): R","title":"onRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/","text":"// workflow / com.squareup.workflow1.testing / RenderTestResult RenderTestResult \u00b6 [jvm] interface RenderTestResult < PropsT , StateT , OutputT > Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action. See also \u00b6 jvm com.squareup.workflow1.testing.RenderTestResult Functions \u00b6 Name Summary verifyAction [jvm] Content abstract fun verifyAction (block: ( WorkflowAction < PropsT , StateT , OutputT >) -> Unit ) More info Asserts that the render pass handled either a workflow/worker output or a rendering event, and passes the resulting WorkflowAction to block for asserting. verifyActionResult [jvm] Content abstract fun verifyActionResult (block: ( StateT , output: WorkflowOutput < OutputT >?) -> Unit ) More info Asserts that the render pass handled either a workflow/worker output or a rendering event, \u201cexecutes\u201d the action with the state passed to testRender , then invokes block with the resulting state and output values.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/#rendertestresult","text":"[jvm] interface RenderTestResult < PropsT , StateT , OutputT > Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action.","title":"RenderTestResult"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/#see-also","text":"jvm com.squareup.workflow1.testing.RenderTestResult","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/#functions","text":"Name Summary verifyAction [jvm] Content abstract fun verifyAction (block: ( WorkflowAction < PropsT , StateT , OutputT >) -> Unit ) More info Asserts that the render pass handled either a workflow/worker output or a rendering event, and passes the resulting WorkflowAction to block for asserting. verifyActionResult [jvm] Content abstract fun verifyActionResult (block: ( StateT , output: WorkflowOutput < OutputT >?) -> Unit ) More info Asserts that the render pass handled either a workflow/worker output or a rendering event, \u201cexecutes\u201d the action with the state passed to testRender , then invokes block with the resulting state and output values.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/verify-action-result/","text":"// workflow / com.squareup.workflow1.testing / RenderTestResult / verifyActionResult verifyActionResult \u00b6 [jvm] Content abstract fun verifyActionResult (block: ( StateT , output: WorkflowOutput < OutputT >?) -> Unit ) More info Asserts that the render pass handled either a workflow/worker output or a rendering event, \u201cexecutes\u201d the action with the state passed to testRender , then invokes block with the resulting state and output values. If the workflow didn\u2019t process any actions, newState will be the initial state and output will be null. Note that by using this method, you\u2019re also testing the implementation of your action. This can be useful if your actions are anonymous. If they are a sealed class or enum, use verifyAction instead and write separate unit tests for your action implementations.","title":"Verify action result"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/verify-action-result/#verifyactionresult","text":"[jvm] Content abstract fun verifyActionResult (block: ( StateT , output: WorkflowOutput < OutputT >?) -> Unit ) More info Asserts that the render pass handled either a workflow/worker output or a rendering event, \u201cexecutes\u201d the action with the state passed to testRender , then invokes block with the resulting state and output values. If the workflow didn\u2019t process any actions, newState will be the initial state and output will be null. Note that by using this method, you\u2019re also testing the implementation of your action. This can be useful if your actions are anonymous. If they are a sealed class or enum, use verifyAction instead and write separate unit tests for your action implementations.","title":"verifyActionResult"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/verify-action/","text":"// workflow / com.squareup.workflow1.testing / RenderTestResult / verifyAction verifyAction \u00b6 [jvm] Content abstract fun verifyAction (block: ( WorkflowAction < PropsT , StateT , OutputT >) -> Unit ) More info Asserts that the render pass handled either a workflow/worker output or a rendering event, and passes the resulting WorkflowAction to block for asserting. If the workflow didn\u2019t process any actions, block will be passed WorkflowAction.noAction . This is useful if your actions are a sealed class or enum. If you need to test an anonymous action, use verifyActionResult .","title":"Verify action"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/verify-action/#verifyaction","text":"[jvm] Content abstract fun verifyAction (block: ( WorkflowAction < PropsT , StateT , OutputT >) -> Unit ) More info Asserts that the render pass handled either a workflow/worker output or a rendering event, and passes the resulting WorkflowAction to block for asserting. If the workflow didn\u2019t process any actions, block will be passed WorkflowAction.noAction . This is useful if your actions are a sealed class or enum. If you need to test an anonymous action, use verifyActionResult .","title":"verifyAction"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/","text":"// workflow / com.squareup.workflow1.testing / RenderTester RenderTester \u00b6 [jvm] abstract class RenderTester < PropsT , StateT , OutputT , RenderingT > The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and (optionally) expectWorker calls. If one needs to verify all workers explicitly, perhaps to verify that a worker is not run, then use requireExplicitWorkerExpectations . Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . All workflows that are rendered/ran by this workflow must be specified. Workers are optionally specified. Specified workers must run. Unexpected workers on a render pass do not cause a test failure. It is an error if more than one workflow or worker specifies an output. It is a test failure if any workflows or workers that were expected were not ran. It is a test failure if the workflow tried to run any workflows that were not expected. It is a test failure if no workflow or workflow emitted an output, no rendering event was invoked, and any of the action verification methods on [RenderTestResult](../-render-test-result/index.md) is called. Examples \u00b6 Worker output \u00b6 The following example tests a render pass that runs one worker, SubmitLoginWorker, which is configured to have \u201cemitted\u201d an output, and one workflow, ChildWorkflow, which expects a props containing \u201c test@foo.com \u201d and returning a ChildRendering as its rendering. It checks that the rendering properties are expected and that the output handler for the SubmitLoginWorker returned the CompleteLogin action. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( workerClass = SubmitLoginWorker::class key = \u201csignin\u201d, output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \u201cchild\u201d, assertProps = { assertThat(it.email).isEqualTo(\u201c test@foo.com \u201d) }, rendering = ChildRendering(\u201cmessage\u201d) ) .render { rendering -> assertThat(rendering.text).isEqualTo(\u201cfoo\u201d) } .verifyAction { action -> assertThat(action).isEqualTo(Action.CompleteLogin(success = true)) } Rendering event \u00b6 This is similar to the example above, but will test an event sent to the rendering instead. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \u201csignin\u201d ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \u201cchild\u201d, assertProps = { assertThat(it.email).isEqualTo(\u201c test@foo.com \u201d) }, rendering = ChildRendering(\u201cmessage\u201d) ) .render { rendering -> rendering.onCancelClicked() assertThat(rendering.text).isEqualTo(\u201cfoo\u201d) } .verifyAction { action -> assertThat(action).isEqualTo(Action.CancelLogin) } Verify action result \u00b6 This test verifies the action result instead of the action itself. This technique is useful if the WorkflowAction is anonymous or inline. val currentState = \u2026 val previousState = \u2026 workflow .testRender( props = MyProps(\u2026), initialState = currentState ) .render { rendering -> rendering.onCancelClicked() } .verifyActionResult { newState, output -> // Check that the workflow navigated back correctly. assertThat(newState).isEqualTo(previousState) 1 2 // Check that the workflow didn't emit any output from the button click. assertThat(output).isNull() } Too many outputs \u00b6 This is an example of what not to do \u2013 this test will error out because a worker is emitting and output and a rendering event is sent. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \u201csignin\u201d, output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \u201cchild\u201d, assertProps = { assertThat(it.email).isEqualTo(\u201c test@foo.com \u201d) }, rendering = ChildRendering(\u201cmessage\u201d) ) .render { rendering -> // This will throw and fail the test because the SubmitLoginWorker is also configured to emit // an output. rendering.onCancelClicked() Constructors \u00b6 RenderTester [jvm] fun RenderTester () Types \u00b6 Name Summary ChildWorkflowMatch [jvm] Content sealed class ChildWorkflowMatch RenderChildInvocation [jvm] Content class RenderChildInvocation ( workflow : Workflow < , *, *>, **props* : Any ?, outputType : KTypeProjection , renderingType : KTypeProjection , renderKey : String ) More info Describes a call to com.squareup.workflow1.RenderContext. Functions \u00b6 Name Summary expectSideEffect [jvm] Content abstract fun expectSideEffect (description: String , exactMatch: Boolean = true, matcher: (key: String ) -> Boolean ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a side effect with a key that satisfies matcher . render [jvm] Content abstract fun render (block: ( RenderingT ) -> Unit = {}): RenderTestResult < PropsT , StateT , OutputT > More info Execute the workflow\u2019s render method and run block to perform assertions on and send events to the resulting rendering. requireExplicitWorkerExpectations [jvm] Content abstract fun requireExplicitWorkerExpectations (): RenderTester < PropsT , StateT , OutputT , RenderingT > Extensions \u00b6 Name Summary expectSideEffect [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectSideEffect (key: String ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a particular side effect. expectWorker [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (expected: WorkerT , key: String = \u201c\u201d, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerClass: KClass WorkerT >, key: String = \u201c\u201d, crossinline assertWorker: ( WorkerT ) -> Unit = {}, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given workerClass . [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerType: KType , key: String = \u201c\u201d, assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker whose KType matches workerType . expectWorkerOutputting [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkerOutputting (outputType: KType , key: String = \u201c\u201d, crossinline assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given outputType . expectWorkflow [jvm] Content @ ExperimentalWorkflowApi () inline fun < ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , key: String = \u201c\u201d, description: String = \u201c\u201d, noinline assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > @ ExperimentalWorkflowApi () fun < ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , output: WorkflowOutput < ChildOutputT >?, key: String = \u201c\u201d, description: String = \u201c\u201d, assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > inline fun < ChildPropsT , ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (workflowType: KClass <out Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >>, rendering: ChildRenderingT , key: String = \u201c\u201d, crossinline assertProps: ( ChildPropsT ) -> Unit = {}, output: WorkflowOutput < ChildOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#rendertester","text":"[jvm] abstract class RenderTester < PropsT , StateT , OutputT , RenderingT > The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and (optionally) expectWorker calls. If one needs to verify all workers explicitly, perhaps to verify that a worker is not run, then use requireExplicitWorkerExpectations . Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . All workflows that are rendered/ran by this workflow must be specified. Workers are optionally specified. Specified workers must run. Unexpected workers on a render pass do not cause a test failure. It is an error if more than one workflow or worker specifies an output. It is a test failure if any workflows or workers that were expected were not ran. It is a test failure if the workflow tried to run any workflows that were not expected. It is a test failure if no workflow or workflow emitted an output, no rendering event was invoked, and any of the action verification methods on [RenderTestResult](../-render-test-result/index.md) is called.","title":"RenderTester"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#examples","text":"","title":"Examples"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#worker-output","text":"The following example tests a render pass that runs one worker, SubmitLoginWorker, which is configured to have \u201cemitted\u201d an output, and one workflow, ChildWorkflow, which expects a props containing \u201c test@foo.com \u201d and returning a ChildRendering as its rendering. It checks that the rendering properties are expected and that the output handler for the SubmitLoginWorker returned the CompleteLogin action. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( workerClass = SubmitLoginWorker::class key = \u201csignin\u201d, output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \u201cchild\u201d, assertProps = { assertThat(it.email).isEqualTo(\u201c test@foo.com \u201d) }, rendering = ChildRendering(\u201cmessage\u201d) ) .render { rendering -> assertThat(rendering.text).isEqualTo(\u201cfoo\u201d) } .verifyAction { action -> assertThat(action).isEqualTo(Action.CompleteLogin(success = true)) }","title":"Worker output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#rendering-event","text":"This is similar to the example above, but will test an event sent to the rendering instead. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \u201csignin\u201d ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \u201cchild\u201d, assertProps = { assertThat(it.email).isEqualTo(\u201c test@foo.com \u201d) }, rendering = ChildRendering(\u201cmessage\u201d) ) .render { rendering -> rendering.onCancelClicked() assertThat(rendering.text).isEqualTo(\u201cfoo\u201d) } .verifyAction { action -> assertThat(action).isEqualTo(Action.CancelLogin) }","title":"Rendering event"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#verify-action-result","text":"This test verifies the action result instead of the action itself. This technique is useful if the WorkflowAction is anonymous or inline. val currentState = \u2026 val previousState = \u2026 workflow .testRender( props = MyProps(\u2026), initialState = currentState ) .render { rendering -> rendering.onCancelClicked() } .verifyActionResult { newState, output -> // Check that the workflow navigated back correctly. assertThat(newState).isEqualTo(previousState) 1 2 // Check that the workflow didn't emit any output from the button click. assertThat(output).isNull() }","title":"Verify action result"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#too-many-outputs","text":"This is an example of what not to do \u2013 this test will error out because a worker is emitting and output and a rendering event is sent. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \u201csignin\u201d, output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \u201cchild\u201d, assertProps = { assertThat(it.email).isEqualTo(\u201c test@foo.com \u201d) }, rendering = ChildRendering(\u201cmessage\u201d) ) .render { rendering -> // This will throw and fail the test because the SubmitLoginWorker is also configured to emit // an output. rendering.onCancelClicked()","title":"Too many outputs"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#constructors","text":"RenderTester [jvm] fun RenderTester ()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#types","text":"Name Summary ChildWorkflowMatch [jvm] Content sealed class ChildWorkflowMatch RenderChildInvocation [jvm] Content class RenderChildInvocation ( workflow : Workflow < , *, *>, **props* : Any ?, outputType : KTypeProjection , renderingType : KTypeProjection , renderKey : String ) More info Describes a call to com.squareup.workflow1.RenderContext.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#functions","text":"Name Summary expectSideEffect [jvm] Content abstract fun expectSideEffect (description: String , exactMatch: Boolean = true, matcher: (key: String ) -> Boolean ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a side effect with a key that satisfies matcher . render [jvm] Content abstract fun render (block: ( RenderingT ) -> Unit = {}): RenderTestResult < PropsT , StateT , OutputT > More info Execute the workflow\u2019s render method and run block to perform assertions on and send events to the resulting rendering. requireExplicitWorkerExpectations [jvm] Content abstract fun requireExplicitWorkerExpectations (): RenderTester < PropsT , StateT , OutputT , RenderingT >","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#extensions","text":"Name Summary expectSideEffect [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectSideEffect (key: String ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a particular side effect. expectWorker [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (expected: WorkerT , key: String = \u201c\u201d, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT , WorkerOutputT , WorkerT : Worker < WorkerOutputT >> RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerClass: KClass WorkerT >, key: String = \u201c\u201d, crossinline assertWorker: ( WorkerT ) -> Unit = {}, output: WorkflowOutput < WorkerOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given workerClass . [jvm] Content fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorker (workerType: KType , key: String = \u201c\u201d, assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker whose KType matches workerType . expectWorkerOutputting [jvm] Content inline fun < PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkerOutputting (outputType: KType , key: String = \u201c\u201d, crossinline assertWorker: ( Worker < >) -> Unit = {}, output: WorkflowOutput < >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a Worker with the given outputType . expectWorkflow [jvm] Content @ ExperimentalWorkflowApi () inline fun < ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , key: String = \u201c\u201d, description: String = \u201c\u201d, noinline assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > @ ExperimentalWorkflowApi () fun < ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (identifier: WorkflowIdentifier , rendering: ChildRenderingT , output: WorkflowOutput < ChildOutputT >?, key: String = \u201c\u201d, description: String = \u201c\u201d, assertProps: (props: Any ?) -> Unit = {}): RenderTester < PropsT , StateT , OutputT , RenderingT > inline fun < ChildPropsT , ChildOutputT , ChildRenderingT , PropsT , StateT , OutputT , RenderingT > RenderTester < PropsT , StateT , OutputT , RenderingT >. expectWorkflow (workflowType: KClass <out Workflow < ChildPropsT , ChildOutputT , ChildRenderingT >>, rendering: ChildRenderingT , key: String = \u201c\u201d, crossinline assertProps: ( ChildPropsT ) -> Unit = {}, output: WorkflowOutput < ChildOutputT >? = null, description: String = \u201c\u201d): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to render a particular child workflow.","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-tester/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / RenderTester RenderTester \u00b6 [jvm] Content fun RenderTester ()","title":" render tester"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-tester/#rendertester","text":"[jvm] Content fun RenderTester ()","title":"RenderTester"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/expect-side-effect/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / expectSideEffect expectSideEffect \u00b6 [jvm] Content abstract fun expectSideEffect (description: String , exactMatch: Boolean = true, matcher: (key: String ) -> Boolean ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a side effect with a key that satisfies matcher . This expectation is strict, and will fail if multiple side effects match. Parameters \u00b6 jvm description String that will be used to describe this expectation in error messages. The description is required since no human-readable description can be derived from the predicate alone. exactMatch If true, then the test will fail if any other matching expectations are also exact matches, and the expectation will only be allowed to match a single side effect. If false, the match will only be used if no other expectations return exclusive matches (in which case the first match will be used), and the expectation may match multiple side effects. matcher A function that is passed the key value from com.squareup.workflow1.RenderContext.runningSideEffect and return true if this key is expected.","title":"Expect side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/expect-side-effect/#expectsideeffect","text":"[jvm] Content abstract fun expectSideEffect (description: String , exactMatch: Boolean = true, matcher: (key: String ) -> Boolean ): RenderTester < PropsT , StateT , OutputT , RenderingT > More info Specifies that this render pass is expected to run a side effect with a key that satisfies matcher . This expectation is strict, and will fail if multiple side effects match.","title":"expectSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/expect-side-effect/#parameters","text":"jvm description String that will be used to describe this expectation in error messages. The description is required since no human-readable description can be derived from the predicate alone. exactMatch If true, then the test will fail if any other matching expectations are also exact matches, and the expectation will only be allowed to match a single side effect. If false, the match will only be used if no other expectations return exclusive matches (in which case the first match will be used), and the expectation may match multiple side effects. matcher A function that is passed the key value from com.squareup.workflow1.RenderContext.runningSideEffect and return true if this key is expected.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/render/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / render render \u00b6 [jvm] Content abstract fun render (block: ( RenderingT ) -> Unit = {}): RenderTestResult < PropsT , StateT , OutputT > More info Execute the workflow\u2019s render method and run block to perform assertions on and send events to the resulting rendering. All workflows rendered/ran by the workflow must be specified before calling this method. Workers are optionally specified. Return \u00b6 A RenderTestResult that can be used to verify the WorkflowAction that was used to handle a workflow or worker output or a rendering event. Parameters \u00b6 jvm block Passed the result of the render pass to perform assertions on. If no child workflow or worker was configured to emit an output, may also invoke one of the rendering\u2019s event handlers. It is an error to invoke an event handler if a child emitted an output.","title":"Render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/render/#render","text":"[jvm] Content abstract fun render (block: ( RenderingT ) -> Unit = {}): RenderTestResult < PropsT , StateT , OutputT > More info Execute the workflow\u2019s render method and run block to perform assertions on and send events to the resulting rendering. All workflows rendered/ran by the workflow must be specified before calling this method. Workers are optionally specified.","title":"render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/render/#return","text":"A RenderTestResult that can be used to verify the WorkflowAction that was used to handle a workflow or worker output or a rendering event.","title":"Return"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/render/#parameters","text":"jvm block Passed the result of the render pass to perform assertions on. If no child workflow or worker was configured to emit an output, may also invoke one of the rendering\u2019s event handlers. It is an error to invoke an event handler if a child emitted an output.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/require-explicit-worker-expectations/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / requireExplicitWorkerExpectations requireExplicitWorkerExpectations \u00b6 [jvm] Content abstract fun requireExplicitWorkerExpectations (): RenderTester < PropsT , StateT , OutputT , RenderingT >","title":"Require explicit worker expectations"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/require-explicit-worker-expectations/#requireexplicitworkerexpectations","text":"[jvm] Content abstract fun requireExplicitWorkerExpectations (): RenderTester < PropsT , StateT , OutputT , RenderingT >","title":"requireExplicitWorkerExpectations"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch ChildWorkflowMatch \u00b6 [jvm] sealed class ChildWorkflowMatch Types \u00b6 Name Summary Matched [jvm] Content class Matched ( childRendering : Any ?, output : WorkflowOutput < Any ?>?) : RenderTester.ChildWorkflowMatch More info Indicates that the workflow matches the predicate. NotMatched [jvm] Content object NotMatched : RenderTester.ChildWorkflowMatch More info Indicates that the child workflow did not match the predicate and must match a different expectation. Inheritors \u00b6 Name RenderTester.ChildWorkflowMatch RenderTester.ChildWorkflowMatch","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/#childworkflowmatch","text":"[jvm] sealed class ChildWorkflowMatch","title":"ChildWorkflowMatch"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/#types","text":"Name Summary Matched [jvm] Content class Matched ( childRendering : Any ?, output : WorkflowOutput < Any ?>?) : RenderTester.ChildWorkflowMatch More info Indicates that the workflow matches the predicate. NotMatched [jvm] Content object NotMatched : RenderTester.ChildWorkflowMatch More info Indicates that the child workflow did not match the predicate and must match a different expectation.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/#inheritors","text":"Name RenderTester.ChildWorkflowMatch RenderTester.ChildWorkflowMatch","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / Matched Matched \u00b6 [jvm] class Matched ( childRendering : Any ?, output : WorkflowOutput < Any ?>?) : RenderTester.ChildWorkflowMatch Indicates that the workflow matches the predicate. Parameters \u00b6 jvm childRendering The value to return as the child\u2019s rendering. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . Constructors \u00b6 Matched [jvm] fun Matched (childRendering: Any ?, output: WorkflowOutput < Any ?>? = null)The value to return as the child\u2019s rendering. Properties \u00b6 Name Summary childRendering [jvm] val childRendering : Any ?The value to return as the child\u2019s rendering. output [jvm] val output : WorkflowOutput < Any ?>? = nullIf non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/#matched","text":"[jvm] class Matched ( childRendering : Any ?, output : WorkflowOutput < Any ?>?) : RenderTester.ChildWorkflowMatch Indicates that the workflow matches the predicate.","title":"Matched"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/#parameters","text":"jvm childRendering The value to return as the child\u2019s rendering. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/#constructors","text":"Matched [jvm] fun Matched (childRendering: Any ?, output: WorkflowOutput < Any ?>? = null)The value to return as the child\u2019s rendering.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/#properties","text":"Name Summary childRendering [jvm] val childRendering : Any ?The value to return as the child\u2019s rendering. output [jvm] val output : WorkflowOutput < Any ?>? = nullIf non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/-matched/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / Matched / Matched Matched \u00b6 [jvm] Content fun Matched (childRendering: Any ?, output: WorkflowOutput < Any ?>? = null) More info Parameters \u00b6 jvm childRendering The value to return as the child\u2019s rendering. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":" matched"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/-matched/#matched","text":"[jvm] Content fun Matched (childRendering: Any ?, output: WorkflowOutput < Any ?>? = null) More info","title":"Matched"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/-matched/#parameters","text":"jvm childRendering The value to return as the child\u2019s rendering. output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/child-rendering/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / Matched / childRendering childRendering \u00b6 [jvm] Content val childRendering : Any ? More info Parameters \u00b6 jvm childRendering The value to return as the child\u2019s rendering.","title":"Child rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/child-rendering/#childrendering","text":"[jvm] Content val childRendering : Any ? More info","title":"childRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/child-rendering/#parameters","text":"jvm childRendering The value to return as the child\u2019s rendering.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/output/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / Matched / output output \u00b6 [jvm] Content val output : WorkflowOutput < Any ?>? = null More info Parameters \u00b6 jvm output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":"Output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/output/#output","text":"[jvm] Content val output : WorkflowOutput < Any ?>? = null More info","title":"output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/output/#parameters","text":"jvm output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-not-matched/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / NotMatched NotMatched \u00b6 [jvm] object NotMatched : RenderTester.ChildWorkflowMatch Indicates that the child workflow did not match the predicate and must match a different expectation. The test will fail if all expectations return this value.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-not-matched/#notmatched","text":"[jvm] object NotMatched : RenderTester.ChildWorkflowMatch Indicates that the child workflow did not match the predicate and must match a different expectation. The test will fail if all expectations return this value.","title":"NotMatched"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation RenderChildInvocation \u00b6 [jvm] class RenderChildInvocation ( workflow : Workflow < , *, *>, **props* : Any ?, outputType : KTypeProjection , renderingType : KTypeProjection , renderKey : String ) Describes a call to com.squareup.workflow1.RenderContext.renderChild. Output and rendering types \u00b6 The testing library will attempt to determine the output and rendering types by using reflection to determine the type arguments that the concrete workflow class passes to the Workflow interface. This is subject to the limitations of Kotlin\u2019s reflection. Notably, there is a compiler bug ( KT-17103 ) that prevents reflecting on these types when the workflow is an anonymous class that was created by an inline function with reified types, such as Workflow.stateful and Workflow.stateless. Parameters \u00b6 jvm workflow The child workflow that is being rendered. props The props value passed to renderChild. outputType The KType of the workflow\u2019s OutputT. renderingType The KType of the workflow\u2019s RenderingT. renderKey The string key passed to renderChild. Constructors \u00b6 RenderChildInvocation [jvm] fun RenderChildInvocation (workflow: Workflow <*, *, *>, props: Any ?, outputType: KTypeProjection , renderingType: KTypeProjection , renderKey: String )The child workflow that is being rendered. Properties \u00b6 Name Summary outputType [jvm] val outputType : KTypeProjection The KType of the workflow\u2019s OutputT. props [jvm] val props : Any ?The props value passed to renderChild. renderingType [jvm] val renderingType : KTypeProjection The KType of the workflow\u2019s RenderingT. renderKey [jvm] val renderKey : String The string key passed to renderChild. workflow [jvm] val workflow : Workflow <*, *, *>The child workflow that is being rendered.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#renderchildinvocation","text":"[jvm] class RenderChildInvocation ( workflow : Workflow < , *, *>, **props* : Any ?, outputType : KTypeProjection , renderingType : KTypeProjection , renderKey : String ) Describes a call to com.squareup.workflow1.RenderContext.renderChild.","title":"RenderChildInvocation"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#output-and-rendering-types","text":"The testing library will attempt to determine the output and rendering types by using reflection to determine the type arguments that the concrete workflow class passes to the Workflow interface. This is subject to the limitations of Kotlin\u2019s reflection. Notably, there is a compiler bug ( KT-17103 ) that prevents reflecting on these types when the workflow is an anonymous class that was created by an inline function with reified types, such as Workflow.stateful and Workflow.stateless.","title":"Output and rendering types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#parameters","text":"jvm workflow The child workflow that is being rendered. props The props value passed to renderChild. outputType The KType of the workflow\u2019s OutputT. renderingType The KType of the workflow\u2019s RenderingT. renderKey The string key passed to renderChild.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#constructors","text":"RenderChildInvocation [jvm] fun RenderChildInvocation (workflow: Workflow <*, *, *>, props: Any ?, outputType: KTypeProjection , renderingType: KTypeProjection , renderKey: String )The child workflow that is being rendered.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#properties","text":"Name Summary outputType [jvm] val outputType : KTypeProjection The KType of the workflow\u2019s OutputT. props [jvm] val props : Any ?The props value passed to renderChild. renderingType [jvm] val renderingType : KTypeProjection The KType of the workflow\u2019s RenderingT. renderKey [jvm] val renderKey : String The string key passed to renderChild. workflow [jvm] val workflow : Workflow <*, *, *>The child workflow that is being rendered.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/-render-child-invocation/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / RenderChildInvocation RenderChildInvocation \u00b6 [jvm] Content fun RenderChildInvocation (workflow: Workflow <*, *, *>, props: Any ?, outputType: KTypeProjection , renderingType: KTypeProjection , renderKey: String ) More info Parameters \u00b6 jvm workflow The child workflow that is being rendered. props The props value passed to renderChild. outputType The KType of the workflow\u2019s OutputT. renderingType The KType of the workflow\u2019s RenderingT. renderKey The string key passed to renderChild.","title":" render child invocation"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/-render-child-invocation/#renderchildinvocation","text":"[jvm] Content fun RenderChildInvocation (workflow: Workflow <*, *, *>, props: Any ?, outputType: KTypeProjection , renderingType: KTypeProjection , renderKey: String ) More info","title":"RenderChildInvocation"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/-render-child-invocation/#parameters","text":"jvm workflow The child workflow that is being rendered. props The props value passed to renderChild. outputType The KType of the workflow\u2019s OutputT. renderingType The KType of the workflow\u2019s RenderingT. renderKey The string key passed to renderChild.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/output-type/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / outputType outputType \u00b6 [jvm] Content val outputType : KTypeProjection More info Parameters \u00b6 jvm outputType The KType of the workflow\u2019s OutputT.","title":"Output type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/output-type/#outputtype","text":"[jvm] Content val outputType : KTypeProjection More info","title":"outputType"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/output-type/#parameters","text":"jvm outputType The KType of the workflow\u2019s OutputT.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/props/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / props props \u00b6 [jvm] Content val props : Any ? More info Parameters \u00b6 jvm props The props value passed to renderChild.","title":"Props"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/props/#props","text":"[jvm] Content val props : Any ? More info","title":"props"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/props/#parameters","text":"jvm props The props value passed to renderChild.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/render-key/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / renderKey renderKey \u00b6 [jvm] Content val renderKey : String More info Parameters \u00b6 jvm renderKey The string key passed to renderChild.","title":"Render key"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/render-key/#renderkey","text":"[jvm] Content val renderKey : String More info","title":"renderKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/render-key/#parameters","text":"jvm renderKey The string key passed to renderChild.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/rendering-type/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / renderingType renderingType \u00b6 [jvm] Content val renderingType : KTypeProjection More info Parameters \u00b6 jvm renderingType The KType of the workflow\u2019s RenderingT.","title":"Rendering type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/rendering-type/#renderingtype","text":"[jvm] Content val renderingType : KTypeProjection More info","title":"renderingType"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/rendering-type/#parameters","text":"jvm renderingType The KType of the workflow\u2019s RenderingT.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/workflow/","text":"// workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / workflow workflow \u00b6 [jvm] Content val workflow : Workflow <*, *, *> More info Parameters \u00b6 jvm workflow The child workflow that is being rendered.","title":"Workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/workflow/#workflow","text":"[jvm] Content val workflow : Workflow <*, *, *> More info","title":"workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/workflow/#parameters","text":"jvm workflow The child workflow that is being rendered.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/","text":"// workflow / com.squareup.workflow1.testing / WorkerSink WorkerSink \u00b6 [jvm] class WorkerSink < T >( name : String , type : KClass <*>) : Worker < T > Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name. These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently. Parameters \u00b6 jvm name String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information. Constructors \u00b6 WorkerSink [jvm] fun WorkerSink (name: String , type: KClass <*>)String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Functions \u00b6 Name Summary doesSameWorkAs [jvm] Content open override fun doesSameWorkAs (otherWorker: Worker <*>): Boolean run [jvm] Content open override fun run (): Flow< T > send [jvm] Content fun send (value: T ) toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#workersink","text":"[jvm] class WorkerSink < T >( name : String , type : KClass <*>) : Worker < T > Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name. These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently.","title":"WorkerSink"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#parameters","text":"jvm name String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#constructors","text":"WorkerSink [jvm] fun WorkerSink (name: String , type: KClass <*>)String used to distinguish this worker from other WorkerSink s being ran by the same workflow.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#functions","text":"Name Summary doesSameWorkAs [jvm] Content open override fun doesSameWorkAs (otherWorker: Worker <*>): Boolean run [jvm] Content open override fun run (): Flow< T > send [jvm] Content fun send (value: T ) toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/-worker-sink/","text":"// workflow / com.squareup.workflow1.testing / WorkerSink / WorkerSink WorkerSink \u00b6 [jvm] Content fun WorkerSink (name: String , type: KClass <*>) More info Parameters \u00b6 jvm name String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information.","title":" worker sink"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/-worker-sink/#workersink","text":"[jvm] Content fun WorkerSink (name: String , type: KClass <*>) More info","title":"WorkerSink"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/-worker-sink/#parameters","text":"jvm name String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/does-same-work-as/","text":"// workflow / com.squareup.workflow1.testing / WorkerSink / doesSameWorkAs doesSameWorkAs \u00b6 [jvm] Content open override fun doesSameWorkAs (otherWorker: Worker <*>): Boolean","title":"Does same work as"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/does-same-work-as/#doessameworkas","text":"[jvm] Content open override fun doesSameWorkAs (otherWorker: Worker <*>): Boolean","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/run/","text":"// workflow / com.squareup.workflow1.testing / WorkerSink / run run \u00b6 [jvm] Content open override fun run (): Flow< T >","title":"Run"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/run/#run","text":"[jvm] Content open override fun run (): Flow< T >","title":"run"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/send/","text":"// workflow / com.squareup.workflow1.testing / WorkerSink / send send \u00b6 [jvm] Content fun send (value: T )","title":"Send"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/send/#send","text":"[jvm] Content fun send (value: T )","title":"send"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/to-string/","text":"// workflow / com.squareup.workflow1.testing / WorkerSink / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/","text":"// workflow / com.squareup.workflow1.testing / WorkerTester WorkerTester \u00b6 [jvm] interface WorkerTester < T > Functions \u00b6 Name Summary assertFinished [jvm] Content abstract suspend fun assertFinished () More info Suspends until the worker emits an output or finishes. assertNoOutput [jvm] Content abstract fun assertNoOutput () More info Throws an AssertionError if an output has been emitted since the last call to nextOutput . assertNotFinished [jvm] Content abstract fun assertNotFinished () More info Throws an AssertionError immediately if the worker is finished. cancelWorker [jvm] Content abstract suspend fun cancelWorker () More info Cancels the worker and suspends until it\u2019s finished cancelling (joined). getException [jvm] Content abstract suspend fun getException (): Throwable More info Suspends until the worker throws an exception, then returns it. nextOutput [jvm] Content abstract suspend fun nextOutput (): T More info Suspends until the worker emits its next value, then returns it.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/#workertester","text":"[jvm] interface WorkerTester < T >","title":"WorkerTester"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/#functions","text":"Name Summary assertFinished [jvm] Content abstract suspend fun assertFinished () More info Suspends until the worker emits an output or finishes. assertNoOutput [jvm] Content abstract fun assertNoOutput () More info Throws an AssertionError if an output has been emitted since the last call to nextOutput . assertNotFinished [jvm] Content abstract fun assertNotFinished () More info Throws an AssertionError immediately if the worker is finished. cancelWorker [jvm] Content abstract suspend fun cancelWorker () More info Cancels the worker and suspends until it\u2019s finished cancelling (joined). getException [jvm] Content abstract suspend fun getException (): Throwable More info Suspends until the worker throws an exception, then returns it. nextOutput [jvm] Content abstract suspend fun nextOutput (): T More info Suspends until the worker emits its next value, then returns it.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-finished/","text":"// workflow / com.squareup.workflow1.testing / WorkerTester / assertFinished assertFinished \u00b6 [jvm] Content abstract suspend fun assertFinished () More info Suspends until the worker emits an output or finishes. Throws an AssertionError if an output was emitted.","title":"Assert finished"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-finished/#assertfinished","text":"[jvm] Content abstract suspend fun assertFinished () More info Suspends until the worker emits an output or finishes. Throws an AssertionError if an output was emitted.","title":"assertFinished"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-no-output/","text":"// workflow / com.squareup.workflow1.testing / WorkerTester / assertNoOutput assertNoOutput \u00b6 [jvm] Content abstract fun assertNoOutput () More info Throws an AssertionError if an output has been emitted since the last call to nextOutput .","title":"Assert no output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-no-output/#assertnooutput","text":"[jvm] Content abstract fun assertNoOutput () More info Throws an AssertionError if an output has been emitted since the last call to nextOutput .","title":"assertNoOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-not-finished/","text":"// workflow / com.squareup.workflow1.testing / WorkerTester / assertNotFinished assertNotFinished \u00b6 [jvm] Content abstract fun assertNotFinished () More info Throws an AssertionError immediately if the worker is finished.","title":"Assert not finished"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-not-finished/#assertnotfinished","text":"[jvm] Content abstract fun assertNotFinished () More info Throws an AssertionError immediately if the worker is finished.","title":"assertNotFinished"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/cancel-worker/","text":"// workflow / com.squareup.workflow1.testing / WorkerTester / cancelWorker cancelWorker \u00b6 [jvm] Content abstract suspend fun cancelWorker () More info Cancels the worker and suspends until it\u2019s finished cancelling (joined).","title":"Cancel worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/cancel-worker/#cancelworker","text":"[jvm] Content abstract suspend fun cancelWorker () More info Cancels the worker and suspends until it\u2019s finished cancelling (joined).","title":"cancelWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/get-exception/","text":"// workflow / com.squareup.workflow1.testing / WorkerTester / getException getException \u00b6 [jvm] Content abstract suspend fun getException (): Throwable More info Suspends until the worker throws an exception, then returns it.","title":"Get exception"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/get-exception/#getexception","text":"[jvm] Content abstract suspend fun getException (): Throwable More info Suspends until the worker throws an exception, then returns it.","title":"getException"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/next-output/","text":"// workflow / com.squareup.workflow1.testing / WorkerTester / nextOutput nextOutput \u00b6 [jvm] Content abstract suspend fun nextOutput (): T More info Suspends until the worker emits its next value, then returns it.","title":"Next output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/next-output/#nextoutput","text":"[jvm] Content abstract suspend fun nextOutput (): T More info Suspends until the worker emits its next value, then returns it.","title":"nextOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams WorkflowTestParams \u00b6 [jvm] @TestOnly() class WorkflowTestParams StateT >( startFrom : WorkflowTestParams.StartMode < StateT >, checkRenderIdempotence : Boolean ) Defines configuration for workflow testing infrastructure such as testRender, testFromStart. and test. Parameters \u00b6 jvm startFrom How to start the workflow \u2013 see StartMode . checkRenderIdempotence If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false. Constructors \u00b6 WorkflowTestParams [jvm] fun StateT > WorkflowTestParams (startFrom: WorkflowTestParams.StartMode < StateT > = StartFresh, checkRenderIdempotence: Boolean = true)How to start the workflow \u2013 see StartMode . Types \u00b6 Name Summary StartMode [jvm] Content sealed class StartMode StateT > More info Defines how to start the workflow for tests. Properties \u00b6 Name Summary checkRenderIdempotence [jvm] val checkRenderIdempotence : Boolean = trueIf true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. startFrom [jvm] val startFrom : WorkflowTestParams.StartMode < StateT >How to start the workflow \u2013 see StartMode .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#workflowtestparams","text":"[jvm] @TestOnly() class WorkflowTestParams StateT >( startFrom : WorkflowTestParams.StartMode < StateT >, checkRenderIdempotence : Boolean ) Defines configuration for workflow testing infrastructure such as testRender, testFromStart. and test.","title":"WorkflowTestParams"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#parameters","text":"jvm startFrom How to start the workflow \u2013 see StartMode . checkRenderIdempotence If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#constructors","text":"WorkflowTestParams [jvm] fun StateT > WorkflowTestParams (startFrom: WorkflowTestParams.StartMode < StateT > = StartFresh, checkRenderIdempotence: Boolean = true)How to start the workflow \u2013 see StartMode .","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#types","text":"Name Summary StartMode [jvm] Content sealed class StartMode StateT > More info Defines how to start the workflow for tests.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#properties","text":"Name Summary checkRenderIdempotence [jvm] val checkRenderIdempotence : Boolean = trueIf true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. startFrom [jvm] val startFrom : WorkflowTestParams.StartMode < StateT >How to start the workflow \u2013 see StartMode .","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-workflow-test-params/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / WorkflowTestParams WorkflowTestParams \u00b6 [jvm] Content fun StateT > WorkflowTestParams (startFrom: WorkflowTestParams.StartMode < StateT > = StartFresh, checkRenderIdempotence: Boolean = true) More info Parameters \u00b6 jvm startFrom How to start the workflow \u2013 see StartMode . checkRenderIdempotence If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":" workflow test params"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-workflow-test-params/#workflowtestparams","text":"[jvm] Content fun StateT > WorkflowTestParams (startFrom: WorkflowTestParams.StartMode < StateT > = StartFresh, checkRenderIdempotence: Boolean = true) More info","title":"WorkflowTestParams"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-workflow-test-params/#parameters","text":"jvm startFrom How to start the workflow \u2013 see StartMode . checkRenderIdempotence If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/check-render-idempotence/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / checkRenderIdempotence checkRenderIdempotence \u00b6 [jvm] Content val checkRenderIdempotence : Boolean = true More info Parameters \u00b6 jvm checkRenderIdempotence If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Check render idempotence"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/check-render-idempotence/#checkrenderidempotence","text":"[jvm] Content val checkRenderIdempotence : Boolean = true More info","title":"checkRenderIdempotence"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/check-render-idempotence/#parameters","text":"jvm checkRenderIdempotence If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/start-from/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / startFrom startFrom \u00b6 [jvm] Content val startFrom : WorkflowTestParams.StartMode < StateT > More info Parameters \u00b6 jvm startFrom How to start the workflow \u2013 see StartMode .","title":"Start from"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/start-from/#startfrom","text":"[jvm] Content val startFrom : WorkflowTestParams.StartMode < StateT > More info","title":"startFrom"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/start-from/#parameters","text":"jvm startFrom How to start the workflow \u2013 see StartMode .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode StartMode \u00b6 [jvm] sealed class StartMode StateT > Defines how to start the workflow for tests. See the documentation on individual cases for more information: [StartFresh](-start-fresh/index.md) [StartFromWorkflowSnapshot](-start-from-workflow-snapshot/index.md) [StartFromCompleteSnapshot](-start-from-complete-snapshot/index.md) [StartFromState](-start-from-state/index.md) Types \u00b6 Name Summary StartFresh [jvm] Content object StartFresh : WorkflowTestParams.StartMode < Nothing > More info Starts the workflow from its initial state (as specified by initial state ), with a null snapshot. StartFromCompleteSnapshot [jvm] Content class StartFromCompleteSnapshot ( snapshot : TreeSnapshot ) : WorkflowTestParams.StartMode < Nothing > More info Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. StartFromState [jvm] Content class StartFromState < StateT >( state : StateT ) : WorkflowTestParams.StartMode < StateT > More info Starts the workflow from an exact state. StartFromWorkflowSnapshot [jvm] Content class StartFromWorkflowSnapshot ( snapshot : Snapshot ) : WorkflowTestParams.StartMode < Nothing > More info Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Inheritors \u00b6 Name WorkflowTestParams.StartMode WorkflowTestParams.StartMode WorkflowTestParams.StartMode WorkflowTestParams.StartMode","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/#startmode","text":"[jvm] sealed class StartMode StateT > Defines how to start the workflow for tests. See the documentation on individual cases for more information: [StartFresh](-start-fresh/index.md) [StartFromWorkflowSnapshot](-start-from-workflow-snapshot/index.md) [StartFromCompleteSnapshot](-start-from-complete-snapshot/index.md) [StartFromState](-start-from-state/index.md)","title":"StartMode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/#types","text":"Name Summary StartFresh [jvm] Content object StartFresh : WorkflowTestParams.StartMode < Nothing > More info Starts the workflow from its initial state (as specified by initial state ), with a null snapshot. StartFromCompleteSnapshot [jvm] Content class StartFromCompleteSnapshot ( snapshot : TreeSnapshot ) : WorkflowTestParams.StartMode < Nothing > More info Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. StartFromState [jvm] Content class StartFromState < StateT >( state : StateT ) : WorkflowTestParams.StartMode < StateT > More info Starts the workflow from an exact state. StartFromWorkflowSnapshot [jvm] Content class StartFromWorkflowSnapshot ( snapshot : Snapshot ) : WorkflowTestParams.StartMode < Nothing > More info Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/#inheritors","text":"Name WorkflowTestParams.StartMode WorkflowTestParams.StartMode WorkflowTestParams.StartMode WorkflowTestParams.StartMode","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-fresh/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFresh StartFresh \u00b6 [jvm] object StartFresh : WorkflowTestParams.StartMode < Nothing > Starts the workflow from its initial state (as specified by initial state ), with a null snapshot.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-fresh/#startfresh","text":"[jvm] object StartFresh : WorkflowTestParams.StartMode < Nothing > Starts the workflow from its initial state (as specified by initial state ), with a null snapshot.","title":"StartFresh"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromCompleteSnapshot StartFromCompleteSnapshot \u00b6 [jvm] class StartFromCompleteSnapshot ( snapshot : TreeSnapshot ) : WorkflowTestParams.StartMode < Nothing > Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow. Parameters \u00b6 jvm snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot. To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot . Constructors \u00b6 StartFromCompleteSnapshot [jvm] fun StartFromCompleteSnapshot (snapshot: TreeSnapshot )A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot. Properties \u00b6 Name Summary snapshot [jvm] val snapshot : TreeSnapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#startfromcompletesnapshot","text":"[jvm] class StartFromCompleteSnapshot ( snapshot : TreeSnapshot ) : WorkflowTestParams.StartMode < Nothing > Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow.","title":"StartFromCompleteSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#parameters","text":"jvm snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot. To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#constructors","text":"StartFromCompleteSnapshot [jvm] fun StartFromCompleteSnapshot (snapshot: TreeSnapshot )A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#properties","text":"Name Summary snapshot [jvm] val snapshot : TreeSnapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/-start-from-complete-snapshot/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromCompleteSnapshot / StartFromCompleteSnapshot StartFromCompleteSnapshot \u00b6 [jvm] Content fun StartFromCompleteSnapshot (snapshot: TreeSnapshot ) More info Parameters \u00b6 jvm snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot. To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":" start from complete snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/-start-from-complete-snapshot/#startfromcompletesnapshot","text":"[jvm] Content fun StartFromCompleteSnapshot (snapshot: TreeSnapshot ) More info","title":"StartFromCompleteSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/-start-from-complete-snapshot/#parameters","text":"jvm snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot. To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/snapshot/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromCompleteSnapshot / snapshot snapshot \u00b6 [jvm] Content val snapshot : TreeSnapshot More info Parameters \u00b6 jvm snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot. To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/snapshot/#snapshot","text":"[jvm] Content val snapshot : TreeSnapshot More info","title":"snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/snapshot/#parameters","text":"jvm snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot. To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromState StartFromState \u00b6 [jvm] class StartFromState < StateT >( state : StateT ) : WorkflowTestParams.StartMode < StateT > Starts the workflow from an exact state. Only applies to StatefulWorkflow s. Constructors \u00b6 StartFromState [jvm] fun < StateT > StartFromState (state: StateT ) Properties \u00b6 Name Summary state [jvm] val state : StateT","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/#startfromstate","text":"[jvm] class StartFromState < StateT >( state : StateT ) : WorkflowTestParams.StartMode < StateT > Starts the workflow from an exact state. Only applies to StatefulWorkflow s.","title":"StartFromState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/#constructors","text":"StartFromState [jvm] fun < StateT > StartFromState (state: StateT )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/#properties","text":"Name Summary state [jvm] val state : StateT","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/-start-from-state/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromState / StartFromState StartFromState \u00b6 [jvm] Content fun < StateT > StartFromState (state: StateT )","title":" start from state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/-start-from-state/#startfromstate","text":"[jvm] Content fun < StateT > StartFromState (state: StateT )","title":"StartFromState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/state/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromState / state state \u00b6 [jvm] Content val state : StateT","title":"State"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/state/#state","text":"[jvm] Content val state : StateT","title":"state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromWorkflowSnapshot StartFromWorkflowSnapshot \u00b6 [jvm] class StartFromWorkflowSnapshot ( snapshot : Snapshot ) : WorkflowTestParams.StartMode < Nothing > Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime. Parameters \u00b6 jvm snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot . Constructors \u00b6 StartFromWorkflowSnapshot [jvm] fun StartFromWorkflowSnapshot (snapshot: Snapshot )A Snapshot that can be directly parsed by a workflow\u2019s initialState method. Properties \u00b6 Name Summary snapshot [jvm] val snapshot : Snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#startfromworkflowsnapshot","text":"[jvm] class StartFromWorkflowSnapshot ( snapshot : Snapshot ) : WorkflowTestParams.StartMode < Nothing > Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime.","title":"StartFromWorkflowSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#parameters","text":"jvm snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#constructors","text":"StartFromWorkflowSnapshot [jvm] fun StartFromWorkflowSnapshot (snapshot: Snapshot )A Snapshot that can be directly parsed by a workflow\u2019s initialState method.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#properties","text":"Name Summary snapshot [jvm] val snapshot : Snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/-start-from-workflow-snapshot/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromWorkflowSnapshot / StartFromWorkflowSnapshot StartFromWorkflowSnapshot \u00b6 [jvm] Content fun StartFromWorkflowSnapshot (snapshot: Snapshot ) More info Parameters \u00b6 jvm snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":" start from workflow snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/-start-from-workflow-snapshot/#startfromworkflowsnapshot","text":"[jvm] Content fun StartFromWorkflowSnapshot (snapshot: Snapshot ) More info","title":"StartFromWorkflowSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/-start-from-workflow-snapshot/#parameters","text":"jvm snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/snapshot/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromWorkflowSnapshot / snapshot snapshot \u00b6 [jvm] Content val snapshot : Snapshot More info Parameters \u00b6 jvm snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/snapshot/#snapshot","text":"[jvm] Content val snapshot : Snapshot More info","title":"snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/snapshot/#parameters","text":"jvm snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime WorkflowTestRuntime \u00b6 [jvm] class WorkflowTestRuntime < PropsT , OutputT , RenderingT > Runs a Workflow and provides access to its renderings , outputs , and snapshots . For each of renderings, outputs, and snapshots, this class gives you a few ways to access information about them: [awaitNextRendering](await-next-rendering.md), [awaitNextOutput](await-next-output.md), [awaitNextSnapshot](await-next-snapshot.md) Block until something becomes available, and then return it. [hasRendering](has-rendering.md), [hasOutput](has-output.md), [hasSnapshot](has-snapshot.md) Return true if the previous methods won't block. [sendProps](send-props.md) Send a new [PropsT](index.md) to the root workflow. Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary awaitNextOutput [jvm] Content fun awaitNextOutput (timeoutMs: Long ? = null): OutputT More info Blocks until the workflow emits an output, then returns it. awaitNextRendering [jvm] Content fun awaitNextRendering (timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT More info Blocks until the workflow emits a rendering, then returns it. awaitNextSnapshot [jvm] Content fun awaitNextSnapshot (timeoutMs: Long ? = null, skipIntermediate: Boolean = true): TreeSnapshot More info Blocks until the workflow emits a snapshot, then returns it. sendProps [jvm] Content fun sendProps (input: PropsT ) More info Sends input to the workflow. Properties \u00b6 Name Summary hasOutput [jvm] val hasOutput : Boolean True if the workflow has emitted a new output that is ready to be consumed. hasRendering [jvm] val hasRendering : Boolean True if the workflow has emitted a new rendering that is ready to be consumed. hasSnapshot [jvm] val hasSnapshot : Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/#workflowtestruntime","text":"[jvm] class WorkflowTestRuntime < PropsT , OutputT , RenderingT > Runs a Workflow and provides access to its renderings , outputs , and snapshots . For each of renderings, outputs, and snapshots, this class gives you a few ways to access information about them: [awaitNextRendering](await-next-rendering.md), [awaitNextOutput](await-next-output.md), [awaitNextSnapshot](await-next-snapshot.md) Block until something becomes available, and then return it. [hasRendering](has-rendering.md), [hasOutput](has-output.md), [hasSnapshot](has-snapshot.md) Return true if the previous methods won't block. [sendProps](send-props.md) Send a new [PropsT](index.md) to the root workflow.","title":"WorkflowTestRuntime"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/#functions","text":"Name Summary awaitNextOutput [jvm] Content fun awaitNextOutput (timeoutMs: Long ? = null): OutputT More info Blocks until the workflow emits an output, then returns it. awaitNextRendering [jvm] Content fun awaitNextRendering (timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT More info Blocks until the workflow emits a rendering, then returns it. awaitNextSnapshot [jvm] Content fun awaitNextSnapshot (timeoutMs: Long ? = null, skipIntermediate: Boolean = true): TreeSnapshot More info Blocks until the workflow emits a snapshot, then returns it. sendProps [jvm] Content fun sendProps (input: PropsT ) More info Sends input to the workflow.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/#properties","text":"Name Summary hasOutput [jvm] val hasOutput : Boolean True if the workflow has emitted a new output that is ready to be consumed. hasRendering [jvm] val hasRendering : Boolean True if the workflow has emitted a new rendering that is ready to be consumed. hasSnapshot [jvm] val hasSnapshot : Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-output/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / awaitNextOutput awaitNextOutput \u00b6 [jvm] Content fun awaitNextOutput (timeoutMs: Long ? = null): OutputT More info Blocks until the workflow emits an output, then returns it. Parameters \u00b6 jvm timeoutMs The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Await next output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-output/#awaitnextoutput","text":"[jvm] Content fun awaitNextOutput (timeoutMs: Long ? = null): OutputT More info Blocks until the workflow emits an output, then returns it.","title":"awaitNextOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-output/#parameters","text":"jvm timeoutMs The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-rendering/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / awaitNextRendering awaitNextRendering \u00b6 [jvm] Content fun awaitNextRendering (timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT More info Blocks until the workflow emits a rendering, then returns it. Parameters \u00b6 jvm timeoutMs The maximum amount of time to wait for a rendering to be emitted. If null, WorkflowTestRuntime.DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate If true, and the workflow has emitted multiple renderings, all but the most recent one will be dropped.","title":"Await next rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-rendering/#awaitnextrendering","text":"[jvm] Content fun awaitNextRendering (timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT More info Blocks until the workflow emits a rendering, then returns it.","title":"awaitNextRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-rendering/#parameters","text":"jvm timeoutMs The maximum amount of time to wait for a rendering to be emitted. If null, WorkflowTestRuntime.DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate If true, and the workflow has emitted multiple renderings, all but the most recent one will be dropped.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-snapshot/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / awaitNextSnapshot awaitNextSnapshot \u00b6 [jvm] Content fun awaitNextSnapshot (timeoutMs: Long ? = null, skipIntermediate: Boolean = true): TreeSnapshot More info Blocks until the workflow emits a snapshot, then returns it. The returned snapshot will be the snapshot only of the root workflow. It will be null if snapshotState returned an empty Snapshot . Parameters \u00b6 jvm timeoutMs The maximum amount of time to wait for a snapshot to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate If true, and the workflow has emitted multiple snapshots, all but the most recent one will be dropped.","title":"Await next snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-snapshot/#awaitnextsnapshot","text":"[jvm] Content fun awaitNextSnapshot (timeoutMs: Long ? = null, skipIntermediate: Boolean = true): TreeSnapshot More info Blocks until the workflow emits a snapshot, then returns it. The returned snapshot will be the snapshot only of the root workflow. It will be null if snapshotState returned an empty Snapshot .","title":"awaitNextSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-snapshot/#parameters","text":"jvm timeoutMs The maximum amount of time to wait for a snapshot to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate If true, and the workflow has emitted multiple snapshots, all but the most recent one will be dropped.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-output/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / hasOutput hasOutput \u00b6 [jvm] Content val hasOutput : Boolean More info True if the workflow has emitted a new output that is ready to be consumed.","title":"Has output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-output/#hasoutput","text":"[jvm] Content val hasOutput : Boolean More info True if the workflow has emitted a new output that is ready to be consumed.","title":"hasOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-rendering/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / hasRendering hasRendering \u00b6 [jvm] Content val hasRendering : Boolean More info True if the workflow has emitted a new rendering that is ready to be consumed.","title":"Has rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-rendering/#hasrendering","text":"[jvm] Content val hasRendering : Boolean More info True if the workflow has emitted a new rendering that is ready to be consumed.","title":"hasRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-snapshot/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / hasSnapshot hasSnapshot \u00b6 [jvm] Content val hasSnapshot : Boolean More info True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"Has snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-snapshot/#hassnapshot","text":"[jvm] Content val hasSnapshot : Boolean More info True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"hasSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/send-props/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / sendProps sendProps \u00b6 [jvm] Content fun sendProps (input: PropsT ) More info Sends input to the workflow.","title":"Send props"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/send-props/#sendprops","text":"[jvm] Content fun sendProps (input: PropsT ) More info Sends input to the workflow.","title":"sendProps"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/-companion/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / Companion Companion \u00b6 [jvm] object Companion Properties \u00b6 Name Summary DEFAULT_TIMEOUT_MS [jvm] const val DEFAULT_TIMEOUT_MS : Long = 500","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/-companion/#properties","text":"Name Summary DEFAULT_TIMEOUT_MS [jvm] const val DEFAULT_TIMEOUT_MS : Long = 500","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/-companion/-d-e-f-a-u-l-t_-t-i-m-e-o-u-t_-m-s/","text":"// workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / Companion / DEFAULT_TIMEOUT_MS DEFAULT_TIMEOUT_MS \u00b6 [jvm] Content const val DEFAULT_TIMEOUT_MS : Long = 500","title":" d e f a u l t  t i m e o u t  m s"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/-companion/-d-e-f-a-u-l-t_-t-i-m-e-o-u-t_-m-s/#default_timeout_ms","text":"[jvm] Content const val DEFAULT_TIMEOUT_MS : Long = 500","title":"DEFAULT_TIMEOUT_MS"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/","text":"// workflow / com.squareup.workflow1.ui Package com.squareup.workflow1.ui \u00b6 Types \u00b6 Name Summary AndroidViewRendering [androidJvm] Content @WorkflowUiExperimentalApi() interface AndroidViewRendering < V : AndroidViewRendering < V >> More info Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. BackPressHandler [androidJvm] Content @WorkflowUiExperimentalApi() typealias BackPressHandler = () -> Unit More info A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. BuilderViewFactory [androidJvm] Content @WorkflowUiExperimentalApi() class BuilderViewFactory < RenderingT : Any >( type : KClass < RenderingT >, viewConstructor : ( RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?) -> View ) : ViewFactory < RenderingT > More info A ViewFactory that creates View s that need to be generated from code. Compatible [jvm] Content @ WorkflowUiExperimentalApi () interface Compatible More info Implemented by objects whose compatibility requires more nuance than just being of the same type. DecorativeViewFactory [androidJvm] Content @WorkflowUiExperimentalApi() class DecorativeViewFactory < OuterT : Any , InnerT : Any >( type : KClass < OuterT >, map : ( OuterT , ViewEnvironment ) -> Pair < InnerT , ViewEnvironment >, initializeView : View .() -> Unit , doShowRendering : (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit ) : ViewFactory < OuterT > More info A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . LayoutRunner [androidJvm] Content @WorkflowUiExperimentalApi() fun fun interface LayoutRunner < RenderingT : Any > More info A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . Named [jvm] Content @ WorkflowUiExperimentalApi () data class Named < W : Any >( wrapped : W , name : String ) : Compatible More info Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. NamedViewFactory [androidJvm] Content @WorkflowUiExperimentalApi() object NamedViewFactory : ViewFactory <Named<*>> More info ViewFactory that allows views to display instances of Named. ShowRenderingTag [androidJvm] Content @WorkflowUiExperimentalApi() data class ShowRenderingTag RenderingT : Any >( showing : RenderingT , environment : ViewEnvironment , showRendering : ViewShowRendering < RenderingT >) More info ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . ViewBindingInflater [androidJvm] Content @WorkflowUiExperimentalApi() typealias ViewBindingInflater < BindingT > = ( LayoutInflater , ViewGroup ?, Boolean ) -> BindingT ViewEnvironment [androidJvm] Content @WorkflowUiExperimentalApi() class ViewEnvironment ( map : Map < ViewEnvironmentKey <*>, Any >) More info Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. ViewEnvironmentKey [androidJvm] Content @WorkflowUiExperimentalApi() abstract class ViewEnvironmentKey < T : Any >( type : KClass < T >) More info Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. ViewFactory [androidJvm] Content @WorkflowUiExperimentalApi() interface ViewFactory RenderingT : Any > More info Factory for View instances that can show renderings of type RenderingT . ViewRegistry [androidJvm] Content @WorkflowUiExperimentalApi() interface ViewRegistry More info The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. ViewShowRendering [androidJvm] Content @WorkflowUiExperimentalApi() typealias ViewShowRendering < RenderingT > = (@ UnsafeVariance () RenderingT , ViewEnvironment ) -> Unit More info Function attached to a view created by ViewFactory , to allow it to respond to View.showRendering . WorkflowLayout [androidJvm] Content @WorkflowUiExperimentalApi() class WorkflowLayout ( context : Context , attributeSet : AttributeSet ?) : FrameLayout More info A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. WorkflowUiExperimentalApi [jvm] Content @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.PROPERTY , AnnotationTarget.FUNCTION , AnnotationTarget.TYPEALIAS ]) annotation class WorkflowUiExperimentalApi More info Marks Workflow user interface APIs which are still in flux. WorkflowViewStub [androidJvm] Content @WorkflowUiExperimentalApi() class WorkflowViewStub @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : View More info A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . Functions \u00b6 Name Summary bindShowRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . bindShowRendering (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , showRendering: ViewShowRendering < RenderingT >) More info Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. buildView [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null, initializeView: View .() -> Unit = { showFirstRendering () }): View More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. canShowRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun View . canShowRendering (rendering: Any ): Boolean More info It is usually more convenient to use WorkflowViewStub than to call this method directly. compatible [jvm] Content @ WorkflowUiExperimentalApi () fun compatible (me: Any , you: Any ): Boolean More info Normally returns true if me and you are instances of the same class. getFactoryForRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . getFactoryForRendering (rendering: RenderingT ): ViewFactory < RenderingT > More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. getRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . getRendering (): RenderingT ? More info Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . getShowRendering (): ViewShowRendering < RenderingT >? More info Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. onBackPressedDispatcherOwnerOrNull [androidJvm] Content @WorkflowUiExperimentalApi() tailrec fun Context . onBackPressedDispatcherOwnerOrNull (): OnBackPressedDispatcherOwner ? plus [androidJvm] Content @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (binding: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (other: ViewRegistry ): ViewRegistry renderWorkflowIn [androidJvm] Content @WorkflowUiExperimentalApi() fun < OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< Unit , OutputT , RenderingT >, scope: CoroutineScope, savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that takes no input (that is, has PropsT set to Unit ). [androidJvm] Content @WorkflowUiExperimentalApi() fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< PropsT , OutputT , RenderingT >, scope: CoroutineScope, prop: PropsT , savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that requires one input value ( prop ) to run. [androidJvm] Content @WorkflowUiExperimentalApi() fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< PropsT , OutputT , RenderingT >, scope: CoroutineScope, props: StateFlow< PropsT >, savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that requires input ( props ) to run. setTextChangedListener [androidJvm] Content @WorkflowUiExperimentalApi() fun EditText . setTextChangedListener (listener: ( CharSequence ) -> Unit ?) More info Helper for setting a simple function as a callback to be invoked whenever an EditText text value changes. showFirstRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . showFirstRendering () More info Default implementation for the initializeView argument of ViewRegistry.buildView , and for DecorativeViewFactory.initializeView. showRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . showRendering (rendering: RenderingT , viewEnvironment: ViewEnvironment ) More info It is usually more convenient to use WorkflowViewStub than to call this method directly. toParcelable [androidJvm] Content inline fun < T : Parcelable > Snapshot . toParcelable (): T ? inline fun < T : Parcelable > ByteString. toParcelable (): T toSnapshot [androidJvm] Content fun Parcelable . toSnapshot (): Snapshot More info Wraps receiver in a Snapshot suitable for use with com.squareup.workflow1.StatefulWorkflow. updateText [androidJvm] Content @WorkflowUiExperimentalApi() fun EditText . updateText (text: CharSequence ) More info Helper for setting the text value of an EditText without disrupting the IME connection, or firing change listeners registered via setTextChangedListener if the new text is actually different than the old text. ViewRegistry [androidJvm] Content @WorkflowUiExperimentalApi() fun ViewRegistry (): ViewRegistry More info Returns a ViewRegistry that contains no bindings. [androidJvm] Content @WorkflowUiExperimentalApi() fun ViewRegistry (vararg bindings: ViewFactory <*>): ViewRegistry Properties \u00b6 Name Summary backPressedHandler [androidJvm] @WorkflowUiExperimentalApi() var View . backPressedHandler : BackPressHandler ?A function to be called if the device back button is pressed while this view is attached to a window. environment [androidJvm] @WorkflowUiExperimentalApi() val View . environment : ViewEnvironment ?Returns the most recent ViewEnvironment that apply to this view, or null if bindShowRendering has never been called.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/#package-comsquareupworkflow1ui","text":"","title":"Package com.squareup.workflow1.ui"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/#types","text":"Name Summary AndroidViewRendering [androidJvm] Content @WorkflowUiExperimentalApi() interface AndroidViewRendering < V : AndroidViewRendering < V >> More info Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. BackPressHandler [androidJvm] Content @WorkflowUiExperimentalApi() typealias BackPressHandler = () -> Unit More info A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. BuilderViewFactory [androidJvm] Content @WorkflowUiExperimentalApi() class BuilderViewFactory < RenderingT : Any >( type : KClass < RenderingT >, viewConstructor : ( RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?) -> View ) : ViewFactory < RenderingT > More info A ViewFactory that creates View s that need to be generated from code. Compatible [jvm] Content @ WorkflowUiExperimentalApi () interface Compatible More info Implemented by objects whose compatibility requires more nuance than just being of the same type. DecorativeViewFactory [androidJvm] Content @WorkflowUiExperimentalApi() class DecorativeViewFactory < OuterT : Any , InnerT : Any >( type : KClass < OuterT >, map : ( OuterT , ViewEnvironment ) -> Pair < InnerT , ViewEnvironment >, initializeView : View .() -> Unit , doShowRendering : (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit ) : ViewFactory < OuterT > More info A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . LayoutRunner [androidJvm] Content @WorkflowUiExperimentalApi() fun fun interface LayoutRunner < RenderingT : Any > More info A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . Named [jvm] Content @ WorkflowUiExperimentalApi () data class Named < W : Any >( wrapped : W , name : String ) : Compatible More info Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. NamedViewFactory [androidJvm] Content @WorkflowUiExperimentalApi() object NamedViewFactory : ViewFactory <Named<*>> More info ViewFactory that allows views to display instances of Named. ShowRenderingTag [androidJvm] Content @WorkflowUiExperimentalApi() data class ShowRenderingTag RenderingT : Any >( showing : RenderingT , environment : ViewEnvironment , showRendering : ViewShowRendering < RenderingT >) More info ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . ViewBindingInflater [androidJvm] Content @WorkflowUiExperimentalApi() typealias ViewBindingInflater < BindingT > = ( LayoutInflater , ViewGroup ?, Boolean ) -> BindingT ViewEnvironment [androidJvm] Content @WorkflowUiExperimentalApi() class ViewEnvironment ( map : Map < ViewEnvironmentKey <*>, Any >) More info Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. ViewEnvironmentKey [androidJvm] Content @WorkflowUiExperimentalApi() abstract class ViewEnvironmentKey < T : Any >( type : KClass < T >) More info Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. ViewFactory [androidJvm] Content @WorkflowUiExperimentalApi() interface ViewFactory RenderingT : Any > More info Factory for View instances that can show renderings of type RenderingT . ViewRegistry [androidJvm] Content @WorkflowUiExperimentalApi() interface ViewRegistry More info The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. ViewShowRendering [androidJvm] Content @WorkflowUiExperimentalApi() typealias ViewShowRendering < RenderingT > = (@ UnsafeVariance () RenderingT , ViewEnvironment ) -> Unit More info Function attached to a view created by ViewFactory , to allow it to respond to View.showRendering . WorkflowLayout [androidJvm] Content @WorkflowUiExperimentalApi() class WorkflowLayout ( context : Context , attributeSet : AttributeSet ?) : FrameLayout More info A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. WorkflowUiExperimentalApi [jvm] Content @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.PROPERTY , AnnotationTarget.FUNCTION , AnnotationTarget.TYPEALIAS ]) annotation class WorkflowUiExperimentalApi More info Marks Workflow user interface APIs which are still in flux. WorkflowViewStub [androidJvm] Content @WorkflowUiExperimentalApi() class WorkflowViewStub @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : View More info A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/#functions","text":"Name Summary bindShowRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . bindShowRendering (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , showRendering: ViewShowRendering < RenderingT >) More info Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. buildView [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null, initializeView: View .() -> Unit = { showFirstRendering () }): View More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. canShowRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun View . canShowRendering (rendering: Any ): Boolean More info It is usually more convenient to use WorkflowViewStub than to call this method directly. compatible [jvm] Content @ WorkflowUiExperimentalApi () fun compatible (me: Any , you: Any ): Boolean More info Normally returns true if me and you are instances of the same class. getFactoryForRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . getFactoryForRendering (rendering: RenderingT ): ViewFactory < RenderingT > More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. getRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . getRendering (): RenderingT ? More info Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . getShowRendering (): ViewShowRendering < RenderingT >? More info Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. onBackPressedDispatcherOwnerOrNull [androidJvm] Content @WorkflowUiExperimentalApi() tailrec fun Context . onBackPressedDispatcherOwnerOrNull (): OnBackPressedDispatcherOwner ? plus [androidJvm] Content @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (binding: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (other: ViewRegistry ): ViewRegistry renderWorkflowIn [androidJvm] Content @WorkflowUiExperimentalApi() fun < OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< Unit , OutputT , RenderingT >, scope: CoroutineScope, savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that takes no input (that is, has PropsT set to Unit ). [androidJvm] Content @WorkflowUiExperimentalApi() fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< PropsT , OutputT , RenderingT >, scope: CoroutineScope, prop: PropsT , savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that requires one input value ( prop ) to run. [androidJvm] Content @WorkflowUiExperimentalApi() fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< PropsT , OutputT , RenderingT >, scope: CoroutineScope, props: StateFlow< PropsT >, savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that requires input ( props ) to run. setTextChangedListener [androidJvm] Content @WorkflowUiExperimentalApi() fun EditText . setTextChangedListener (listener: ( CharSequence ) -> Unit ?) More info Helper for setting a simple function as a callback to be invoked whenever an EditText text value changes. showFirstRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . showFirstRendering () More info Default implementation for the initializeView argument of ViewRegistry.buildView , and for DecorativeViewFactory.initializeView. showRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . showRendering (rendering: RenderingT , viewEnvironment: ViewEnvironment ) More info It is usually more convenient to use WorkflowViewStub than to call this method directly. toParcelable [androidJvm] Content inline fun < T : Parcelable > Snapshot . toParcelable (): T ? inline fun < T : Parcelable > ByteString. toParcelable (): T toSnapshot [androidJvm] Content fun Parcelable . toSnapshot (): Snapshot More info Wraps receiver in a Snapshot suitable for use with com.squareup.workflow1.StatefulWorkflow. updateText [androidJvm] Content @WorkflowUiExperimentalApi() fun EditText . updateText (text: CharSequence ) More info Helper for setting the text value of an EditText without disrupting the IME connection, or firing change listeners registered via setTextChangedListener if the new text is actually different than the old text. ViewRegistry [androidJvm] Content @WorkflowUiExperimentalApi() fun ViewRegistry (): ViewRegistry More info Returns a ViewRegistry that contains no bindings. [androidJvm] Content @WorkflowUiExperimentalApi() fun ViewRegistry (vararg bindings: ViewFactory <*>): ViewRegistry","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/#properties","text":"Name Summary backPressedHandler [androidJvm] @WorkflowUiExperimentalApi() var View . backPressedHandler : BackPressHandler ?A function to be called if the device back button is pressed while this view is attached to a window. environment [androidJvm] @WorkflowUiExperimentalApi() val View . environment : ViewEnvironment ?Returns the most recent ViewEnvironment that apply to this view, or null if bindShowRendering has never been called.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/","text":"// workflow / com.squareup.workflow1.ui / ViewRegistry ViewRegistry \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun ViewRegistry (vararg bindings: ViewFactory <*>): ViewRegistry [androidJvm] Content @WorkflowUiExperimentalApi() fun ViewRegistry (): ViewRegistry More info Returns a ViewRegistry that contains no bindings. Exists as a separate overload from the other two functions to disambiguate between them.","title":" view registry"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#viewregistry","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun ViewRegistry (vararg bindings: ViewFactory <*>): ViewRegistry [androidJvm] Content @WorkflowUiExperimentalApi() fun ViewRegistry (): ViewRegistry More info Returns a ViewRegistry that contains no bindings. Exists as a separate overload from the other two functions to disambiguate between them.","title":"ViewRegistry"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/back-pressed-handler/","text":"// workflow / com.squareup.workflow1.ui / backPressedHandler backPressedHandler \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() var View . backPressedHandler : BackPressHandler ? More info A function to be called if the device back button is pressed while this view is attached to a window. Implemented via a OnBackPressedCallback , making this a last-registered-first-served mechanism.","title":"Back pressed handler"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/back-pressed-handler/#backpressedhandler","text":"[androidJvm] Content @WorkflowUiExperimentalApi() var View . backPressedHandler : BackPressHandler ? More info A function to be called if the device back button is pressed while this view is attached to a window. Implemented via a OnBackPressedCallback , making this a last-registered-first-served mechanism.","title":"backPressedHandler"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/bind-show-rendering/","text":"// workflow / com.squareup.workflow1.ui / bindShowRendering bindShowRendering \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . bindShowRendering (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , showRendering: ViewShowRendering < RenderingT >) More info Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Likewise sets / updates the values returned by View.getRendering and View.environment . Intended for use by implementations of ViewFactory.buildView . See also \u00b6 androidJvm com.squareup.workflow1.ui.DecorativeViewFactory","title":"Bind show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/bind-show-rendering/#bindshowrendering","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . bindShowRendering (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , showRendering: ViewShowRendering < RenderingT >) More info Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Likewise sets / updates the values returned by View.getRendering and View.environment . Intended for use by implementations of ViewFactory.buildView .","title":"bindShowRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/bind-show-rendering/#see-also","text":"androidJvm com.squareup.workflow1.ui.DecorativeViewFactory","title":"See also"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/build-view/","text":"// workflow / com.squareup.workflow1.ui / buildView buildView \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null, initializeView: View .() -> Unit = { showFirstRendering () }): View More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. Finds a ViewFactory to create a View to display initialRendering . The new view can be updated via calls to View.showRendering \u2013 that is, it is guaranteed that bindShowRendering has been called on this view. Parameters \u00b6 androidJvm initializeView Optional function invoked immediately after the View is created (that is, immediately after the call to ViewFactory.buildView ). showRendering , getRendering and environment are all available when this is called. Defaults to a call to View.showFirstRendering . Throws \u00b6 kotlin.IllegalArgumentException if no factory can be find for type RenderingT kotlin.IllegalStateException if the matching ViewFactory fails to call View.bindShowRendering when constructing the view","title":"Build view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/build-view/#buildview","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null, initializeView: View .() -> Unit = { showFirstRendering () }): View More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. Finds a ViewFactory to create a View to display initialRendering . The new view can be updated via calls to View.showRendering \u2013 that is, it is guaranteed that bindShowRendering has been called on this view.","title":"buildView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/build-view/#parameters","text":"androidJvm initializeView Optional function invoked immediately after the View is created (that is, immediately after the call to ViewFactory.buildView ). showRendering , getRendering and environment are all available when this is called. Defaults to a call to View.showFirstRendering .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/build-view/#throws","text":"kotlin.IllegalArgumentException if no factory can be find for type RenderingT kotlin.IllegalStateException if the matching ViewFactory fails to call View.bindShowRendering when constructing the view","title":"Throws"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/can-show-rendering/","text":"// workflow / com.squareup.workflow1.ui / canShowRendering canShowRendering \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun View . canShowRendering (rendering: Any ): Boolean More info It is usually more convenient to use WorkflowViewStub than to call this method directly. True if this view is able to show rendering . Returns false if bindShowRendering has not been called, so it is always safe to call this method. Otherwise returns the compatibility of the initial rendering and the new one.","title":"Can show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/can-show-rendering/#canshowrendering","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun View . canShowRendering (rendering: Any ): Boolean More info It is usually more convenient to use WorkflowViewStub than to call this method directly. True if this view is able to show rendering . Returns false if bindShowRendering has not been called, so it is always safe to call this method. Otherwise returns the compatibility of the initial rendering and the new one.","title":"canShowRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/compatible/","text":"// workflow / com.squareup.workflow1.ui / compatible compatible \u00b6 [jvm] Content @ WorkflowUiExperimentalApi () fun compatible (me: Any , you: Any ): Boolean More info Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . A convenient way to take control over the matching behavior of objects that don\u2019t implement Compatible is to wrap them with Named .","title":"Compatible"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/compatible/#compatible","text":"[jvm] Content @ WorkflowUiExperimentalApi () fun compatible (me: Any , you: Any ): Boolean More info Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . A convenient way to take control over the matching behavior of objects that don\u2019t implement Compatible is to wrap them with Named .","title":"compatible"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/environment/","text":"// workflow / com.squareup.workflow1.ui / environment environment \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() val View . environment : ViewEnvironment ? More info Returns the most recent ViewEnvironment that apply to this view, or null if bindShowRendering has never been called.","title":"Environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/environment/#environment","text":"[androidJvm] Content @WorkflowUiExperimentalApi() val View . environment : ViewEnvironment ? More info Returns the most recent ViewEnvironment that apply to this view, or null if bindShowRendering has never been called.","title":"environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/get-factory-for-rendering/","text":"// workflow / com.squareup.workflow1.ui / getFactoryForRendering getFactoryForRendering \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . getFactoryForRendering (rendering: RenderingT ): ViewFactory < RenderingT > More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. Returns the ViewFactory that builds View instances suitable to display the given rendering , via subsequent calls to View.showRendering . Prefers factories found via ViewRegistry.getFactoryFor . If that returns null, falls back to the factory provided by the rendering\u2019s implementation of AndroidViewRendering.viewFactory , if there is one. Note that this means that a compile time AndroidViewRendering.viewFactory binding can be overridden at runtime. Throws \u00b6 kotlin.IllegalArgumentException if no factory can be find for type RenderingT","title":"Get factory for rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/get-factory-for-rendering/#getfactoryforrendering","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . getFactoryForRendering (rendering: RenderingT ): ViewFactory < RenderingT > More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. Returns the ViewFactory that builds View instances suitable to display the given rendering , via subsequent calls to View.showRendering . Prefers factories found via ViewRegistry.getFactoryFor . If that returns null, falls back to the factory provided by the rendering\u2019s implementation of AndroidViewRendering.viewFactory , if there is one. Note that this means that a compile time AndroidViewRendering.viewFactory binding can be overridden at runtime.","title":"getFactoryForRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/get-factory-for-rendering/#throws","text":"kotlin.IllegalArgumentException if no factory can be find for type RenderingT","title":"Throws"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/get-rendering/","text":"// workflow / com.squareup.workflow1.ui / getRendering getRendering \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . getRendering (): RenderingT ? More info Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called.","title":"Get rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/get-rendering/#getrendering","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . getRendering (): RenderingT ? More info Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called.","title":"getRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/get-show-rendering/","text":"// workflow / com.squareup.workflow1.ui / getShowRendering getShowRendering \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . getShowRendering (): ViewShowRendering < RenderingT >? More info Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called.","title":"Get show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/get-show-rendering/#getshowrendering","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . getShowRendering (): ViewShowRendering < RenderingT >? More info Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called.","title":"getShowRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/on-back-pressed-dispatcher-owner-or-null/","text":"// workflow / com.squareup.workflow1.ui / onBackPressedDispatcherOwnerOrNull onBackPressedDispatcherOwnerOrNull \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() tailrec fun Context . onBackPressedDispatcherOwnerOrNull (): OnBackPressedDispatcherOwner ?","title":"On back pressed dispatcher owner or null"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/on-back-pressed-dispatcher-owner-or-null/#onbackpresseddispatcherownerornull","text":"[androidJvm] Content @WorkflowUiExperimentalApi() tailrec fun Context . onBackPressedDispatcherOwnerOrNull (): OnBackPressedDispatcherOwner ?","title":"onBackPressedDispatcherOwnerOrNull"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/plus/","text":"// workflow / com.squareup.workflow1.ui / plus plus \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (binding: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (other: ViewRegistry ): ViewRegistry","title":"Plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/plus/#plus","text":"[androidJvm] Content @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (binding: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (other: ViewRegistry ): ViewRegistry","title":"plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/","text":"// workflow / com.squareup.workflow1.ui / renderWorkflowIn renderWorkflowIn \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun < OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< Unit , OutputT , RenderingT >, scope: CoroutineScope, savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that takes no input (that is, has PropsT set to Unit ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @OptIn(WorkflowUiExperimentalApi::class) class HelloWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloViewModel by viewModels() setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } } class HelloViewModel(savedState: SavedStateHandle) : ViewModel() { @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloWorkflow, scope = this.viewModelScope, savedStateHandle = savedState ) } Return \u00b6 A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering. Parameters \u00b6 androidJvm workflow The root workflow to render. scope The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. savedStateHandle Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors An optional list of WorkflowInterceptors that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to-length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel, for example. [androidJvm] Content @WorkflowUiExperimentalApi() fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< PropsT , OutputT , RenderingT >, scope: CoroutineScope, prop: PropsT , savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that requires one input value ( prop ) to run. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @OptIn(WorkflowUiExperimentalApi::class) class HelloNameWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloNameViewModel by viewModels() setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } } class HelloNameViewModel(savedState: SavedStateHandle) : ViewModel() { @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloNameWorkflow, scope = this.viewModelScope, savedStateHandle = savedState, prop = \"Your name here!\" ) } Return \u00b6 A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering. Parameters \u00b6 androidJvm workflow The root workflow to render. scope The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. prop Specifies the sole PropsT value to use to render the root workflow. To allow updates, use the renderWorkflowIn overload with a props: StateFlow argument instead of this one. savedStateHandle Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors An optional list of WorkflowInterceptors that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to-length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel, for example. [androidJvm] Content @WorkflowUiExperimentalApi() fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< PropsT , OutputT , RenderingT >, scope: CoroutineScope, props: StateFlow< PropsT >, savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that requires input ( props ) to run. For example, for a workflow that uses android.content.Intent as its PropsT type, you could do something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 @OptIn(WorkflowUiExperimentalApi::class) class HelloIntentsWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloIntentsViewModel by viewModels() model.intents.value = intent setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } override fun onNewIntent(intent: Intent) { super.onNewIntent(intent) val model: HelloIntentsViewModel by viewModels() model.intents.value = intent } } class HelloIntentsViewModel(savedState: SavedStateHandle) : ViewModel() { val intents = MutableStateFlow(Intent()) @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloWorkflow, scope = this.viewModelScope, savedStateHandle = savedState, props = intents ) } Return \u00b6 A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering. Parameters \u00b6 androidJvm workflow The root workflow to render. scope The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. props Specifies the initial PropsT to use to render the root workflow, and will cause a re-render when new props are emitted. If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. To only pass a single props value, simply create a MutableStateFlow with the value. savedStateHandle Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors An optional list of WorkflowInterceptors that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to-length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel, for example.","title":"Render workflow in"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#renderworkflowin","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun < OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< Unit , OutputT , RenderingT >, scope: CoroutineScope, savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that takes no input (that is, has PropsT set to Unit ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @OptIn(WorkflowUiExperimentalApi::class) class HelloWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloViewModel by viewModels() setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } } class HelloViewModel(savedState: SavedStateHandle) : ViewModel() { @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloWorkflow, scope = this.viewModelScope, savedStateHandle = savedState ) }","title":"renderWorkflowIn"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#return","text":"A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering.","title":"Return"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#parameters","text":"androidJvm workflow The root workflow to render. scope The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. savedStateHandle Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors An optional list of WorkflowInterceptors that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to-length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel, for example. [androidJvm] Content @WorkflowUiExperimentalApi() fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< PropsT , OutputT , RenderingT >, scope: CoroutineScope, prop: PropsT , savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that requires one input value ( prop ) to run. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @OptIn(WorkflowUiExperimentalApi::class) class HelloNameWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloNameViewModel by viewModels() setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } } class HelloNameViewModel(savedState: SavedStateHandle) : ViewModel() { @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloNameWorkflow, scope = this.viewModelScope, savedStateHandle = savedState, prop = \"Your name here!\" ) }","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#return_1","text":"A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering.","title":"Return"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#parameters_1","text":"androidJvm workflow The root workflow to render. scope The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. prop Specifies the sole PropsT value to use to render the root workflow. To allow updates, use the renderWorkflowIn overload with a props: StateFlow argument instead of this one. savedStateHandle Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors An optional list of WorkflowInterceptors that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to-length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel, for example. [androidJvm] Content @WorkflowUiExperimentalApi() fun < PropsT , OutputT , RenderingT > renderWorkflowIn (workflow: Workflow< PropsT , OutputT , RenderingT >, scope: CoroutineScope, props: StateFlow< PropsT >, savedStateHandle: SavedStateHandle ? = null, interceptors: List = emptyList(), onOutput: suspend ( OutputT ) -> Unit = {}): StateFlow< RenderingT > More info An Android ViewModel-friendly wrapper for com.squareup.workflow1.renderWorkflowIn, for use with a workflow that requires input ( props ) to run. For example, for a workflow that uses android.content.Intent as its PropsT type, you could do something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 @OptIn(WorkflowUiExperimentalApi::class) class HelloIntentsWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloIntentsViewModel by viewModels() model.intents.value = intent setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } override fun onNewIntent(intent: Intent) { super.onNewIntent(intent) val model: HelloIntentsViewModel by viewModels() model.intents.value = intent } } class HelloIntentsViewModel(savedState: SavedStateHandle) : ViewModel() { val intents = MutableStateFlow(Intent()) @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloWorkflow, scope = this.viewModelScope, savedStateHandle = savedState, props = intents ) }","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#return_2","text":"A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering.","title":"Return"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#parameters_2","text":"androidJvm workflow The root workflow to render. scope The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. props Specifies the initial PropsT to use to render the root workflow, and will cause a re-render when new props are emitted. If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. To only pass a single props value, simply create a MutableStateFlow with the value. savedStateHandle Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors An optional list of WorkflowInterceptors that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to-length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel, for example.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/set-text-changed-listener/","text":"// workflow / com.squareup.workflow1.ui / setTextChangedListener setTextChangedListener \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun EditText . setTextChangedListener (listener: ( CharSequence ) -> Unit ?) More info Helper for setting a simple function as a callback to be invoked whenever an EditText text value changes. Simpler than manually invoking EditText.removeTextChangedListener and EditText.addTextChangedListener and implementing a whole TextWatcher manually. If listener is not null, it will be invoked any time the text changes either due to the OS/user (e.g. IME connection, soft keyboard, etc.), or programmatically (i.e. setText), except by calls to updateText , which will not fire this listener. It will also not fire if the text is technically changed, but to the same value (e.g. setText(\u201cfoo\u201d); setText(\u201cfoo\u201d) will only fire the listener at most once). Intended to be used by LayoutRunner s for updating EditText s from workflow renderings.","title":"Set text changed listener"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/set-text-changed-listener/#settextchangedlistener","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun EditText . setTextChangedListener (listener: ( CharSequence ) -> Unit ?) More info Helper for setting a simple function as a callback to be invoked whenever an EditText text value changes. Simpler than manually invoking EditText.removeTextChangedListener and EditText.addTextChangedListener and implementing a whole TextWatcher manually. If listener is not null, it will be invoked any time the text changes either due to the OS/user (e.g. IME connection, soft keyboard, etc.), or programmatically (i.e. setText), except by calls to updateText , which will not fire this listener. It will also not fire if the text is technically changed, but to the same value (e.g. setText(\u201cfoo\u201d); setText(\u201cfoo\u201d) will only fire the listener at most once). Intended to be used by LayoutRunner s for updating EditText s from workflow renderings.","title":"setTextChangedListener"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/show-first-rendering/","text":"// workflow / com.squareup.workflow1.ui / showFirstRendering showFirstRendering \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . showFirstRendering () More info Default implementation for the initializeView argument of ViewRegistry.buildView , and for DecorativeViewFactory.initializeView. Calls showRendering against getRendering and environment .","title":"Show first rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/show-first-rendering/#showfirstrendering","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . showFirstRendering () More info Default implementation for the initializeView argument of ViewRegistry.buildView , and for DecorativeViewFactory.initializeView. Calls showRendering against getRendering and environment .","title":"showFirstRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/show-rendering/","text":"// workflow / com.squareup.workflow1.ui / showRendering showRendering \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . showRendering (rendering: RenderingT , viewEnvironment: ViewEnvironment ) More info It is usually more convenient to use WorkflowViewStub than to call this method directly. Sets the workflow rendering associated with this view, and displays it by invoking the ViewShowRendering function previously set by bindShowRendering . Throws \u00b6 kotlin.IllegalStateException if bindShowRendering has not been called.","title":"Show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/show-rendering/#showrendering","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > View . showRendering (rendering: RenderingT , viewEnvironment: ViewEnvironment ) More info It is usually more convenient to use WorkflowViewStub than to call this method directly. Sets the workflow rendering associated with this view, and displays it by invoking the ViewShowRendering function previously set by bindShowRendering .","title":"showRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/show-rendering/#throws","text":"kotlin.IllegalStateException if bindShowRendering has not been called.","title":"Throws"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/to-parcelable/","text":"// workflow / com.squareup.workflow1.ui / toParcelable toParcelable \u00b6 [androidJvm] Content inline fun < T : Parcelable > Snapshot . toParcelable (): T ? More info Return \u00b6 a Parcelable previously wrapped with toSnapshot , or null if the receiver is empty. [androidJvm] Content inline fun < T : Parcelable > ByteString. toParcelable (): T","title":"To parcelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/to-parcelable/#toparcelable","text":"[androidJvm] Content inline fun < T : Parcelable > Snapshot . toParcelable (): T ? More info","title":"toParcelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/to-parcelable/#return","text":"a Parcelable previously wrapped with toSnapshot , or null if the receiver is empty. [androidJvm] Content inline fun < T : Parcelable > ByteString. toParcelable (): T","title":"Return"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/to-snapshot/","text":"// workflow / com.squareup.workflow1.ui / toSnapshot toSnapshot \u00b6 [androidJvm] Content fun Parcelable . toSnapshot (): Snapshot More info Wraps receiver in a Snapshot suitable for use with com.squareup.workflow1.StatefulWorkflow. Intended to allow use of @Parcelize. Read the Parcelable back with toParcelable .","title":"To snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/to-snapshot/#tosnapshot","text":"[androidJvm] Content fun Parcelable . toSnapshot (): Snapshot More info Wraps receiver in a Snapshot suitable for use with com.squareup.workflow1.StatefulWorkflow. Intended to allow use of @Parcelize. Read the Parcelable back with toParcelable .","title":"toSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/update-text/","text":"// workflow / com.squareup.workflow1.ui / updateText updateText \u00b6 [androidJvm] Content @WorkflowUiExperimentalApi() fun EditText . updateText (text: CharSequence ) More info Helper for setting the text value of an EditText without disrupting the IME connection, or firing change listeners registered via setTextChangedListener if the new text is actually different than the old text. If text contains a selection, then the selection of this EditText is updated to it. Intended to be used by LayoutRunner s for updating EditText s from workflow renderings.","title":"Update text"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/update-text/#updatetext","text":"[androidJvm] Content @WorkflowUiExperimentalApi() fun EditText . updateText (text: CharSequence ) More info Helper for setting the text value of an EditText without disrupting the IME connection, or firing change listeners registered via setTextChangedListener if the new text is actually different than the old text. If text contains a selection, then the selection of this EditText is updated to it. Intended to be used by LayoutRunner s for updating EditText s from workflow renderings.","title":"updateText"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/","text":"// workflow / com.squareup.workflow1.ui / AndroidViewRendering AndroidViewRendering \u00b6 [androidJvm] @WorkflowUiExperimentalApi() interface AndroidViewRendering < V : AndroidViewRendering < V >> Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. You will rarely, if ever, write a ViewFactory yourself. Instead use LayoutRunner.bind to work with XML layout resources, or BuilderViewFactory to create views from code. See LayoutRunner for more details. 1 2 3 4 5 6 7 8 9 10 11 @OptIn(WorkflowUiExperimentalApi::class) data class HelloView( val message: String, val onClick: () -> Unit ) : AndroidViewRendering<HelloView> { override val viewFactory: ViewFactory<HelloView> = LayoutRunner.bind(HelloGoodbyeLayoutBinding::inflate) { r, _ -> helloMessage.text = r.message helloMessage.setOnClickListener { r.onClick() } } } This is the simplest way to bridge the gap between your workflows and the UI, but using it requires your workflows code to reside in Android modules, instead of pure Kotlin. If this is a problem, or you need more flexibility for any other reason, you can use ViewRegistry to bind your renderings to ViewFactory implementations at runtime. Properties \u00b6 Name Summary viewFactory [androidJvm] abstract val viewFactory : ViewFactory < V >Used to build instances of android.view.View as needed to display renderings of this type.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/#androidviewrendering","text":"[androidJvm] @WorkflowUiExperimentalApi() interface AndroidViewRendering < V : AndroidViewRendering < V >> Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. You will rarely, if ever, write a ViewFactory yourself. Instead use LayoutRunner.bind to work with XML layout resources, or BuilderViewFactory to create views from code. See LayoutRunner for more details. 1 2 3 4 5 6 7 8 9 10 11 @OptIn(WorkflowUiExperimentalApi::class) data class HelloView( val message: String, val onClick: () -> Unit ) : AndroidViewRendering<HelloView> { override val viewFactory: ViewFactory<HelloView> = LayoutRunner.bind(HelloGoodbyeLayoutBinding::inflate) { r, _ -> helloMessage.text = r.message helloMessage.setOnClickListener { r.onClick() } } } This is the simplest way to bridge the gap between your workflows and the UI, but using it requires your workflows code to reside in Android modules, instead of pure Kotlin. If this is a problem, or you need more flexibility for any other reason, you can use ViewRegistry to bind your renderings to ViewFactory implementations at runtime.","title":"AndroidViewRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/#properties","text":"Name Summary viewFactory [androidJvm] abstract val viewFactory : ViewFactory < V >Used to build instances of android.view.View as needed to display renderings of this type.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/view-factory/","text":"// workflow / com.squareup.workflow1.ui / AndroidViewRendering / viewFactory viewFactory \u00b6 [androidJvm] Content abstract val viewFactory : ViewFactory < V > More info Used to build instances of android.view.View as needed to display renderings of this type.","title":"View factory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/view-factory/#viewfactory","text":"[androidJvm] Content abstract val viewFactory : ViewFactory < V > More info Used to build instances of android.view.View as needed to display renderings of this type.","title":"viewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/","text":"// workflow / com.squareup.workflow1.ui / BuilderViewFactory BuilderViewFactory \u00b6 [androidJvm] @WorkflowUiExperimentalApi() class BuilderViewFactory < RenderingT : Any >( type : KClass < RenderingT >, viewConstructor : ( RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?) -> View ) : ViewFactory < RenderingT > A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 data class MyView(): AndroidViewRendering<MyView> { val viewFactory = BuilderViewFactory( type = MyScreen::class, viewConstructor = { initialRendering, _, context, _ -> MyFrame(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } private class MyFrame(context: Context) : FrameLayout(context, attributeSet) { private fun update(rendering: MyView) { ... } } Constructors \u00b6 BuilderViewFactory [androidJvm] fun < RenderingT : Any > BuilderViewFactory (type: KClass < RenderingT >, viewConstructor: ( RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?) -> View ) Functions \u00b6 Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . Properties \u00b6 Name Summary type [androidJvm] open override val type : KClass < RenderingT >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/#builderviewfactory","text":"[androidJvm] @WorkflowUiExperimentalApi() class BuilderViewFactory < RenderingT : Any >( type : KClass < RenderingT >, viewConstructor : ( RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?) -> View ) : ViewFactory < RenderingT > A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 data class MyView(): AndroidViewRendering<MyView> { val viewFactory = BuilderViewFactory( type = MyScreen::class, viewConstructor = { initialRendering, _, context, _ -> MyFrame(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } private class MyFrame(context: Context) : FrameLayout(context, attributeSet) { private fun update(rendering: MyView) { ... } }","title":"BuilderViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/#constructors","text":"BuilderViewFactory [androidJvm] fun < RenderingT : Any > BuilderViewFactory (type: KClass < RenderingT >, viewConstructor: ( RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?) -> View )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/#functions","text":"Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/#properties","text":"Name Summary type [androidJvm] open override val type : KClass < RenderingT >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/-builder-view-factory/","text":"// workflow / com.squareup.workflow1.ui / BuilderViewFactory / BuilderViewFactory BuilderViewFactory \u00b6 [androidJvm] Content fun < RenderingT : Any > BuilderViewFactory (type: KClass < RenderingT >, viewConstructor: ( RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?) -> View )","title":" builder view factory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/-builder-view-factory/#builderviewfactory","text":"[androidJvm] Content fun < RenderingT : Any > BuilderViewFactory (type: KClass < RenderingT >, viewConstructor: ( RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?) -> View )","title":"BuilderViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/build-view/","text":"// workflow / com.squareup.workflow1.ui / BuilderViewFactory / buildView buildView \u00b6 [androidJvm] Content open override fun buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/build-view/#buildview","text":"[androidJvm] Content open override fun buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/type/","text":"// workflow / com.squareup.workflow1.ui / BuilderViewFactory / type type \u00b6 [androidJvm] Content open override val type : KClass < RenderingT >","title":"Type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/type/#type","text":"[androidJvm] Content open override val type : KClass < RenderingT >","title":"type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/","text":"// workflow / com.squareup.workflow1.ui / Compatible Compatible \u00b6 [jvm] @ WorkflowUiExperimentalApi () interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. Renderings that don\u2019t implement this interface directly can be distinguished by wrapping them with Named . Types \u00b6 Name Summary Companion [jvm] Content object Companion Properties \u00b6 Name Summary compatibilityKey [jvm] abstract val compatibilityKey : String Instances of the same type are compatible iff they have the same compatibilityKey . Inheritors \u00b6 Name Named","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/#compatible","text":"[jvm] @ WorkflowUiExperimentalApi () interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. Renderings that don\u2019t implement this interface directly can be distinguished by wrapping them with Named .","title":"Compatible"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/#properties","text":"Name Summary compatibilityKey [jvm] abstract val compatibilityKey : String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/#inheritors","text":"Name Named","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/compatibility-key/","text":"// workflow / com.squareup.workflow1.ui / Compatible / compatibilityKey compatibilityKey \u00b6 [jvm] Content abstract val compatibilityKey : String More info Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Compatibility key"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/compatibility-key/#compatibilitykey","text":"[jvm] Content abstract val compatibilityKey : String More info Instances of the same type are compatible iff they have the same compatibilityKey .","title":"compatibilityKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/-companion/","text":"// workflow / com.squareup.workflow1.ui / Compatible / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary keyFor [jvm] Content fun keyFor (value: Any , name: String = \u201c\u201d): String More info Calculates a suitable Compatible.compatibilityKey for a given value and name .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/-companion/#functions","text":"Name Summary keyFor [jvm] Content fun keyFor (value: Any , name: String = \u201c\u201d): String More info Calculates a suitable Compatible.compatibilityKey for a given value and name .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/-companion/key-for/","text":"// workflow / com.squareup.workflow1.ui / Compatible / Companion / keyFor keyFor \u00b6 [jvm] Content fun keyFor (value: Any , name: String = \u201c\u201d): String More info Calculates a suitable Compatible.compatibilityKey for a given value and name .","title":"Key for"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/-companion/key-for/#keyfor","text":"[jvm] Content fun keyFor (value: Any , name: String = \u201c\u201d): String More info Calculates a suitable Compatible.compatibilityKey for a given value and name .","title":"keyFor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/","text":"// workflow / com.squareup.workflow1.ui / DecorativeViewFactory DecorativeViewFactory \u00b6 [androidJvm] @WorkflowUiExperimentalApi() class DecorativeViewFactory < OuterT : Any , InnerT : Any >( type : KClass < OuterT >, map : ( OuterT , ViewEnvironment ) -> Pair < InnerT , ViewEnvironment >, initializeView : View .() -> Unit , doShowRendering : (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit ) : ViewFactory < OuterT > A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. One general note: when creating a wrapper rendering, you\u2019re very likely to want it to implement Compatible, to ensure that checks made to update or replace a view are based on the wrapped item. Each example below illustrates this. Examples \u00b6 To make one rendering type an \u201calias\u201d for another \u2013 that is, to use the same ViewFactory to display it \u2013 provide nothing but a single-arg mapping function: 1 2 3 4 5 6 7 8 9 class OriginalRendering(val data: String) class AliasRendering(val similarData: String) : Compatible { override val compatibilityKey: String = Compatible.keyFor(wrapped) } object DecorativeViewFactory : ViewFactory<AliasRendering> by DecorativeViewFactory( type = AliasRendering::class, map = { alias -> OriginalRendering(alias.similarData) } ) To make a decorator type that adds information to the ViewEnvironment : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class NeutronFlowPolarity(val reversed: Boolean) { companion object : ViewEnvironmentKey<NeutronFlowPolarity>(NeutronFlowPolarity::class) { override val default: NeutronFlowPolarity = NeutronFlowPolarity(reversed = false) } } class NeutronFlowPolarityOverride<W>( val wrapped: W, val polarity: NeutronFlowPolarity ) : Compatible { override val compatibilityKey: String = Compatible.keyFor(wrapped) } object NeutronFlowPolarityViewFactory : ViewFactory<NeutronFlowPolarityOverride<*>> by DecorativeViewFactory( type = NeutronFlowPolarityOverride::class, map = { override, env -> Pair(override.wrapped, env + (NeutronFlowPolarity to override.polarity)) } ) To make a decorator type that customizes View initialization: 1 2 3 4 5 6 7 8 9 10 11 12 13 class WithTutorialTips<W>(val wrapped: W) : Compatible { override val compatibilityKey: String = Compatible.keyFor(wrapped) } object WithTutorialTipsViewFactory : ViewFactory<WithTutorialTips<*>> by DecorativeViewFactory( type = WithTutorialTips::class, map = { withTips -> withTips.wrapped }, initializeView = { TutorialTipRunner.run(this) showFirstRendering<WithTutorialTips<*>>() } ) To make a decorator type that adds pre- or post-processing to View updates: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class BackButtonScreen<W : Any>( val wrapped: W, val override: Boolean = false, val onBackPressed: (() -> Unit)? = null ) : Compatible { override val compatibilityKey: String = Compatible.keyFor(wrapped) } object BackButtonViewFactory : ViewFactory<BackButtonScreen<*>> by DecorativeViewFactory( type = BackButtonScreen::class, map = { outer -> outer.wrapped }, doShowRendering = { view, innerShowRendering, outerRendering, viewEnvironment -> if (!outerRendering.override) { // Place our handler before invoking innerShowRendering, so that // its later calls to view.backPressedHandler will take precedence // over ours. view.backPressedHandler = outerRendering.onBackPressed } innerShowRendering.invoke(outerRendering.wrapped, viewEnvironment) if (outerRendering.override) { // Place our handler after invoking innerShowRendering, so that ours wins. view.backPressedHandler = outerRendering.onBackPressed } }) Parameters \u00b6 androidJvm map called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed. initializeView Optional function invoked immediately after the View is created (that is, immediately after the call to ViewFactory.buildView ). showRendering , getRendering and environment are all available when this is called. Defaults to a call to View.showFirstRendering . doShowRendering called to apply the ViewShowRendering function for InnerT , allowing pre- and post-processing. Default implementation simply uses map to extract the InnerT instance from OuterT and makes the function call. Constructors \u00b6 DecorativeViewFactory [androidJvm] fun < OuterT : Any , InnerT : Any > DecorativeViewFactory (type: KClass < OuterT >, map: ( OuterT ) -> InnerT , initializeView: View .() -> Unit = { showFirstRendering () }, doShowRendering: (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> innerShowRendering(map(outerRendering), viewEnvironment) })Convenience constructor for cases requiring no changes to the ViewEnvironment . DecorativeViewFactory [androidJvm] fun < OuterT : Any , InnerT : Any > DecorativeViewFactory (type: KClass < OuterT >, map: ( OuterT , ViewEnvironment ) -> Pair < InnerT , ViewEnvironment >, initializeView: View .() -> Unit = { showFirstRendering () }, doShowRendering: (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> val (innerRendering, processedEnv) = map(outerRendering, viewEnvironment) innerShowRendering(innerRendering, processedEnv) })called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed. Functions \u00b6 Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: OuterT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . Properties \u00b6 Name Summary type [androidJvm] open override val type : KClass < OuterT >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#decorativeviewfactory","text":"[androidJvm] @WorkflowUiExperimentalApi() class DecorativeViewFactory < OuterT : Any , InnerT : Any >( type : KClass < OuterT >, map : ( OuterT , ViewEnvironment ) -> Pair < InnerT , ViewEnvironment >, initializeView : View .() -> Unit , doShowRendering : (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit ) : ViewFactory < OuterT > A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. One general note: when creating a wrapper rendering, you\u2019re very likely to want it to implement Compatible, to ensure that checks made to update or replace a view are based on the wrapped item. Each example below illustrates this.","title":"DecorativeViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#examples","text":"To make one rendering type an \u201calias\u201d for another \u2013 that is, to use the same ViewFactory to display it \u2013 provide nothing but a single-arg mapping function: 1 2 3 4 5 6 7 8 9 class OriginalRendering(val data: String) class AliasRendering(val similarData: String) : Compatible { override val compatibilityKey: String = Compatible.keyFor(wrapped) } object DecorativeViewFactory : ViewFactory<AliasRendering> by DecorativeViewFactory( type = AliasRendering::class, map = { alias -> OriginalRendering(alias.similarData) } ) To make a decorator type that adds information to the ViewEnvironment : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class NeutronFlowPolarity(val reversed: Boolean) { companion object : ViewEnvironmentKey<NeutronFlowPolarity>(NeutronFlowPolarity::class) { override val default: NeutronFlowPolarity = NeutronFlowPolarity(reversed = false) } } class NeutronFlowPolarityOverride<W>( val wrapped: W, val polarity: NeutronFlowPolarity ) : Compatible { override val compatibilityKey: String = Compatible.keyFor(wrapped) } object NeutronFlowPolarityViewFactory : ViewFactory<NeutronFlowPolarityOverride<*>> by DecorativeViewFactory( type = NeutronFlowPolarityOverride::class, map = { override, env -> Pair(override.wrapped, env + (NeutronFlowPolarity to override.polarity)) } ) To make a decorator type that customizes View initialization: 1 2 3 4 5 6 7 8 9 10 11 12 13 class WithTutorialTips<W>(val wrapped: W) : Compatible { override val compatibilityKey: String = Compatible.keyFor(wrapped) } object WithTutorialTipsViewFactory : ViewFactory<WithTutorialTips<*>> by DecorativeViewFactory( type = WithTutorialTips::class, map = { withTips -> withTips.wrapped }, initializeView = { TutorialTipRunner.run(this) showFirstRendering<WithTutorialTips<*>>() } ) To make a decorator type that adds pre- or post-processing to View updates: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class BackButtonScreen<W : Any>( val wrapped: W, val override: Boolean = false, val onBackPressed: (() -> Unit)? = null ) : Compatible { override val compatibilityKey: String = Compatible.keyFor(wrapped) } object BackButtonViewFactory : ViewFactory<BackButtonScreen<*>> by DecorativeViewFactory( type = BackButtonScreen::class, map = { outer -> outer.wrapped }, doShowRendering = { view, innerShowRendering, outerRendering, viewEnvironment -> if (!outerRendering.override) { // Place our handler before invoking innerShowRendering, so that // its later calls to view.backPressedHandler will take precedence // over ours. view.backPressedHandler = outerRendering.onBackPressed } innerShowRendering.invoke(outerRendering.wrapped, viewEnvironment) if (outerRendering.override) { // Place our handler after invoking innerShowRendering, so that ours wins. view.backPressedHandler = outerRendering.onBackPressed } })","title":"Examples"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#parameters","text":"androidJvm map called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed. initializeView Optional function invoked immediately after the View is created (that is, immediately after the call to ViewFactory.buildView ). showRendering , getRendering and environment are all available when this is called. Defaults to a call to View.showFirstRendering . doShowRendering called to apply the ViewShowRendering function for InnerT , allowing pre- and post-processing. Default implementation simply uses map to extract the InnerT instance from OuterT and makes the function call.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#constructors","text":"DecorativeViewFactory [androidJvm] fun < OuterT : Any , InnerT : Any > DecorativeViewFactory (type: KClass < OuterT >, map: ( OuterT ) -> InnerT , initializeView: View .() -> Unit = { showFirstRendering () }, doShowRendering: (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> innerShowRendering(map(outerRendering), viewEnvironment) })Convenience constructor for cases requiring no changes to the ViewEnvironment . DecorativeViewFactory [androidJvm] fun < OuterT : Any , InnerT : Any > DecorativeViewFactory (type: KClass < OuterT >, map: ( OuterT , ViewEnvironment ) -> Pair < InnerT , ViewEnvironment >, initializeView: View .() -> Unit = { showFirstRendering () }, doShowRendering: (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> val (innerRendering, processedEnv) = map(outerRendering, viewEnvironment) innerShowRendering(innerRendering, processedEnv) })called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#functions","text":"Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: OuterT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#properties","text":"Name Summary type [androidJvm] open override val type : KClass < OuterT >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/-decorative-view-factory/","text":"// workflow / com.squareup.workflow1.ui / DecorativeViewFactory / DecorativeViewFactory DecorativeViewFactory \u00b6 [androidJvm] Content fun < OuterT : Any , InnerT : Any > DecorativeViewFactory (type: KClass < OuterT >, map: ( OuterT ) -> InnerT , initializeView: View .() -> Unit = { showFirstRendering () }, doShowRendering: (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> innerShowRendering(map(outerRendering), viewEnvironment) }) More info Convenience constructor for cases requiring no changes to the ViewEnvironment . [androidJvm] Content fun < OuterT : Any , InnerT : Any > DecorativeViewFactory (type: KClass < OuterT >, map: ( OuterT , ViewEnvironment ) -> Pair < InnerT , ViewEnvironment >, initializeView: View .() -> Unit = { showFirstRendering () }, doShowRendering: (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> val (innerRendering, processedEnv) = map(outerRendering, viewEnvironment) innerShowRendering(innerRendering, processedEnv) }) More info Parameters \u00b6 androidJvm map called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed. initializeView Optional function invoked immediately after the View is created (that is, immediately after the call to ViewFactory.buildView ). showRendering , getRendering and environment are all available when this is called. Defaults to a call to View.showFirstRendering . doShowRendering called to apply the ViewShowRendering function for InnerT , allowing pre- and post-processing. Default implementation simply uses map to extract the InnerT instance from OuterT and makes the function call.","title":" decorative view factory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/-decorative-view-factory/#decorativeviewfactory","text":"[androidJvm] Content fun < OuterT : Any , InnerT : Any > DecorativeViewFactory (type: KClass < OuterT >, map: ( OuterT ) -> InnerT , initializeView: View .() -> Unit = { showFirstRendering () }, doShowRendering: (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> innerShowRendering(map(outerRendering), viewEnvironment) }) More info Convenience constructor for cases requiring no changes to the ViewEnvironment . [androidJvm] Content fun < OuterT : Any , InnerT : Any > DecorativeViewFactory (type: KClass < OuterT >, map: ( OuterT , ViewEnvironment ) -> Pair < InnerT , ViewEnvironment >, initializeView: View .() -> Unit = { showFirstRendering () }, doShowRendering: (view: View , ViewShowRendering < InnerT >, OuterT , env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> val (innerRendering, processedEnv) = map(outerRendering, viewEnvironment) innerShowRendering(innerRendering, processedEnv) }) More info","title":"DecorativeViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/-decorative-view-factory/#parameters","text":"androidJvm map called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed. initializeView Optional function invoked immediately after the View is created (that is, immediately after the call to ViewFactory.buildView ). showRendering , getRendering and environment are all available when this is called. Defaults to a call to View.showFirstRendering . doShowRendering called to apply the ViewShowRendering function for InnerT , allowing pre- and post-processing. Default implementation simply uses map to extract the InnerT instance from OuterT and makes the function call.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/build-view/","text":"// workflow / com.squareup.workflow1.ui / DecorativeViewFactory / buildView buildView \u00b6 [androidJvm] Content open override fun buildView (initialRendering: OuterT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/build-view/#buildview","text":"[androidJvm] Content open override fun buildView (initialRendering: OuterT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/type/","text":"// workflow / com.squareup.workflow1.ui / DecorativeViewFactory / type type \u00b6 [androidJvm] Content open override val type : KClass < OuterT >","title":"Type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/type/#type","text":"[androidJvm] Content open override val type : KClass < OuterT >","title":"type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/","text":"// workflow / com.squareup.workflow1.ui / LayoutRunner LayoutRunner \u00b6 [androidJvm] @WorkflowUiExperimentalApi() fun fun interface LayoutRunner < RenderingT : Any > A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderViewFactory if you want to build views from code rather than layouts.) If you\u2019re using AndroidX ViewBinding you likely won\u2019t need to implement this interface at all. For details, see the three overloads of LayoutRunner.bind . Types \u00b6 Name Summary Companion [androidJvm] Content object Companion Functions \u00b6 Name Summary showRendering [androidJvm] Content abstract fun showRendering (rendering: RenderingT , viewEnvironment: ViewEnvironment )","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/#layoutrunner","text":"[androidJvm] @WorkflowUiExperimentalApi() fun fun interface LayoutRunner < RenderingT : Any > A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderViewFactory if you want to build views from code rather than layouts.) If you\u2019re using AndroidX ViewBinding you likely won\u2019t need to implement this interface at all. For details, see the three overloads of LayoutRunner.bind .","title":"LayoutRunner"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/#types","text":"Name Summary Companion [androidJvm] Content object Companion","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/#functions","text":"Name Summary showRendering [androidJvm] Content abstract fun showRendering (rendering: RenderingT , viewEnvironment: ViewEnvironment )","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/show-rendering/","text":"// workflow / com.squareup.workflow1.ui / LayoutRunner / showRendering showRendering \u00b6 [androidJvm] Content abstract fun showRendering (rendering: RenderingT , viewEnvironment: ViewEnvironment )","title":"Show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/show-rendering/#showrendering","text":"[androidJvm] Content abstract fun showRendering (rendering: RenderingT , viewEnvironment: ViewEnvironment )","title":"showRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/-companion/","text":"// workflow / com.squareup.workflow1.ui / LayoutRunner / Companion Companion \u00b6 [androidJvm] object Companion Functions \u00b6 Name Summary bind [androidJvm] Content inline fun < BindingT : ViewBinding, RenderingT : Any > bind (noinline bindingInflater: ViewBindingInflater < BindingT >, noinline constructor: ( BindingT ) -> LayoutRunner < RenderingT >): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a LayoutRunner created by constructor . [androidJvm] Content inline fun < BindingT : ViewBinding, RenderingT : Any > bind (noinline bindingInflater: ViewBindingInflater < BindingT >, crossinline showRendering: BindingT .( RenderingT , ViewEnvironment ) -> Unit ): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a lambda . [androidJvm] Content inline fun < RenderingT : Any > bind (@ LayoutRes ()layoutId: Int , noinline constructor: ( View ) -> LayoutRunner < RenderingT >): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . bindNoRunner [androidJvm] Content inline fun < RenderingT : Any > bindNoRunner (@ LayoutRes ()layoutId: Int ): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates layoutId to \u201cshow\u201d renderings of type RenderingT , with a no-op LayoutRunner .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/-companion/#companion","text":"[androidJvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/-companion/#functions","text":"Name Summary bind [androidJvm] Content inline fun < BindingT : ViewBinding, RenderingT : Any > bind (noinline bindingInflater: ViewBindingInflater < BindingT >, noinline constructor: ( BindingT ) -> LayoutRunner < RenderingT >): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a LayoutRunner created by constructor . [androidJvm] Content inline fun < BindingT : ViewBinding, RenderingT : Any > bind (noinline bindingInflater: ViewBindingInflater < BindingT >, crossinline showRendering: BindingT .( RenderingT , ViewEnvironment ) -> Unit ): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a lambda . [androidJvm] Content inline fun < RenderingT : Any > bind (@ LayoutRes ()layoutId: Int , noinline constructor: ( View ) -> LayoutRunner < RenderingT >): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . bindNoRunner [androidJvm] Content inline fun < RenderingT : Any > bindNoRunner (@ LayoutRes ()layoutId: Int ): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates layoutId to \u201cshow\u201d renderings of type RenderingT , with a no-op LayoutRunner .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/-companion/bind-no-runner/","text":"// workflow / com.squareup.workflow1.ui / LayoutRunner / Companion / bindNoRunner bindNoRunner \u00b6 [androidJvm] Content inline fun < RenderingT : Any > bindNoRunner (@ LayoutRes ()layoutId: Int ): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates layoutId to \u201cshow\u201d renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views, e.g. when prototyping.","title":"Bind no runner"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/-companion/bind-no-runner/#bindnorunner","text":"[androidJvm] Content inline fun < RenderingT : Any > bindNoRunner (@ LayoutRes ()layoutId: Int ): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates layoutId to \u201cshow\u201d renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views, e.g. when prototyping.","title":"bindNoRunner"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/-companion/bind/","text":"// workflow / com.squareup.workflow1.ui / LayoutRunner / Companion / bind bind \u00b6 [androidJvm] Content inline fun < BindingT : ViewBinding, RenderingT : Any > bind (noinline bindingInflater: ViewBindingInflater < BindingT >, crossinline showRendering: BindingT .( RenderingT , ViewEnvironment ) -> Unit ): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a lambda . 1 2 3 4 5 val HelloBinding: ViewFactory<Rendering> = LayoutRunner.bind(HelloGoodbyeLayoutBinding::inflate) { rendering, viewEnvironment -> helloMessage.text = rendering.message helloMessage.setOnClickListener { rendering.onClick(Unit) } } If you need to initialize your view before showRendering is called, implement LayoutRunner and create a binding using the bind variant that accepts a (ViewBinding) -> LayoutRunner function, below. [androidJvm] Content inline fun < BindingT : ViewBinding, RenderingT : Any > bind (noinline bindingInflater: ViewBindingInflater < BindingT >, noinline constructor: ( BindingT ) -> LayoutRunner < RenderingT >): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a LayoutRunner created by constructor . Handy if you need to perform some set up before showRendering is called. class HelloLayoutRunner( private val binding: HelloGoodbyeLayoutBinding ) : LayoutRunner { 1 2 3 4 5 6 7 8 override fun showRendering(rendering: Rendering) { binding.messageView.text = rendering.message binding.messageView.setOnClickListener { rendering.onClick(Unit) } } companion object : ViewFactory<Rendering> by bind( HelloGoodbyeLayoutBinding::inflate, ::HelloLayoutRunner ) } If the view doesn\u2019t need to be initialized before showRendering is called, use the variant above which just takes a lambda. [androidJvm] Content inline fun < RenderingT : Any > bind (@ LayoutRes ()layoutId: Int , noinline constructor: ( View ) -> LayoutRunner < RenderingT >): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . Avoids any use of AndroidX ViewBinding.","title":"Bind"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/-companion/bind/#bind","text":"[androidJvm] Content inline fun < BindingT : ViewBinding, RenderingT : Any > bind (noinline bindingInflater: ViewBindingInflater < BindingT >, crossinline showRendering: BindingT .( RenderingT , ViewEnvironment ) -> Unit ): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a lambda . 1 2 3 4 5 val HelloBinding: ViewFactory<Rendering> = LayoutRunner.bind(HelloGoodbyeLayoutBinding::inflate) { rendering, viewEnvironment -> helloMessage.text = rendering.message helloMessage.setOnClickListener { rendering.onClick(Unit) } } If you need to initialize your view before showRendering is called, implement LayoutRunner and create a binding using the bind variant that accepts a (ViewBinding) -> LayoutRunner function, below. [androidJvm] Content inline fun < BindingT : ViewBinding, RenderingT : Any > bind (noinline bindingInflater: ViewBindingInflater < BindingT >, noinline constructor: ( BindingT ) -> LayoutRunner < RenderingT >): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a LayoutRunner created by constructor . Handy if you need to perform some set up before showRendering is called. class HelloLayoutRunner( private val binding: HelloGoodbyeLayoutBinding ) : LayoutRunner { 1 2 3 4 5 6 7 8 override fun showRendering(rendering: Rendering) { binding.messageView.text = rendering.message binding.messageView.setOnClickListener { rendering.onClick(Unit) } } companion object : ViewFactory<Rendering> by bind( HelloGoodbyeLayoutBinding::inflate, ::HelloLayoutRunner ) } If the view doesn\u2019t need to be initialized before showRendering is called, use the variant above which just takes a lambda. [androidJvm] Content inline fun < RenderingT : Any > bind (@ LayoutRes ()layoutId: Int , noinline constructor: ( View ) -> LayoutRunner < RenderingT >): ViewFactory < RenderingT > More info Creates a ViewFactory that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . Avoids any use of AndroidX ViewBinding.","title":"bind"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/","text":"// workflow / com.squareup.workflow1.ui / Named Named \u00b6 [jvm] @ WorkflowUiExperimentalApi () data class Named < W : Any >( wrapped : W , name : String ) : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Constructors \u00b6 Named [jvm] fun < W : Any > Named (wrapped: W , name: String ) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary compatibilityKey [jvm] open override val compatibilityKey : String Instances of the same type are compatible iff they have the same compatibilityKey . name [jvm] val name : String wrapped [jvm] val wrapped : W","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#named","text":"[jvm] @ WorkflowUiExperimentalApi () data class Named < W : Any >( wrapped : W , name : String ) : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Named"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#constructors","text":"Named [jvm] fun < W : Any > Named (wrapped: W , name: String )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#functions","text":"Name Summary toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#properties","text":"Name Summary compatibilityKey [jvm] open override val compatibilityKey : String Instances of the same type are compatible iff they have the same compatibilityKey . name [jvm] val name : String wrapped [jvm] val wrapped : W","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/-named/","text":"// workflow / com.squareup.workflow1.ui / Named / Named Named \u00b6 [jvm] Content fun < W : Any > Named (wrapped: W , name: String )","title":" named"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/-named/#named","text":"[jvm] Content fun < W : Any > Named (wrapped: W , name: String )","title":"Named"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/compatibility-key/","text":"// workflow / com.squareup.workflow1.ui / Named / compatibilityKey compatibilityKey \u00b6 [jvm] Content open override val compatibilityKey : String More info Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Compatibility key"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/compatibility-key/#compatibilitykey","text":"[jvm] Content open override val compatibilityKey : String More info Instances of the same type are compatible iff they have the same compatibilityKey .","title":"compatibilityKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/name/","text":"// workflow / com.squareup.workflow1.ui / Named / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/to-string/","text":"// workflow / com.squareup.workflow1.ui / Named / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/wrapped/","text":"// workflow / com.squareup.workflow1.ui / Named / wrapped wrapped \u00b6 [jvm] Content val wrapped : W","title":"Wrapped"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/wrapped/#wrapped","text":"[jvm] Content val wrapped : W","title":"wrapped"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/-companion/","text":"// workflow / com.squareup.workflow1.ui / Named / Companion Companion \u00b6 [jvm] object Companion","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named-view-factory/","text":"// workflow / com.squareup.workflow1.ui / NamedViewFactory NamedViewFactory \u00b6 [androidJvm] @WorkflowUiExperimentalApi() object NamedViewFactory : ViewFactory <Named<*>> ViewFactory that allows views to display instances of Named. Delegates to the factory for Named.wrapped. Functions \u00b6 Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: Named<*>, initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View. Properties \u00b6 Name Summary type [androidJvm] open override val type : KClass <in Named<*>>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named-view-factory/#namedviewfactory","text":"[androidJvm] @WorkflowUiExperimentalApi() object NamedViewFactory : ViewFactory <Named<*>> ViewFactory that allows views to display instances of Named. Delegates to the factory for Named.wrapped.","title":"NamedViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named-view-factory/#functions","text":"Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: Named<*>, initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named-view-factory/#properties","text":"Name Summary type [androidJvm] open override val type : KClass <in Named<*>>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/","text":"// workflow / com.squareup.workflow1.ui / ShowRenderingTag ShowRenderingTag \u00b6 [androidJvm] @WorkflowUiExperimentalApi() data class ShowRenderingTag RenderingT : Any >( showing : RenderingT , environment : ViewEnvironment , showRendering : ViewShowRendering < RenderingT >) ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . Parameters \u00b6 androidJvm showing the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering. Constructors \u00b6 ShowRenderingTag [androidJvm] fun RenderingT : Any > ShowRenderingTag (showing: RenderingT , environment: ViewEnvironment , showRendering: ViewShowRendering < RenderingT >)the current rendering. Properties \u00b6 Name Summary environment [androidJvm] val environment : ViewEnvironment showing [androidJvm] val showing : RenderingT the current rendering. showRendering [androidJvm] val showRendering : ViewShowRendering < RenderingT >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/#showrenderingtag","text":"[androidJvm] @WorkflowUiExperimentalApi() data class ShowRenderingTag RenderingT : Any >( showing : RenderingT , environment : ViewEnvironment , showRendering : ViewShowRendering < RenderingT >) ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering .","title":"ShowRenderingTag"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/#parameters","text":"androidJvm showing the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/#constructors","text":"ShowRenderingTag [androidJvm] fun RenderingT : Any > ShowRenderingTag (showing: RenderingT , environment: ViewEnvironment , showRendering: ViewShowRendering < RenderingT >)the current rendering.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/#properties","text":"Name Summary environment [androidJvm] val environment : ViewEnvironment showing [androidJvm] val showing : RenderingT the current rendering. showRendering [androidJvm] val showRendering : ViewShowRendering < RenderingT >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/-show-rendering-tag/","text":"// workflow / com.squareup.workflow1.ui / ShowRenderingTag / ShowRenderingTag ShowRenderingTag \u00b6 [androidJvm] Content fun RenderingT : Any > ShowRenderingTag (showing: RenderingT , environment: ViewEnvironment , showRendering: ViewShowRendering < RenderingT >) More info Parameters \u00b6 androidJvm showing the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":" show rendering tag"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/-show-rendering-tag/#showrenderingtag","text":"[androidJvm] Content fun RenderingT : Any > ShowRenderingTag (showing: RenderingT , environment: ViewEnvironment , showRendering: ViewShowRendering < RenderingT >) More info","title":"ShowRenderingTag"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/-show-rendering-tag/#parameters","text":"androidJvm showing the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/environment/","text":"// workflow / com.squareup.workflow1.ui / ShowRenderingTag / environment environment \u00b6 [androidJvm] Content val environment : ViewEnvironment","title":"Environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/environment/#environment","text":"[androidJvm] Content val environment : ViewEnvironment","title":"environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/show-rendering/","text":"// workflow / com.squareup.workflow1.ui / ShowRenderingTag / showRendering showRendering \u00b6 [androidJvm] Content val showRendering : ViewShowRendering < RenderingT >","title":"Show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/show-rendering/#showrendering","text":"[androidJvm] Content val showRendering : ViewShowRendering < RenderingT >","title":"showRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/showing/","text":"// workflow / com.squareup.workflow1.ui / ShowRenderingTag / showing showing \u00b6 [androidJvm] Content val showing : RenderingT More info Parameters \u00b6 androidJvm showing the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Showing"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/showing/#showing","text":"[androidJvm] Content val showing : RenderingT More info","title":"showing"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/showing/#parameters","text":"androidJvm showing the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironment ViewEnvironment \u00b6 [androidJvm] @WorkflowUiExperimentalApi() class ViewEnvironment ( map : Map < ViewEnvironmentKey <*>, Any >) Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing. Constructors \u00b6 ViewEnvironment [androidJvm] fun ViewEnvironment (map: Map < ViewEnvironmentKey <*>, Any > = emptyMap()) Functions \u00b6 Name Summary equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean get [androidJvm] Content operator fun < T : Any > get (key: ViewEnvironmentKey < T >): T hashCode [androidJvm] Content open override fun hashCode (): Int plus [androidJvm] Content operator fun plus (other: ViewEnvironment ): ViewEnvironment operator fun < T : Any > plus (pair: Pair < ViewEnvironmentKey < T >, T >): ViewEnvironment toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary map [androidJvm] val map : Map < ViewEnvironmentKey <*>, Any >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/#viewenvironment","text":"[androidJvm] @WorkflowUiExperimentalApi() class ViewEnvironment ( map : Map < ViewEnvironmentKey <*>, Any >) Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing.","title":"ViewEnvironment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/#constructors","text":"ViewEnvironment [androidJvm] fun ViewEnvironment (map: Map < ViewEnvironmentKey <*>, Any > = emptyMap())","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/#functions","text":"Name Summary equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean get [androidJvm] Content operator fun < T : Any > get (key: ViewEnvironmentKey < T >): T hashCode [androidJvm] Content open override fun hashCode (): Int plus [androidJvm] Content operator fun plus (other: ViewEnvironment ): ViewEnvironment operator fun < T : Any > plus (pair: Pair < ViewEnvironmentKey < T >, T >): ViewEnvironment toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/#properties","text":"Name Summary map [androidJvm] val map : Map < ViewEnvironmentKey <*>, Any >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/-view-environment/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironment / ViewEnvironment ViewEnvironment \u00b6 [androidJvm] Content fun ViewEnvironment (map: Map < ViewEnvironmentKey <*>, Any > = emptyMap())","title":" view environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/-view-environment/#viewenvironment","text":"[androidJvm] Content fun ViewEnvironment (map: Map < ViewEnvironmentKey <*>, Any > = emptyMap())","title":"ViewEnvironment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/equals/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironment / equals equals \u00b6 [androidJvm] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/equals/#equals","text":"[androidJvm] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/get/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironment / get get \u00b6 [androidJvm] Content operator fun < T : Any > get (key: ViewEnvironmentKey < T >): T","title":"Get"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/get/#get","text":"[androidJvm] Content operator fun < T : Any > get (key: ViewEnvironmentKey < T >): T","title":"get"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/hash-code/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironment / hashCode hashCode \u00b6 [androidJvm] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/hash-code/#hashcode","text":"[androidJvm] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/map/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironment / map map \u00b6 [androidJvm] Content val map : Map < ViewEnvironmentKey <*>, Any >","title":"Map"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/map/#map","text":"[androidJvm] Content val map : Map < ViewEnvironmentKey <*>, Any >","title":"map"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/plus/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironment / plus plus \u00b6 [androidJvm] Content operator fun < T : Any > plus (pair: Pair < ViewEnvironmentKey < T >, T >): ViewEnvironment operator fun plus (other: ViewEnvironment ): ViewEnvironment","title":"Plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/plus/#plus","text":"[androidJvm] Content operator fun < T : Any > plus (pair: Pair < ViewEnvironmentKey < T >, T >): ViewEnvironment operator fun plus (other: ViewEnvironment ): ViewEnvironment","title":"plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/to-string/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironment / toString toString \u00b6 [androidJvm] Content open override fun toString (): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/to-string/#tostring","text":"[androidJvm] Content open override fun toString (): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironmentKey ViewEnvironmentKey \u00b6 [androidJvm] @WorkflowUiExperimentalApi() abstract class ViewEnvironmentKey < T : Any >( type : KClass < T >) Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. Constructors \u00b6 ViewEnvironmentKey [androidJvm] fun < T : Any > ViewEnvironmentKey (type: KClass < T >) Functions \u00b6 Name Summary equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary default [androidJvm] abstract val default : T Inheritors \u00b6 Name BackStackConfig ViewRegistry","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/#viewenvironmentkey","text":"[androidJvm] @WorkflowUiExperimentalApi() abstract class ViewEnvironmentKey < T : Any >( type : KClass < T >) Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value.","title":"ViewEnvironmentKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/#constructors","text":"ViewEnvironmentKey [androidJvm] fun < T : Any > ViewEnvironmentKey (type: KClass < T >)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/#functions","text":"Name Summary equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/#properties","text":"Name Summary default [androidJvm] abstract val default : T","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/#inheritors","text":"Name BackStackConfig ViewRegistry","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/-view-environment-key/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / ViewEnvironmentKey ViewEnvironmentKey \u00b6 [androidJvm] Content fun < T : Any > ViewEnvironmentKey (type: KClass < T >)","title":" view environment key"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/-view-environment-key/#viewenvironmentkey","text":"[androidJvm] Content fun < T : Any > ViewEnvironmentKey (type: KClass < T >)","title":"ViewEnvironmentKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/default/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / default default \u00b6 [androidJvm] Content abstract val default : T","title":"Default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/default/#default","text":"[androidJvm] Content abstract val default : T","title":"default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/equals/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / equals equals \u00b6 [androidJvm] Content operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/equals/#equals","text":"[androidJvm] Content operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/hash-code/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / hashCode hashCode \u00b6 [androidJvm] Content override fun hashCode (): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/hash-code/#hashcode","text":"[androidJvm] Content override fun hashCode (): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/to-string/","text":"// workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / toString toString \u00b6 [androidJvm] Content open override fun toString (): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/to-string/#tostring","text":"[androidJvm] Content open override fun toString (): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/","text":"// workflow / com.squareup.workflow1.ui / ViewFactory ViewFactory \u00b6 [androidJvm] @WorkflowUiExperimentalApi() interface ViewFactory RenderingT : Any > Factory for View instances that can show renderings of type RenderingT . Two concrete ViewFactory implementations are provided: The various [bind](../-layout-runner/-companion/bind.md) methods on [LayoutRunner](../-layout-runner/index.md) allow easy use of Android XML layout resources and AndroidX ViewBinding. [BuilderViewFactory](../-builder-view-factory/index.md) allows views to be built from code. It\u2019s simplest to have your rendering classes implement AndroidViewRendering to associate them with appropriate an appropriate ViewFactory . For more flexibility, and to avoid coupling your workflow directly to the Android runtime, see ViewRegistry . Functions \u00b6 Name Summary buildView [androidJvm] Content abstract fun buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . Properties \u00b6 Name Summary type [androidJvm] abstract val type : KClass RenderingT > Inheritors \u00b6 Name BackStackContainer BuilderViewFactory DecorativeViewFactory NamedViewFactory AlertContainer","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/#viewfactory","text":"[androidJvm] @WorkflowUiExperimentalApi() interface ViewFactory RenderingT : Any > Factory for View instances that can show renderings of type RenderingT . Two concrete ViewFactory implementations are provided: The various [bind](../-layout-runner/-companion/bind.md) methods on [LayoutRunner](../-layout-runner/index.md) allow easy use of Android XML layout resources and AndroidX ViewBinding. [BuilderViewFactory](../-builder-view-factory/index.md) allows views to be built from code. It\u2019s simplest to have your rendering classes implement AndroidViewRendering to associate them with appropriate an appropriate ViewFactory . For more flexibility, and to avoid coupling your workflow directly to the Android runtime, see ViewRegistry .","title":"ViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/#functions","text":"Name Summary buildView [androidJvm] Content abstract fun buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/#properties","text":"Name Summary type [androidJvm] abstract val type : KClass RenderingT >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/#inheritors","text":"Name BackStackContainer BuilderViewFactory DecorativeViewFactory NamedViewFactory AlertContainer","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/build-view/","text":"// workflow / com.squareup.workflow1.ui / ViewFactory / buildView buildView \u00b6 [androidJvm] Content abstract fun buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/build-view/#buildview","text":"[androidJvm] Content abstract fun buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null): View More info Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/type/","text":"// workflow / com.squareup.workflow1.ui / ViewFactory / type type \u00b6 [androidJvm] Content abstract val type : KClass RenderingT >","title":"Type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/type/#type","text":"[androidJvm] Content abstract val type : KClass RenderingT >","title":"type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/","text":"// workflow / com.squareup.workflow1.ui / ViewRegistry ViewRegistry \u00b6 [androidJvm] @WorkflowUiExperimentalApi() interface ViewRegistry The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. This is the engine behind AndroidViewRendering , WorkflowViewStub and ViewFactory . Most apps can ignore ViewRegistry as an implementation detail, by using AndroidViewRendering to tie their rendering classes to view code. To avoid that coupling between workflow code and the Android runtime, registries can be loaded with ViewFactory instances at runtime, and provided as an optional parameter to WorkflowLayout.start . For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 val AuthViewFactories = ViewRegistry( AuthorizingLayoutRunner, LoginLayoutRunner, SecondFactorLayoutRunner ) val TicTacToeViewFactories = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) val ApplicationViewFactories = ViewRegistry(ApplicationLayoutRunner) + AuthViewFactories + TicTacToeViewFactories override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentWorkflow( registry = viewRegistry, configure = { WorkflowRunner.Config(rootWorkflow) } ) } In the above example, it is assumed that the companion objects of the various decoupled LayoutRunner classes honor a convention of implementing ViewFactory , in aid of this kind of assembly. 1 2 3 4 5 6 7 8 class GamePlayLayoutRunner(view: View) : LayoutRunner<GameRendering> { // ... companion object : ViewFactory<GameRendering> by LayoutRunner.bind( R.layout.game_layout, ::GameLayoutRunner ) } Types \u00b6 Name Summary Companion [androidJvm] Content object Companion : ViewEnvironmentKey < ViewRegistry > Functions \u00b6 Name Summary getFactoryFor [androidJvm] Content abstract fun < RenderingT : Any > getFactoryFor (renderingType: KClass RenderingT >): ViewFactory < RenderingT >? More info This method is not for general use, use WorkflowViewStub instead. Properties \u00b6 Name Summary keys [androidJvm] abstract val keys : Set < KClass <*>>The set of unique keys which this registry can derive from the renderings passed to buildView and for which it knows how to create views. Extensions \u00b6 Name Summary buildView [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null, initializeView: View .() -> Unit = { showFirstRendering () }): View More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. getFactoryForRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . getFactoryForRendering (rendering: RenderingT ): ViewFactory < RenderingT > More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. plus [androidJvm] Content @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (binding: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (other: ViewRegistry ): ViewRegistry","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#viewregistry","text":"[androidJvm] @WorkflowUiExperimentalApi() interface ViewRegistry The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. This is the engine behind AndroidViewRendering , WorkflowViewStub and ViewFactory . Most apps can ignore ViewRegistry as an implementation detail, by using AndroidViewRendering to tie their rendering classes to view code. To avoid that coupling between workflow code and the Android runtime, registries can be loaded with ViewFactory instances at runtime, and provided as an optional parameter to WorkflowLayout.start . For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 val AuthViewFactories = ViewRegistry( AuthorizingLayoutRunner, LoginLayoutRunner, SecondFactorLayoutRunner ) val TicTacToeViewFactories = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) val ApplicationViewFactories = ViewRegistry(ApplicationLayoutRunner) + AuthViewFactories + TicTacToeViewFactories override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentWorkflow( registry = viewRegistry, configure = { WorkflowRunner.Config(rootWorkflow) } ) } In the above example, it is assumed that the companion objects of the various decoupled LayoutRunner classes honor a convention of implementing ViewFactory , in aid of this kind of assembly. 1 2 3 4 5 6 7 8 class GamePlayLayoutRunner(view: View) : LayoutRunner<GameRendering> { // ... companion object : ViewFactory<GameRendering> by LayoutRunner.bind( R.layout.game_layout, ::GameLayoutRunner ) }","title":"ViewRegistry"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#types","text":"Name Summary Companion [androidJvm] Content object Companion : ViewEnvironmentKey < ViewRegistry >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#functions","text":"Name Summary getFactoryFor [androidJvm] Content abstract fun < RenderingT : Any > getFactoryFor (renderingType: KClass RenderingT >): ViewFactory < RenderingT >? More info This method is not for general use, use WorkflowViewStub instead.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#properties","text":"Name Summary keys [androidJvm] abstract val keys : Set < KClass <*>>The set of unique keys which this registry can derive from the renderings passed to buildView and for which it knows how to create views.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#extensions","text":"Name Summary buildView [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . buildView (initialRendering: RenderingT , initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ? = null, initializeView: View .() -> Unit = { showFirstRendering () }): View More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. getFactoryForRendering [androidJvm] Content @WorkflowUiExperimentalApi() fun < RenderingT : Any > ViewRegistry . getFactoryForRendering (rendering: RenderingT ): ViewFactory < RenderingT > More info It is usually more convenient to use WorkflowViewStub or DecorativeViewFactory than to call this method directly. plus [androidJvm] Content @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (binding: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi() operator fun ViewRegistry . plus (other: ViewRegistry ): ViewRegistry","title":"Extensions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/get-factory-for/","text":"// workflow / com.squareup.workflow1.ui / ViewRegistry / getFactoryFor getFactoryFor \u00b6 [androidJvm] Content abstract fun < RenderingT : Any > getFactoryFor (renderingType: KClass RenderingT >): ViewFactory < RenderingT >? More info This method is not for general use, use WorkflowViewStub instead. Returns the ViewFactory that was registered for the given renderingType , or null if none was found.","title":"Get factory for"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/get-factory-for/#getfactoryfor","text":"[androidJvm] Content abstract fun < RenderingT : Any > getFactoryFor (renderingType: KClass RenderingT >): ViewFactory < RenderingT >? More info This method is not for general use, use WorkflowViewStub instead. Returns the ViewFactory that was registered for the given renderingType , or null if none was found.","title":"getFactoryFor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/keys/","text":"// workflow / com.squareup.workflow1.ui / ViewRegistry / keys keys \u00b6 [androidJvm] Content abstract val keys : Set < KClass <*>> More info The set of unique keys which this registry can derive from the renderings passed to buildView and for which it knows how to create views. Used to ensure that duplicate bindings are never registered.","title":"Keys"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/keys/#keys","text":"[androidJvm] Content abstract val keys : Set < KClass <*>> More info The set of unique keys which this registry can derive from the renderings passed to buildView and for which it knows how to create views. Used to ensure that duplicate bindings are never registered.","title":"keys"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/","text":"// workflow / com.squareup.workflow1.ui / ViewRegistry / Companion Companion \u00b6 [androidJvm] object Companion : ViewEnvironmentKey < ViewRegistry > Functions \u00b6 Name Summary equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary default [androidJvm] open override val default : ViewRegistry","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/#companion","text":"[androidJvm] object Companion : ViewEnvironmentKey < ViewRegistry >","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/#functions","text":"Name Summary equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/#properties","text":"Name Summary default [androidJvm] open override val default : ViewRegistry","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/default/","text":"// workflow / com.squareup.workflow1.ui / ViewRegistry / Companion / default default \u00b6 [androidJvm] Content open override val default : ViewRegistry","title":"Default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/default/#default","text":"[androidJvm] Content open override val default : ViewRegistry","title":"default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/","text":"// workflow / com.squareup.workflow1.ui / WorkflowLayout WorkflowLayout \u00b6 [androidJvm] @WorkflowUiExperimentalApi() class WorkflowLayout ( context : Context , attributeSet : AttributeSet ?) : FrameLayout A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. id defaults to R.id.workflow_layout, as a convenience to ensure that view persistence will work without requiring authors to be immersed in Android arcana. See com.squareup.workflow1.ui.renderWorkflowIn for typical use with a com.squareup.workflow1.Workflow. Constructors \u00b6 WorkflowLayout [androidJvm] fun WorkflowLayout (context: Context , attributeSet: AttributeSet ? = null) Functions \u00b6 Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean start [androidJvm] Content fun start (renderings: Flow< Any >, environment: ViewEnvironment = ViewEnvironment()) More info Subscribes to renderings , and uses the ViewRegistry in the given environment to build a new view each time a new type of rendering is received, making that view the only child of this one. [androidJvm] Content fun start (renderings: Flow< Any >, registry: ViewRegistry ) More info Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/#workflowlayout","text":"[androidJvm] @WorkflowUiExperimentalApi() class WorkflowLayout ( context : Context , attributeSet : AttributeSet ?) : FrameLayout A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. id defaults to R.id.workflow_layout, as a convenience to ensure that view persistence will work without requiring authors to be immersed in Android arcana. See com.squareup.workflow1.ui.renderWorkflowIn for typical use with a com.squareup.workflow1.Workflow.","title":"WorkflowLayout"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/#constructors","text":"WorkflowLayout [androidJvm] fun WorkflowLayout (context: Context , attributeSet: AttributeSet ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/#functions","text":"Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean start [androidJvm] Content fun start (renderings: Flow< Any >, environment: ViewEnvironment = ViewEnvironment()) More info Subscribes to renderings , and uses the ViewRegistry in the given environment to build a new view each time a new type of rendering is received, making that view the only child of this one. [androidJvm] Content fun start (renderings: Flow< Any >, registry: ViewRegistry ) More info Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/-workflow-layout/","text":"// workflow / com.squareup.workflow1.ui / WorkflowLayout / WorkflowLayout WorkflowLayout \u00b6 [androidJvm] Content fun WorkflowLayout (context: Context , attributeSet: AttributeSet ? = null)","title":" workflow layout"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/-workflow-layout/#workflowlayout","text":"[androidJvm] Content fun WorkflowLayout (context: Context , attributeSet: AttributeSet ? = null)","title":"WorkflowLayout"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/start/","text":"// workflow / com.squareup.workflow1.ui / WorkflowLayout / start start \u00b6 [androidJvm] Content fun start (renderings: Flow< Any >, registry: ViewRegistry ) More info Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. [androidJvm] Content fun start (renderings: Flow< Any >, environment: ViewEnvironment = ViewEnvironment()) More info Subscribes to renderings , and uses the ViewRegistry in the given environment to build a new view each time a new type of rendering is received, making that view the only child of this one.","title":"Start"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/start/#start","text":"[androidJvm] Content fun start (renderings: Flow< Any >, registry: ViewRegistry ) More info Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. [androidJvm] Content fun start (renderings: Flow< Any >, environment: ViewEnvironment = ViewEnvironment()) More info Subscribes to renderings , and uses the ViewRegistry in the given environment to build a new view each time a new type of rendering is received, making that view the only child of this one.","title":"start"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/","text":"// workflow / com.squareup.workflow1.ui / WorkflowUiExperimentalApi WorkflowUiExperimentalApi \u00b6 [jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.PROPERTY , AnnotationTarget.FUNCTION , AnnotationTarget.TYPEALIAS ]) annotation class WorkflowUiExperimentalApi Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. Constructors \u00b6 WorkflowUiExperimentalApi [jvm] fun WorkflowUiExperimentalApi ()","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/#workflowuiexperimentalapi","text":"[jvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.PROPERTY , AnnotationTarget.FUNCTION , AnnotationTarget.TYPEALIAS ]) annotation class WorkflowUiExperimentalApi Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"WorkflowUiExperimentalApi"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/#constructors","text":"WorkflowUiExperimentalApi [jvm] fun WorkflowUiExperimentalApi ()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/-workflow-ui-experimental-api/","text":"// workflow / com.squareup.workflow1.ui / WorkflowUiExperimentalApi / WorkflowUiExperimentalApi WorkflowUiExperimentalApi \u00b6 [jvm] Content fun WorkflowUiExperimentalApi ()","title":" workflow ui experimental api"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/-workflow-ui-experimental-api/#workflowuiexperimentalapi","text":"[jvm] Content fun WorkflowUiExperimentalApi ()","title":"WorkflowUiExperimentalApi"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub WorkflowViewStub \u00b6 [androidJvm] @WorkflowUiExperimentalApi() class WorkflowViewStub @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : View A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . Usage \u00b6 In the XML layout for a container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: 1 2 3 4 5 6 7 8 9 <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" \u2026> <com.squareup.workflow1.WorkflowViewStub android:id=\"@+id/child_stub\" app:inflatedId=\"@+id/child\" /> \u2026 Then in your LayoutRunner , pull the view out with findViewById like any other view and [update](update.md) it in your [LayoutRunner.showRendering](../-layout-runner/show-rendering.md) method: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class YourLayoutRunner(view: View) { private val childStub = view.findViewById<WorkflowViewStub>(R.id.child_stub) // Totally optional, since this view is also accessible as [childStub.actual]. // Note that R.id.child was set in XML via the square:inflatedId parameter. private val child: View by lazy { view.findViewById<View>(R.id.child) } override fun showRendering( rendering: YourRendering, viewEnvironment: ViewEnvironment ) { childStub.update(rendering.childRendering, viewEnvironment) } } NB : If you\u2019re using a stub in a RelativeLayout or ConstraintLayout, relationships should be tied to the stub\u2019s app:inflatedId, not its android:id. Use updatesVisibility and setBackground for more control of how update effects the visibility and backgrounds of created views. Use replaceOldViewInParent to customize replacing actual with a new view, e.g. for animated transitions. Constructors \u00b6 WorkflowViewStub [androidJvm] @ JvmOverloads () fun WorkflowViewStub (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) Functions \u00b6 Name Summary addChildrenForAccessibility [androidJvm] Content open fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addTouchables [androidJvm] Content open fun addTouchables (p0: ArrayList < View >) animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean clearAnimation [androidJvm] Content open fun clearAnimation () clearFocus [androidJvm] Content open fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) dispatchApplyWindowInsets [androidJvm] Content open fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open fun dispatchFinishTemporaryDetach () dispatchGenericFocusedEvent [androidJvm] Content open fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchTouchEvent [androidJvm] Content open fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open fun drawableStateChanged () findFocus [androidJvm] Content open fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () getAccessibilityClassName [androidJvm] Content open fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open fun getOverlay (): ViewOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open override fun getVisibility (): Int More info Returns the visibility of actual . getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content open fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDetachedFromWindow [androidJvm] Content open fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open fun onMeasure (p0: Int , p1: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onResolvePointerIcon [androidJvm] Content open fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRestoreInstanceState [androidJvm] Content open fun onRestoreInstanceState (p0: Parcelable ) onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onSaveInstanceState [androidJvm] Content open fun onSaveInstanceState (): Parcelable ? onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open override fun setBackground (background: Drawable ?) More info Sets the background of this stub as usual, and also that of actual if the given background is not null. setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open override fun setId (@ IdRes ()id: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open override fun setVisibility (visibility: Int ) More info Sets the visibility of actual . setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean stopNestedScroll [androidJvm] Content open fun stopNestedScroll () toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) update [androidJvm] Content fun update (rendering: Any , viewEnvironment: ViewEnvironment ): View More info Replaces this view with one that can display rendering . updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean Properties \u00b6 Name Summary actual [androidJvm] var actual : View On-demand access to the view created by the last call to update , or this WorkflowViewStub instance if none has yet been made. inflatedId [androidJvm] @ IdRes () var inflatedId : Int The id to be assigned to new views created by update . replaceOldViewInParent [androidJvm] var replaceOldViewInParent : ( ViewGroup , View ) -> Unit Function called from update to replace this stub, or the current actual , with a new view. updatesVisibility [androidJvm] var updatesVisibility : Boolean = trueIf true, the visibility of views created by update will be copied from that of actual .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#workflowviewstub","text":"[androidJvm] @WorkflowUiExperimentalApi() class WorkflowViewStub @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : View A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"WorkflowViewStub"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#usage","text":"In the XML layout for a container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: 1 2 3 4 5 6 7 8 9 <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" \u2026> <com.squareup.workflow1.WorkflowViewStub android:id=\"@+id/child_stub\" app:inflatedId=\"@+id/child\" /> \u2026 Then in your LayoutRunner , pull the view out with findViewById like any other view and [update](update.md) it in your [LayoutRunner.showRendering](../-layout-runner/show-rendering.md) method: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class YourLayoutRunner(view: View) { private val childStub = view.findViewById<WorkflowViewStub>(R.id.child_stub) // Totally optional, since this view is also accessible as [childStub.actual]. // Note that R.id.child was set in XML via the square:inflatedId parameter. private val child: View by lazy { view.findViewById<View>(R.id.child) } override fun showRendering( rendering: YourRendering, viewEnvironment: ViewEnvironment ) { childStub.update(rendering.childRendering, viewEnvironment) } } NB : If you\u2019re using a stub in a RelativeLayout or ConstraintLayout, relationships should be tied to the stub\u2019s app:inflatedId, not its android:id. Use updatesVisibility and setBackground for more control of how update effects the visibility and backgrounds of created views. Use replaceOldViewInParent to customize replacing actual with a new view, e.g. for animated transitions.","title":"Usage"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#constructors","text":"WorkflowViewStub [androidJvm] @ JvmOverloads () fun WorkflowViewStub (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#functions","text":"Name Summary addChildrenForAccessibility [androidJvm] Content open fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addTouchables [androidJvm] Content open fun addTouchables (p0: ArrayList < View >) animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean clearAnimation [androidJvm] Content open fun clearAnimation () clearFocus [androidJvm] Content open fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) dispatchApplyWindowInsets [androidJvm] Content open fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open fun dispatchFinishTemporaryDetach () dispatchGenericFocusedEvent [androidJvm] Content open fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchTouchEvent [androidJvm] Content open fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open fun drawableStateChanged () findFocus [androidJvm] Content open fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () getAccessibilityClassName [androidJvm] Content open fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open fun getOverlay (): ViewOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open override fun getVisibility (): Int More info Returns the visibility of actual . getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content open fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDetachedFromWindow [androidJvm] Content open fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open fun onMeasure (p0: Int , p1: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onResolvePointerIcon [androidJvm] Content open fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRestoreInstanceState [androidJvm] Content open fun onRestoreInstanceState (p0: Parcelable ) onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onSaveInstanceState [androidJvm] Content open fun onSaveInstanceState (): Parcelable ? onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open override fun setBackground (background: Drawable ?) More info Sets the background of this stub as usual, and also that of actual if the given background is not null. setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open override fun setId (@ IdRes ()id: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open override fun setVisibility (visibility: Int ) More info Sets the visibility of actual . setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean stopNestedScroll [androidJvm] Content open fun stopNestedScroll () toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) update [androidJvm] Content fun update (rendering: Any , viewEnvironment: ViewEnvironment ): View More info Replaces this view with one that can display rendering . updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#properties","text":"Name Summary actual [androidJvm] var actual : View On-demand access to the view created by the last call to update , or this WorkflowViewStub instance if none has yet been made. inflatedId [androidJvm] @ IdRes () var inflatedId : Int The id to be assigned to new views created by update . replaceOldViewInParent [androidJvm] var replaceOldViewInParent : ( ViewGroup , View ) -> Unit Function called from update to replace this stub, or the current actual , with a new view. updatesVisibility [androidJvm] var updatesVisibility : Boolean = trueIf true, the visibility of views created by update will be copied from that of actual .","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/-workflow-view-stub/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / WorkflowViewStub WorkflowViewStub \u00b6 [androidJvm] Content @ JvmOverloads () fun WorkflowViewStub (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":" workflow view stub"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/-workflow-view-stub/#workflowviewstub","text":"[androidJvm] Content @ JvmOverloads () fun WorkflowViewStub (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"WorkflowViewStub"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/actual/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / actual actual \u00b6 [androidJvm] Content var actual : View More info On-demand access to the view created by the last call to update , or this WorkflowViewStub instance if none has yet been made.","title":"Actual"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/actual/#actual","text":"[androidJvm] Content var actual : View More info On-demand access to the view created by the last call to update , or this WorkflowViewStub instance if none has yet been made.","title":"actual"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/get-visibility/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / getVisibility getVisibility \u00b6 [androidJvm] Content open override fun getVisibility (): Int More info Returns the visibility of actual . (Bear in mind that the initial value of actual is this stub.)","title":"Get visibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/get-visibility/#getvisibility","text":"[androidJvm] Content open override fun getVisibility (): Int More info Returns the visibility of actual . (Bear in mind that the initial value of actual is this stub.)","title":"getVisibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/inflated-id/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / inflatedId inflatedId \u00b6 [androidJvm] Content @ IdRes () var inflatedId : Int More info The id to be assigned to new views created by update . If the inflated id is View.NO_ID (its default value), new views keep their original ids.","title":"Inflated id"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/inflated-id/#inflatedid","text":"[androidJvm] Content @ IdRes () var inflatedId : Int More info The id to be assigned to new views created by update . If the inflated id is View.NO_ID (its default value), new views keep their original ids.","title":"inflatedId"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/replace-old-view-in-parent/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / replaceOldViewInParent replaceOldViewInParent \u00b6 [androidJvm] Content var replaceOldViewInParent : ( ViewGroup , View ) -> Unit More info Function called from update to replace this stub, or the current actual , with a new view. Can be updated to provide custom transition effects. Note that this method is responsible for copying the layoutParams from the stub to the new view. Also note that in a WorkflowViewStub that has never been updated, actual is the stub itself.","title":"Replace old view in parent"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/replace-old-view-in-parent/#replaceoldviewinparent","text":"[androidJvm] Content var replaceOldViewInParent : ( ViewGroup , View ) -> Unit More info Function called from update to replace this stub, or the current actual , with a new view. Can be updated to provide custom transition effects. Note that this method is responsible for copying the layoutParams from the stub to the new view. Also note that in a WorkflowViewStub that has never been updated, actual is the stub itself.","title":"replaceOldViewInParent"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-background/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / setBackground setBackground \u00b6 [androidJvm] Content open override fun setBackground (background: Drawable ?) More info Sets the background of this stub as usual, and also that of actual if the given background is not null. Any new views created by update will be assigned this background, again if it is not null.","title":"Set background"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-background/#setbackground","text":"[androidJvm] Content open override fun setBackground (background: Drawable ?) More info Sets the background of this stub as usual, and also that of actual if the given background is not null. Any new views created by update will be assigned this background, again if it is not null.","title":"setBackground"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-id/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / setId setId \u00b6 [androidJvm] Content open override fun setId (@ IdRes ()id: Int )","title":"Set id"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-id/#setid","text":"[androidJvm] Content open override fun setId (@ IdRes ()id: Int )","title":"setId"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-visibility/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / setVisibility setVisibility \u00b6 [androidJvm] Content open override fun setVisibility (visibility: Int ) More info Sets the visibility of actual . If updatesVisibility is true, the visibility of new views created by update will copied from actual . (Bear in mind that the initial value of actual is this stub.)","title":"Set visibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-visibility/#setvisibility","text":"[androidJvm] Content open override fun setVisibility (visibility: Int ) More info Sets the visibility of actual . If updatesVisibility is true, the visibility of new views created by update will copied from actual . (Bear in mind that the initial value of actual is this stub.)","title":"setVisibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/update/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / update update \u00b6 [androidJvm] Content fun update (rendering: Any , viewEnvironment: ViewEnvironment ): View More info Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can\u2019t handle rendering , a new view is put in its place. The id of any view created by this method will be set to to inflatedId , unless that value is View.NO_ID . The background of any view created by this method will be copied from getBackground, if that value is non-null. If updatesVisibility is true, the visibility of any view created by this method will be copied from actual . (Bear in mind that the initial value of actual is this stub.) Return \u00b6 the view that showed rendering Throws \u00b6 kotlin.IllegalArgumentException if no binding can be find for the type of rendering kotlin.IllegalStateException if the matching ViewFactory fails to call View.bindShowRendering when constructing the view","title":"Update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/update/#update","text":"[androidJvm] Content fun update (rendering: Any , viewEnvironment: ViewEnvironment ): View More info Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can\u2019t handle rendering , a new view is put in its place. The id of any view created by this method will be set to to inflatedId , unless that value is View.NO_ID . The background of any view created by this method will be copied from getBackground, if that value is non-null. If updatesVisibility is true, the visibility of any view created by this method will be copied from actual . (Bear in mind that the initial value of actual is this stub.)","title":"update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/update/#return","text":"the view that showed rendering","title":"Return"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/update/#throws","text":"kotlin.IllegalArgumentException if no binding can be find for the type of rendering kotlin.IllegalStateException if the matching ViewFactory fails to call View.bindShowRendering when constructing the view","title":"Throws"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/updates-visibility/","text":"// workflow / com.squareup.workflow1.ui / WorkflowViewStub / updatesVisibility updatesVisibility \u00b6 [androidJvm] Content var updatesVisibility : Boolean = true More info If true, the visibility of views created by update will be copied from that of actual . Bear in mind that the initial value of actual is this stub.","title":"Updates visibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/updates-visibility/#updatesvisibility","text":"[androidJvm] Content var updatesVisibility : Boolean = true More info If true, the visibility of views created by update will be copied from that of actual . Bear in mind that the initial value of actual is this stub.","title":"updatesVisibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/","text":"// workflow / com.squareup.workflow1.ui.backstack Package com.squareup.workflow1.ui.backstack \u00b6 Types \u00b6 Name Summary BackStackConfig [androidJvm] Content @WorkflowUiExperimentalApi() enum BackStackConfig : Enum < BackStackConfig > More info Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not . BackStackContainer [androidJvm] Content @WorkflowUiExperimentalApi() open class BackStackContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : FrameLayout More info A container view that can display a stream of BackStackScreen instances. BackStackScreen [jvm] Content @ WorkflowUiExperimentalApi () class BackStackScreen < StackedT : Any >( bottom : StackedT , rest : List < StackedT >) More info Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). ViewStateCache [androidJvm] Content @WorkflowUiExperimentalApi() class ViewStateCache : Parcelable More info Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets. Functions \u00b6 Name Summary toBackStackScreen [jvm] Content @ WorkflowUiExperimentalApi () fun < T : Any > List < T >. toBackStackScreen (): BackStackScreen < T > toBackStackScreenOrNull [jvm] Content @ WorkflowUiExperimentalApi () fun < T : Any > List < T >. toBackStackScreenOrNull (): BackStackScreen < T >?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/#package-comsquareupworkflow1uibackstack","text":"","title":"Package com.squareup.workflow1.ui.backstack"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/#types","text":"Name Summary BackStackConfig [androidJvm] Content @WorkflowUiExperimentalApi() enum BackStackConfig : Enum < BackStackConfig > More info Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not . BackStackContainer [androidJvm] Content @WorkflowUiExperimentalApi() open class BackStackContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : FrameLayout More info A container view that can display a stream of BackStackScreen instances. BackStackScreen [jvm] Content @ WorkflowUiExperimentalApi () class BackStackScreen < StackedT : Any >( bottom : StackedT , rest : List < StackedT >) More info Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). ViewStateCache [androidJvm] Content @WorkflowUiExperimentalApi() class ViewStateCache : Parcelable More info Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/#functions","text":"Name Summary toBackStackScreen [jvm] Content @ WorkflowUiExperimentalApi () fun < T : Any > List < T >. toBackStackScreen (): BackStackScreen < T > toBackStackScreenOrNull [jvm] Content @ WorkflowUiExperimentalApi () fun < T : Any > List < T >. toBackStackScreenOrNull (): BackStackScreen < T >?","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/to-back-stack-screen-or-null/","text":"// workflow / com.squareup.workflow1.ui.backstack / toBackStackScreenOrNull toBackStackScreenOrNull \u00b6 [jvm] Content @ WorkflowUiExperimentalApi () fun < T : Any > List < T >. toBackStackScreenOrNull (): BackStackScreen < T >?","title":"To back stack screen or null"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/to-back-stack-screen-or-null/#tobackstackscreenornull","text":"[jvm] Content @ WorkflowUiExperimentalApi () fun < T : Any > List < T >. toBackStackScreenOrNull (): BackStackScreen < T >?","title":"toBackStackScreenOrNull"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/to-back-stack-screen/","text":"// workflow / com.squareup.workflow1.ui.backstack / toBackStackScreen toBackStackScreen \u00b6 [jvm] Content @ WorkflowUiExperimentalApi () fun < T : Any > List < T >. toBackStackScreen (): BackStackScreen < T >","title":"To back stack screen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/to-back-stack-screen/#tobackstackscreen","text":"[jvm] Content @ WorkflowUiExperimentalApi () fun < T : Any > List < T >. toBackStackScreen (): BackStackScreen < T >","title":"toBackStackScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig BackStackConfig \u00b6 [androidJvm] @WorkflowUiExperimentalApi() enum BackStackConfig : Enum < BackStackConfig > Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not . Entries \u00b6 Other [androidJvm] Other () This rendering is in a BackStackScreen but is not the first frame. First [androidJvm] First () This rendering is the first frame in a BackStackScreen. None [androidJvm] None () There is no BackStackContainer above here. Types \u00b6 Name Summary Companion [androidJvm] Content object Companion : ViewEnvironmentKey < BackStackConfig > Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/#backstackconfig","text":"[androidJvm] @WorkflowUiExperimentalApi() enum BackStackConfig : Enum < BackStackConfig > Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not .","title":"BackStackConfig"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/#entries","text":"Other [androidJvm] Other () This rendering is in a BackStackScreen but is not the first frame. First [androidJvm] First () This rendering is the first frame in a BackStackScreen. None [androidJvm] None () There is no BackStackContainer above here.","title":"Entries"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/#types","text":"Name Summary Companion [androidJvm] Content object Companion : ViewEnvironmentKey < BackStackConfig >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / Companion Companion \u00b6 [androidJvm] object Companion : ViewEnvironmentKey < BackStackConfig > Functions \u00b6 Name Summary equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary default [androidJvm] open override val default : BackStackConfig","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/#companion","text":"[androidJvm] object Companion : ViewEnvironmentKey < BackStackConfig >","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/#functions","text":"Name Summary equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/#properties","text":"Name Summary default [androidJvm] open override val default : BackStackConfig","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/default/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / Companion / default default \u00b6 [androidJvm] Content open override val default : BackStackConfig","title":"Default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/default/#default","text":"[androidJvm] Content open override val default : BackStackConfig","title":"default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-first/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / First First \u00b6 [androidJvm] First () This rendering is the first frame in a BackStackScreen. Useful as a hint to disable \u201cgo back\u201d behavior, or replace it with \u201cgo up\u201d behavior. Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-first/#first","text":"[androidJvm] First () This rendering is the first frame in a BackStackScreen. Useful as a hint to disable \u201cgo back\u201d behavior, or replace it with \u201cgo up\u201d behavior.","title":"First"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-first/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-first/name/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / First / name name \u00b6 [androidJvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-first/name/#name","text":"[androidJvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-first/ordinal/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / First / ordinal ordinal \u00b6 [androidJvm] Content val ordinal : Int","title":"Ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-first/ordinal/#ordinal","text":"[androidJvm] Content val ordinal : Int","title":"ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-none/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / None None \u00b6 [androidJvm] None () There is no BackStackContainer above here. Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-none/#none","text":"[androidJvm] None () There is no BackStackContainer above here.","title":"None"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-none/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-none/name/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / None / name name \u00b6 [androidJvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-none/name/#name","text":"[androidJvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-none/ordinal/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / None / ordinal ordinal \u00b6 [androidJvm] Content val ordinal : Int","title":"Ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-none/ordinal/#ordinal","text":"[androidJvm] Content val ordinal : Int","title":"ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-other/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / Other Other \u00b6 [androidJvm] Other () This rendering is in a BackStackScreen but is not the first frame. Useful as a hint to enable \u201cgo back\u201d behavior. Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-other/#other","text":"[androidJvm] Other () This rendering is in a BackStackScreen but is not the first frame. Useful as a hint to enable \u201cgo back\u201d behavior.","title":"Other"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-other/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-other/name/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / Other / name name \u00b6 [androidJvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-other/name/#name","text":"[androidJvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-other/ordinal/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / Other / ordinal ordinal \u00b6 [androidJvm] Content val ordinal : Int","title":"Ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-other/ordinal/#ordinal","text":"[androidJvm] Content val ordinal : Int","title":"ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackContainer BackStackContainer \u00b6 [androidJvm] @WorkflowUiExperimentalApi() open class BackStackContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : FrameLayout A container view that can display a stream of BackStackScreen instances. Constructors \u00b6 BackStackContainer [androidJvm] @ JvmOverloads () fun BackStackContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) Types \u00b6 Name Summary Companion [androidJvm] Content object Companion : ViewFactory <BackStackScreen<*>> Functions \u00b6 Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/#backstackcontainer","text":"[androidJvm] @WorkflowUiExperimentalApi() open class BackStackContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : FrameLayout A container view that can display a stream of BackStackScreen instances.","title":"BackStackContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/#constructors","text":"BackStackContainer [androidJvm] @ JvmOverloads () fun BackStackContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/#types","text":"Name Summary Companion [androidJvm] Content object Companion : ViewFactory <BackStackScreen<*>>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/#functions","text":"Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-back-stack-container/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackContainer / BackStackContainer BackStackContainer \u00b6 [androidJvm] Content @ JvmOverloads () fun BackStackContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":" back stack container"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-back-stack-container/#backstackcontainer","text":"[androidJvm] Content @ JvmOverloads () fun BackStackContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"BackStackContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-companion/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackContainer / Companion Companion \u00b6 [androidJvm] object Companion : ViewFactory <BackStackScreen<*>> Functions \u00b6 Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: BackStackScreen<*>, initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View Properties \u00b6 Name Summary type [androidJvm] open override val type : KClass <in BackStackScreen<*>>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-companion/#companion","text":"[androidJvm] object Companion : ViewFactory <BackStackScreen<*>>","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-companion/#functions","text":"Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: BackStackScreen<*>, initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-companion/#properties","text":"Name Summary type [androidJvm] open override val type : KClass <in BackStackScreen<*>>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen BackStackScreen \u00b6 [jvm] @ WorkflowUiExperimentalApi () class BackStackScreen < StackedT : Any >( bottom : StackedT , rest : List < StackedT >) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty. Parameters \u00b6 jvm bottom the bottom-most entry in the stack rest the rest of the stack, empty by default Constructors \u00b6 BackStackScreen [jvm] fun < StackedT : Any > BackStackScreen (bottom: StackedT , vararg rest: StackedT )Creates a screen with elements listed from the bottom to the top. BackStackScreen [jvm] fun < StackedT : Any > BackStackScreen (bottom: StackedT , rest: List < StackedT >)the bottom-most entry in the stack Functions \u00b6 Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean get [jvm] Content operator fun get (index: Int ): StackedT hashCode [jvm] Content open override fun hashCode (): Int map [jvm] Content fun < R : Any > map (transform: ( StackedT ) -> R ): BackStackScreen < R > mapIndexed [jvm] Content fun < R : Any > mapIndexed (transform: (index: Int , StackedT ) -> R ): BackStackScreen < R > plus [jvm] Content operator fun plus (other: BackStackScreen < StackedT >?): BackStackScreen < StackedT > toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary backStack [jvm] val backStack : List < StackedT >Screens to which we may return. frames [jvm] val frames : List < StackedT > top [jvm] val top : StackedT The active screen.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#backstackscreen","text":"[jvm] @ WorkflowUiExperimentalApi () class BackStackScreen < StackedT : Any >( bottom : StackedT , rest : List < StackedT >) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty.","title":"BackStackScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#parameters","text":"jvm bottom the bottom-most entry in the stack rest the rest of the stack, empty by default","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#constructors","text":"BackStackScreen [jvm] fun < StackedT : Any > BackStackScreen (bottom: StackedT , vararg rest: StackedT )Creates a screen with elements listed from the bottom to the top. BackStackScreen [jvm] fun < StackedT : Any > BackStackScreen (bottom: StackedT , rest: List < StackedT >)the bottom-most entry in the stack","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean get [jvm] Content operator fun get (index: Int ): StackedT hashCode [jvm] Content open override fun hashCode (): Int map [jvm] Content fun < R : Any > map (transform: ( StackedT ) -> R ): BackStackScreen < R > mapIndexed [jvm] Content fun < R : Any > mapIndexed (transform: (index: Int , StackedT ) -> R ): BackStackScreen < R > plus [jvm] Content operator fun plus (other: BackStackScreen < StackedT >?): BackStackScreen < StackedT > toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#properties","text":"Name Summary backStack [jvm] val backStack : List < StackedT >Screens to which we may return. frames [jvm] val frames : List < StackedT > top [jvm] val top : StackedT The active screen.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/-back-stack-screen/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / BackStackScreen BackStackScreen \u00b6 [jvm] Content fun < StackedT : Any > BackStackScreen (bottom: StackedT , vararg rest: StackedT ) More info Creates a screen with elements listed from the bottom to the top. [jvm] Content fun < StackedT : Any > BackStackScreen (bottom: StackedT , rest: List < StackedT >) More info Parameters \u00b6 jvm bottom the bottom-most entry in the stack rest the rest of the stack, empty by default","title":" back stack screen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/-back-stack-screen/#backstackscreen","text":"[jvm] Content fun < StackedT : Any > BackStackScreen (bottom: StackedT , vararg rest: StackedT ) More info Creates a screen with elements listed from the bottom to the top. [jvm] Content fun < StackedT : Any > BackStackScreen (bottom: StackedT , rest: List < StackedT >) More info","title":"BackStackScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/-back-stack-screen/#parameters","text":"jvm bottom the bottom-most entry in the stack rest the rest of the stack, empty by default","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/back-stack/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / backStack backStack \u00b6 [jvm] Content val backStack : List < StackedT > More info Screens to which we may return.","title":"Back stack"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/back-stack/#backstack","text":"[jvm] Content val backStack : List < StackedT > More info Screens to which we may return.","title":"backStack"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/equals/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / equals equals \u00b6 [jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/equals/#equals","text":"[jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/frames/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / frames frames \u00b6 [jvm] Content val frames : List < StackedT >","title":"Frames"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/frames/#frames","text":"[jvm] Content val frames : List < StackedT >","title":"frames"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/get/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / get get \u00b6 [jvm] Content operator fun get (index: Int ): StackedT","title":"Get"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/get/#get","text":"[jvm] Content operator fun get (index: Int ): StackedT","title":"get"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/hash-code/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / hashCode hashCode \u00b6 [jvm] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/hash-code/#hashcode","text":"[jvm] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/map-indexed/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / mapIndexed mapIndexed \u00b6 [jvm] Content fun < R : Any > mapIndexed (transform: (index: Int , StackedT ) -> R ): BackStackScreen < R >","title":"Map indexed"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/map-indexed/#mapindexed","text":"[jvm] Content fun < R : Any > mapIndexed (transform: (index: Int , StackedT ) -> R ): BackStackScreen < R >","title":"mapIndexed"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/map/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / map map \u00b6 [jvm] Content fun < R : Any > map (transform: ( StackedT ) -> R ): BackStackScreen < R >","title":"Map"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/map/#map","text":"[jvm] Content fun < R : Any > map (transform: ( StackedT ) -> R ): BackStackScreen < R >","title":"map"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/plus/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / plus plus \u00b6 [jvm] Content operator fun plus (other: BackStackScreen < StackedT >?): BackStackScreen < StackedT >","title":"Plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/plus/#plus","text":"[jvm] Content operator fun plus (other: BackStackScreen < StackedT >?): BackStackScreen < StackedT >","title":"plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/to-string/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/top/","text":"// workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / top top \u00b6 [jvm] Content val top : StackedT More info The active screen.","title":"Top"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/top/#top","text":"[jvm] Content val top : StackedT More info The active screen.","title":"top"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache ViewStateCache \u00b6 [androidJvm] @WorkflowUiExperimentalApi() class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets. This class implements Parcelable so that it can be preserved from a container view\u2019s own View.saveHierarchyState method. A simple container can return SavedState from that method rather than creating its own persistence class. Constructors \u00b6 ViewStateCache [androidJvm] fun ViewStateCache () Types \u00b6 Name Summary CREATOR [androidJvm] Content object CREATOR : Parcelable.Creator < ViewStateCache > SavedState [androidJvm] Content class SavedState : View.BaseSavedState More info Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. Functions \u00b6 Name Summary describeContents [androidJvm] Content open override fun describeContents (): Int prune [androidJvm] Content fun prune (retaining: Collection <Named<*>>) More info To be called when the set of hidden views changes but the visible view remains the same. restore [androidJvm] Content fun restore (from: ViewStateCache ) More info Replaces the state of the receiver with that of from . update [androidJvm] Content fun update (retainedRenderings: Collection <Named<*>>, oldViewMaybe: View ?, newView: View ) writeToParcel [androidJvm] Content open override fun writeToParcel (parcel: Parcel , flags: Int )","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/#viewstatecache","text":"[androidJvm] @WorkflowUiExperimentalApi() class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets. This class implements Parcelable so that it can be preserved from a container view\u2019s own View.saveHierarchyState method. A simple container can return SavedState from that method rather than creating its own persistence class.","title":"ViewStateCache"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/#constructors","text":"ViewStateCache [androidJvm] fun ViewStateCache ()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/#types","text":"Name Summary CREATOR [androidJvm] Content object CREATOR : Parcelable.Creator < ViewStateCache > SavedState [androidJvm] Content class SavedState : View.BaseSavedState More info Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/#functions","text":"Name Summary describeContents [androidJvm] Content open override fun describeContents (): Int prune [androidJvm] Content fun prune (retaining: Collection <Named<*>>) More info To be called when the set of hidden views changes but the visible view remains the same. restore [androidJvm] Content fun restore (from: ViewStateCache ) More info Replaces the state of the receiver with that of from . update [androidJvm] Content fun update (retainedRenderings: Collection <Named<*>>, oldViewMaybe: View ?, newView: View ) writeToParcel [androidJvm] Content open override fun writeToParcel (parcel: Parcel , flags: Int )","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-view-state-cache/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / ViewStateCache ViewStateCache \u00b6 [androidJvm] Content fun ViewStateCache ()","title":" view state cache"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-view-state-cache/#viewstatecache","text":"[androidJvm] Content fun ViewStateCache ()","title":"ViewStateCache"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/describe-contents/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / describeContents describeContents \u00b6 [androidJvm] Content open override fun describeContents (): Int","title":"Describe contents"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/describe-contents/#describecontents","text":"[androidJvm] Content open override fun describeContents (): Int","title":"describeContents"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/prune/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / prune prune \u00b6 [androidJvm] Content fun prune (retaining: Collection <Named<*>>) More info To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped.","title":"Prune"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/prune/#prune","text":"[androidJvm] Content fun prune (retaining: Collection <Named<*>>) More info To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped.","title":"prune"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/restore/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / restore restore \u00b6 [androidJvm] Content fun restore (from: ViewStateCache ) More info Replaces the state of the receiver with that of from . Typical usage is to call this from a container view\u2019s View.onRestoreInstanceState .","title":"Restore"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/restore/#restore","text":"[androidJvm] Content fun restore (from: ViewStateCache ) More info Replaces the state of the receiver with that of from . Typical usage is to call this from a container view\u2019s View.onRestoreInstanceState .","title":"restore"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/update/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / update update \u00b6 [androidJvm] Content fun update (retainedRenderings: Collection <Named<*>>, oldViewMaybe: View ?, newView: View ) More info Return \u00b6 true if newView has been restored. Parameters \u00b6 androidJvm retainedRenderings the renderings to be considered hidden after this update. Any associated view state will be retained in the cache, possibly to be restored to newView on a succeeding call to his method. Any other cached view state will be dropped. oldViewMaybe the view that is being removed, if any, which is expected to be showing a Named rendering. If that rendering is compatible with a member of retainedRenderings , its state will be saved . newView the view that is about to be displayed, which must be showing a Named rendering. If compatible view state is found in the cache, it is restored .","title":"Update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/update/#update","text":"[androidJvm] Content fun update (retainedRenderings: Collection <Named<*>>, oldViewMaybe: View ?, newView: View ) More info","title":"update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/update/#return","text":"true if newView has been restored.","title":"Return"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/update/#parameters","text":"androidJvm retainedRenderings the renderings to be considered hidden after this update. Any associated view state will be retained in the cache, possibly to be restored to newView on a succeeding call to his method. Any other cached view state will be dropped. oldViewMaybe the view that is being removed, if any, which is expected to be showing a Named rendering. If that rendering is compatible with a member of retainedRenderings , its state will be saved . newView the view that is about to be displayed, which must be showing a Named rendering. If compatible view state is found in the cache, it is restored .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/write-to-parcel/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / writeToParcel writeToParcel \u00b6 [androidJvm] Content open override fun writeToParcel (parcel: Parcel , flags: Int )","title":"Write to parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/write-to-parcel/#writetoparcel","text":"[androidJvm] Content open override fun writeToParcel (parcel: Parcel , flags: Int )","title":"writeToParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / CREATOR CREATOR \u00b6 [androidJvm] object CREATOR : Parcelable.Creator < ViewStateCache > Functions \u00b6 Name Summary createFromParcel [androidJvm] Content open override fun createFromParcel (parcel: Parcel ): ViewStateCache newArray [androidJvm] Content open override fun newArray (size: Int ): Array < ViewStateCache ?>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/#creator","text":"[androidJvm] object CREATOR : Parcelable.Creator < ViewStateCache >","title":"CREATOR"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/#functions","text":"Name Summary createFromParcel [androidJvm] Content open override fun createFromParcel (parcel: Parcel ): ViewStateCache newArray [androidJvm] Content open override fun newArray (size: Int ): Array < ViewStateCache ?>","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/create-from-parcel/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / CREATOR / createFromParcel createFromParcel \u00b6 [androidJvm] Content open override fun createFromParcel (parcel: Parcel ): ViewStateCache","title":"Create from parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/create-from-parcel/#createfromparcel","text":"[androidJvm] Content open override fun createFromParcel (parcel: Parcel ): ViewStateCache","title":"createFromParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/new-array/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / CREATOR / newArray newArray \u00b6 [androidJvm] Content open override fun newArray (size: Int ): Array < ViewStateCache ?>","title":"New array"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/new-array/#newarray","text":"[androidJvm] Content open override fun newArray (size: Int ): Array < ViewStateCache ?>","title":"newArray"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState SavedState \u00b6 [androidJvm] class SavedState : View.BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. More interesting containers should create their own subclass of BaseSavedState rather than trying to extend this one. Constructors \u00b6 SavedState [androidJvm] fun SavedState (superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState [androidJvm] fun SavedState (source: Parcel ) Types \u00b6 Name Summary CREATOR [androidJvm] Content object CREATOR : Parcelable.Creator < ViewStateCache.SavedState > Functions \u00b6 Name Summary describeContents [androidJvm] Content open override fun describeContents (): Int getSuperState [androidJvm] Content fun getSuperState (): Parcelable writeToParcel [androidJvm] Content open override fun writeToParcel (out: Parcel , flags: Int ) Properties \u00b6 Name Summary viewStateCache [androidJvm] val viewStateCache : ViewStateCache","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#savedstate","text":"[androidJvm] class SavedState : View.BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. More interesting containers should create their own subclass of BaseSavedState rather than trying to extend this one.","title":"SavedState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#constructors","text":"SavedState [androidJvm] fun SavedState (superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState [androidJvm] fun SavedState (source: Parcel )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#types","text":"Name Summary CREATOR [androidJvm] Content object CREATOR : Parcelable.Creator < ViewStateCache.SavedState >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#functions","text":"Name Summary describeContents [androidJvm] Content open override fun describeContents (): Int getSuperState [androidJvm] Content fun getSuperState (): Parcelable writeToParcel [androidJvm] Content open override fun writeToParcel (out: Parcel , flags: Int )","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#properties","text":"Name Summary viewStateCache [androidJvm] val viewStateCache : ViewStateCache","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-saved-state/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / SavedState SavedState \u00b6 [androidJvm] Content fun SavedState (superState: Parcelable ?, viewStateCache: ViewStateCache ) fun SavedState (source: Parcel )","title":" saved state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-saved-state/#savedstate","text":"[androidJvm] Content fun SavedState (superState: Parcelable ?, viewStateCache: ViewStateCache ) fun SavedState (source: Parcel )","title":"SavedState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/view-state-cache/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / viewStateCache viewStateCache \u00b6 [androidJvm] Content val viewStateCache : ViewStateCache","title":"View state cache"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/view-state-cache/#viewstatecache","text":"[androidJvm] Content val viewStateCache : ViewStateCache","title":"viewStateCache"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/write-to-parcel/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / writeToParcel writeToParcel \u00b6 [androidJvm] Content open override fun writeToParcel (out: Parcel , flags: Int )","title":"Write to parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/write-to-parcel/#writetoparcel","text":"[androidJvm] Content open override fun writeToParcel (out: Parcel , flags: Int )","title":"writeToParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / CREATOR CREATOR \u00b6 [androidJvm] object CREATOR : Parcelable.Creator < ViewStateCache.SavedState > Functions \u00b6 Name Summary createFromParcel [androidJvm] Content open override fun createFromParcel (source: Parcel ): ViewStateCache.SavedState newArray [androidJvm] Content open override fun newArray (size: Int ): Array < ViewStateCache.SavedState ?>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/#creator","text":"[androidJvm] object CREATOR : Parcelable.Creator < ViewStateCache.SavedState >","title":"CREATOR"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/#functions","text":"Name Summary createFromParcel [androidJvm] Content open override fun createFromParcel (source: Parcel ): ViewStateCache.SavedState newArray [androidJvm] Content open override fun newArray (size: Int ): Array < ViewStateCache.SavedState ?>","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/create-from-parcel/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / CREATOR / createFromParcel createFromParcel \u00b6 [androidJvm] Content open override fun createFromParcel (source: Parcel ): ViewStateCache.SavedState","title":"Create from parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/create-from-parcel/#createfromparcel","text":"[androidJvm] Content open override fun createFromParcel (source: Parcel ): ViewStateCache.SavedState","title":"createFromParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/new-array/","text":"// workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / CREATOR / newArray newArray \u00b6 [androidJvm] Content open override fun newArray (size: Int ): Array < ViewStateCache.SavedState ?>","title":"New array"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/new-array/#newarray","text":"[androidJvm] Content open override fun newArray (size: Int ): Array < ViewStateCache.SavedState ?>","title":"newArray"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/","text":"// workflow / com.squareup.workflow1.ui.modal Package com.squareup.workflow1.ui.modal \u00b6 Types \u00b6 Name Summary AlertContainer [androidJvm] Content @WorkflowUiExperimentalApi() class AlertContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int , @ StyleRes () dialogThemeResId : Int ) : ModalContainer More info Renders the AlertScreens of an AlertContainerScreen as AlertDialog s. AlertContainerScreen [jvm] Content @ WorkflowUiExperimentalApi () data class AlertContainerScreen < B : Any >( beneathModals : B , modals : List < AlertScreen >) : HasModals < B , AlertScreen > More info May show a stack of AlertScreen over a beneathModals . AlertScreen [jvm] Content @ WorkflowUiExperimentalApi () data class AlertScreen ( buttons : Map < AlertScreen.Button , String >, message : String , title : String , cancelable : Boolean , onEvent : ( AlertScreen.Event ) -> Unit ) More info Models a typical \u201cYou sure about that?\u201d alert box. HasModals [jvm] Content @ WorkflowUiExperimentalApi () interface HasModals B : Any , out M : Any > More info Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . ModalContainer [androidJvm] Content @WorkflowUiExperimentalApi() abstract class ModalContainer < ModalRenderingT : Any >@ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : FrameLayout More info Base class for containers that show HasModals.modals in Dialog windows. ModalViewContainer [androidJvm] Content @WorkflowUiExperimentalApi() open class ModalViewContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : ModalContainer < Any > More info Container that shows HasModals.modals as arbitrary views in a Dialog window.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/#package-comsquareupworkflow1uimodal","text":"","title":"Package com.squareup.workflow1.ui.modal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/#types","text":"Name Summary AlertContainer [androidJvm] Content @WorkflowUiExperimentalApi() class AlertContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int , @ StyleRes () dialogThemeResId : Int ) : ModalContainer More info Renders the AlertScreens of an AlertContainerScreen as AlertDialog s. AlertContainerScreen [jvm] Content @ WorkflowUiExperimentalApi () data class AlertContainerScreen < B : Any >( beneathModals : B , modals : List < AlertScreen >) : HasModals < B , AlertScreen > More info May show a stack of AlertScreen over a beneathModals . AlertScreen [jvm] Content @ WorkflowUiExperimentalApi () data class AlertScreen ( buttons : Map < AlertScreen.Button , String >, message : String , title : String , cancelable : Boolean , onEvent : ( AlertScreen.Event ) -> Unit ) More info Models a typical \u201cYou sure about that?\u201d alert box. HasModals [jvm] Content @ WorkflowUiExperimentalApi () interface HasModals B : Any , out M : Any > More info Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . ModalContainer [androidJvm] Content @WorkflowUiExperimentalApi() abstract class ModalContainer < ModalRenderingT : Any >@ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : FrameLayout More info Base class for containers that show HasModals.modals in Dialog windows. ModalViewContainer [androidJvm] Content @WorkflowUiExperimentalApi() open class ModalViewContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : ModalContainer < Any > More info Container that shows HasModals.modals as arbitrary views in a Dialog window.","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertContainer AlertContainer \u00b6 [androidJvm] @WorkflowUiExperimentalApi() class AlertContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int , @ StyleRes () dialogThemeResId : Int ) : ModalContainer Renders the AlertScreens of an AlertContainerScreen as AlertDialog s. Constructors \u00b6 AlertContainer [androidJvm] @ JvmOverloads () fun AlertContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0, @ StyleRes ()dialogThemeResId: Int = 0) Types \u00b6 Name Summary Companion [androidJvm] Content object Companion : ViewFactory <AlertContainerScreen<*>> Functions \u00b6 Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/#alertcontainer","text":"[androidJvm] @WorkflowUiExperimentalApi() class AlertContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int , @ StyleRes () dialogThemeResId : Int ) : ModalContainer Renders the AlertScreens of an AlertContainerScreen as AlertDialog s.","title":"AlertContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/#constructors","text":"AlertContainer [androidJvm] @ JvmOverloads () fun AlertContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0, @ StyleRes ()dialogThemeResId: Int = 0)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/#types","text":"Name Summary Companion [androidJvm] Content object Companion : ViewFactory <AlertContainerScreen<*>>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/#functions","text":"Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-alert-container/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertContainer / AlertContainer AlertContainer \u00b6 [androidJvm] Content @ JvmOverloads () fun AlertContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0, @ StyleRes ()dialogThemeResId: Int = 0)","title":" alert container"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-alert-container/#alertcontainer","text":"[androidJvm] Content @ JvmOverloads () fun AlertContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0, @ StyleRes ()dialogThemeResId: Int = 0)","title":"AlertContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertContainer / Companion Companion \u00b6 [androidJvm] object Companion : ViewFactory <AlertContainerScreen<*>> Functions \u00b6 Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: AlertContainerScreen<*>, initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View customThemeBinding [androidJvm] Content fun customThemeBinding (@ StyleRes ()dialogThemeResId: Int = 0): ViewFactory <AlertContainerScreen<*>> More info Creates a ViewFactory to show the AlertScreens of an AlertContainerScreen as Android AlertDialogs. Properties \u00b6 Name Summary type [androidJvm] open override val type : KClass <in AlertContainerScreen<*>>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/#companion","text":"[androidJvm] object Companion : ViewFactory <AlertContainerScreen<*>>","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/#functions","text":"Name Summary buildView [androidJvm] Content open override fun buildView (initialRendering: AlertContainerScreen<*>, initialViewEnvironment: ViewEnvironment , contextForNewView: Context , container: ViewGroup ?): View customThemeBinding [androidJvm] Content fun customThemeBinding (@ StyleRes ()dialogThemeResId: Int = 0): ViewFactory <AlertContainerScreen<*>> More info Creates a ViewFactory to show the AlertScreens of an AlertContainerScreen as Android AlertDialogs.","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/#properties","text":"Name Summary type [androidJvm] open override val type : KClass <in AlertContainerScreen<*>>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/custom-theme-binding/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertContainer / Companion / customThemeBinding customThemeBinding \u00b6 [androidJvm] Content fun customThemeBinding (@ StyleRes ()dialogThemeResId: Int = 0): ViewFactory <AlertContainerScreen<*>> More info Creates a ViewFactory to show the AlertScreens of an AlertContainerScreen as Android AlertDialogs. Parameters \u00b6 androidJvm dialogThemeResId the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context\u2019s default alert dialog theme.","title":"Custom theme binding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/custom-theme-binding/#customthemebinding","text":"[androidJvm] Content fun customThemeBinding (@ StyleRes ()dialogThemeResId: Int = 0): ViewFactory <AlertContainerScreen<*>> More info Creates a ViewFactory to show the AlertScreens of an AlertContainerScreen as Android AlertDialogs.","title":"customThemeBinding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/custom-theme-binding/#parameters","text":"androidJvm dialogThemeResId the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context\u2019s default alert dialog theme.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertContainerScreen AlertContainerScreen \u00b6 [jvm] @ WorkflowUiExperimentalApi () data class AlertContainerScreen < B : Any >( beneathModals : B , modals : List < AlertScreen >) : HasModals < B , AlertScreen > May show a stack of AlertScreen over a beneathModals . Parameters \u00b6 jvm B the type of beneathModals Constructors \u00b6 AlertContainerScreen [jvm] fun < B : Any > AlertContainerScreen (baseScreen: B , alert: AlertScreen ) AlertContainerScreen [jvm] fun < B : Any > AlertContainerScreen (baseScreen: B , vararg alerts: AlertScreen ) AlertContainerScreen [jvm] fun < B : Any > AlertContainerScreen (beneathModals: B , modals: List < AlertScreen > = emptyList())the type of beneathModals Properties \u00b6 Name Summary beneathModals [jvm] open override val beneathModals : B modals [jvm] open override val modals : List < AlertScreen >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/#alertcontainerscreen","text":"[jvm] @ WorkflowUiExperimentalApi () data class AlertContainerScreen < B : Any >( beneathModals : B , modals : List < AlertScreen >) : HasModals < B , AlertScreen > May show a stack of AlertScreen over a beneathModals .","title":"AlertContainerScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/#parameters","text":"jvm B the type of beneathModals","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/#constructors","text":"AlertContainerScreen [jvm] fun < B : Any > AlertContainerScreen (baseScreen: B , alert: AlertScreen ) AlertContainerScreen [jvm] fun < B : Any > AlertContainerScreen (baseScreen: B , vararg alerts: AlertScreen ) AlertContainerScreen [jvm] fun < B : Any > AlertContainerScreen (beneathModals: B , modals: List < AlertScreen > = emptyList())the type of beneathModals","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/#properties","text":"Name Summary beneathModals [jvm] open override val beneathModals : B modals [jvm] open override val modals : List < AlertScreen >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/-alert-container-screen/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertContainerScreen / AlertContainerScreen AlertContainerScreen \u00b6 [jvm] Content fun < B : Any > AlertContainerScreen (baseScreen: B , alert: AlertScreen ) fun < B : Any > AlertContainerScreen (baseScreen: B , vararg alerts: AlertScreen ) [jvm] Content fun < B : Any > AlertContainerScreen (beneathModals: B , modals: List < AlertScreen > = emptyList()) More info Parameters \u00b6 jvm B the type of beneathModals","title":" alert container screen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/-alert-container-screen/#alertcontainerscreen","text":"[jvm] Content fun < B : Any > AlertContainerScreen (baseScreen: B , alert: AlertScreen ) fun < B : Any > AlertContainerScreen (baseScreen: B , vararg alerts: AlertScreen ) [jvm] Content fun < B : Any > AlertContainerScreen (beneathModals: B , modals: List < AlertScreen > = emptyList()) More info","title":"AlertContainerScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/-alert-container-screen/#parameters","text":"jvm B the type of beneathModals","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/beneath-modals/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertContainerScreen / beneathModals beneathModals \u00b6 [jvm] Content open override val beneathModals : B","title":"Beneath modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/beneath-modals/#beneathmodals","text":"[jvm] Content open override val beneathModals : B","title":"beneathModals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/modals/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertContainerScreen / modals modals \u00b6 [jvm] Content open override val modals : List < AlertScreen >","title":"Modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/modals/#modals","text":"[jvm] Content open override val modals : List < AlertScreen >","title":"modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen AlertScreen \u00b6 [jvm] @ WorkflowUiExperimentalApi () data class AlertScreen ( buttons : Map < AlertScreen.Button , String >, message : String , title : String , cancelable : Boolean , onEvent : ( AlertScreen.Event ) -> Unit ) Models a typical \u201cYou sure about that?\u201d alert box. Constructors \u00b6 AlertScreen [jvm] fun AlertScreen (buttons: Map < AlertScreen.Button , String > = emptyMap(), message: String = \u201c\u201d, title: String = \u201c\u201d, cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) -> Unit ) Types \u00b6 Name Summary Button [jvm] Content enum Button : Enum < AlertScreen.Button > Event [jvm] Content sealed class Event Functions \u00b6 Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int Properties \u00b6 Name Summary buttons [jvm] val buttons : Map < AlertScreen.Button , String > cancelable [jvm] val cancelable : Boolean = true message [jvm] val message : String onEvent [jvm] val onEvent : ( AlertScreen.Event ) -> Unit title [jvm] val title : String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#alertscreen","text":"[jvm] @ WorkflowUiExperimentalApi () data class AlertScreen ( buttons : Map < AlertScreen.Button , String >, message : String , title : String , cancelable : Boolean , onEvent : ( AlertScreen.Event ) -> Unit ) Models a typical \u201cYou sure about that?\u201d alert box.","title":"AlertScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#constructors","text":"AlertScreen [jvm] fun AlertScreen (buttons: Map < AlertScreen.Button , String > = emptyMap(), message: String = \u201c\u201d, title: String = \u201c\u201d, cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) -> Unit )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#types","text":"Name Summary Button [jvm] Content enum Button : Enum < AlertScreen.Button > Event [jvm] Content sealed class Event","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#properties","text":"Name Summary buttons [jvm] val buttons : Map < AlertScreen.Button , String > cancelable [jvm] val cancelable : Boolean = true message [jvm] val message : String onEvent [jvm] val onEvent : ( AlertScreen.Event ) -> Unit title [jvm] val title : String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-alert-screen/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / AlertScreen AlertScreen \u00b6 [jvm] Content fun AlertScreen (buttons: Map < AlertScreen.Button , String > = emptyMap(), message: String = \u201c\u201d, title: String = \u201c\u201d, cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) -> Unit )","title":" alert screen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-alert-screen/#alertscreen","text":"[jvm] Content fun AlertScreen (buttons: Map < AlertScreen.Button , String > = emptyMap(), message: String = \u201c\u201d, title: String = \u201c\u201d, cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) -> Unit )","title":"AlertScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/buttons/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / buttons buttons \u00b6 [jvm] Content val buttons : Map < AlertScreen.Button , String >","title":"Buttons"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/buttons/#buttons","text":"[jvm] Content val buttons : Map < AlertScreen.Button , String >","title":"buttons"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/cancelable/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / cancelable cancelable \u00b6 [jvm] Content val cancelable : Boolean = true","title":"Cancelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/cancelable/#cancelable","text":"[jvm] Content val cancelable : Boolean = true","title":"cancelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/equals/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / equals equals \u00b6 [jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/equals/#equals","text":"[jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/hash-code/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / hashCode hashCode \u00b6 [jvm] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/hash-code/#hashcode","text":"[jvm] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/message/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / message message \u00b6 [jvm] Content val message : String","title":"Message"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/message/#message","text":"[jvm] Content val message : String","title":"message"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/on-event/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / onEvent onEvent \u00b6 [jvm] Content val onEvent : ( AlertScreen.Event ) -> Unit","title":"On event"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/on-event/#onevent","text":"[jvm] Content val onEvent : ( AlertScreen.Event ) -> Unit","title":"onEvent"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/title/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / title title \u00b6 [jvm] Content val title : String","title":"Title"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/title/#title","text":"[jvm] Content val title : String","title":"title"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button Button \u00b6 [jvm] enum Button : Enum < AlertScreen.Button > Entries \u00b6 NEUTRAL [jvm] NEUTRAL () NEGATIVE [jvm] NEGATIVE () POSITIVE [jvm] POSITIVE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/#button","text":"[jvm] enum Button : Enum < AlertScreen.Button >","title":"Button"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/#entries","text":"NEUTRAL [jvm] NEUTRAL () NEGATIVE [jvm] NEGATIVE () POSITIVE [jvm] POSITIVE ()","title":"Entries"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-g-a-t-i-v-e/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / NEGATIVE NEGATIVE \u00b6 [jvm] NEGATIVE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-g-a-t-i-v-e/#negative","text":"[jvm] NEGATIVE ()","title":"NEGATIVE"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-g-a-t-i-v-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-g-a-t-i-v-e/name/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / NEGATIVE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-g-a-t-i-v-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-g-a-t-i-v-e/ordinal/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / NEGATIVE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-g-a-t-i-v-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-u-t-r-a-l/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / NEUTRAL NEUTRAL \u00b6 [jvm] NEUTRAL () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-u-t-r-a-l/#neutral","text":"[jvm] NEUTRAL ()","title":"NEUTRAL"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-u-t-r-a-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-u-t-r-a-l/name/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / NEUTRAL / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-u-t-r-a-l/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-u-t-r-a-l/ordinal/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / NEUTRAL / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-u-t-r-a-l/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-p-o-s-i-t-i-v-e/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / POSITIVE POSITIVE \u00b6 [jvm] POSITIVE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-p-o-s-i-t-i-v-e/#positive","text":"[jvm] POSITIVE ()","title":"POSITIVE"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-p-o-s-i-t-i-v-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-p-o-s-i-t-i-v-e/name/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / POSITIVE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-p-o-s-i-t-i-v-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-p-o-s-i-t-i-v-e/ordinal/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / POSITIVE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-p-o-s-i-t-i-v-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event Event \u00b6 [jvm] sealed class Event Types \u00b6 Name Summary ButtonClicked [jvm] Content data class ButtonClicked ( button : AlertScreen.Button ) : AlertScreen.Event Canceled [jvm] Content object Canceled : AlertScreen.Event Inheritors \u00b6 Name AlertScreen.Event AlertScreen.Event","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/#event","text":"[jvm] sealed class Event","title":"Event"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/#types","text":"Name Summary ButtonClicked [jvm] Content data class ButtonClicked ( button : AlertScreen.Button ) : AlertScreen.Event Canceled [jvm] Content object Canceled : AlertScreen.Event","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/#inheritors","text":"Name AlertScreen.Event AlertScreen.Event","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event / ButtonClicked ButtonClicked \u00b6 [jvm] data class ButtonClicked ( button : AlertScreen.Button ) : AlertScreen.Event Properties \u00b6 Name Summary button [jvm] val button : AlertScreen.Button","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/#buttonclicked","text":"[jvm] data class ButtonClicked ( button : AlertScreen.Button ) : AlertScreen.Event","title":"ButtonClicked"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/#properties","text":"Name Summary button [jvm] val button : AlertScreen.Button","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/-button-clicked/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event / ButtonClicked / ButtonClicked ButtonClicked \u00b6 [jvm] Content fun ButtonClicked (button: AlertScreen.Button )","title":" button clicked"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/-button-clicked/#buttonclicked","text":"[jvm] Content fun ButtonClicked (button: AlertScreen.Button )","title":"ButtonClicked"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/button/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event / ButtonClicked / button button \u00b6 [jvm] Content val button : AlertScreen.Button","title":"Button"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/button/#button","text":"[jvm] Content val button : AlertScreen.Button","title":"button"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-canceled/","text":"// workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event / Canceled Canceled \u00b6 [jvm] object Canceled : AlertScreen.Event","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-canceled/#canceled","text":"[jvm] object Canceled : AlertScreen.Event","title":"Canceled"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/","text":"// workflow / com.squareup.workflow1.ui.modal / HasModals HasModals \u00b6 [jvm] @ WorkflowUiExperimentalApi () interface HasModals B : Any , out M : Any > Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui:core-android module. Properties \u00b6 Name Summary beneathModals [jvm] abstract val beneathModals : B modals [jvm] abstract val modals : List < M > Inheritors \u00b6 Name AlertContainerScreen","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/#hasmodals","text":"[jvm] @ WorkflowUiExperimentalApi () interface HasModals B : Any , out M : Any > Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui:core-android module.","title":"HasModals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/#properties","text":"Name Summary beneathModals [jvm] abstract val beneathModals : B modals [jvm] abstract val modals : List < M >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/#inheritors","text":"Name AlertContainerScreen","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/beneath-modals/","text":"// workflow / com.squareup.workflow1.ui.modal / HasModals / beneathModals beneathModals \u00b6 [jvm] Content abstract val beneathModals : B","title":"Beneath modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/beneath-modals/#beneathmodals","text":"[jvm] Content abstract val beneathModals : B","title":"beneathModals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/modals/","text":"// workflow / com.squareup.workflow1.ui.modal / HasModals / modals modals \u00b6 [jvm] Content abstract val modals : List < M >","title":"Modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/modals/#modals","text":"[jvm] Content abstract val modals : List < M >","title":"modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/","text":"// workflow / com.squareup.workflow1.ui.modal / ModalContainer ModalContainer \u00b6 [androidJvm] @WorkflowUiExperimentalApi() abstract class ModalContainer < ModalRenderingT : Any >@ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : FrameLayout Base class for containers that show HasModals.modals in Dialog windows. Parameters \u00b6 androidJvm ModalRenderingT the type of the nested renderings to be shown in a dialog window. Constructors \u00b6 ModalContainer [androidJvm] @ JvmOverloads () fun ModalContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)the type of the nested renderings to be shown in a dialog window. Functions \u00b6 Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean Inheritors \u00b6 Name AlertContainer ModalViewContainer","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#modalcontainer","text":"[androidJvm] @WorkflowUiExperimentalApi() abstract class ModalContainer < ModalRenderingT : Any >@ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : FrameLayout Base class for containers that show HasModals.modals in Dialog windows.","title":"ModalContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#parameters","text":"androidJvm ModalRenderingT the type of the nested renderings to be shown in a dialog window.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#constructors","text":"ModalContainer [androidJvm] @ JvmOverloads () fun ModalContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)the type of the nested renderings to be shown in a dialog window.","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#functions","text":"Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#inheritors","text":"Name AlertContainer ModalViewContainer","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-modal-container/","text":"// workflow / com.squareup.workflow1.ui.modal / ModalContainer / ModalContainer ModalContainer \u00b6 [androidJvm] Content @ JvmOverloads () fun ModalContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) More info Parameters \u00b6 androidJvm ModalRenderingT the type of the nested renderings to be shown in a dialog window.","title":" modal container"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-modal-container/#modalcontainer","text":"[androidJvm] Content @ JvmOverloads () fun ModalContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) More info","title":"ModalContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-modal-container/#parameters","text":"androidJvm ModalRenderingT the type of the nested renderings to be shown in a dialog window.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/","text":"// workflow / com.squareup.workflow1.ui.modal / ModalViewContainer ModalViewContainer \u00b6 [androidJvm] @WorkflowUiExperimentalApi() open class ModalViewContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : ModalContainer < Any > Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . Use binding to assign particular rendering types to be shown this way. Constructors \u00b6 ModalViewContainer [androidJvm] @ JvmOverloads () fun ModalViewContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) Types \u00b6 Name Summary Companion [androidJvm] Content object Companion Functions \u00b6 Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildDialogForView [androidJvm] Content open fun buildDialogForView (view: View ): Dialog More info Called from buildDialog. buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/#modalviewcontainer","text":"[androidJvm] @WorkflowUiExperimentalApi() open class ModalViewContainer @ JvmOverloads ()constructor( context : Context , attributeSet : AttributeSet ?, defStyle : Int , defStyleRes : Int ) : ModalContainer < Any > Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . Use binding to assign particular rendering types to be shown this way.","title":"ModalViewContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/#constructors","text":"ModalViewContainer [androidJvm] @ JvmOverloads () fun ModalViewContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/#types","text":"Name Summary Companion [androidJvm] Content object Companion","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/#functions","text":"Name Summary addChildrenForAccessibility [androidJvm] Content open override fun addChildrenForAccessibility (p0: ArrayList < View >) addExtraDataToAccessibilityNodeInfo [androidJvm] Content open fun addExtraDataToAccessibilityNodeInfo (p0: AccessibilityNodeInfo , p1: String , p2: Bundle ?) addFocusables [androidJvm] Content open fun addFocusables (p0: ArrayList < View >, p1: Int ) open override fun addFocusables (p0: ArrayList < View >, p1: Int , p2: Int ) addKeyboardNavigationClusters [androidJvm] Content open override fun addKeyboardNavigationClusters (p0: MutableCollection < View >, p1: Int ) addOnAttachStateChangeListener [androidJvm] Content open fun addOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) addOnLayoutChangeListener [androidJvm] Content open fun addOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) addOnUnhandledKeyEventListener [androidJvm] Content open fun addOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) addStatesFromChildren [androidJvm] Content open fun addStatesFromChildren (): Boolean addTouchables [androidJvm] Content open override fun addTouchables (p0: ArrayList < View >) addView [androidJvm] Content open fun addView (p0: View ) open override fun addView (p0: View , p1: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int ) open fun addView (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) open fun addView (p0: View , p1: Int , p2: Int ) addViewInLayout [androidJvm] Content open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams ): Boolean open fun addViewInLayout (p0: View , p1: Int , p2: ViewGroup.LayoutParams , p3: Boolean ): Boolean animate [androidJvm] Content open fun animate (): ViewPropertyAnimator announceForAccessibility [androidJvm] Content open fun announceForAccessibility (p0: CharSequence ) attachLayoutAnimationParameters [androidJvm] Content open fun attachLayoutAnimationParameters (p0: View , p1: ViewGroup.LayoutParams , p2: Int , p3: Int ) attachViewToParent [androidJvm] Content open fun attachViewToParent (p0: View , p1: Int , p2: ViewGroup.LayoutParams ) autofill [androidJvm] Content open fun autofill (p0: SparseArray < AutofillValue >) open fun autofill (p0: AutofillValue ) awakenScrollBars [androidJvm] Content open fun awakenScrollBars (): Boolean open fun awakenScrollBars (p0: Int ): Boolean open fun awakenScrollBars (p0: Int , p1: Boolean ): Boolean bringChildToFront [androidJvm] Content open override fun bringChildToFront (p0: View ) bringToFront [androidJvm] Content open fun bringToFront () buildDialogForView [androidJvm] Content open fun buildDialogForView (view: View ): Dialog More info Called from buildDialog. buildLayer [androidJvm] Content open fun buildLayer () callOnClick [androidJvm] Content open fun callOnClick (): Boolean canAnimate [androidJvm] Content open fun canAnimate (): Boolean cancelDragAndDrop [androidJvm] Content fun cancelDragAndDrop () cancelLongPress [androidJvm] Content open fun cancelLongPress () cancelPendingInputEvents [androidJvm] Content fun cancelPendingInputEvents () canResolveLayoutDirection [androidJvm] Content open fun canResolveLayoutDirection (): Boolean canResolveTextAlignment [androidJvm] Content open fun canResolveTextAlignment (): Boolean canResolveTextDirection [androidJvm] Content open fun canResolveTextDirection (): Boolean canScrollHorizontally [androidJvm] Content open fun canScrollHorizontally (p0: Int ): Boolean canScrollVertically [androidJvm] Content open fun canScrollVertically (p0: Int ): Boolean checkInputConnectionProxy [androidJvm] Content open fun checkInputConnectionProxy (p0: View ): Boolean checkLayoutParams [androidJvm] Content open override fun checkLayoutParams (p0: ViewGroup.LayoutParams ): Boolean childDrawableStateChanged [androidJvm] Content open override fun childDrawableStateChanged (p0: View ) childHasTransientStateChanged [androidJvm] Content open override fun childHasTransientStateChanged (p0: View , p1: Boolean ) cleanupLayoutState [androidJvm] Content open fun cleanupLayoutState (p0: View ) clearAnimation [androidJvm] Content open fun clearAnimation () clearChildFocus [androidJvm] Content open override fun clearChildFocus (p0: View ) clearDisappearingChildren [androidJvm] Content open fun clearDisappearingChildren () clearFocus [androidJvm] Content open override fun clearFocus () computeHorizontalScrollExtent [androidJvm] Content open fun computeHorizontalScrollExtent (): Int computeHorizontalScrollOffset [androidJvm] Content open fun computeHorizontalScrollOffset (): Int computeHorizontalScrollRange [androidJvm] Content open fun computeHorizontalScrollRange (): Int computeScroll [androidJvm] Content open fun computeScroll () computeSystemWindowInsets [androidJvm] Content open fun computeSystemWindowInsets (p0: WindowInsets , p1: Rect ): WindowInsets computeVerticalScrollExtent [androidJvm] Content open fun computeVerticalScrollExtent (): Int computeVerticalScrollOffset [androidJvm] Content open fun computeVerticalScrollOffset (): Int computeVerticalScrollRange [androidJvm] Content open fun computeVerticalScrollRange (): Int createAccessibilityNodeInfo [androidJvm] Content open fun createAccessibilityNodeInfo (): AccessibilityNodeInfo createContextMenu [androidJvm] Content open fun createContextMenu (p0: ContextMenu ) debug [androidJvm] Content open fun debug (p0: Int ) detachAllViewsFromParent [androidJvm] Content open fun detachAllViewsFromParent () detachViewFromParent [androidJvm] Content open fun detachViewFromParent (p0: View ) open fun detachViewFromParent (p0: Int ) detachViewsFromParent [androidJvm] Content open fun detachViewsFromParent (p0: Int , p1: Int ) dispatchApplyWindowInsets [androidJvm] Content open override fun dispatchApplyWindowInsets (p0: WindowInsets ): WindowInsets dispatchCapturedPointerEvent [androidJvm] Content open override fun dispatchCapturedPointerEvent (p0: MotionEvent ): Boolean dispatchConfigurationChanged [androidJvm] Content open override fun dispatchConfigurationChanged (p0: Configuration ) dispatchDisplayHint [androidJvm] Content open override fun dispatchDisplayHint (p0: Int ) dispatchDragEvent [androidJvm] Content open override fun dispatchDragEvent (p0: DragEvent ): Boolean dispatchDraw [androidJvm] Content open override fun dispatchDraw (p0: Canvas ) dispatchDrawableHotspotChanged [androidJvm] Content open override fun dispatchDrawableHotspotChanged (p0: Float , p1: Float ) dispatchFinishTemporaryDetach [androidJvm] Content open override fun dispatchFinishTemporaryDetach () dispatchFreezeSelfOnly [androidJvm] Content open fun dispatchFreezeSelfOnly (p0: SparseArray < Parcelable >) dispatchGenericFocusedEvent [androidJvm] Content open override fun dispatchGenericFocusedEvent (p0: MotionEvent ): Boolean dispatchGenericMotionEvent [androidJvm] Content open fun dispatchGenericMotionEvent (p0: MotionEvent ): Boolean dispatchGenericPointerEvent [androidJvm] Content open override fun dispatchGenericPointerEvent (p0: MotionEvent ): Boolean dispatchHoverEvent [androidJvm] Content open override fun dispatchHoverEvent (p0: MotionEvent ): Boolean dispatchKeyEvent [androidJvm] Content open override fun dispatchKeyEvent (p0: KeyEvent ): Boolean dispatchKeyEventPreIme [androidJvm] Content open override fun dispatchKeyEventPreIme (p0: KeyEvent ): Boolean dispatchKeyShortcutEvent [androidJvm] Content open override fun dispatchKeyShortcutEvent (p0: KeyEvent ): Boolean dispatchNestedFling [androidJvm] Content open fun dispatchNestedFling (p0: Float , p1: Float , p2: Boolean ): Boolean dispatchNestedPreFling [androidJvm] Content open fun dispatchNestedPreFling (p0: Float , p1: Float ): Boolean dispatchNestedPrePerformAccessibilityAction [androidJvm] Content open fun dispatchNestedPrePerformAccessibilityAction (p0: Int , p1: Bundle ): Boolean dispatchNestedPreScroll [androidJvm] Content open fun dispatchNestedPreScroll (p0: Int , p1: Int , p2: IntArray ?, p3: IntArray ?): Boolean dispatchNestedScroll [androidJvm] Content open fun dispatchNestedScroll (p0: Int , p1: Int , p2: Int , p3: Int , p4: IntArray ?): Boolean dispatchPointerCaptureChanged [androidJvm] Content open override fun dispatchPointerCaptureChanged (p0: Boolean ) dispatchPopulateAccessibilityEvent [androidJvm] Content open fun dispatchPopulateAccessibilityEvent (p0: AccessibilityEvent ): Boolean dispatchProvideAutofillStructure [androidJvm] Content open override fun dispatchProvideAutofillStructure (p0: ViewStructure , p1: Int ) dispatchProvideStructure [androidJvm] Content open override fun dispatchProvideStructure (p0: ViewStructure ) dispatchRestoreInstanceState [androidJvm] Content open override fun dispatchRestoreInstanceState (p0: SparseArray < Parcelable >) dispatchSaveInstanceState [androidJvm] Content open override fun dispatchSaveInstanceState (p0: SparseArray < Parcelable >) dispatchSetActivated [androidJvm] Content open override fun dispatchSetActivated (p0: Boolean ) dispatchSetPressed [androidJvm] Content open override fun dispatchSetPressed (p0: Boolean ) dispatchSetSelected [androidJvm] Content open override fun dispatchSetSelected (p0: Boolean ) dispatchStartTemporaryDetach [androidJvm] Content open override fun dispatchStartTemporaryDetach () dispatchSystemUiVisibilityChanged [androidJvm] Content open override fun dispatchSystemUiVisibilityChanged (p0: Int ) dispatchThawSelfOnly [androidJvm] Content open fun dispatchThawSelfOnly (p0: SparseArray < Parcelable >) dispatchTouchEvent [androidJvm] Content open override fun dispatchTouchEvent (p0: MotionEvent ): Boolean dispatchTrackballEvent [androidJvm] Content open override fun dispatchTrackballEvent (p0: MotionEvent ): Boolean dispatchUnhandledMove [androidJvm] Content open override fun dispatchUnhandledMove (p0: View , p1: Int ): Boolean dispatchVisibilityChanged [androidJvm] Content open override fun dispatchVisibilityChanged (p0: View , p1: Int ) dispatchWindowFocusChanged [androidJvm] Content open override fun dispatchWindowFocusChanged (p0: Boolean ) dispatchWindowSystemUiVisiblityChanged [androidJvm] Content open override fun dispatchWindowSystemUiVisiblityChanged (p0: Int ) dispatchWindowVisibilityChanged [androidJvm] Content open override fun dispatchWindowVisibilityChanged (p0: Int ) draw [androidJvm] Content open fun draw (p0: Canvas ) drawableHotspotChanged [androidJvm] Content open fun drawableHotspotChanged (p0: Float , p1: Float ) drawableStateChanged [androidJvm] Content open override fun drawableStateChanged () drawChild [androidJvm] Content open fun drawChild (p0: Canvas , p1: View , p2: Long ): Boolean endViewTransition [androidJvm] Content open fun endViewTransition (p0: View ) findFocus [androidJvm] Content open override fun findFocus (): View findViewById [androidJvm] Content fun < T : View > findViewById (p0: Int ): T findViewsWithText [androidJvm] Content open override fun findViewsWithText (p0: ArrayList < View >, p1: CharSequence , p2: Int ) findViewWithTag [androidJvm] Content fun < T : View > findViewWithTag (p0: Any ): T focusableViewAvailable [androidJvm] Content open override fun focusableViewAvailable (p0: View ) focusSearch [androidJvm] Content open fun focusSearch (p0: Int ): View open override fun focusSearch (p0: View , p1: Int ): View forceHasOverlappingRendering [androidJvm] Content open fun forceHasOverlappingRendering (p0: Boolean ) forceLayout [androidJvm] Content open fun forceLayout () gatherTransparentRegion [androidJvm] Content open fun gatherTransparentRegion (p0: Region ): Boolean generateDefaultLayoutParams [androidJvm] Content open override fun generateDefaultLayoutParams (): FrameLayout.LayoutParams generateLayoutParams [androidJvm] Content open override fun generateLayoutParams (p0: AttributeSet ): FrameLayout.LayoutParams open override fun generateLayoutParams (p0: ViewGroup.LayoutParams ): ViewGroup.LayoutParams getAccessibilityClassName [androidJvm] Content open override fun getAccessibilityClassName (): CharSequence getAccessibilityDelegate [androidJvm] Content open fun getAccessibilityDelegate (): View.AccessibilityDelegate getAccessibilityLiveRegion [androidJvm] Content open fun getAccessibilityLiveRegion (): Int getAccessibilityNodeProvider [androidJvm] Content open fun getAccessibilityNodeProvider (): AccessibilityNodeProvider getAccessibilityPaneTitle [androidJvm] Content open fun getAccessibilityPaneTitle (): CharSequence ? getAccessibilityTraversalAfter [androidJvm] Content open fun getAccessibilityTraversalAfter (): Int getAccessibilityTraversalBefore [androidJvm] Content open fun getAccessibilityTraversalBefore (): Int getAlpha [androidJvm] Content open fun getAlpha (): Float getAnimation [androidJvm] Content open fun getAnimation (): Animation getAnimationMatrix [androidJvm] Content open fun getAnimationMatrix (): Matrix ? getApplicationWindowToken [androidJvm] Content open fun getApplicationWindowToken (): IBinder getAttributeResolutionStack [androidJvm] Content open fun getAttributeResolutionStack (p0: Int ): IntArray getAttributeSourceResourceMap [androidJvm] Content open fun getAttributeSourceResourceMap (): MutableMap < Int , Int > getAutofillHints [androidJvm] Content open fun getAutofillHints (): Array < String >? getAutofillId [androidJvm] Content fun getAutofillId (): AutofillId getAutofillType [androidJvm] Content open fun getAutofillType (): Int getAutofillValue [androidJvm] Content open fun getAutofillValue (): AutofillValue ? getBackground [androidJvm] Content open fun getBackground (): Drawable getBackgroundTintBlendMode [androidJvm] Content open fun getBackgroundTintBlendMode (): BlendMode ? getBackgroundTintList [androidJvm] Content open fun getBackgroundTintList (): ColorStateList ? getBackgroundTintMode [androidJvm] Content open fun getBackgroundTintMode (): PorterDuff.Mode ? getBaseline [androidJvm] Content open fun getBaseline (): Int getBottom [androidJvm] Content fun getBottom (): Int getBottomFadingEdgeStrength [androidJvm] Content open fun getBottomFadingEdgeStrength (): Float getBottomPaddingOffset [androidJvm] Content open fun getBottomPaddingOffset (): Int getCameraDistance [androidJvm] Content open fun getCameraDistance (): Float getChildAt [androidJvm] Content open fun getChildAt (p0: Int ): View getChildCount [androidJvm] Content open fun getChildCount (): Int getChildDrawingOrder [androidJvm] Content fun getChildDrawingOrder (p0: Int ): Int open fun getChildDrawingOrder (p0: Int , p1: Int ): Int getChildStaticTransformation [androidJvm] Content open fun getChildStaticTransformation (p0: View , p1: Transformation ): Boolean getChildVisibleRect [androidJvm] Content open override fun getChildVisibleRect (p0: View , p1: Rect , p2: Point ): Boolean getClipBounds [androidJvm] Content open fun getClipBounds (): Rect open fun getClipBounds (p0: Rect ): Boolean getClipChildren [androidJvm] Content open fun getClipChildren (): Boolean getClipToOutline [androidJvm] Content fun getClipToOutline (): Boolean getClipToPadding [androidJvm] Content open fun getClipToPadding (): Boolean getContentCaptureSession [androidJvm] Content fun getContentCaptureSession (): ContentCaptureSession ? getContentDescription [androidJvm] Content open fun getContentDescription (): CharSequence getContext [androidJvm] Content fun getContext (): Context getContextMenuInfo [androidJvm] Content open fun getContextMenuInfo (): ContextMenu.ContextMenuInfo getDefaultFocusHighlightEnabled [androidJvm] Content fun getDefaultFocusHighlightEnabled (): Boolean getDescendantFocusability [androidJvm] Content open fun getDescendantFocusability (): Int getDisplay [androidJvm] Content open fun getDisplay (): Display getDrawableState [androidJvm] Content fun getDrawableState (): IntArray getDrawingRect [androidJvm] Content open fun getDrawingRect (p0: Rect ) getDrawingTime [androidJvm] Content open fun getDrawingTime (): Long getElevation [androidJvm] Content open fun getElevation (): Float getExplicitStyle [androidJvm] Content open fun getExplicitStyle (): Int getFilterTouchesWhenObscured [androidJvm] Content open fun getFilterTouchesWhenObscured (): Boolean getFitsSystemWindows [androidJvm] Content open fun getFitsSystemWindows (): Boolean getFocusable [androidJvm] Content open fun getFocusable (): Int getFocusables [androidJvm] Content open fun getFocusables (p0: Int ): ArrayList < View > getFocusedChild [androidJvm] Content open fun getFocusedChild (): View getFocusedRect [androidJvm] Content open fun getFocusedRect (p0: Rect ) getForeground [androidJvm] Content open fun getForeground (): Drawable getForegroundGravity [androidJvm] Content open fun getForegroundGravity (): Int getForegroundTintBlendMode [androidJvm] Content open fun getForegroundTintBlendMode (): BlendMode ? getForegroundTintList [androidJvm] Content open fun getForegroundTintList (): ColorStateList ? getForegroundTintMode [androidJvm] Content open fun getForegroundTintMode (): PorterDuff.Mode ? getGlobalVisibleRect [androidJvm] Content fun getGlobalVisibleRect (p0: Rect ): Boolean open fun getGlobalVisibleRect (p0: Rect , p1: Point ): Boolean getHandler [androidJvm] Content open fun getHandler (): Handler getHasOverlappingRendering [androidJvm] Content fun getHasOverlappingRendering (): Boolean getHeight [androidJvm] Content fun getHeight (): Int getHitRect [androidJvm] Content open fun getHitRect (p0: Rect ) getHorizontalFadingEdgeLength [androidJvm] Content open fun getHorizontalFadingEdgeLength (): Int getHorizontalScrollbarHeight [androidJvm] Content open fun getHorizontalScrollbarHeight (): Int getHorizontalScrollbarThumbDrawable [androidJvm] Content open fun getHorizontalScrollbarThumbDrawable (): Drawable ? getHorizontalScrollbarTrackDrawable [androidJvm] Content open fun getHorizontalScrollbarTrackDrawable (): Drawable ? getId [androidJvm] Content open fun getId (): Int getImportantForAccessibility [androidJvm] Content open fun getImportantForAccessibility (): Int getImportantForAutofill [androidJvm] Content open fun getImportantForAutofill (): Int getKeepScreenOn [androidJvm] Content open fun getKeepScreenOn (): Boolean getKeyDispatcherState [androidJvm] Content open fun getKeyDispatcherState (): KeyEvent.DispatcherState getLabelFor [androidJvm] Content open fun getLabelFor (): Int getLayerType [androidJvm] Content open fun getLayerType (): Int getLayoutAnimation [androidJvm] Content open fun getLayoutAnimation (): LayoutAnimationController getLayoutAnimationListener [androidJvm] Content open fun getLayoutAnimationListener (): Animation.AnimationListener getLayoutDirection [androidJvm] Content open fun getLayoutDirection (): Int getLayoutMode [androidJvm] Content open fun getLayoutMode (): Int getLayoutParams [androidJvm] Content open fun getLayoutParams (): ViewGroup.LayoutParams getLayoutTransition [androidJvm] Content open fun getLayoutTransition (): LayoutTransition getLeft [androidJvm] Content fun getLeft (): Int getLeftFadingEdgeStrength [androidJvm] Content open fun getLeftFadingEdgeStrength (): Float getLeftPaddingOffset [androidJvm] Content open fun getLeftPaddingOffset (): Int getLocalVisibleRect [androidJvm] Content fun getLocalVisibleRect (p0: Rect ): Boolean getLocationInSurface [androidJvm] Content open fun getLocationInSurface (p0: IntArray ) getLocationInWindow [androidJvm] Content open fun getLocationInWindow (p0: IntArray ) getLocationOnScreen [androidJvm] Content open fun getLocationOnScreen (p0: IntArray ) getMatrix [androidJvm] Content open fun getMatrix (): Matrix getMeasureAllChildren [androidJvm] Content open fun getMeasureAllChildren (): Boolean getMeasuredHeight [androidJvm] Content fun getMeasuredHeight (): Int getMeasuredHeightAndState [androidJvm] Content fun getMeasuredHeightAndState (): Int getMeasuredState [androidJvm] Content fun getMeasuredState (): Int getMeasuredWidth [androidJvm] Content fun getMeasuredWidth (): Int getMeasuredWidthAndState [androidJvm] Content fun getMeasuredWidthAndState (): Int getMinimumHeight [androidJvm] Content open fun getMinimumHeight (): Int getMinimumWidth [androidJvm] Content open fun getMinimumWidth (): Int getNestedScrollAxes [androidJvm] Content open fun getNestedScrollAxes (): Int getNextClusterForwardId [androidJvm] Content open fun getNextClusterForwardId (): Int getNextFocusDownId [androidJvm] Content open fun getNextFocusDownId (): Int getNextFocusForwardId [androidJvm] Content open fun getNextFocusForwardId (): Int getNextFocusLeftId [androidJvm] Content open fun getNextFocusLeftId (): Int getNextFocusRightId [androidJvm] Content open fun getNextFocusRightId (): Int getNextFocusUpId [androidJvm] Content open fun getNextFocusUpId (): Int getOnFocusChangeListener [androidJvm] Content open fun getOnFocusChangeListener (): View.OnFocusChangeListener getOutlineAmbientShadowColor [androidJvm] Content open fun getOutlineAmbientShadowColor (): Int getOutlineProvider [androidJvm] Content open fun getOutlineProvider (): ViewOutlineProvider getOutlineSpotShadowColor [androidJvm] Content open fun getOutlineSpotShadowColor (): Int getOverlay [androidJvm] Content open override fun getOverlay (): ViewGroupOverlay getOverScrollMode [androidJvm] Content open fun getOverScrollMode (): Int getPaddingBottom [androidJvm] Content open fun getPaddingBottom (): Int getPaddingEnd [androidJvm] Content open fun getPaddingEnd (): Int getPaddingLeft [androidJvm] Content open fun getPaddingLeft (): Int getPaddingRight [androidJvm] Content open fun getPaddingRight (): Int getPaddingStart [androidJvm] Content open fun getPaddingStart (): Int getPaddingTop [androidJvm] Content open fun getPaddingTop (): Int getParent [androidJvm] Content fun getParent (): ViewParent getParentForAccessibility [androidJvm] Content open fun getParentForAccessibility (): ViewParent getPivotX [androidJvm] Content open fun getPivotX (): Float getPivotY [androidJvm] Content open fun getPivotY (): Float getPointerIcon [androidJvm] Content open fun getPointerIcon (): PointerIcon getResources [androidJvm] Content open fun getResources (): Resources getRevealOnFocusHint [androidJvm] Content fun getRevealOnFocusHint (): Boolean getRight [androidJvm] Content fun getRight (): Int getRightFadingEdgeStrength [androidJvm] Content open fun getRightFadingEdgeStrength (): Float getRightPaddingOffset [androidJvm] Content open fun getRightPaddingOffset (): Int getRootView [androidJvm] Content open fun getRootView (): View getRootWindowInsets [androidJvm] Content open fun getRootWindowInsets (): WindowInsets getRotation [androidJvm] Content open fun getRotation (): Float getRotationX [androidJvm] Content open fun getRotationX (): Float getRotationY [androidJvm] Content open fun getRotationY (): Float getScaleX [androidJvm] Content open fun getScaleX (): Float getScaleY [androidJvm] Content open fun getScaleY (): Float getScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun getScrollBarDefaultDelayBeforeFade (): Int getScrollBarFadeDuration [androidJvm] Content open fun getScrollBarFadeDuration (): Int getScrollBarSize [androidJvm] Content open fun getScrollBarSize (): Int getScrollBarStyle [androidJvm] Content open fun getScrollBarStyle (): Int getScrollIndicators [androidJvm] Content open fun getScrollIndicators (): Int getScrollX [androidJvm] Content fun getScrollX (): Int getScrollY [androidJvm] Content fun getScrollY (): Int getSolidColor [androidJvm] Content open fun getSolidColor (): Int getSourceLayoutResId [androidJvm] Content open fun getSourceLayoutResId (): Int getStateListAnimator [androidJvm] Content open fun getStateListAnimator (): StateListAnimator getSuggestedMinimumHeight [androidJvm] Content open fun getSuggestedMinimumHeight (): Int getSuggestedMinimumWidth [androidJvm] Content open fun getSuggestedMinimumWidth (): Int getSystemGestureExclusionRects [androidJvm] Content open fun getSystemGestureExclusionRects (): MutableList < Rect > getSystemUiVisibility [androidJvm] Content open fun getSystemUiVisibility (): Int getTag [androidJvm] Content open fun getTag (): Any open fun getTag (p0: Int ): Any getTextAlignment [androidJvm] Content open fun getTextAlignment (): Int getTextDirection [androidJvm] Content open fun getTextDirection (): Int getTooltipText [androidJvm] Content open fun getTooltipText (): CharSequence ? getTop [androidJvm] Content fun getTop (): Int getTopFadingEdgeStrength [androidJvm] Content open fun getTopFadingEdgeStrength (): Float getTopPaddingOffset [androidJvm] Content open fun getTopPaddingOffset (): Int getTouchables [androidJvm] Content open fun getTouchables (): ArrayList < View > getTouchDelegate [androidJvm] Content open fun getTouchDelegate (): TouchDelegate getTouchscreenBlocksFocus [androidJvm] Content open fun getTouchscreenBlocksFocus (): Boolean getTransitionAlpha [androidJvm] Content open fun getTransitionAlpha (): Float getTransitionName [androidJvm] Content open fun getTransitionName (): String getTranslationX [androidJvm] Content open fun getTranslationX (): Float getTranslationY [androidJvm] Content open fun getTranslationY (): Float getTranslationZ [androidJvm] Content open fun getTranslationZ (): Float getUniqueDrawingId [androidJvm] Content open fun getUniqueDrawingId (): Long getVerticalFadingEdgeLength [androidJvm] Content open fun getVerticalFadingEdgeLength (): Int getVerticalScrollbarPosition [androidJvm] Content open fun getVerticalScrollbarPosition (): Int getVerticalScrollbarThumbDrawable [androidJvm] Content open fun getVerticalScrollbarThumbDrawable (): Drawable ? getVerticalScrollbarTrackDrawable [androidJvm] Content open fun getVerticalScrollbarTrackDrawable (): Drawable ? getVerticalScrollbarWidth [androidJvm] Content open fun getVerticalScrollbarWidth (): Int getViewTreeObserver [androidJvm] Content open fun getViewTreeObserver (): ViewTreeObserver getVisibility [androidJvm] Content open fun getVisibility (): Int getWidth [androidJvm] Content fun getWidth (): Int getWindowAttachCount [androidJvm] Content open fun getWindowAttachCount (): Int getWindowId [androidJvm] Content open fun getWindowId (): WindowId getWindowSystemUiVisibility [androidJvm] Content open fun getWindowSystemUiVisibility (): Int getWindowToken [androidJvm] Content open fun getWindowToken (): IBinder getWindowVisibility [androidJvm] Content open fun getWindowVisibility (): Int getWindowVisibleDisplayFrame [androidJvm] Content open fun getWindowVisibleDisplayFrame (p0: Rect ) getX [androidJvm] Content open fun getX (): Float getY [androidJvm] Content open fun getY (): Float getZ [androidJvm] Content open fun getZ (): Float hasExplicitFocusable [androidJvm] Content open fun hasExplicitFocusable (): Boolean hasFocus [androidJvm] Content open override fun hasFocus (): Boolean hasFocusable [androidJvm] Content open fun hasFocusable (): Boolean hasNestedScrollingParent [androidJvm] Content open fun hasNestedScrollingParent (): Boolean hasOnClickListeners [androidJvm] Content open fun hasOnClickListeners (): Boolean hasOverlappingRendering [androidJvm] Content open fun hasOverlappingRendering (): Boolean hasPointerCapture [androidJvm] Content open fun hasPointerCapture (): Boolean hasTransientState [androidJvm] Content open override fun hasTransientState (): Boolean hasWindowFocus [androidJvm] Content open fun hasWindowFocus (): Boolean indexOfChild [androidJvm] Content open fun indexOfChild (p0: View ): Int invalidate [androidJvm] Content open fun invalidate () invalidateDrawable [androidJvm] Content open override fun invalidateDrawable (p0: Drawable ) invalidateOutline [androidJvm] Content open fun invalidateOutline () isAccessibilityFocused [androidJvm] Content open fun isAccessibilityFocused (): Boolean isAccessibilityHeading [androidJvm] Content open fun isAccessibilityHeading (): Boolean isActivated [androidJvm] Content open fun isActivated (): Boolean isAttachedToWindow [androidJvm] Content open fun isAttachedToWindow (): Boolean isChildrenDrawingOrderEnabled [androidJvm] Content open fun isChildrenDrawingOrderEnabled (): Boolean isClickable [androidJvm] Content open fun isClickable (): Boolean isContextClickable [androidJvm] Content open fun isContextClickable (): Boolean isDirty [androidJvm] Content open fun isDirty (): Boolean isDuplicateParentStateEnabled [androidJvm] Content open fun isDuplicateParentStateEnabled (): Boolean isEnabled [androidJvm] Content open fun isEnabled (): Boolean isFocusable [androidJvm] Content fun isFocusable (): Boolean isFocusableInTouchMode [androidJvm] Content fun isFocusableInTouchMode (): Boolean isFocused [androidJvm] Content open fun isFocused (): Boolean isFocusedByDefault [androidJvm] Content fun isFocusedByDefault (): Boolean isForceDarkAllowed [androidJvm] Content open fun isForceDarkAllowed (): Boolean isHapticFeedbackEnabled [androidJvm] Content open fun isHapticFeedbackEnabled (): Boolean isHardwareAccelerated [androidJvm] Content open fun isHardwareAccelerated (): Boolean isHorizontalFadingEdgeEnabled [androidJvm] Content open fun isHorizontalFadingEdgeEnabled (): Boolean isHorizontalScrollBarEnabled [androidJvm] Content open fun isHorizontalScrollBarEnabled (): Boolean isHovered [androidJvm] Content open fun isHovered (): Boolean isImportantForAccessibility [androidJvm] Content open fun isImportantForAccessibility (): Boolean isImportantForAutofill [androidJvm] Content fun isImportantForAutofill (): Boolean isInEditMode [androidJvm] Content open fun isInEditMode (): Boolean isInLayout [androidJvm] Content open fun isInLayout (): Boolean isInTouchMode [androidJvm] Content open fun isInTouchMode (): Boolean isKeyboardNavigationCluster [androidJvm] Content fun isKeyboardNavigationCluster (): Boolean isLaidOut [androidJvm] Content open fun isLaidOut (): Boolean isLayoutDirectionResolved [androidJvm] Content open fun isLayoutDirectionResolved (): Boolean isLayoutRequested [androidJvm] Content open fun isLayoutRequested (): Boolean isLayoutSuppressed [androidJvm] Content open fun isLayoutSuppressed (): Boolean isLongClickable [androidJvm] Content open fun isLongClickable (): Boolean isMotionEventSplittingEnabled [androidJvm] Content open fun isMotionEventSplittingEnabled (): Boolean isNestedScrollingEnabled [androidJvm] Content open fun isNestedScrollingEnabled (): Boolean isOpaque [androidJvm] Content open fun isOpaque (): Boolean isPaddingOffsetRequired [androidJvm] Content open fun isPaddingOffsetRequired (): Boolean isPaddingRelative [androidJvm] Content open fun isPaddingRelative (): Boolean isPivotSet [androidJvm] Content open fun isPivotSet (): Boolean isPressed [androidJvm] Content open fun isPressed (): Boolean isSaveEnabled [androidJvm] Content open fun isSaveEnabled (): Boolean isSaveFromParentEnabled [androidJvm] Content open fun isSaveFromParentEnabled (): Boolean isScreenReaderFocusable [androidJvm] Content open fun isScreenReaderFocusable (): Boolean isScrollbarFadingEnabled [androidJvm] Content open fun isScrollbarFadingEnabled (): Boolean isScrollContainer [androidJvm] Content open fun isScrollContainer (): Boolean isSelected [androidJvm] Content open fun isSelected (): Boolean isShown [androidJvm] Content open fun isShown (): Boolean isSoundEffectsEnabled [androidJvm] Content open fun isSoundEffectsEnabled (): Boolean isTemporarilyDetached [androidJvm] Content fun isTemporarilyDetached (): Boolean isTextAlignmentResolved [androidJvm] Content open fun isTextAlignmentResolved (): Boolean isTextDirectionResolved [androidJvm] Content open fun isTextDirectionResolved (): Boolean isTransitionGroup [androidJvm] Content open fun isTransitionGroup (): Boolean isVerticalFadingEdgeEnabled [androidJvm] Content open fun isVerticalFadingEdgeEnabled (): Boolean isVerticalScrollBarEnabled [androidJvm] Content open fun isVerticalScrollBarEnabled (): Boolean isVisibleToUserForAutofill [androidJvm] Content open fun isVisibleToUserForAutofill (p0: Int ): Boolean jumpDrawablesToCurrentState [androidJvm] Content open override fun jumpDrawablesToCurrentState () keyboardNavigationClusterSearch [androidJvm] Content open fun keyboardNavigationClusterSearch (p0: View , p1: Int ): View layout [androidJvm] Content override fun layout (p0: Int , p1: Int , p2: Int , p3: Int ) measure [androidJvm] Content fun measure (p0: Int , p1: Int ) measureChild [androidJvm] Content open fun measureChild (p0: View , p1: Int , p2: Int ) measureChildren [androidJvm] Content open fun measureChildren (p0: Int , p1: Int ) measureChildWithMargins [androidJvm] Content open fun measureChildWithMargins (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) notifySubtreeAccessibilityStateChanged [androidJvm] Content open override fun notifySubtreeAccessibilityStateChanged (p0: View , p1: View , p2: Int ) offsetDescendantRectToMyCoords [androidJvm] Content fun offsetDescendantRectToMyCoords (p0: View , p1: Rect ) offsetLeftAndRight [androidJvm] Content open fun offsetLeftAndRight (p0: Int ) offsetRectIntoDescendantCoords [androidJvm] Content fun offsetRectIntoDescendantCoords (p0: View , p1: Rect ) offsetTopAndBottom [androidJvm] Content open fun offsetTopAndBottom (p0: Int ) onAnimationEnd [androidJvm] Content open fun onAnimationEnd () onAnimationStart [androidJvm] Content open fun onAnimationStart () onApplyWindowInsets [androidJvm] Content open fun onApplyWindowInsets (p0: WindowInsets ): WindowInsets onAttachedToWindow [androidJvm] Content open override fun onAttachedToWindow () onCancelPendingInputEvents [androidJvm] Content open fun onCancelPendingInputEvents () onCapturedPointerEvent [androidJvm] Content open fun onCapturedPointerEvent (p0: MotionEvent ): Boolean onCheckIsTextEditor [androidJvm] Content open fun onCheckIsTextEditor (): Boolean onConfigurationChanged [androidJvm] Content open fun onConfigurationChanged (p0: Configuration ) onCreateContextMenu [androidJvm] Content open fun onCreateContextMenu (p0: ContextMenu ) onCreateDrawableState [androidJvm] Content open override fun onCreateDrawableState (p0: Int ): IntArray onCreateInputConnection [androidJvm] Content open fun onCreateInputConnection (p0: EditorInfo ): InputConnection onDescendantInvalidated [androidJvm] Content open override fun onDescendantInvalidated (p0: View , p1: View ) onDetachedFromWindow [androidJvm] Content open override fun onDetachedFromWindow () onDisplayHint [androidJvm] Content open fun onDisplayHint (p0: Int ) onDragEvent [androidJvm] Content open fun onDragEvent (p0: DragEvent ): Boolean onDraw [androidJvm] Content open fun onDraw (p0: Canvas ) onDrawForeground [androidJvm] Content open fun onDrawForeground (p0: Canvas ) onDrawScrollBars [androidJvm] Content fun onDrawScrollBars (p0: Canvas ) onFilterTouchEventForSecurity [androidJvm] Content open fun onFilterTouchEventForSecurity (p0: MotionEvent ): Boolean onFinishInflate [androidJvm] Content open fun onFinishInflate () onFinishTemporaryDetach [androidJvm] Content open fun onFinishTemporaryDetach () onFocusChanged [androidJvm] Content open fun onFocusChanged (p0: Boolean , p1: Int , p2: Rect ?) onGenericMotionEvent [androidJvm] Content open fun onGenericMotionEvent (p0: MotionEvent ): Boolean onHoverChanged [androidJvm] Content open fun onHoverChanged (p0: Boolean ) onHoverEvent [androidJvm] Content open fun onHoverEvent (p0: MotionEvent ): Boolean onInitializeAccessibilityEvent [androidJvm] Content open fun onInitializeAccessibilityEvent (p0: AccessibilityEvent ) onInitializeAccessibilityNodeInfo [androidJvm] Content open fun onInitializeAccessibilityNodeInfo (p0: AccessibilityNodeInfo ) onInterceptHoverEvent [androidJvm] Content open fun onInterceptHoverEvent (p0: MotionEvent ): Boolean onInterceptTouchEvent [androidJvm] Content open fun onInterceptTouchEvent (p0: MotionEvent ): Boolean onKeyDown [androidJvm] Content open override fun onKeyDown (p0: Int , p1: KeyEvent ): Boolean onKeyLongPress [androidJvm] Content open override fun onKeyLongPress (p0: Int , p1: KeyEvent ): Boolean onKeyMultiple [androidJvm] Content open override fun onKeyMultiple (p0: Int , p1: Int , p2: KeyEvent ): Boolean onKeyPreIme [androidJvm] Content open fun onKeyPreIme (p0: Int , p1: KeyEvent ): Boolean onKeyShortcut [androidJvm] Content open fun onKeyShortcut (p0: Int , p1: KeyEvent ): Boolean onKeyUp [androidJvm] Content open override fun onKeyUp (p0: Int , p1: KeyEvent ): Boolean onLayout [androidJvm] Content open override fun onLayout (p0: Boolean , p1: Int , p2: Int , p3: Int , p4: Int ) onMeasure [androidJvm] Content open override fun onMeasure (p0: Int , p1: Int ) onNestedFling [androidJvm] Content open override fun onNestedFling (p0: View , p1: Float , p2: Float , p3: Boolean ): Boolean onNestedPreFling [androidJvm] Content open override fun onNestedPreFling (p0: View , p1: Float , p2: Float ): Boolean onNestedPrePerformAccessibilityAction [androidJvm] Content open override fun onNestedPrePerformAccessibilityAction (p0: View , p1: Int , p2: Bundle ): Boolean onNestedPreScroll [androidJvm] Content open override fun onNestedPreScroll (p0: View , p1: Int , p2: Int , p3: IntArray ) onNestedScroll [androidJvm] Content open override fun onNestedScroll (p0: View , p1: Int , p2: Int , p3: Int , p4: Int ) onNestedScrollAccepted [androidJvm] Content open override fun onNestedScrollAccepted (p0: View , p1: View , p2: Int ) onOverScrolled [androidJvm] Content open fun onOverScrolled (p0: Int , p1: Int , p2: Boolean , p3: Boolean ) onPointerCaptureChange [androidJvm] Content open fun onPointerCaptureChange (p0: Boolean ) onPopulateAccessibilityEvent [androidJvm] Content open fun onPopulateAccessibilityEvent (p0: AccessibilityEvent ) onProvideAutofillStructure [androidJvm] Content open fun onProvideAutofillStructure (p0: ViewStructure , p1: Int ) onProvideAutofillVirtualStructure [androidJvm] Content open fun onProvideAutofillVirtualStructure (p0: ViewStructure , p1: Int ) onProvideStructure [androidJvm] Content open fun onProvideStructure (p0: ViewStructure ) onProvideVirtualStructure [androidJvm] Content open fun onProvideVirtualStructure (p0: ViewStructure ) onRequestFocusInDescendants [androidJvm] Content open fun onRequestFocusInDescendants (p0: Int , p1: Rect ): Boolean onRequestSendAccessibilityEvent [androidJvm] Content open fun onRequestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean onResolvePointerIcon [androidJvm] Content open override fun onResolvePointerIcon (p0: MotionEvent , p1: Int ): PointerIcon onRtlPropertiesChanged [androidJvm] Content open fun onRtlPropertiesChanged (p0: Int ) onScreenStateChanged [androidJvm] Content open fun onScreenStateChanged (p0: Int ) onScrollChanged [androidJvm] Content open fun onScrollChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onSetAlpha [androidJvm] Content open fun onSetAlpha (p0: Int ): Boolean onSizeChanged [androidJvm] Content open fun onSizeChanged (p0: Int , p1: Int , p2: Int , p3: Int ) onStartNestedScroll [androidJvm] Content open override fun onStartNestedScroll (p0: View , p1: View , p2: Int ): Boolean onStartTemporaryDetach [androidJvm] Content open fun onStartTemporaryDetach () onStopNestedScroll [androidJvm] Content open override fun onStopNestedScroll (p0: View ) onTouchEvent [androidJvm] Content open fun onTouchEvent (p0: MotionEvent ): Boolean onTrackballEvent [androidJvm] Content open fun onTrackballEvent (p0: MotionEvent ): Boolean onViewAdded [androidJvm] Content open fun onViewAdded (p0: View ) onViewRemoved [androidJvm] Content open fun onViewRemoved (p0: View ) onVisibilityAggregated [androidJvm] Content open fun onVisibilityAggregated (p0: Boolean ) onVisibilityChanged [androidJvm] Content open fun onVisibilityChanged (p0: View , p1: Int ) onWindowFocusChanged [androidJvm] Content open fun onWindowFocusChanged (p0: Boolean ) onWindowSystemUiVisibilityChanged [androidJvm] Content open fun onWindowSystemUiVisibilityChanged (p0: Int ) onWindowVisibilityChanged [androidJvm] Content open fun onWindowVisibilityChanged (p0: Int ) overScrollBy [androidJvm] Content open fun overScrollBy (p0: Int , p1: Int , p2: Int , p3: Int , p4: Int , p5: Int , p6: Int , p7: Int , p8: Boolean ): Boolean performAccessibilityAction [androidJvm] Content open fun performAccessibilityAction (p0: Int , p1: Bundle ): Boolean performClick [androidJvm] Content open fun performClick (): Boolean performContextClick [androidJvm] Content open fun performContextClick (): Boolean open fun performContextClick (p0: Float , p1: Float ): Boolean performHapticFeedback [androidJvm] Content open fun performHapticFeedback (p0: Int ): Boolean open fun performHapticFeedback (p0: Int , p1: Int ): Boolean performLongClick [androidJvm] Content open fun performLongClick (): Boolean open fun performLongClick (p0: Float , p1: Float ): Boolean playSoundEffect [androidJvm] Content open fun playSoundEffect (p0: Int ) post [androidJvm] Content open fun post (p0: Runnable ): Boolean postDelayed [androidJvm] Content open fun postDelayed (p0: Runnable , p1: Long ): Boolean postInvalidate [androidJvm] Content open fun postInvalidate () open fun postInvalidate (p0: Int , p1: Int , p2: Int , p3: Int ) postInvalidateDelayed [androidJvm] Content open fun postInvalidateDelayed (p0: Long ) open fun postInvalidateDelayed (p0: Long , p1: Int , p2: Int , p3: Int , p4: Int ) postInvalidateOnAnimation [androidJvm] Content open fun postInvalidateOnAnimation () open fun postInvalidateOnAnimation (p0: Int , p1: Int , p2: Int , p3: Int ) postOnAnimation [androidJvm] Content open fun postOnAnimation (p0: Runnable ) postOnAnimationDelayed [androidJvm] Content open fun postOnAnimationDelayed (p0: Runnable , p1: Long ) recomputeViewAttributes [androidJvm] Content open override fun recomputeViewAttributes (p0: View ) refreshDrawableState [androidJvm] Content open fun refreshDrawableState () releasePointerCapture [androidJvm] Content open fun releasePointerCapture () removeAllViews [androidJvm] Content open fun removeAllViews () removeAllViewsInLayout [androidJvm] Content open fun removeAllViewsInLayout () removeCallbacks [androidJvm] Content open fun removeCallbacks (p0: Runnable ): Boolean removeDetachedView [androidJvm] Content open fun removeDetachedView (p0: View , p1: Boolean ) removeOnAttachStateChangeListener [androidJvm] Content open fun removeOnAttachStateChangeListener (p0: View.OnAttachStateChangeListener ) removeOnLayoutChangeListener [androidJvm] Content open fun removeOnLayoutChangeListener (p0: View.OnLayoutChangeListener ) removeOnUnhandledKeyEventListener [androidJvm] Content open fun removeOnUnhandledKeyEventListener (p0: View.OnUnhandledKeyEventListener ) removeView [androidJvm] Content open override fun removeView (p0: View ) removeViewAt [androidJvm] Content open fun removeViewAt (p0: Int ) removeViewInLayout [androidJvm] Content open fun removeViewInLayout (p0: View ) removeViews [androidJvm] Content open fun removeViews (p0: Int , p1: Int ) removeViewsInLayout [androidJvm] Content open fun removeViewsInLayout (p0: Int , p1: Int ) requestApplyInsets [androidJvm] Content open fun requestApplyInsets () requestChildFocus [androidJvm] Content open override fun requestChildFocus (p0: View , p1: View ) requestChildRectangleOnScreen [androidJvm] Content open override fun requestChildRectangleOnScreen (p0: View , p1: Rect , p2: Boolean ): Boolean requestDisallowInterceptTouchEvent [androidJvm] Content open override fun requestDisallowInterceptTouchEvent (p0: Boolean ) requestFocus [androidJvm] Content fun requestFocus (): Boolean fun requestFocus (p0: Int ): Boolean open override fun requestFocus (p0: Int , p1: Rect ): Boolean requestFocusFromTouch [androidJvm] Content fun requestFocusFromTouch (): Boolean requestLayout [androidJvm] Content open fun requestLayout () requestPointerCapture [androidJvm] Content open fun requestPointerCapture () requestRectangleOnScreen [androidJvm] Content open fun requestRectangleOnScreen (p0: Rect ): Boolean open fun requestRectangleOnScreen (p0: Rect , p1: Boolean ): Boolean requestSendAccessibilityEvent [androidJvm] Content open override fun requestSendAccessibilityEvent (p0: View , p1: AccessibilityEvent ): Boolean requestTransparentRegion [androidJvm] Content open override fun requestTransparentRegion (p0: View ) requestUnbufferedDispatch [androidJvm] Content fun requestUnbufferedDispatch (p0: MotionEvent ) requireViewById [androidJvm] Content fun < T : View > requireViewById (p0: Int ): T resetPivot [androidJvm] Content open fun resetPivot () restoreDefaultFocus [androidJvm] Content open override fun restoreDefaultFocus (): Boolean restoreHierarchyState [androidJvm] Content open fun restoreHierarchyState (p0: SparseArray < Parcelable >) saveAttributeDataForStyleable [androidJvm] Content fun saveAttributeDataForStyleable (p0: Context , p1: IntArray , p2: AttributeSet ?, p3: TypedArray , p4: Int , p5: Int ) saveHierarchyState [androidJvm] Content open fun saveHierarchyState (p0: SparseArray < Parcelable >) scheduleDrawable [androidJvm] Content open override fun scheduleDrawable (p0: Drawable , p1: Runnable , p2: Long ) scheduleLayoutAnimation [androidJvm] Content open fun scheduleLayoutAnimation () scrollBy [androidJvm] Content open fun scrollBy (p0: Int , p1: Int ) scrollTo [androidJvm] Content open fun scrollTo (p0: Int , p1: Int ) sendAccessibilityEvent [androidJvm] Content open override fun sendAccessibilityEvent (p0: Int ) sendAccessibilityEventUnchecked [androidJvm] Content open override fun sendAccessibilityEventUnchecked (p0: AccessibilityEvent ) setAccessibilityDelegate [androidJvm] Content open fun setAccessibilityDelegate (p0: View.AccessibilityDelegate ?) setAccessibilityHeading [androidJvm] Content open fun setAccessibilityHeading (p0: Boolean ) setAccessibilityLiveRegion [androidJvm] Content open fun setAccessibilityLiveRegion (p0: Int ) setAccessibilityPaneTitle [androidJvm] Content open fun setAccessibilityPaneTitle (p0: CharSequence ?) setAccessibilityTraversalAfter [androidJvm] Content open fun setAccessibilityTraversalAfter (p0: Int ) setAccessibilityTraversalBefore [androidJvm] Content open fun setAccessibilityTraversalBefore (p0: Int ) setActivated [androidJvm] Content open fun setActivated (p0: Boolean ) setAddStatesFromChildren [androidJvm] Content open fun setAddStatesFromChildren (p0: Boolean ) setAlpha [androidJvm] Content open fun setAlpha (p0: Float ) setAnimation [androidJvm] Content open fun setAnimation (p0: Animation ) setAnimationMatrix [androidJvm] Content open fun setAnimationMatrix (p0: Matrix ?) setAutofillHints [androidJvm] Content open fun setAutofillHints (vararg p0: String ) setAutofillId [androidJvm] Content open fun setAutofillId (p0: AutofillId ?) setBackground [androidJvm] Content open fun setBackground (p0: Drawable ) setBackgroundColor [androidJvm] Content open fun setBackgroundColor (p0: Int ) setBackgroundResource [androidJvm] Content open fun setBackgroundResource (p0: Int ) setBackgroundTintBlendMode [androidJvm] Content open fun setBackgroundTintBlendMode (p0: BlendMode ?) setBackgroundTintList [androidJvm] Content open fun setBackgroundTintList (p0: ColorStateList ?) setBackgroundTintMode [androidJvm] Content open fun setBackgroundTintMode (p0: PorterDuff.Mode ?) setBottom [androidJvm] Content fun setBottom (p0: Int ) setCameraDistance [androidJvm] Content open fun setCameraDistance (p0: Float ) setChildrenDrawingOrderEnabled [androidJvm] Content open fun setChildrenDrawingOrderEnabled (p0: Boolean ) setClickable [androidJvm] Content open fun setClickable (p0: Boolean ) setClipBounds [androidJvm] Content open fun setClipBounds (p0: Rect ) setClipChildren [androidJvm] Content open fun setClipChildren (p0: Boolean ) setClipToOutline [androidJvm] Content open fun setClipToOutline (p0: Boolean ) setClipToPadding [androidJvm] Content open fun setClipToPadding (p0: Boolean ) setContentCaptureSession [androidJvm] Content open fun setContentCaptureSession (p0: ContentCaptureSession ?) setContentDescription [androidJvm] Content open fun setContentDescription (p0: CharSequence ) setContextClickable [androidJvm] Content open fun setContextClickable (p0: Boolean ) setDefaultFocusHighlightEnabled [androidJvm] Content open fun setDefaultFocusHighlightEnabled (p0: Boolean ) setDescendantFocusability [androidJvm] Content open fun setDescendantFocusability (p0: Int ) setDuplicateParentStateEnabled [androidJvm] Content open fun setDuplicateParentStateEnabled (p0: Boolean ) setElevation [androidJvm] Content open fun setElevation (p0: Float ) setEnabled [androidJvm] Content open fun setEnabled (p0: Boolean ) setFadingEdgeLength [androidJvm] Content open fun setFadingEdgeLength (p0: Int ) setFilterTouchesWhenObscured [androidJvm] Content open fun setFilterTouchesWhenObscured (p0: Boolean ) setFitsSystemWindows [androidJvm] Content open fun setFitsSystemWindows (p0: Boolean ) setFocusable [androidJvm] Content open fun setFocusable (p0: Boolean ) open fun setFocusable (p0: Int ) setFocusableInTouchMode [androidJvm] Content open fun setFocusableInTouchMode (p0: Boolean ) setFocusedByDefault [androidJvm] Content open fun setFocusedByDefault (p0: Boolean ) setForceDarkAllowed [androidJvm] Content open fun setForceDarkAllowed (p0: Boolean ) setForeground [androidJvm] Content open fun setForeground (p0: Drawable ) setForegroundGravity [androidJvm] Content open override fun setForegroundGravity (p0: Int ) setForegroundTintBlendMode [androidJvm] Content open fun setForegroundTintBlendMode (p0: BlendMode ?) setForegroundTintList [androidJvm] Content open fun setForegroundTintList (p0: ColorStateList ?) setForegroundTintMode [androidJvm] Content open fun setForegroundTintMode (p0: PorterDuff.Mode ?) setHapticFeedbackEnabled [androidJvm] Content open fun setHapticFeedbackEnabled (p0: Boolean ) setHasTransientState [androidJvm] Content open fun setHasTransientState (p0: Boolean ) setHorizontalFadingEdgeEnabled [androidJvm] Content open fun setHorizontalFadingEdgeEnabled (p0: Boolean ) setHorizontalScrollBarEnabled [androidJvm] Content open fun setHorizontalScrollBarEnabled (p0: Boolean ) setHorizontalScrollbarThumbDrawable [androidJvm] Content open fun setHorizontalScrollbarThumbDrawable (p0: Drawable ?) setHorizontalScrollbarTrackDrawable [androidJvm] Content open fun setHorizontalScrollbarTrackDrawable (p0: Drawable ?) setHovered [androidJvm] Content open fun setHovered (p0: Boolean ) setId [androidJvm] Content open fun setId (p0: Int ) setImportantForAccessibility [androidJvm] Content open fun setImportantForAccessibility (p0: Int ) setImportantForAutofill [androidJvm] Content open fun setImportantForAutofill (p0: Int ) setKeepScreenOn [androidJvm] Content open fun setKeepScreenOn (p0: Boolean ) setKeyboardNavigationCluster [androidJvm] Content open fun setKeyboardNavigationCluster (p0: Boolean ) setLabelFor [androidJvm] Content open fun setLabelFor (p0: Int ) setLayerPaint [androidJvm] Content open fun setLayerPaint (p0: Paint ?) setLayerType [androidJvm] Content open fun setLayerType (p0: Int , p1: Paint ?) setLayoutAnimation [androidJvm] Content open fun setLayoutAnimation (p0: LayoutAnimationController ) setLayoutAnimationListener [androidJvm] Content open fun setLayoutAnimationListener (p0: Animation.AnimationListener ) setLayoutDirection [androidJvm] Content open fun setLayoutDirection (p0: Int ) setLayoutMode [androidJvm] Content open fun setLayoutMode (p0: Int ) setLayoutParams [androidJvm] Content open fun setLayoutParams (p0: ViewGroup.LayoutParams ) setLayoutTransition [androidJvm] Content open fun setLayoutTransition (p0: LayoutTransition ) setLeft [androidJvm] Content fun setLeft (p0: Int ) setLeftTopRightBottom [androidJvm] Content fun setLeftTopRightBottom (p0: Int , p1: Int , p2: Int , p3: Int ) setLongClickable [androidJvm] Content open fun setLongClickable (p0: Boolean ) setMeasureAllChildren [androidJvm] Content open fun setMeasureAllChildren (p0: Boolean ) setMeasuredDimension [androidJvm] Content fun setMeasuredDimension (p0: Int , p1: Int ) setMinimumHeight [androidJvm] Content open fun setMinimumHeight (p0: Int ) setMinimumWidth [androidJvm] Content open fun setMinimumWidth (p0: Int ) setMotionEventSplittingEnabled [androidJvm] Content open fun setMotionEventSplittingEnabled (p0: Boolean ) setNestedScrollingEnabled [androidJvm] Content open fun setNestedScrollingEnabled (p0: Boolean ) setNextClusterForwardId [androidJvm] Content open fun setNextClusterForwardId (p0: Int ) setNextFocusDownId [androidJvm] Content open fun setNextFocusDownId (p0: Int ) setNextFocusForwardId [androidJvm] Content open fun setNextFocusForwardId (p0: Int ) setNextFocusLeftId [androidJvm] Content open fun setNextFocusLeftId (p0: Int ) setNextFocusRightId [androidJvm] Content open fun setNextFocusRightId (p0: Int ) setNextFocusUpId [androidJvm] Content open fun setNextFocusUpId (p0: Int ) setOnApplyWindowInsetsListener [androidJvm] Content open fun setOnApplyWindowInsetsListener (p0: View.OnApplyWindowInsetsListener ) setOnCapturedPointerListener [androidJvm] Content open fun setOnCapturedPointerListener (p0: View.OnCapturedPointerListener ) setOnClickListener [androidJvm] Content open fun setOnClickListener (p0: View.OnClickListener ?) setOnContextClickListener [androidJvm] Content open fun setOnContextClickListener (p0: View.OnContextClickListener ?) setOnCreateContextMenuListener [androidJvm] Content open fun setOnCreateContextMenuListener (p0: View.OnCreateContextMenuListener ) setOnDragListener [androidJvm] Content open fun setOnDragListener (p0: View.OnDragListener ) setOnFocusChangeListener [androidJvm] Content open fun setOnFocusChangeListener (p0: View.OnFocusChangeListener ) setOnGenericMotionListener [androidJvm] Content open fun setOnGenericMotionListener (p0: View.OnGenericMotionListener ) setOnHierarchyChangeListener [androidJvm] Content open fun setOnHierarchyChangeListener (p0: ViewGroup.OnHierarchyChangeListener ) setOnHoverListener [androidJvm] Content open fun setOnHoverListener (p0: View.OnHoverListener ) setOnKeyListener [androidJvm] Content open fun setOnKeyListener (p0: View.OnKeyListener ) setOnLongClickListener [androidJvm] Content open fun setOnLongClickListener (p0: View.OnLongClickListener ?) setOnScrollChangeListener [androidJvm] Content open fun setOnScrollChangeListener (p0: View.OnScrollChangeListener ) setOnSystemUiVisibilityChangeListener [androidJvm] Content open fun setOnSystemUiVisibilityChangeListener (p0: View.OnSystemUiVisibilityChangeListener ) setOnTouchListener [androidJvm] Content open fun setOnTouchListener (p0: View.OnTouchListener ) setOutlineAmbientShadowColor [androidJvm] Content open fun setOutlineAmbientShadowColor (p0: Int ) setOutlineProvider [androidJvm] Content open fun setOutlineProvider (p0: ViewOutlineProvider ) setOutlineSpotShadowColor [androidJvm] Content open fun setOutlineSpotShadowColor (p0: Int ) setOverScrollMode [androidJvm] Content open fun setOverScrollMode (p0: Int ) setPadding [androidJvm] Content open fun setPadding (p0: Int , p1: Int , p2: Int , p3: Int ) setPaddingRelative [androidJvm] Content open fun setPaddingRelative (p0: Int , p1: Int , p2: Int , p3: Int ) setPivotX [androidJvm] Content open fun setPivotX (p0: Float ) setPivotY [androidJvm] Content open fun setPivotY (p0: Float ) setPointerIcon [androidJvm] Content open fun setPointerIcon (p0: PointerIcon ) setPressed [androidJvm] Content open fun setPressed (p0: Boolean ) setRevealOnFocusHint [androidJvm] Content fun setRevealOnFocusHint (p0: Boolean ) setRight [androidJvm] Content fun setRight (p0: Int ) setRotation [androidJvm] Content open fun setRotation (p0: Float ) setRotationX [androidJvm] Content open fun setRotationX (p0: Float ) setRotationY [androidJvm] Content open fun setRotationY (p0: Float ) setSaveEnabled [androidJvm] Content open fun setSaveEnabled (p0: Boolean ) setSaveFromParentEnabled [androidJvm] Content open fun setSaveFromParentEnabled (p0: Boolean ) setScaleX [androidJvm] Content open fun setScaleX (p0: Float ) setScaleY [androidJvm] Content open fun setScaleY (p0: Float ) setScreenReaderFocusable [androidJvm] Content open fun setScreenReaderFocusable (p0: Boolean ) setScrollBarDefaultDelayBeforeFade [androidJvm] Content open fun setScrollBarDefaultDelayBeforeFade (p0: Int ) setScrollBarFadeDuration [androidJvm] Content open fun setScrollBarFadeDuration (p0: Int ) setScrollbarFadingEnabled [androidJvm] Content open fun setScrollbarFadingEnabled (p0: Boolean ) setScrollBarSize [androidJvm] Content open fun setScrollBarSize (p0: Int ) setScrollBarStyle [androidJvm] Content open fun setScrollBarStyle (p0: Int ) setScrollContainer [androidJvm] Content open fun setScrollContainer (p0: Boolean ) setScrollIndicators [androidJvm] Content open fun setScrollIndicators (p0: Int ) open fun setScrollIndicators (p0: Int , p1: Int ) setScrollX [androidJvm] Content open fun setScrollX (p0: Int ) setScrollY [androidJvm] Content open fun setScrollY (p0: Int ) setSelected [androidJvm] Content open fun setSelected (p0: Boolean ) setSoundEffectsEnabled [androidJvm] Content open fun setSoundEffectsEnabled (p0: Boolean ) setStateListAnimator [androidJvm] Content open fun setStateListAnimator (p0: StateListAnimator ) setStaticTransformationsEnabled [androidJvm] Content open fun setStaticTransformationsEnabled (p0: Boolean ) setSystemGestureExclusionRects [androidJvm] Content open fun setSystemGestureExclusionRects (p0: MutableList < Rect >) setSystemUiVisibility [androidJvm] Content open fun setSystemUiVisibility (p0: Int ) setTag [androidJvm] Content open fun setTag (p0: Any ) open fun setTag (p0: Int , p1: Any ) setTextAlignment [androidJvm] Content open fun setTextAlignment (p0: Int ) setTextDirection [androidJvm] Content open fun setTextDirection (p0: Int ) setTooltipText [androidJvm] Content open fun setTooltipText (p0: CharSequence ?) setTop [androidJvm] Content fun setTop (p0: Int ) setTouchDelegate [androidJvm] Content open fun setTouchDelegate (p0: TouchDelegate ) setTouchscreenBlocksFocus [androidJvm] Content open fun setTouchscreenBlocksFocus (p0: Boolean ) setTransitionAlpha [androidJvm] Content open fun setTransitionAlpha (p0: Float ) setTransitionGroup [androidJvm] Content open fun setTransitionGroup (p0: Boolean ) setTransitionName [androidJvm] Content fun setTransitionName (p0: String ) setTransitionVisibility [androidJvm] Content open fun setTransitionVisibility (p0: Int ) setTranslationX [androidJvm] Content open fun setTranslationX (p0: Float ) setTranslationY [androidJvm] Content open fun setTranslationY (p0: Float ) setTranslationZ [androidJvm] Content open fun setTranslationZ (p0: Float ) setVerticalFadingEdgeEnabled [androidJvm] Content open fun setVerticalFadingEdgeEnabled (p0: Boolean ) setVerticalScrollBarEnabled [androidJvm] Content open fun setVerticalScrollBarEnabled (p0: Boolean ) setVerticalScrollbarPosition [androidJvm] Content open fun setVerticalScrollbarPosition (p0: Int ) setVerticalScrollbarThumbDrawable [androidJvm] Content open fun setVerticalScrollbarThumbDrawable (p0: Drawable ?) setVerticalScrollbarTrackDrawable [androidJvm] Content open fun setVerticalScrollbarTrackDrawable (p0: Drawable ?) setVisibility [androidJvm] Content open fun setVisibility (p0: Int ) setWillNotDraw [androidJvm] Content open fun setWillNotDraw (p0: Boolean ) setX [androidJvm] Content open fun setX (p0: Float ) setY [androidJvm] Content open fun setY (p0: Float ) setZ [androidJvm] Content open fun setZ (p0: Float ) shouldDelayChildPressedState [androidJvm] Content open override fun shouldDelayChildPressedState (): Boolean showContextMenu [androidJvm] Content open fun showContextMenu (): Boolean open fun showContextMenu (p0: Float , p1: Float ): Boolean showContextMenuForChild [androidJvm] Content open override fun showContextMenuForChild (p0: View ): Boolean open override fun showContextMenuForChild (p0: View , p1: Float , p2: Float ): Boolean startActionMode [androidJvm] Content open fun startActionMode (p0: ActionMode.Callback ): ActionMode open fun startActionMode (p0: ActionMode.Callback , p1: Int ): ActionMode startActionModeForChild [androidJvm] Content open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback ): ActionMode open override fun startActionModeForChild (p0: View , p1: ActionMode.Callback , p2: Int ): ActionMode startAnimation [androidJvm] Content open fun startAnimation (p0: Animation ) startDragAndDrop [androidJvm] Content fun startDragAndDrop (p0: ClipData , p1: View.DragShadowBuilder , p2: Any , p3: Int ): Boolean startLayoutAnimation [androidJvm] Content open fun startLayoutAnimation () startNestedScroll [androidJvm] Content open fun startNestedScroll (p0: Int ): Boolean startViewTransition [androidJvm] Content open fun startViewTransition (p0: View ) stopNestedScroll [androidJvm] Content open fun stopNestedScroll () suppressLayout [androidJvm] Content open fun suppressLayout (p0: Boolean ) toString [androidJvm] Content open override fun toString (): String transformMatrixToGlobal [androidJvm] Content open fun transformMatrixToGlobal (p0: Matrix ) transformMatrixToLocal [androidJvm] Content open fun transformMatrixToLocal (p0: Matrix ) unscheduleDrawable [androidJvm] Content open fun unscheduleDrawable (p0: Drawable ) open override fun unscheduleDrawable (p0: Drawable , p1: Runnable ) updateDragShadow [androidJvm] Content fun updateDragShadow (p0: View.DragShadowBuilder ) updateViewLayout [androidJvm] Content open override fun updateViewLayout (p0: View , p1: ViewGroup.LayoutParams ) verifyDrawable [androidJvm] Content open fun verifyDrawable (p0: Drawable ): Boolean willNotDraw [androidJvm] Content open fun willNotDraw (): Boolean","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-modal-view-container/","text":"// workflow / com.squareup.workflow1.ui.modal / ModalViewContainer / ModalViewContainer ModalViewContainer \u00b6 [androidJvm] Content @ JvmOverloads () fun ModalViewContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":" modal view container"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-modal-view-container/#modalviewcontainer","text":"[androidJvm] Content @ JvmOverloads () fun ModalViewContainer (context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"ModalViewContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/build-dialog-for-view/","text":"// workflow / com.squareup.workflow1.ui.modal / ModalViewContainer / buildDialogForView buildDialogForView \u00b6 [androidJvm] Content open fun buildDialogForView (view: View ): Dialog More info Called from buildDialog. Builds (but does not show) the Dialog to display a view built via ViewRegistry . Subclasses may override completely to build their own kind of Dialog , there is no need to call super.","title":"Build dialog for view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/build-dialog-for-view/#builddialogforview","text":"[androidJvm] Content open fun buildDialogForView (view: View ): Dialog More info Called from buildDialog. Builds (but does not show) the Dialog to display a view built via ViewRegistry . Subclasses may override completely to build their own kind of Dialog , there is no need to call super.","title":"buildDialogForView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-companion/","text":"// workflow / com.squareup.workflow1.ui.modal / ModalViewContainer / Companion Companion \u00b6 [androidJvm] object Companion Functions \u00b6 Name Summary binding [androidJvm] Content inline fun < H : HasModals<*, *>> binding (@ IdRes ()id: Int = View.NO_ID): ViewFactory < H > More info Creates a ViewFactory for modal container screens of type H .","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-companion/#companion","text":"[androidJvm] object Companion","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-companion/#functions","text":"Name Summary binding [androidJvm] Content inline fun < H : HasModals<*, *>> binding (@ IdRes ()id: Int = View.NO_ID): ViewFactory < H > More info Creates a ViewFactory for modal container screens of type H .","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-companion/binding/","text":"// workflow / com.squareup.workflow1.ui.modal / ModalViewContainer / Companion / binding binding \u00b6 [androidJvm] Content inline fun < H : HasModals<*, *>> binding (@ IdRes ()id: Int = View.NO_ID): ViewFactory < H > More info Creates a ViewFactory for modal container screens of type H . Each view created for HasModals.modals will be shown in a Dialog whose window is set to size itself to WRAP_CONTENT (see android.view.Window.setLayout ). Parameters \u00b6 androidJvm id a unique identifier for containers of this type, allowing them to participate view persistence","title":"Binding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-companion/binding/#binding","text":"[androidJvm] Content inline fun < H : HasModals<*, *>> binding (@ IdRes ()id: Int = View.NO_ID): ViewFactory < H > More info Creates a ViewFactory for modal container screens of type H . Each view created for HasModals.modals will be shown in a Dialog whose window is set to size itself to WRAP_CONTENT (see android.view.Window.setLayout ).","title":"binding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-companion/binding/#parameters","text":"androidJvm id a unique identifier for containers of this type, allowing them to participate view persistence","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.radiography/","text":"// workflow / com.squareup.workflow1.ui.radiography Package com.squareup.workflow1.ui.radiography \u00b6 Properties \u00b6 Name Summary WorkflowViewRenderer [androidJvm] val ViewStateRenderers. WorkflowViewRenderer : ViewStateRendererRenders information about views that were created by view factories, i.e.","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.radiography/#package-comsquareupworkflow1uiradiography","text":"","title":"Package com.squareup.workflow1.ui.radiography"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.radiography/#properties","text":"Name Summary WorkflowViewRenderer [androidJvm] val ViewStateRenderers. WorkflowViewRenderer : ViewStateRendererRenders information about views that were created by view factories, i.e.","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.radiography/-workflow-view-renderer/","text":"// workflow / com.squareup.workflow1.ui.radiography / WorkflowViewRenderer WorkflowViewRenderer \u00b6 [androidJvm] Content val ViewStateRenderers. WorkflowViewRenderer : ViewStateRenderer More info Renders information about views that were created by view factories, i.e. views with associated rendering tags.","title":" workflow view renderer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.radiography/-workflow-view-renderer/#workflowviewrenderer","text":"[androidJvm] Content val ViewStateRenderers. WorkflowViewRenderer : ViewStateRenderer More info Renders information about views that were created by view factories, i.e. views with associated rendering tags.","title":"WorkflowViewRenderer"},{"location":"sequence_diagrams/","text":"Sequence Diagrams \u00b6 These are the source files used to generate the sequence diagrams via WebSequenceDiagrams .","title":"Sequence Diagrams"},{"location":"sequence_diagrams/#sequence-diagrams","text":"These are the source files used to generate the sequence diagrams via WebSequenceDiagrams .","title":"Sequence Diagrams"},{"location":"swift/api/Workflow/","text":"Reference Documentation \u00b6 Protocols \u00b6 AnyWorkflowConvertible Workflow WorkflowAction WorkflowDebugger Structs \u00b6 AnyWorkflow AnyWorkflowAction Sink WorkflowHierarchyDebugSnapshot WorkflowHierarchyDebugSnapshot.Child WorkflowUpdateDebugInfo Classes \u00b6 Lifetime RenderContext WorkflowHost Enums \u00b6 WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source Extensions \u00b6 AnyWorkflow AnyWorkflowAction AnyWorkflowConvertible RenderContext Workflow WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source This file was generated by SourceDocs on 2021-06-08 23:18:01 +0000","title":"Workflow "},{"location":"swift/api/Workflow/#reference-documentation","text":"","title":"Reference Documentation"},{"location":"swift/api/Workflow/#protocols","text":"AnyWorkflowConvertible Workflow WorkflowAction WorkflowDebugger","title":"Protocols"},{"location":"swift/api/Workflow/#structs","text":"AnyWorkflow AnyWorkflowAction Sink WorkflowHierarchyDebugSnapshot WorkflowHierarchyDebugSnapshot.Child WorkflowUpdateDebugInfo","title":"Structs"},{"location":"swift/api/Workflow/#classes","text":"Lifetime RenderContext WorkflowHost","title":"Classes"},{"location":"swift/api/Workflow/#enums","text":"WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source","title":"Enums"},{"location":"swift/api/Workflow/#extensions","text":"AnyWorkflow AnyWorkflowAction AnyWorkflowConvertible RenderContext Workflow WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source This file was generated by SourceDocs on 2021-06-08 23:18:01 +0000","title":"Extensions"},{"location":"swift/api/Workflow/classes/Lifetime/","text":"CLASS Lifetime \u00b6 public final class Lifetime Represents the lifetime of an object. Once ended, the onEnded closure is called. Properties \u00b6 hasEnded \u00b6 public private ( set ) var hasEnded : Bool = false Methods \u00b6 onEnded(_:) \u00b6 public func onEnded ( _ action : @ escaping () -> Void ) Hook to clean-up after end of lifetime . deinit \u00b6 deinit","title":"Lifetime"},{"location":"swift/api/Workflow/classes/Lifetime/#lifetime","text":"public final class Lifetime Represents the lifetime of an object. Once ended, the onEnded closure is called.","title":"Lifetime"},{"location":"swift/api/Workflow/classes/Lifetime/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/classes/Lifetime/#hasended","text":"public private ( set ) var hasEnded : Bool = false","title":"hasEnded"},{"location":"swift/api/Workflow/classes/Lifetime/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/classes/Lifetime/#onended_","text":"public func onEnded ( _ action : @ escaping () -> Void ) Hook to clean-up after end of lifetime .","title":"onEnded(_:)"},{"location":"swift/api/Workflow/classes/Lifetime/#deinit","text":"deinit","title":"deinit"},{"location":"swift/api/Workflow/classes/RenderContext/","text":"CLASS RenderContext \u00b6 public class RenderContext < WorkflowType : Workflow >: RenderContextType RenderContext is the composition point for the workflow tree. During a render pass, a workflow may want to defer to a child workflow to render some portion of its content. For example, a workflow that renders to a split-screen view model might delegate to child A for the left side, and child B for the right side view models. Nesting allows for a fractal tree that is constructed out of many small parts. If a parent wants to delegate to a child workflow, it must first create an instance of that workflow. This can be thought of as the model of the child workflow. It does not contain any active state, it simply contains the data necessary to create or update a workflow node. The parent then calls render(workflow:outputMap:) with two values: - The child workflow. - A closure that transforms the child\u2019s output events into the parent\u2019s Event type so that the parent can respond to events generated by the child. If the parent had previously rendered a child of the same type, the existing child workflow node is updated. If the parent had not rendered a child of the same type in the previous render pass, a new child workflow node is generated. The infrastructure then performs a render pass on the child to obtain its Rendering value, which is then returned to the caller. Methods \u00b6 makeSink(of:) \u00b6 public func makeSink < Action >( of actionType : Action . Type ) -> Sink < Action > where Action : WorkflowAction , Action . WorkflowType == WorkflowType runSideEffect(key:action:) \u00b6 public func runSideEffect ( key : AnyHashable , action : ( Lifetime ) -> Void ) Execute a side-effect action. Note that it is a programmer error to run two side-effects with the same key during the same render pass. action will be executed the first time a side-effect is run with a given key . runSideEffect calls with a given key on subsequent renders are ignored. If after a render pass, a side-effect with a key that was previously used is not used, it\u2019s lifetime ends and the Lifetime object\u2019s onEnded closure will be called. Parameters: key: represents the block of work that needs to be executed. action: a block of work that will be executed. Parameters \u00b6 Name Description key represents the block of work that needs to be executed. action a block of work that will be executed.","title":"RenderContext"},{"location":"swift/api/Workflow/classes/RenderContext/#rendercontext","text":"public class RenderContext < WorkflowType : Workflow >: RenderContextType RenderContext is the composition point for the workflow tree. During a render pass, a workflow may want to defer to a child workflow to render some portion of its content. For example, a workflow that renders to a split-screen view model might delegate to child A for the left side, and child B for the right side view models. Nesting allows for a fractal tree that is constructed out of many small parts. If a parent wants to delegate to a child workflow, it must first create an instance of that workflow. This can be thought of as the model of the child workflow. It does not contain any active state, it simply contains the data necessary to create or update a workflow node. The parent then calls render(workflow:outputMap:) with two values: - The child workflow. - A closure that transforms the child\u2019s output events into the parent\u2019s Event type so that the parent can respond to events generated by the child. If the parent had previously rendered a child of the same type, the existing child workflow node is updated. If the parent had not rendered a child of the same type in the previous render pass, a new child workflow node is generated. The infrastructure then performs a render pass on the child to obtain its Rendering value, which is then returned to the caller.","title":"RenderContext"},{"location":"swift/api/Workflow/classes/RenderContext/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/classes/RenderContext/#makesinkof","text":"public func makeSink < Action >( of actionType : Action . Type ) -> Sink < Action > where Action : WorkflowAction , Action . WorkflowType == WorkflowType","title":"makeSink(of:)"},{"location":"swift/api/Workflow/classes/RenderContext/#runsideeffectkeyaction","text":"public func runSideEffect ( key : AnyHashable , action : ( Lifetime ) -> Void ) Execute a side-effect action. Note that it is a programmer error to run two side-effects with the same key during the same render pass. action will be executed the first time a side-effect is run with a given key . runSideEffect calls with a given key on subsequent renders are ignored. If after a render pass, a side-effect with a key that was previously used is not used, it\u2019s lifetime ends and the Lifetime object\u2019s onEnded closure will be called. Parameters: key: represents the block of work that needs to be executed. action: a block of work that will be executed.","title":"runSideEffect(key:action:)"},{"location":"swift/api/Workflow/classes/RenderContext/#parameters","text":"Name Description key represents the block of work that needs to be executed. action a block of work that will be executed.","title":"Parameters"},{"location":"swift/api/Workflow/classes/WorkflowHost/","text":"CLASS WorkflowHost \u00b6 public final class WorkflowHost < WorkflowType : Workflow > Manages an active workflow hierarchy. Properties \u00b6 rendering \u00b6 public let rendering : Property < WorkflowType . Rendering > Represents the Rendering produced by the root workflow in the hierarchy. New Rendering values are produced as state transitions occur within the hierarchy. output \u00b6 public var output : Signal < WorkflowType . Output , Never > A signal containing output events emitted by the root workflow in the hierarchy. Methods \u00b6 init(workflow:debugger:) \u00b6 public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) Initializes a new host with the given workflow at the root. Parameter workflow: The root workflow in the hierarchy Parameter debugger: An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur. Parameters \u00b6 Name Description workflow The root workflow in the hierarchy debugger An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur. update(workflow:) \u00b6 public func update ( workflow : WorkflowType ) Update the input for the workflow. Will cause a render pass.","title":"WorkflowHost"},{"location":"swift/api/Workflow/classes/WorkflowHost/#workflowhost","text":"public final class WorkflowHost < WorkflowType : Workflow > Manages an active workflow hierarchy.","title":"WorkflowHost"},{"location":"swift/api/Workflow/classes/WorkflowHost/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/classes/WorkflowHost/#rendering","text":"public let rendering : Property < WorkflowType . Rendering > Represents the Rendering produced by the root workflow in the hierarchy. New Rendering values are produced as state transitions occur within the hierarchy.","title":"rendering"},{"location":"swift/api/Workflow/classes/WorkflowHost/#output","text":"public var output : Signal < WorkflowType . Output , Never > A signal containing output events emitted by the root workflow in the hierarchy.","title":"output"},{"location":"swift/api/Workflow/classes/WorkflowHost/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/classes/WorkflowHost/#initworkflowdebugger","text":"public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) Initializes a new host with the given workflow at the root. Parameter workflow: The root workflow in the hierarchy Parameter debugger: An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur.","title":"init(workflow:debugger:)"},{"location":"swift/api/Workflow/classes/WorkflowHost/#parameters","text":"Name Description workflow The root workflow in the hierarchy debugger An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur.","title":"Parameters"},{"location":"swift/api/Workflow/classes/WorkflowHost/#updateworkflow","text":"public func update ( workflow : WorkflowType ) Update the input for the workflow. Will cause a render pass.","title":"update(workflow:)"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/","text":"ENUM WorkflowUpdateDebugInfo.Kind \u00b6 public indirect enum Kind : Equatable Cases \u00b6 didUpdate(source:) \u00b6 case didUpdate ( source : Source ) childDidUpdate(_:) \u00b6 case childDidUpdate ( WorkflowUpdateDebugInfo )","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/#workflowupdatedebuginfokind","text":"public indirect enum Kind : Equatable","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/#cases","text":"","title":"Cases"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/#didupdatesource","text":"case didUpdate ( source : Source )","title":"didUpdate(source:)"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/#childdidupdate_","text":"case childDidUpdate ( WorkflowUpdateDebugInfo )","title":"childDidUpdate(_:)"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/","text":"ENUM WorkflowUpdateDebugInfo.Source \u00b6 public indirect enum Source : Equatable Cases \u00b6 external \u00b6 case external worker \u00b6 case worker sideEffect \u00b6 case sideEffect subtree(_:) \u00b6 case subtree ( WorkflowUpdateDebugInfo )","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#workflowupdatedebuginfosource","text":"public indirect enum Source : Equatable","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#cases","text":"","title":"Cases"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#external","text":"case external","title":"external"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#worker","text":"case worker","title":"worker"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#sideeffect","text":"case sideEffect","title":"sideEffect"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#subtree_","text":"case subtree ( WorkflowUpdateDebugInfo )","title":"subtree(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/","text":"EXTENSION AnyWorkflow \u00b6 extension AnyWorkflow : AnyWorkflowConvertible Methods \u00b6 asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Rendering , Output > mapOutput(_:) \u00b6 public func mapOutput < NewOutput >( _ transform : @ escaping ( Output ) -> NewOutput ) -> AnyWorkflow < Rendering , NewOutput > Returns a new AnyWorkflow whose Output type has been transformed into the given type. Parameter transform: An escaping closure that maps the original output type into the new output type. Returns: A type erased workflow with the new output type (the rendering type remains unchanged). Parameters \u00b6 Name Description transform An escaping closure that maps the original output type into the new output type. mapRendering(_:) \u00b6 public func mapRendering < NewRendering >( _ transform : @ escaping ( Rendering ) -> NewRendering ) -> AnyWorkflow < NewRendering , Output > Returns a new AnyWorkflow whose Rendering type has been transformed into the given type. Parameter transform: An escaping closure that maps the original rendering type into the new rendering type. Returns: A type erased workflow with the new rendering type (the output type remains unchanged). Parameters \u00b6 Name Description transform An escaping closure that maps the original rendering type into the new rendering type.","title":"AnyWorkflow"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#anyworkflow","text":"extension AnyWorkflow : AnyWorkflowConvertible","title":"AnyWorkflow"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Rendering , Output >","title":"asAnyWorkflow()"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#mapoutput_","text":"public func mapOutput < NewOutput >( _ transform : @ escaping ( Output ) -> NewOutput ) -> AnyWorkflow < Rendering , NewOutput > Returns a new AnyWorkflow whose Output type has been transformed into the given type. Parameter transform: An escaping closure that maps the original output type into the new output type. Returns: A type erased workflow with the new output type (the rendering type remains unchanged).","title":"mapOutput(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#parameters","text":"Name Description transform An escaping closure that maps the original output type into the new output type.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#maprendering_","text":"public func mapRendering < NewRendering >( _ transform : @ escaping ( Rendering ) -> NewRendering ) -> AnyWorkflow < NewRendering , Output > Returns a new AnyWorkflow whose Rendering type has been transformed into the given type. Parameter transform: An escaping closure that maps the original rendering type into the new rendering type. Returns: A type erased workflow with the new rendering type (the output type remains unchanged).","title":"mapRendering(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#parameters_1","text":"Name Description transform An escaping closure that maps the original rendering type into the new rendering type.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/","text":"EXTENSION AnyWorkflowAction \u00b6 extension AnyWorkflowAction Methods \u00b6 init(sendingOutput:) \u00b6 public init ( sendingOutput output : WorkflowType . Output ) Creates a type-erased workflow action that simply sends the given output event. Parameter output: The output event to send when this action is applied. Parameters \u00b6 Name Description output The output event to send when this action is applied.","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#anyworkflowaction","text":"extension AnyWorkflowAction","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#initsendingoutput","text":"public init ( sendingOutput output : WorkflowType . Output ) Creates a type-erased workflow action that simply sends the given output event. Parameter output: The output event to send when this action is applied.","title":"init(sendingOutput:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#parameters","text":"Name Description output The output event to send when this action is applied.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/","text":"EXTENSION AnyWorkflowConvertible \u00b6 extension AnyWorkflowConvertible Methods \u00b6 mapOutput(_:) \u00b6 public func mapOutput < NewOutput >( _ transform : @ escaping ( Output ) -> NewOutput ) -> AnyWorkflow < Rendering , NewOutput > mapRendering(_:) \u00b6 public func mapRendering < NewRendering >( _ transform : @ escaping ( Rendering ) -> NewRendering ) -> AnyWorkflow < NewRendering , Output > rendered(in:key:) \u00b6 public func rendered < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) -> Rendering where Output : WorkflowAction , Output . WorkflowType == Parent Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow. Parameters \u00b6 Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow. rendered(in:key:outputMap:) \u00b6 public func rendered < Parent , Action >( in context : RenderContext < Parent >, key : String = \"\" , outputMap : @ escaping ( Output ) -> Action ) -> Rendering where Action : WorkflowAction , Action . WorkflowType == Parent rendered(in:key:) \u00b6 public func rendered < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) -> Rendering where Output == AnyWorkflowAction < Parent > rendered(in:key:) \u00b6 public func rendered < T >( in context : RenderContext < T >, key : String = \"\" ) -> Rendering Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow. Parameters \u00b6 Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow. running(in:key:outputMap:) \u00b6 public func running < Parent , Action >( in context : RenderContext < Parent >, key : String = \"\" , outputMap : @ escaping ( Output ) -> Action ) where Action : WorkflowAction , Action . WorkflowType == Parent running(in:key:) \u00b6 public func running < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) where Parent : Workflow , Output . WorkflowType == Parent onOutput(_:) \u00b6 public func onOutput < Parent >( _ apply : @ escaping (( inout Parent . State , Output ) -> Parent . Output ?)) -> AnyWorkflow < Rendering , AnyWorkflowAction < Parent > > Process an Output Parameter apply: On Output , mutate State as necessary and return new Output (or nil ). Parameters \u00b6 Name Description apply On Output , mutate State as necessary and return new Output (or nil ). ignoringOutput() \u00b6 public func ignoringOutput () -> AnyWorkflow < Rendering , Never > Wraps this workflow in a workflow that ignores all outputs. Returns: An AnyWorkflow with the same rendering and no output.","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#anyworkflowconvertible","text":"extension AnyWorkflowConvertible","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#mapoutput_","text":"public func mapOutput < NewOutput >( _ transform : @ escaping ( Output ) -> NewOutput ) -> AnyWorkflow < Rendering , NewOutput >","title":"mapOutput(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#maprendering_","text":"public func mapRendering < NewRendering >( _ transform : @ escaping ( Rendering ) -> NewRendering ) -> AnyWorkflow < NewRendering , Output >","title":"mapRendering(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedinkey","text":"public func rendered < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) -> Rendering where Output : WorkflowAction , Output . WorkflowType == Parent Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow.","title":"rendered(in:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#parameters","text":"Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedinkeyoutputmap","text":"public func rendered < Parent , Action >( in context : RenderContext < Parent >, key : String = \"\" , outputMap : @ escaping ( Output ) -> Action ) -> Rendering where Action : WorkflowAction , Action . WorkflowType == Parent","title":"rendered(in:key:outputMap:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedinkey_1","text":"public func rendered < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) -> Rendering where Output == AnyWorkflowAction < Parent >","title":"rendered(in:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedinkey_2","text":"public func rendered < T >( in context : RenderContext < T >, key : String = \"\" ) -> Rendering Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow.","title":"rendered(in:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#parameters_1","text":"Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#runninginkeyoutputmap","text":"public func running < Parent , Action >( in context : RenderContext < Parent >, key : String = \"\" , outputMap : @ escaping ( Output ) -> Action ) where Action : WorkflowAction , Action . WorkflowType == Parent","title":"running(in:key:outputMap:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#runninginkey","text":"public func running < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) where Parent : Workflow , Output . WorkflowType == Parent","title":"running(in:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#onoutput_","text":"public func onOutput < Parent >( _ apply : @ escaping (( inout Parent . State , Output ) -> Parent . Output ?)) -> AnyWorkflow < Rendering , AnyWorkflowAction < Parent > > Process an Output Parameter apply: On Output , mutate State as necessary and return new Output (or nil ).","title":"onOutput(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#parameters_2","text":"Name Description apply On Output , mutate State as necessary and return new Output (or nil ).","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#ignoringoutput","text":"public func ignoringOutput () -> AnyWorkflow < Rendering , Never > Wraps this workflow in a workflow that ignores all outputs. Returns: An AnyWorkflow with the same rendering and no output.","title":"ignoringOutput()"},{"location":"swift/api/Workflow/extensions/RenderContext/","text":"EXTENSION RenderContext \u00b6 extension RenderContext Methods \u00b6 makeSink(of:onEvent:) \u00b6 public func makeSink < Event >( of eventType : Event . Type , onEvent : @ escaping ( Event , inout WorkflowType . State ) -> WorkflowType . Output ?) -> Sink < Event > makeOutputSink() \u00b6 public func makeOutputSink () -> Sink < WorkflowType . Output > Generates a sink that allows sending the Workflow\u2019s output wrapped in an AnyWorkflowAction, allowing bypassing an intermediate action.","title":"RenderContext"},{"location":"swift/api/Workflow/extensions/RenderContext/#rendercontext","text":"extension RenderContext","title":"RenderContext"},{"location":"swift/api/Workflow/extensions/RenderContext/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/RenderContext/#makesinkofonevent","text":"public func makeSink < Event >( of eventType : Event . Type , onEvent : @ escaping ( Event , inout WorkflowType . State ) -> WorkflowType . Output ?) -> Sink < Event >","title":"makeSink(of:onEvent:)"},{"location":"swift/api/Workflow/extensions/RenderContext/#makeoutputsink","text":"public func makeOutputSink () -> Sink < WorkflowType . Output > Generates a sink that allows sending the Workflow\u2019s output wrapped in an AnyWorkflowAction, allowing bypassing an intermediate action.","title":"makeOutputSink()"},{"location":"swift/api/Workflow/extensions/Workflow/","text":"EXTENSION Workflow \u00b6 extension Workflow Methods \u00b6 workflowDidChange(from:state:) \u00b6 public func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Parameters \u00b6 Name Description previousWorkflow The workflow before the update. state The current state. makeInitialState() \u00b6 public func makeInitialState () -> State workflowDidChange(from:state:) \u00b6 public func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Parameters \u00b6 Name Description previousWorkflow The workflow before the update. state The current state. asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Rendering , Output >","title":"Workflow"},{"location":"swift/api/Workflow/extensions/Workflow/#workflow","text":"extension Workflow","title":"Workflow"},{"location":"swift/api/Workflow/extensions/Workflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/Workflow/#workflowdidchangefromstate","text":"public func workflowDidChange ( from previousWorkflow : Self , state : inout State )","title":"workflowDidChange(from:state:)"},{"location":"swift/api/Workflow/extensions/Workflow/#parameters","text":"Name Description previousWorkflow The workflow before the update. state The current state.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/Workflow/#makeinitialstate","text":"public func makeInitialState () -> State","title":"makeInitialState()"},{"location":"swift/api/Workflow/extensions/Workflow/#workflowdidchangefromstate_1","text":"public func workflowDidChange ( from previousWorkflow : Self , state : inout State )","title":"workflowDidChange(from:state:)"},{"location":"swift/api/Workflow/extensions/Workflow/#parameters_1","text":"Name Description previousWorkflow The workflow before the update. state The current state.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/Workflow/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Rendering , Output >","title":"asAnyWorkflow()"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/","text":"EXTENSION WorkflowUpdateDebugInfo.Kind \u00b6 extension WorkflowUpdateDebugInfo . Kind : Codable Methods \u00b6 encode(to:) \u00b6 public func encode ( to encoder : Encoder ) throws Parameters \u00b6 Name Description encoder The encoder to write data to. init(from:) \u00b6 public init ( from decoder : Decoder ) throws Parameters \u00b6 Name Description decoder The decoder to read data from.","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#workflowupdatedebuginfokind","text":"extension WorkflowUpdateDebugInfo . Kind : Codable","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#encodeto","text":"public func encode ( to encoder : Encoder ) throws","title":"encode(to:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#parameters","text":"Name Description encoder The encoder to write data to.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#initfrom","text":"public init ( from decoder : Decoder ) throws","title":"init(from:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#parameters_1","text":"Name Description decoder The decoder to read data from.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/","text":"EXTENSION WorkflowUpdateDebugInfo.Source \u00b6 extension WorkflowUpdateDebugInfo . Source : Codable Methods \u00b6 encode(to:) \u00b6 public func encode ( to encoder : Encoder ) throws Parameters \u00b6 Name Description encoder The encoder to write data to. init(from:) \u00b6 public init ( from decoder : Decoder ) throws Parameters \u00b6 Name Description decoder The decoder to read data from.","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#workflowupdatedebuginfosource","text":"extension WorkflowUpdateDebugInfo . Source : Codable","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#encodeto","text":"public func encode ( to encoder : Encoder ) throws","title":"encode(to:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#parameters","text":"Name Description encoder The encoder to write data to.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#initfrom","text":"public init ( from decoder : Decoder ) throws","title":"init(from:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#parameters_1","text":"Name Description decoder The decoder to read data from.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/","text":"PROTOCOL AnyWorkflowConvertible \u00b6 public protocol AnyWorkflowConvertible Conforming types can be converted into AnyWorkflow values, allowing them to participate in a workflow hierarchy. Methods \u00b6 asAnyWorkflow() \u00b6 func asAnyWorkflow () -> AnyWorkflow < Rendering , Output > Returns an AnyWorkflow representing this value.","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/#anyworkflowconvertible","text":"public protocol AnyWorkflowConvertible Conforming types can be converted into AnyWorkflow values, allowing them to participate in a workflow hierarchy.","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/#asanyworkflow","text":"func asAnyWorkflow () -> AnyWorkflow < Rendering , Output > Returns an AnyWorkflow representing this value.","title":"asAnyWorkflow()"},{"location":"swift/api/Workflow/protocols/Workflow/","text":"PROTOCOL Workflow \u00b6 public protocol Workflow : AnyWorkflowConvertible Defines a node in the workflow tree. Initialization and Updating A workflow node comes into existence after its parent produces an instance of that workflow and uses it during a render pass (see the render method for more details). If this is the first time the parent has rendered a child of this type, a new workflow node is created. The workflow passed in from the parent will be used to invoke initialState() to obtain an initial state. If the parent had previously rendered a child of this type, the existing workflow node will be updated. workflowDidChange(from:state:) will be invoked to allow the workflow to respond to the change. Render After a workflow node has been created, or any time its state changes, a render pass occurs. The render pass takes the workflow that was passed down from the parent along with the current state and generates a value of type Rendering . In a common case, a workflow might render to a screen model for display. func render(state: State, context: RenderContext<Self>) -> MyScreenModel { return MyScreenModel() } Methods \u00b6 makeInitialState() \u00b6 func makeInitialState () -> State This method is invoked once when a workflow node comes into existence. Returns: The initial state for the workflow. workflowDidChange(from:state:) \u00b6 func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Called when a new workflow is passed down from the parent to an existing workflow node. Parameter previousWorkflow: The workflow before the update. Parameter state: The current state. Parameters \u00b6 Name Description previousWorkflow The workflow before the update. state The current state. render(state:context:) \u00b6 func render ( state : State , context : RenderContext < Self >) -> Rendering Called by the internal Workflow infrastructure to \u201crender\u201d the current state into Rendering . A workflow\u2019s Rendering type is commonly a view or screen model. Parameter state: The current state. Parameter context: The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state, then call rendered(in:key:outputMap:) . This will return the child\u2019s Rendering type after creating or updating the nested workflow. Parameters \u00b6 Name Description state The current state. context The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state, then call rendered(in:key:outputMap:) . This will return the child\u2019s Rendering type after creating or updating the nested workflow.","title":"Workflow"},{"location":"swift/api/Workflow/protocols/Workflow/#workflow","text":"public protocol Workflow : AnyWorkflowConvertible Defines a node in the workflow tree. Initialization and Updating A workflow node comes into existence after its parent produces an instance of that workflow and uses it during a render pass (see the render method for more details). If this is the first time the parent has rendered a child of this type, a new workflow node is created. The workflow passed in from the parent will be used to invoke initialState() to obtain an initial state. If the parent had previously rendered a child of this type, the existing workflow node will be updated. workflowDidChange(from:state:) will be invoked to allow the workflow to respond to the change. Render After a workflow node has been created, or any time its state changes, a render pass occurs. The render pass takes the workflow that was passed down from the parent along with the current state and generates a value of type Rendering . In a common case, a workflow might render to a screen model for display. func render(state: State, context: RenderContext<Self>) -> MyScreenModel { return MyScreenModel() }","title":"Workflow"},{"location":"swift/api/Workflow/protocols/Workflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/Workflow/#makeinitialstate","text":"func makeInitialState () -> State This method is invoked once when a workflow node comes into existence. Returns: The initial state for the workflow.","title":"makeInitialState()"},{"location":"swift/api/Workflow/protocols/Workflow/#workflowdidchangefromstate","text":"func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Called when a new workflow is passed down from the parent to an existing workflow node. Parameter previousWorkflow: The workflow before the update. Parameter state: The current state.","title":"workflowDidChange(from:state:)"},{"location":"swift/api/Workflow/protocols/Workflow/#parameters","text":"Name Description previousWorkflow The workflow before the update. state The current state.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/Workflow/#renderstatecontext","text":"func render ( state : State , context : RenderContext < Self >) -> Rendering Called by the internal Workflow infrastructure to \u201crender\u201d the current state into Rendering . A workflow\u2019s Rendering type is commonly a view or screen model. Parameter state: The current state. Parameter context: The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state, then call rendered(in:key:outputMap:) . This will return the child\u2019s Rendering type after creating or updating the nested workflow.","title":"render(state:context:)"},{"location":"swift/api/Workflow/protocols/Workflow/#parameters_1","text":"Name Description state The current state. context The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state, then call rendered(in:key:outputMap:) . This will return the child\u2019s Rendering type after creating or updating the nested workflow.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/WorkflowAction/","text":"PROTOCOL WorkflowAction \u00b6 public protocol WorkflowAction Conforming types represent an action that advances a workflow. When applied, an action emits the next state and / or output for the workflow. Methods \u00b6 apply(toState:) \u00b6 func apply ( toState state : inout WorkflowType . State ) -> WorkflowType . Output ? Applies this action to a given state of the workflow, optionally returning an output event. Parameter state: The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application. Returns: An optional output event for the workflow. If an output event is returned, it will be passed up the workflow hierarchy to this workflow\u2019s parent. Parameters \u00b6 Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"WorkflowAction"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#workflowaction","text":"public protocol WorkflowAction Conforming types represent an action that advances a workflow. When applied, an action emits the next state and / or output for the workflow.","title":"WorkflowAction"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#applytostate","text":"func apply ( toState state : inout WorkflowType . State ) -> WorkflowType . Output ? Applies this action to a given state of the workflow, optionally returning an output event. Parameter state: The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application. Returns: An optional output event for the workflow. If an output event is returned, it will be passed up the workflow hierarchy to this workflow\u2019s parent.","title":"apply(toState:)"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#parameters","text":"Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/","text":"PROTOCOL WorkflowDebugger \u00b6 public protocol WorkflowDebugger Defines a type that receives debug information about a running workflow hierarchy. Methods \u00b6 didEnterInitialState(snapshot:) \u00b6 func didEnterInitialState ( snapshot : WorkflowHierarchyDebugSnapshot ) Called once when the workflow hierarchy initializes. Parameter snapshot: Debug information about the workflow hierarchy. Parameters \u00b6 Name Description snapshot Debug information about the workflow hierarchy. didUpdate(snapshot:updateInfo:) \u00b6 func didUpdate ( snapshot : WorkflowHierarchyDebugSnapshot , updateInfo : WorkflowUpdateDebugInfo ) Called when an update occurs anywhere within the workflow hierarchy. Parameter snapshot: Debug information about the workflow hierarchy after the update. Parameter updateInfo: Information about the update. Parameters \u00b6 Name Description snapshot Debug information about the workflow hierarchy the update. updateInfo Information about the update.","title":"WorkflowDebugger"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#workflowdebugger","text":"public protocol WorkflowDebugger Defines a type that receives debug information about a running workflow hierarchy.","title":"WorkflowDebugger"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#didenterinitialstatesnapshot","text":"func didEnterInitialState ( snapshot : WorkflowHierarchyDebugSnapshot ) Called once when the workflow hierarchy initializes. Parameter snapshot: Debug information about the workflow hierarchy.","title":"didEnterInitialState(snapshot:)"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#parameters","text":"Name Description snapshot Debug information about the workflow hierarchy.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#didupdatesnapshotupdateinfo","text":"func didUpdate ( snapshot : WorkflowHierarchyDebugSnapshot , updateInfo : WorkflowUpdateDebugInfo ) Called when an update occurs anywhere within the workflow hierarchy. Parameter snapshot: Debug information about the workflow hierarchy after the update. Parameter updateInfo: Information about the update.","title":"didUpdate(snapshot:updateInfo:)"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#parameters_1","text":"Name Description snapshot Debug information about the workflow hierarchy the update. updateInfo Information about the update.","title":"Parameters"},{"location":"swift/api/Workflow/structs/AnyWorkflow/","text":"STRUCT AnyWorkflow \u00b6 public struct AnyWorkflow < Rendering , Output > A type-erased wrapper that contains a workflow with the given Rendering and Output types. Properties \u00b6 workflowType \u00b6 public var workflowType : Any . Type The underlying workflow\u2019s implementation type. Methods \u00b6 init(_:) \u00b6 public init < T : Workflow >( _ workflow : T ) where T . Rendering == Rendering , T . Output == Output Initializes a new type-erased wrapper for the given workflow.","title":"AnyWorkflow"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#anyworkflow","text":"public struct AnyWorkflow < Rendering , Output > A type-erased wrapper that contains a workflow with the given Rendering and Output types.","title":"AnyWorkflow"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#workflowtype","text":"public var workflowType : Any . Type The underlying workflow\u2019s implementation type.","title":"workflowType"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#init_","text":"public init < T : Workflow >( _ workflow : T ) where T . Rendering == Rendering , T . Output == Output Initializes a new type-erased wrapper for the given workflow.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/","text":"STRUCT AnyWorkflowAction \u00b6 public struct AnyWorkflowAction < WorkflowType : Workflow >: WorkflowAction A type-erased workflow action. The AnyWorkflowAction type forwards apply to an underlying workflow action, hiding its specific underlying type, or to a closure that implements the apply logic. Methods \u00b6 init(_:) \u00b6 public init < E >( _ base : E ) where E : WorkflowAction , E . WorkflowType == WorkflowType Creates a type-erased workflow action that wraps the given instance. Parameter base: A workflow action to wrap. Parameters \u00b6 Name Description base A workflow action to wrap. init(_:) \u00b6 public init ( _ apply : @ escaping ( inout WorkflowType . State ) -> WorkflowType . Output ?) Creates a type-erased workflow action with the given apply implementation. Parameter apply: the apply function for the resulting action. Parameters \u00b6 Name Description apply the apply function for the resulting action. apply(toState:) \u00b6 public func apply ( toState state : inout WorkflowType . State ) -> WorkflowType . Output ? Parameters \u00b6 Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#anyworkflowaction","text":"public struct AnyWorkflowAction < WorkflowType : Workflow >: WorkflowAction A type-erased workflow action. The AnyWorkflowAction type forwards apply to an underlying workflow action, hiding its specific underlying type, or to a closure that implements the apply logic.","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#init_","text":"public init < E >( _ base : E ) where E : WorkflowAction , E . WorkflowType == WorkflowType Creates a type-erased workflow action that wraps the given instance. Parameter base: A workflow action to wrap.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#parameters","text":"Name Description base A workflow action to wrap.","title":"Parameters"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#init__1","text":"public init ( _ apply : @ escaping ( inout WorkflowType . State ) -> WorkflowType . Output ?) Creates a type-erased workflow action with the given apply implementation. Parameter apply: the apply function for the resulting action.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#parameters_1","text":"Name Description apply the apply function for the resulting action.","title":"Parameters"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#applytostate","text":"public func apply ( toState state : inout WorkflowType . State ) -> WorkflowType . Output ?","title":"apply(toState:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#parameters_2","text":"Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"Parameters"},{"location":"swift/api/Workflow/structs/Sink/","text":"STRUCT Sink \u00b6 public struct Sink < Value > Sink is a type that receives incoming values (commonly events or WorkflowAction ) Use RenderContext.makeSink to create instances. Methods \u00b6 init(_:) \u00b6 public init ( _ onValue : @ escaping ( Value ) -> Void ) Initializes a new sink with the given closure. send(_:) \u00b6 public func send ( _ value : Value ) Sends a new event into the sink. Parameter event: The value to send into the sink. Parameters \u00b6 Name Description event The value to send into the sink. contraMap(_:) \u00b6 public func contraMap < NewValue >( _ transform : @ escaping ( NewValue ) -> Value ) -> Sink < NewValue > Generates a new sink of type NewValue. Given a transform closure, the following code is functionally equivalent: sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type<T> into Type<U> via (T)->U . - contraMap turns Type<T> into Type<U> via (U)->T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API. Parameter transform: An escaping closure that transforms T into Event . Parameters \u00b6 Name Description transform An escaping closure that transforms T into Event .","title":"Sink"},{"location":"swift/api/Workflow/structs/Sink/#sink","text":"public struct Sink < Value > Sink is a type that receives incoming values (commonly events or WorkflowAction ) Use RenderContext.makeSink to create instances.","title":"Sink"},{"location":"swift/api/Workflow/structs/Sink/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/structs/Sink/#init_","text":"public init ( _ onValue : @ escaping ( Value ) -> Void ) Initializes a new sink with the given closure.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/Sink/#send_","text":"public func send ( _ value : Value ) Sends a new event into the sink. Parameter event: The value to send into the sink.","title":"send(_:)"},{"location":"swift/api/Workflow/structs/Sink/#parameters","text":"Name Description event The value to send into the sink.","title":"Parameters"},{"location":"swift/api/Workflow/structs/Sink/#contramap_","text":"public func contraMap < NewValue >( _ transform : @ escaping ( NewValue ) -> Value ) -> Sink < NewValue > Generates a new sink of type NewValue. Given a transform closure, the following code is functionally equivalent: sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type<T> into Type<U> via (T)->U . - contraMap turns Type<T> into Type<U> via (U)->T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API. Parameter transform: An escaping closure that transforms T into Event .","title":"contraMap(_:)"},{"location":"swift/api/Workflow/structs/Sink/#parameters_1","text":"Name Description transform An escaping closure that transforms T into Event .","title":"Parameters"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/","text":"STRUCT WorkflowHierarchyDebugSnapshot.Child \u00b6 public struct Child : Codable , Equatable Properties \u00b6 key \u00b6 public var key : String snapshot \u00b6 public var snapshot : WorkflowHierarchyDebugSnapshot","title":"WorkflowHierarchyDebugSnapshot.Child"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/#workflowhierarchydebugsnapshotchild","text":"public struct Child : Codable , Equatable","title":"WorkflowHierarchyDebugSnapshot.Child"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/#key","text":"public var key : String","title":"key"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/#snapshot","text":"public var snapshot : WorkflowHierarchyDebugSnapshot","title":"snapshot"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/","text":"STRUCT WorkflowHierarchyDebugSnapshot \u00b6 public struct WorkflowHierarchyDebugSnapshot : Codable , Equatable Properties \u00b6 workflowType \u00b6 public var workflowType : String stateDescription \u00b6 public var stateDescription : String children \u00b6 public var children : [ Child ]","title":"WorkflowHierarchyDebugSnapshot"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#workflowhierarchydebugsnapshot","text":"public struct WorkflowHierarchyDebugSnapshot : Codable , Equatable","title":"WorkflowHierarchyDebugSnapshot"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#workflowtype","text":"public var workflowType : String","title":"workflowType"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#statedescription","text":"public var stateDescription : String","title":"stateDescription"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#children","text":"public var children : [ Child ]","title":"children"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/","text":"STRUCT WorkflowUpdateDebugInfo \u00b6 public struct WorkflowUpdateDebugInfo : Codable , Equatable Properties \u00b6 workflowType \u00b6 public var workflowType : String kind \u00b6 public var kind : Kind","title":"WorkflowUpdateDebugInfo"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#workflowupdatedebuginfo","text":"public struct WorkflowUpdateDebugInfo : Codable , Equatable","title":"WorkflowUpdateDebugInfo"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#workflowtype","text":"public var workflowType : String","title":"workflowType"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#kind","text":"public var kind : Kind","title":"kind"},{"location":"swift/api/WorkflowReactiveSwift/","text":"Reference Documentation \u00b6 Protocols \u00b6 Worker Extensions \u00b6 Signal SignalProducer Worker Typealiases \u00b6 SignalProducerWorkflow.Output SignalProducerWorkflow.Rendering SignalProducerWorkflow.State This file was generated by SourceDocs on 2021-06-08 23:18:33 +0000","title":"WorkflowReactiveSwift"},{"location":"swift/api/WorkflowReactiveSwift/#reference-documentation","text":"","title":"Reference Documentation"},{"location":"swift/api/WorkflowReactiveSwift/#protocols","text":"Worker","title":"Protocols"},{"location":"swift/api/WorkflowReactiveSwift/#extensions","text":"Signal SignalProducer Worker","title":"Extensions"},{"location":"swift/api/WorkflowReactiveSwift/#typealiases","text":"SignalProducerWorkflow.Output SignalProducerWorkflow.Rendering SignalProducerWorkflow.State This file was generated by SourceDocs on 2021-06-08 23:18:33 +0000","title":"Typealiases"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Signal/","text":"EXTENSION Signal \u00b6 extension Signal : AnyWorkflowConvertible where Error == Never Methods \u00b6 asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Void , Value >","title":"Signal"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Signal/#signal","text":"extension Signal : AnyWorkflowConvertible where Error == Never","title":"Signal"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Signal/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Signal/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Void , Value >","title":"asAnyWorkflow()"},{"location":"swift/api/WorkflowReactiveSwift/extensions/SignalProducer/","text":"EXTENSION SignalProducer \u00b6 extension SignalProducer : AnyWorkflowConvertible where Error == Never Methods \u00b6 asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Void , Value >","title":"SignalProducer"},{"location":"swift/api/WorkflowReactiveSwift/extensions/SignalProducer/#signalproducer","text":"extension SignalProducer : AnyWorkflowConvertible where Error == Never","title":"SignalProducer"},{"location":"swift/api/WorkflowReactiveSwift/extensions/SignalProducer/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowReactiveSwift/extensions/SignalProducer/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Void , Value >","title":"asAnyWorkflow()"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/","text":"EXTENSION Worker \u00b6 extension Worker Methods \u00b6 asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Void , Output > isEquivalent(to:) \u00b6 public func isEquivalent ( to otherWorker : Self ) -> Bool","title":"Worker"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/#worker","text":"extension Worker","title":"Worker"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Void , Output >","title":"asAnyWorkflow()"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/#isequivalentto","text":"public func isEquivalent ( to otherWorker : Self ) -> Bool","title":"isEquivalent(to:)"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/","text":"PROTOCOL Worker \u00b6 public protocol Worker : AnyWorkflowConvertible where Rendering == Void Workers define a unit of asynchronous work. During a render pass, a workflow can ask the context to await the result of a worker. When this occurs, the context checks to see if there is already a running worker of the same type. If there is, and if the workers are \u2018equivalent\u2019, the context leaves the existing worker running. If there is not an existing worker of this type, the context will kick off the new worker (via run ). Methods \u00b6 run() \u00b6 func run () -> SignalProducer < Output , Never > Returns a signal producer to execute the work represented by this worker. isEquivalent(to:) \u00b6 func isEquivalent ( to otherWorker : Self ) -> Bool Returns true if the other worker should be considered equivalent to self . Equivalence should take into account whatever data is meaningful to the task. For example, a worker that loads a user account from a server would not be equivalent to another worker with a different user ID.","title":"Worker"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/#worker","text":"public protocol Worker : AnyWorkflowConvertible where Rendering == Void Workers define a unit of asynchronous work. During a render pass, a workflow can ask the context to await the result of a worker. When this occurs, the context checks to see if there is already a running worker of the same type. If there is, and if the workers are \u2018equivalent\u2019, the context leaves the existing worker running. If there is not an existing worker of this type, the context will kick off the new worker (via run ).","title":"Worker"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/#run","text":"func run () -> SignalProducer < Output , Never > Returns a signal producer to execute the work represented by this worker.","title":"run()"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/#isequivalentto","text":"func isEquivalent ( to otherWorker : Self ) -> Bool Returns true if the other worker should be considered equivalent to self . Equivalence should take into account whatever data is meaningful to the task. For example, a worker that loads a user account from a server would not be equivalent to another worker with a different user ID.","title":"isEquivalent(to:)"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.Output/","text":"TYPEALIAS SignalProducerWorkflow.Output \u00b6 public typealias Output = Value","title":"SignalProducerWorkflow.Output"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.Output/#signalproducerworkflowoutput","text":"public typealias Output = Value","title":"SignalProducerWorkflow.Output"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.Rendering/","text":"TYPEALIAS SignalProducerWorkflow.Rendering \u00b6 public typealias Rendering = Void","title":"SignalProducerWorkflow.Rendering"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.Rendering/#signalproducerworkflowrendering","text":"public typealias Rendering = Void","title":"SignalProducerWorkflow.Rendering"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.State/","text":"TYPEALIAS SignalProducerWorkflow.State \u00b6 public typealias State = Void","title":"SignalProducerWorkflow.State"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.State/#signalproducerworkflowstate","text":"public typealias State = Void","title":"SignalProducerWorkflow.State"},{"location":"swift/api/WorkflowTesting/","text":"Reference Documentation \u00b6 Structs \u00b6 RenderTester RenderTesterResult WorkflowActionTester Extensions \u00b6 RenderTesterResult Workflow WorkflowAction WorkflowActionTester This file was generated by SourceDocs on 2021-06-08 23:18:24 +0000","title":"WorkflowTesting "},{"location":"swift/api/WorkflowTesting/#reference-documentation","text":"","title":"Reference Documentation"},{"location":"swift/api/WorkflowTesting/#structs","text":"RenderTester RenderTesterResult WorkflowActionTester","title":"Structs"},{"location":"swift/api/WorkflowTesting/#extensions","text":"RenderTesterResult Workflow WorkflowAction WorkflowActionTester This file was generated by SourceDocs on 2021-06-08 23:18:24 +0000","title":"Extensions"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/","text":"EXTENSION RenderTesterResult \u00b6 extension RenderTesterResult where WorkflowType . State : Equatable Methods \u00b6 assert(state:file:line:) \u00b6 public func assert ( state expectedState : WorkflowType . State , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Verifies that the resulting state is equal to the given state. assert(output:file:line:) \u00b6 public func assert ( output expectedOutput : WorkflowType . Output , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Verifies that the resulting output is equal to the given output.","title":"RenderTesterResult"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/#rendertesterresult","text":"extension RenderTesterResult where WorkflowType . State : Equatable","title":"RenderTesterResult"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/#assertstatefileline","text":"public func assert ( state expectedState : WorkflowType . State , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Verifies that the resulting state is equal to the given state.","title":"assert(state:file:line:)"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/#assertoutputfileline","text":"public func assert ( output expectedOutput : WorkflowType . Output , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Verifies that the resulting output is equal to the given output.","title":"assert(output:file:line:)"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/","text":"EXTENSION Workflow \u00b6 extension Workflow Methods \u00b6 renderTester(initialState:) \u00b6 public func renderTester ( initialState : Self . State ) -> RenderTester < Self > Returns a RenderTester with a specified initial state. renderTester() \u00b6 public func renderTester () -> RenderTester < Self > Returns a RenderTester with an initial state provided by self.makeInitialState()","title":"Workflow"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#workflow","text":"extension Workflow","title":"Workflow"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#rendertesterinitialstate","text":"public func renderTester ( initialState : Self . State ) -> RenderTester < Self > Returns a RenderTester with a specified initial state.","title":"renderTester(initialState:)"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#rendertester","text":"public func renderTester () -> RenderTester < Self > Returns a RenderTester with an initial state provided by self.makeInitialState()","title":"renderTester()"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/","text":"EXTENSION WorkflowAction \u00b6 extension WorkflowAction Methods \u00b6 tester(withState:) \u00b6 public static func tester ( withState state : WorkflowType . State ) -> WorkflowActionTester < WorkflowType , Self > Returns a state tester containing self .","title":"WorkflowAction"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/#workflowaction","text":"extension WorkflowAction","title":"WorkflowAction"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/#testerwithstate","text":"public static func tester ( withState state : WorkflowType . State ) -> WorkflowActionTester < WorkflowType , Self > Returns a state tester containing self .","title":"tester(withState:)"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/","text":"EXTENSION WorkflowActionTester \u00b6 extension WorkflowActionTester where WorkflowType . State : Equatable Methods \u00b6 assert(state:file:line:) \u00b6 public func assert ( state expectedState : WorkflowType . State , file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Triggers a test failure if the current state does not match the given expected state Parameters: expectedState: The expected state returns: A tester containing the current state and output. Parameters \u00b6 Name Description expectedState The expected state assert(output:file:line:) \u00b6 public func assert ( output expectedOutput : WorkflowType . Output , file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Triggers a test failure if the produced output does not match the given expected output Parameters: expectedState: The expected output returns: A tester containing the current state and output. Parameters \u00b6 Name Description expectedState The expected output","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#workflowactiontester","text":"extension WorkflowActionTester where WorkflowType . State : Equatable","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#assertstatefileline","text":"public func assert ( state expectedState : WorkflowType . State , file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Triggers a test failure if the current state does not match the given expected state Parameters: expectedState: The expected state returns: A tester containing the current state and output.","title":"assert(state:file:line:)"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#parameters","text":"Name Description expectedState The expected state","title":"Parameters"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#assertoutputfileline","text":"public func assert ( output expectedOutput : WorkflowType . Output , file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Triggers a test failure if the produced output does not match the given expected output Parameters: expectedState: The expected output returns: A tester containing the current state and output.","title":"assert(output:file:line:)"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#parameters_1","text":"Name Description expectedState The expected output","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/","text":"STRUCT RenderTester \u00b6 public struct RenderTester < WorkflowType : Workflow > Testing helper for validating the behavior of calls to render . Usage: expect workflows and side effects then validate with a call to render and the resulting RenderTesterResult . Side-effects may be performed against the rendering to validate the behavior of actions. To directly test actions and their effects, use the WorkflowActionTester . workflow .renderTester(initialState: TestWorkflow.State()) .expect( worker: TestWorker(), producingOutput: TestWorker.Output.success ) .expectWorkflow( type: ChildWorkflow.self, key: \"key\", rendering: \"rendering\", producingOutput: ChildWorkflow.Output.success ) .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) } .assert(state: TestWorkflow.State()) .assert(output: TestWorkflow.Output.finished) Validating the rendering only from the initial state provided by the workflow: workflow .renderTester() .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) } Validate the state was updated from a callback on the rendering: workflow .renderTester() .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) rendering.updateText(\"updated\") } .assert( state: TestWorkflow.State(text: \"updated\") ) Validate an output was received from the workflow. The action() on the rendering will cause an action that will return an output. workflow .renderTester() .render { rendering in rendering.action() } .assert( output: .success ) Validate a worker is running, and simulate the effect of its output: workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .expect( worker: TestWorker(), output: TestWorker.Output.success ) .render { _ in } Validate a child workflow is run, and simulate the effect of its output: workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .expectWorkflow( type: ChildWorkflow.self, rendering: \"rendering\", producingOutput: ChildWorkflow.Output.success ) .render { _ in } Methods \u00b6 expectWorkflow(type:key:producingRendering:producingOutput:file:line:assertions:) \u00b6 public func expectWorkflow < ExpectedWorkflowType : Workflow >( type : ExpectedWorkflowType . Type , key : String = \"\" , producingRendering rendering : ExpectedWorkflowType . Rendering , producingOutput output : ExpectedWorkflowType . Output ? = nil , file : StaticString = #file , line : UInt = #line , assertions : @ escaping ( ExpectedWorkflowType ) -> Void = { _ in } ) -> RenderTester < WorkflowType > Expect the given workflow type in the next rendering. Parameters: type: The type of the expected workflow. key: The key of the expected workflow (if specified). rendering: The rendering result that should be returned when the workflow of this type is rendered. output: An output that should be returned after the workflow of this type is rendered, if any. assertions: Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected. Parameters \u00b6 Name Description type The type of the expected workflow. key The key of the expected workflow (if specified). rendering The rendering result that should be returned when the workflow of this type is rendered. output An output that should be returned after the workflow of this type is rendered, if any. assertions Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected. expectWorkflowIgnoringOutput(type:key:producingRendering:file:line:assertions:) \u00b6 public func expectWorkflowIgnoringOutput < ExpectedWorkflowType : Workflow >( type : ExpectedWorkflowType . Type , key : String = \"\" , producingRendering rendering : ExpectedWorkflowType . Rendering , file : StaticString = #file , line : UInt = #line , assertions : @ escaping ( ExpectedWorkflowType ) -> Void = { _ in } ) -> RenderTester < WorkflowType > Expect the given workflow type in the next rendering, with its output being ignored by a call to ignoringOutput() . Parameters: type: The type of the expected workflow. key: The key of the expected workflow (if specified). rendering: The rendering result that should be returned when the workflow of this type is rendered. assertions: Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected. Parameters \u00b6 Name Description type The type of the expected workflow. key The key of the expected workflow (if specified). rendering The rendering result that should be returned when the workflow of this type is rendered. assertions Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected. expectSideEffect(key:file:line:) \u00b6 public func expectSideEffect ( key : AnyHashable , file : StaticString = #file , line : UInt = #line ) -> RenderTester < WorkflowType > Expect a side-effect for the given key. Parameter key: The key to expect. Parameters \u00b6 Name Description key The key to expect. expectSideEffect(key:producingAction:file:line:) \u00b6 public func expectSideEffect < ActionType >( key : AnyHashable , producingAction action : ActionType , file : StaticString = #file , line : UInt = #line ) -> RenderTester < WorkflowType > where ActionType : WorkflowAction , ActionType . WorkflowType == WorkflowType Expect a side-effect for the given key, and produce the given action when it is requested. Parameters: key: The key to expect. action: The action to produce when this side-effect is requested. Parameters \u00b6 Name Description key The key to expect. action The action to produce when this side-effect is requested. render(file:line:assertions:) \u00b6 public func render ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . Rendering ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Render the workflow under test. At this point, you should have set up all expectations. The given assertions closure will be called with the produced rendering, allowing you to assert its properties or perform actions on it (such as closures that are wired up to a Sink inside the workflow. Parameters: assertions: A closure called with the produced rendering for verification Returns: A RenderTesterResult that can be used to verify expected resulting state or outputs. Parameters \u00b6 Name Description assertions A closure called with the produced rendering for verification","title":"RenderTester"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#rendertester","text":"public struct RenderTester < WorkflowType : Workflow > Testing helper for validating the behavior of calls to render . Usage: expect workflows and side effects then validate with a call to render and the resulting RenderTesterResult . Side-effects may be performed against the rendering to validate the behavior of actions. To directly test actions and their effects, use the WorkflowActionTester . workflow .renderTester(initialState: TestWorkflow.State()) .expect( worker: TestWorker(), producingOutput: TestWorker.Output.success ) .expectWorkflow( type: ChildWorkflow.self, key: \"key\", rendering: \"rendering\", producingOutput: ChildWorkflow.Output.success ) .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) } .assert(state: TestWorkflow.State()) .assert(output: TestWorkflow.Output.finished) Validating the rendering only from the initial state provided by the workflow: workflow .renderTester() .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) } Validate the state was updated from a callback on the rendering: workflow .renderTester() .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) rendering.updateText(\"updated\") } .assert( state: TestWorkflow.State(text: \"updated\") ) Validate an output was received from the workflow. The action() on the rendering will cause an action that will return an output. workflow .renderTester() .render { rendering in rendering.action() } .assert( output: .success ) Validate a worker is running, and simulate the effect of its output: workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .expect( worker: TestWorker(), output: TestWorker.Output.success ) .render { _ in } Validate a child workflow is run, and simulate the effect of its output: workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .expectWorkflow( type: ChildWorkflow.self, rendering: \"rendering\", producingOutput: ChildWorkflow.Output.success ) .render { _ in }","title":"RenderTester"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#expectworkflowtypekeyproducingrenderingproducingoutputfilelineassertions","text":"public func expectWorkflow < ExpectedWorkflowType : Workflow >( type : ExpectedWorkflowType . Type , key : String = \"\" , producingRendering rendering : ExpectedWorkflowType . Rendering , producingOutput output : ExpectedWorkflowType . Output ? = nil , file : StaticString = #file , line : UInt = #line , assertions : @ escaping ( ExpectedWorkflowType ) -> Void = { _ in } ) -> RenderTester < WorkflowType > Expect the given workflow type in the next rendering. Parameters: type: The type of the expected workflow. key: The key of the expected workflow (if specified). rendering: The rendering result that should be returned when the workflow of this type is rendered. output: An output that should be returned after the workflow of this type is rendered, if any. assertions: Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected.","title":"expectWorkflow(type:key:producingRendering:producingOutput:file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters","text":"Name Description type The type of the expected workflow. key The key of the expected workflow (if specified). rendering The rendering result that should be returned when the workflow of this type is rendered. output An output that should be returned after the workflow of this type is rendered, if any. assertions Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#expectworkflowignoringoutputtypekeyproducingrenderingfilelineassertions","text":"public func expectWorkflowIgnoringOutput < ExpectedWorkflowType : Workflow >( type : ExpectedWorkflowType . Type , key : String = \"\" , producingRendering rendering : ExpectedWorkflowType . Rendering , file : StaticString = #file , line : UInt = #line , assertions : @ escaping ( ExpectedWorkflowType ) -> Void = { _ in } ) -> RenderTester < WorkflowType > Expect the given workflow type in the next rendering, with its output being ignored by a call to ignoringOutput() . Parameters: type: The type of the expected workflow. key: The key of the expected workflow (if specified). rendering: The rendering result that should be returned when the workflow of this type is rendered. assertions: Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected.","title":"expectWorkflowIgnoringOutput(type:key:producingRendering:file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters_1","text":"Name Description type The type of the expected workflow. key The key of the expected workflow (if specified). rendering The rendering result that should be returned when the workflow of this type is rendered. assertions Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#expectsideeffectkeyfileline","text":"public func expectSideEffect ( key : AnyHashable , file : StaticString = #file , line : UInt = #line ) -> RenderTester < WorkflowType > Expect a side-effect for the given key. Parameter key: The key to expect.","title":"expectSideEffect(key:file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters_2","text":"Name Description key The key to expect.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#expectsideeffectkeyproducingactionfileline","text":"public func expectSideEffect < ActionType >( key : AnyHashable , producingAction action : ActionType , file : StaticString = #file , line : UInt = #line ) -> RenderTester < WorkflowType > where ActionType : WorkflowAction , ActionType . WorkflowType == WorkflowType Expect a side-effect for the given key, and produce the given action when it is requested. Parameters: key: The key to expect. action: The action to produce when this side-effect is requested.","title":"expectSideEffect(key:producingAction:file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters_3","text":"Name Description key The key to expect. action The action to produce when this side-effect is requested.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#renderfilelineassertions","text":"public func render ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . Rendering ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Render the workflow under test. At this point, you should have set up all expectations. The given assertions closure will be called with the produced rendering, allowing you to assert its properties or perform actions on it (such as closures that are wired up to a Sink inside the workflow. Parameters: assertions: A closure called with the produced rendering for verification Returns: A RenderTesterResult that can be used to verify expected resulting state or outputs.","title":"render(file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters_4","text":"Name Description assertions A closure called with the produced rendering for verification","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/","text":"STRUCT RenderTesterResult \u00b6 public struct RenderTesterResult < WorkflowType : Workflow > The result of a RenderTester rendering. Used to verify state, output, and actions that were produced as a result of actions performed during the render (such as child workflow output being produced). Methods \u00b6 verifyState(file:line:assertions:) \u00b6 public func verifyState ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . State ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Allows for assertions against the resulting state. assertNoAction(file:line:) \u00b6 public func assertNoAction ( file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Asserts that no actions were produced verifyAction(type:file:line:assertions:) \u00b6 public func verifyAction < ActionType : WorkflowAction >( type : ActionType . Type = ActionType . self , file : StaticString = #file , line : UInt = #line , assertions : ( ActionType ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > where ActionType . WorkflowType == WorkflowType Allows for assertions agains the resulting action assert(action:file:line:) \u00b6 public func assert < ActionType : WorkflowAction >( action : ActionType , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > where ActionType . WorkflowType == WorkflowType , ActionType : Equatable Asserts that the resulting action is equal to the given action. assertNoOutput(file:line:) \u00b6 public func assertNoOutput ( file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Asserts that no output was produced. verifyOutput(file:line:assertions:) \u00b6 public func verifyOutput ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . Output ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Allows for assertions agains the resulting output","title":"RenderTesterResult"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#rendertesterresult","text":"public struct RenderTesterResult < WorkflowType : Workflow > The result of a RenderTester rendering. Used to verify state, output, and actions that were produced as a result of actions performed during the render (such as child workflow output being produced).","title":"RenderTesterResult"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#verifystatefilelineassertions","text":"public func verifyState ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . State ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Allows for assertions against the resulting state.","title":"verifyState(file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#assertnoactionfileline","text":"public func assertNoAction ( file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Asserts that no actions were produced","title":"assertNoAction(file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#verifyactiontypefilelineassertions","text":"public func verifyAction < ActionType : WorkflowAction >( type : ActionType . Type = ActionType . self , file : StaticString = #file , line : UInt = #line , assertions : ( ActionType ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > where ActionType . WorkflowType == WorkflowType Allows for assertions agains the resulting action","title":"verifyAction(type:file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#assertactionfileline","text":"public func assert < ActionType : WorkflowAction >( action : ActionType , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > where ActionType . WorkflowType == WorkflowType , ActionType : Equatable Asserts that the resulting action is equal to the given action.","title":"assert(action:file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#assertnooutputfileline","text":"public func assertNoOutput ( file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Asserts that no output was produced.","title":"assertNoOutput(file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#verifyoutputfilelineassertions","text":"public func verifyOutput ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . Output ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Allows for assertions agains the resulting output","title":"verifyOutput(file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/","text":"STRUCT WorkflowActionTester \u00b6 public struct WorkflowActionTester < WorkflowType , Action > where Action : WorkflowAction , Action . WorkflowType == WorkflowType Testing helper that chains action sending and state/output assertions to make tests easier to write. MyWorkflow.Action .tester(withState: .firstState) .send(action: .exampleAction) .verifyOutput { output in XCTAssertEqual(.finished, output) } .verifyState { state in XCTAssertEqual(.differentState, state) } Or to assert that an action produces no output: MyWorkflow.Action .tester(withState: .firstState) .send(action: .actionProducingNoOutput) .assertNoOutput() .verifyState { state in XCTAssertEqual(.differentState, state) } If your State or Output are Equatable , you can use the convenience assertion methods: MyWorkflow.Action .tester(withState: .firstState) .send(action: .exampleAction) .assert(output: .finished) .assert(state: .differentState) Methods \u00b6 send(action:) \u00b6 public func send ( action : Action ) -> WorkflowActionTester < WorkflowType , Action > Sends an action to the reducer. parameter action: The action to send. returns: A new state tester containing the state and output (if any) after the update. Parameters \u00b6 Name Description action The action to send. assertNoOutput(file:line:) \u00b6 public func assertNoOutput ( file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Asserts that the action produced no output returns: A tester containing the current state and output. verifyOutput(file:line:_:) \u00b6 public func verifyOutput ( file : StaticString = #file , line : UInt = #line , _ assertions : ( WorkflowType . Output ) throws -> Void ) rethrows -> WorkflowActionTester < WorkflowType , Action > Invokes the given closure (which is intended to contain test assertions) with the produced output. If the previous action produced no output, the triggers a test failure and does not execute the closure. parameter assertions: A closure that accepts a single output value. returns: A tester containing the current state and output. Parameters \u00b6 Name Description assertions A closure that accepts a single output value. verifyState(_:) \u00b6 public func verifyState ( _ assertions : ( WorkflowType . State ) throws -> Void ) rethrows -> WorkflowActionTester < WorkflowType , Action > Invokes the given closure (which is intended to contain test assertions) with the current state. parameter assertions: A closure that accepts a single state value. returns: A tester containing the current state and output. Parameters \u00b6 Name Description assertions A closure that accepts a single state value.","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#workflowactiontester","text":"public struct WorkflowActionTester < WorkflowType , Action > where Action : WorkflowAction , Action . WorkflowType == WorkflowType Testing helper that chains action sending and state/output assertions to make tests easier to write. MyWorkflow.Action .tester(withState: .firstState) .send(action: .exampleAction) .verifyOutput { output in XCTAssertEqual(.finished, output) } .verifyState { state in XCTAssertEqual(.differentState, state) } Or to assert that an action produces no output: MyWorkflow.Action .tester(withState: .firstState) .send(action: .actionProducingNoOutput) .assertNoOutput() .verifyState { state in XCTAssertEqual(.differentState, state) } If your State or Output are Equatable , you can use the convenience assertion methods: MyWorkflow.Action .tester(withState: .firstState) .send(action: .exampleAction) .assert(output: .finished) .assert(state: .differentState)","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#sendaction","text":"public func send ( action : Action ) -> WorkflowActionTester < WorkflowType , Action > Sends an action to the reducer. parameter action: The action to send. returns: A new state tester containing the state and output (if any) after the update.","title":"send(action:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#parameters","text":"Name Description action The action to send.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#assertnooutputfileline","text":"public func assertNoOutput ( file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Asserts that the action produced no output returns: A tester containing the current state and output.","title":"assertNoOutput(file:line:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#verifyoutputfileline_","text":"public func verifyOutput ( file : StaticString = #file , line : UInt = #line , _ assertions : ( WorkflowType . Output ) throws -> Void ) rethrows -> WorkflowActionTester < WorkflowType , Action > Invokes the given closure (which is intended to contain test assertions) with the produced output. If the previous action produced no output, the triggers a test failure and does not execute the closure. parameter assertions: A closure that accepts a single output value. returns: A tester containing the current state and output.","title":"verifyOutput(file:line:_:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#parameters_1","text":"Name Description assertions A closure that accepts a single output value.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#verifystate_","text":"public func verifyState ( _ assertions : ( WorkflowType . State ) throws -> Void ) rethrows -> WorkflowActionTester < WorkflowType , Action > Invokes the given closure (which is intended to contain test assertions) with the current state. parameter assertions: A closure that accepts a single state value. returns: A tester containing the current state and output.","title":"verifyState(_:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#parameters_2","text":"Name Description assertions A closure that accepts a single state value.","title":"Parameters"},{"location":"swift/api/WorkflowUI/","text":"Reference Documentation \u00b6 Protocols \u00b6 Screen ViewEnvironmentKey Structs \u00b6 AnyScreen ViewControllerDescription ViewEnvironment Classes \u00b6 ContainerViewController DescribedViewController ScreenViewController Extensions \u00b6 Screen ScreenViewController This file was generated by SourceDocs on 2021-06-08 23:18:12 +0000","title":"WorkflowUI "},{"location":"swift/api/WorkflowUI/#reference-documentation","text":"","title":"Reference Documentation"},{"location":"swift/api/WorkflowUI/#protocols","text":"Screen ViewEnvironmentKey","title":"Protocols"},{"location":"swift/api/WorkflowUI/#structs","text":"AnyScreen ViewControllerDescription ViewEnvironment","title":"Structs"},{"location":"swift/api/WorkflowUI/#classes","text":"ContainerViewController DescribedViewController ScreenViewController","title":"Classes"},{"location":"swift/api/WorkflowUI/#extensions","text":"Screen ScreenViewController This file was generated by SourceDocs on 2021-06-08 23:18:12 +0000","title":"Extensions"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/","text":"CLASS ContainerViewController \u00b6 public final class ContainerViewController < ScreenType , Output >: UIViewController where ScreenType : Screen Drives view controllers from a root Workflow. Properties \u00b6 output \u00b6 public var output : Signal < Output , Never > Emits output events from the bound workflow. rootViewEnvironment \u00b6 public var rootViewEnvironment : ViewEnvironment childForStatusBarStyle \u00b6 override public var childForStatusBarStyle : UIViewController ? childForStatusBarHidden \u00b6 override public var childForStatusBarHidden : UIViewController ? childForHomeIndicatorAutoHidden \u00b6 override public var childForHomeIndicatorAutoHidden : UIViewController ? childForScreenEdgesDeferringSystemGestures \u00b6 override public var childForScreenEdgesDeferringSystemGestures : UIViewController ? supportedInterfaceOrientations \u00b6 override public var supportedInterfaceOrientations : UIInterfaceOrientationMask Methods \u00b6 init(workflow:rootViewEnvironment:) \u00b6 public init < W : AnyWorkflowConvertible >( workflow : W , rootViewEnvironment : ViewEnvironment = . empty ) where W . Rendering == ScreenType , W . Output == Output update(workflow:) \u00b6 public func update < W : AnyWorkflowConvertible >( workflow : W ) where W . Rendering == ScreenType , W . Output == Output Updates the root Workflow in this container. init(coder:) \u00b6 public required init ?( coder aDecoder : NSCoder ) viewDidLoad() \u00b6 override public func viewDidLoad () viewDidLayoutSubviews() \u00b6 override public func viewDidLayoutSubviews ()","title":"ContainerViewController"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#containerviewcontroller","text":"public final class ContainerViewController < ScreenType , Output >: UIViewController where ScreenType : Screen Drives view controllers from a root Workflow.","title":"ContainerViewController"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#properties","text":"","title":"Properties"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#output","text":"public var output : Signal < Output , Never > Emits output events from the bound workflow.","title":"output"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#rootviewenvironment","text":"public var rootViewEnvironment : ViewEnvironment","title":"rootViewEnvironment"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforstatusbarstyle","text":"override public var childForStatusBarStyle : UIViewController ?","title":"childForStatusBarStyle"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforstatusbarhidden","text":"override public var childForStatusBarHidden : UIViewController ?","title":"childForStatusBarHidden"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforhomeindicatorautohidden","text":"override public var childForHomeIndicatorAutoHidden : UIViewController ?","title":"childForHomeIndicatorAutoHidden"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforscreenedgesdeferringsystemgestures","text":"override public var childForScreenEdgesDeferringSystemGestures : UIViewController ?","title":"childForScreenEdgesDeferringSystemGestures"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#supportedinterfaceorientations","text":"override public var supportedInterfaceOrientations : UIInterfaceOrientationMask","title":"supportedInterfaceOrientations"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#initworkflowrootviewenvironment","text":"public init < W : AnyWorkflowConvertible >( workflow : W , rootViewEnvironment : ViewEnvironment = . empty ) where W . Rendering == ScreenType , W . Output == Output","title":"init(workflow:rootViewEnvironment:)"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#updateworkflow","text":"public func update < W : AnyWorkflowConvertible >( workflow : W ) where W . Rendering == ScreenType , W . Output == Output Updates the root Workflow in this container.","title":"update(workflow:)"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#initcoder","text":"public required init ?( coder aDecoder : NSCoder )","title":"init(coder:)"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#viewdidload","text":"override public func viewDidLoad ()","title":"viewDidLoad()"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#viewdidlayoutsubviews","text":"override public func viewDidLayoutSubviews ()","title":"viewDidLayoutSubviews()"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/","text":"CLASS DescribedViewController \u00b6 public final class DescribedViewController : UIViewController Properties \u00b6 childForStatusBarStyle \u00b6 override public var childForStatusBarStyle : UIViewController ? childForStatusBarHidden \u00b6 override public var childForStatusBarHidden : UIViewController ? childForHomeIndicatorAutoHidden \u00b6 override public var childForHomeIndicatorAutoHidden : UIViewController ? childForScreenEdgesDeferringSystemGestures \u00b6 override public var childForScreenEdgesDeferringSystemGestures : UIViewController ? supportedInterfaceOrientations \u00b6 override public var supportedInterfaceOrientations : UIInterfaceOrientationMask Methods \u00b6 init(description:) \u00b6 public init ( description : ViewControllerDescription ) init(screen:environment:) \u00b6 public convenience init < S : Screen >( screen : S , environment : ViewEnvironment ) update(description:) \u00b6 public func update ( description : ViewControllerDescription ) update(screen:environment:) \u00b6 public func update < S : Screen >( screen : S , environment : ViewEnvironment ) viewDidLoad() \u00b6 override public func viewDidLoad () viewDidLayoutSubviews() \u00b6 override public func viewDidLayoutSubviews () preferredContentSizeDidChange(forChildContentContainer:) \u00b6 override public func preferredContentSizeDidChange ( forChildContentContainer container : UIContentContainer )","title":"DescribedViewController"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#describedviewcontroller","text":"public final class DescribedViewController : UIViewController","title":"DescribedViewController"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#properties","text":"","title":"Properties"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#childforstatusbarstyle","text":"override public var childForStatusBarStyle : UIViewController ?","title":"childForStatusBarStyle"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#childforstatusbarhidden","text":"override public var childForStatusBarHidden : UIViewController ?","title":"childForStatusBarHidden"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#childforhomeindicatorautohidden","text":"override public var childForHomeIndicatorAutoHidden : UIViewController ?","title":"childForHomeIndicatorAutoHidden"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#childforscreenedgesdeferringsystemgestures","text":"override public var childForScreenEdgesDeferringSystemGestures : UIViewController ?","title":"childForScreenEdgesDeferringSystemGestures"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#supportedinterfaceorientations","text":"override public var supportedInterfaceOrientations : UIInterfaceOrientationMask","title":"supportedInterfaceOrientations"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#initdescription","text":"public init ( description : ViewControllerDescription )","title":"init(description:)"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#initscreenenvironment","text":"public convenience init < S : Screen >( screen : S , environment : ViewEnvironment )","title":"init(screen:environment:)"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#updatedescription","text":"public func update ( description : ViewControllerDescription )","title":"update(description:)"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#updatescreenenvironment","text":"public func update < S : Screen >( screen : S , environment : ViewEnvironment )","title":"update(screen:environment:)"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#viewdidload","text":"override public func viewDidLoad ()","title":"viewDidLoad()"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#viewdidlayoutsubviews","text":"override public func viewDidLayoutSubviews ()","title":"viewDidLayoutSubviews()"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#preferredcontentsizedidchangeforchildcontentcontainer","text":"override public func preferredContentSizeDidChange ( forChildContentContainer container : UIContentContainer )","title":"preferredContentSizeDidChange(forChildContentContainer:)"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/","text":"CLASS ScreenViewController \u00b6 open class ScreenViewController < ScreenType : Screen >: UIViewController Generic base class that can be subclassed in order to to define a UI implementation that is powered by the given screen type. Using this base class, a screen can be implemented as: struct MyScreen: Screen { func viewControllerDescription(environment: ViewEnvironment) -> ViewControllerDescription { return MyScreenViewController.description(for: self) } } private class MyScreenViewController: ScreenViewController<MyScreen> { override func screenDidChange(from previousScreen: MyScreen, previousEnvironment: ViewEnvironment) { // \u2026 update views as necessary } } Properties \u00b6 screen \u00b6 public private ( set ) final var screen : ScreenType screenType \u00b6 public final var screenType : Screen . Type environment \u00b6 public private ( set ) final var environment : ViewEnvironment Methods \u00b6 init(screen:environment:) \u00b6 public required init ( screen : ScreenType , environment : ViewEnvironment ) init(coder:) \u00b6 update(screen:environment:) \u00b6 public final func update ( screen : ScreenType , environment : ViewEnvironment ) screenDidChange(from:previousEnvironment:) \u00b6 open func screenDidChange ( from previousScreen : ScreenType , previousEnvironment : ViewEnvironment ) Subclasses should override this method in order to update any relevant UI bits when the screen model changes.","title":"ScreenViewController"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#screenviewcontroller","text":"open class ScreenViewController < ScreenType : Screen >: UIViewController Generic base class that can be subclassed in order to to define a UI implementation that is powered by the given screen type. Using this base class, a screen can be implemented as: struct MyScreen: Screen { func viewControllerDescription(environment: ViewEnvironment) -> ViewControllerDescription { return MyScreenViewController.description(for: self) } } private class MyScreenViewController: ScreenViewController<MyScreen> { override func screenDidChange(from previousScreen: MyScreen, previousEnvironment: ViewEnvironment) { // \u2026 update views as necessary } }","title":"ScreenViewController"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#properties","text":"","title":"Properties"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#screen","text":"public private ( set ) final var screen : ScreenType","title":"screen"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#screentype","text":"public final var screenType : Screen . Type","title":"screenType"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#environment","text":"public private ( set ) final var environment : ViewEnvironment","title":"environment"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#initscreenenvironment","text":"public required init ( screen : ScreenType , environment : ViewEnvironment )","title":"init(screen:environment:)"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#initcoder","text":"","title":"init(coder:)"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#updatescreenenvironment","text":"public final func update ( screen : ScreenType , environment : ViewEnvironment )","title":"update(screen:environment:)"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#screendidchangefrompreviousenvironment","text":"open func screenDidChange ( from previousScreen : ScreenType , previousEnvironment : ViewEnvironment ) Subclasses should override this method in order to update any relevant UI bits when the screen model changes.","title":"screenDidChange(from:previousEnvironment:)"},{"location":"swift/api/WorkflowUI/extensions/Screen/","text":"EXTENSION Screen \u00b6 extension Screen Methods \u00b6 asAnyScreen() \u00b6 public func asAnyScreen () -> AnyScreen Wraps the screen in an AnyScreen","title":"Screen"},{"location":"swift/api/WorkflowUI/extensions/Screen/#screen","text":"extension Screen","title":"Screen"},{"location":"swift/api/WorkflowUI/extensions/Screen/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/extensions/Screen/#asanyscreen","text":"public func asAnyScreen () -> AnyScreen Wraps the screen in an AnyScreen","title":"asAnyScreen()"},{"location":"swift/api/WorkflowUI/extensions/ScreenViewController/","text":"EXTENSION ScreenViewController \u00b6 extension ScreenViewController Methods \u00b6 description(for:environment:) \u00b6 public final class func description ( for screen : ScreenType , environment : ViewEnvironment ) -> ViewControllerDescription Convenience to create a view controller description for the given screen value. See the example on the comment for ScreenViewController for usage.","title":"ScreenViewController"},{"location":"swift/api/WorkflowUI/extensions/ScreenViewController/#screenviewcontroller","text":"extension ScreenViewController","title":"ScreenViewController"},{"location":"swift/api/WorkflowUI/extensions/ScreenViewController/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/extensions/ScreenViewController/#descriptionforenvironment","text":"public final class func description ( for screen : ScreenType , environment : ViewEnvironment ) -> ViewControllerDescription Convenience to create a view controller description for the given screen value. See the example on the comment for ScreenViewController for usage.","title":"description(for:environment:)"},{"location":"swift/api/WorkflowUI/protocols/Screen/","text":"PROTOCOL Screen \u00b6 public protocol Screen Screens are the building blocks of an interactive application. Conforming types contain any information needed to populate a screen: data, styling, event handlers, etc. Methods \u00b6 viewControllerDescription(environment:) \u00b6 func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription A view controller description that acts as a recipe to either build or update a previously-built view controller to match this screen.","title":"Screen"},{"location":"swift/api/WorkflowUI/protocols/Screen/#screen","text":"public protocol Screen Screens are the building blocks of an interactive application. Conforming types contain any information needed to populate a screen: data, styling, event handlers, etc.","title":"Screen"},{"location":"swift/api/WorkflowUI/protocols/Screen/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/protocols/Screen/#viewcontrollerdescriptionenvironment","text":"func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription A view controller description that acts as a recipe to either build or update a previously-built view controller to match this screen.","title":"viewControllerDescription(environment:)"},{"location":"swift/api/WorkflowUI/protocols/ViewEnvironmentKey/","text":"PROTOCOL ViewEnvironmentKey \u00b6 public protocol ViewEnvironmentKey A key into the ViewEnvironment. Environment keys are associated with a specific type of value ( Value ) and must declare a default value. Typically the key conforming to ViewEnvironmentKey will be private, and you are encouraged to provide a convenience accessor on ViewEnvironment as in the following example: private enum ThemeKey: ViewEnvironmentKey { typealias Value = Theme var defaultValue: Theme } extension ViewEnvironment { public var theme: Theme { get { self[ThemeKey.self] } set { self[ThemeKey.self] = newValue } } }","title":"ViewEnvironmentKey"},{"location":"swift/api/WorkflowUI/protocols/ViewEnvironmentKey/#viewenvironmentkey","text":"public protocol ViewEnvironmentKey A key into the ViewEnvironment. Environment keys are associated with a specific type of value ( Value ) and must declare a default value. Typically the key conforming to ViewEnvironmentKey will be private, and you are encouraged to provide a convenience accessor on ViewEnvironment as in the following example: private enum ThemeKey: ViewEnvironmentKey { typealias Value = Theme var defaultValue: Theme } extension ViewEnvironment { public var theme: Theme { get { self[ThemeKey.self] } set { self[ThemeKey.self] = newValue } } }","title":"ViewEnvironmentKey"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/","text":"STRUCT AnyScreen \u00b6 public struct AnyScreen : Screen Methods \u00b6 init(_:) \u00b6 public init < T : Screen >( _ screen : T ) viewControllerDescription(environment:) \u00b6 public func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription","title":"AnyScreen"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#anyscreen","text":"public struct AnyScreen : Screen","title":"AnyScreen"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#init_","text":"public init < T : Screen >( _ screen : T )","title":"init(_:)"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#viewcontrollerdescriptionenvironment","text":"public func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription","title":"viewControllerDescription(environment:)"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/","text":"STRUCT ViewControllerDescription \u00b6 public struct ViewControllerDescription A ViewControllerDescription acts as a recipe for building and updating a specific UIViewController. Methods \u00b6 init(type:build:update:) \u00b6 public init < VC : UIViewController >( type : VC . Type = VC . self , build : @ escaping () -> VC , update : @ escaping ( VC ) -> Void ) Constructs a view controller description by providing a closure used to build and update a specific view controller type. Parameters: type: The type of view controller produced by this description. Typically, should should be able to omit this parameter, but in cases where type inference has trouble, it\u2019s offered as an escape hatch. build: Closure that produces a new instance of the view controller update: Closure that updates the given view controller Parameters \u00b6 Name Description type The type of view controller produced by this description. Typically, should should be able to omit this parameter, but in cases where type inference has trouble, it\u2019s offered as an escape hatch. build Closure that produces a new instance of the view controller update Closure that updates the given view controller","title":"ViewControllerDescription"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/#viewcontrollerdescription","text":"public struct ViewControllerDescription A ViewControllerDescription acts as a recipe for building and updating a specific UIViewController.","title":"ViewControllerDescription"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/#inittypebuildupdate","text":"public init < VC : UIViewController >( type : VC . Type = VC . self , build : @ escaping () -> VC , update : @ escaping ( VC ) -> Void ) Constructs a view controller description by providing a closure used to build and update a specific view controller type. Parameters: type: The type of view controller produced by this description. Typically, should should be able to omit this parameter, but in cases where type inference has trouble, it\u2019s offered as an escape hatch. build: Closure that produces a new instance of the view controller update: Closure that updates the given view controller","title":"init(type:build:update:)"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/#parameters","text":"Name Description type The type of view controller produced by this description. Typically, should should be able to omit this parameter, but in cases where type inference has trouble, it\u2019s offered as an escape hatch. build Closure that produces a new instance of the view controller update Closure that updates the given view controller","title":"Parameters"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/","text":"STRUCT ViewEnvironment \u00b6 public struct ViewEnvironment ViewEnvironment acts as a container for values to flow down the view-side of a rendering tree (as opposed to being passed down through Workflows). This will often be used by containers to let their children know in what context they\u2019re appearing (for example, a split screen container may set the environment of its two children according to which position they\u2019re appearing in). Methods \u00b6 setting(key:to:) \u00b6 public func setting < Key >( key : Key . Type , to value : Key . Value ) -> ViewEnvironment where Key : ViewEnvironmentKey Returns a new ViewEnvironment with the given value set for the given environment key. This is provided as a convenience for modifying the environment while passing it down to children screens without the need for an intermediate mutable value. It is functionally equivalent to the subscript setter. setting(keyPath:to:) \u00b6 public func setting < Value >( keyPath : WritableKeyPath < ViewEnvironment , Value >, to value : Value ) -> ViewEnvironment Returns a new ViewEnvironment with the given value set for the given key path. This is provided as a convenience for modifying the environment while passing it down to children screens. The following are functionally equivalent: var newEnvironment = environment newEnvironment.someProperty = 42 and let newEnvironment = environment.setting(\\.someProperty, to: 42)","title":"ViewEnvironment"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/#viewenvironment","text":"public struct ViewEnvironment ViewEnvironment acts as a container for values to flow down the view-side of a rendering tree (as opposed to being passed down through Workflows). This will often be used by containers to let their children know in what context they\u2019re appearing (for example, a split screen container may set the environment of its two children according to which position they\u2019re appearing in).","title":"ViewEnvironment"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/#settingkeyto","text":"public func setting < Key >( key : Key . Type , to value : Key . Value ) -> ViewEnvironment where Key : ViewEnvironmentKey Returns a new ViewEnvironment with the given value set for the given environment key. This is provided as a convenience for modifying the environment while passing it down to children screens without the need for an intermediate mutable value. It is functionally equivalent to the subscript setter.","title":"setting(key:to:)"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/#settingkeypathto","text":"public func setting < Value >( keyPath : WritableKeyPath < ViewEnvironment , Value >, to value : Value ) -> ViewEnvironment Returns a new ViewEnvironment with the given value set for the given key path. This is provided as a convenience for modifying the environment while passing it down to children screens. The following are functionally equivalent: var newEnvironment = environment newEnvironment.someProperty = 42 and let newEnvironment = environment.setting(\\.someProperty, to: 42)","title":"setting(keyPath:to:)"},{"location":"tutorial/","text":"Swift \u00b6 Tip For a comprehensive tutorial with code that you can build and follow along with, see the Tutorials in the repo. This section will be restructured soon to incorporate that and Kotlin tutorials. In the meantime, check out workflow-kotlin for Kotlin examples. The Workflow infrastructure is split into several modules. Workflow \u00b6 The Workflow library contains the core types that are used to implement state-driven workflows, including the Workflow protocol and related infrastructure. WorkflowUI \u00b6 Contains the basic infrastructure required to build a Workflow-based application that uses UIKit . Workflow for iOS makes extensive use of ReactiveSwift . If you are new to reactive programming, you may want to familiarize yourself with some of the basics. Workflow takes care of a lot of the reactive plumbing in a typical application, but you will have a better time if you understand what the framework is doing. Core Reactive Primitives Basic Operators How does ReactiveSwift relate to RxSwift? Next Steps \u00b6 Tooling Adding Workflow to a Project Building a Workflow Building a View Controller from a Screen Using a Workflow to Show UI","title":"Overview"},{"location":"tutorial/#swift","text":"Tip For a comprehensive tutorial with code that you can build and follow along with, see the Tutorials in the repo. This section will be restructured soon to incorporate that and Kotlin tutorials. In the meantime, check out workflow-kotlin for Kotlin examples. The Workflow infrastructure is split into several modules.","title":"Swift"},{"location":"tutorial/#workflow","text":"The Workflow library contains the core types that are used to implement state-driven workflows, including the Workflow protocol and related infrastructure.","title":"Workflow"},{"location":"tutorial/#workflowui","text":"Contains the basic infrastructure required to build a Workflow-based application that uses UIKit . Workflow for iOS makes extensive use of ReactiveSwift . If you are new to reactive programming, you may want to familiarize yourself with some of the basics. Workflow takes care of a lot of the reactive plumbing in a typical application, but you will have a better time if you understand what the framework is doing. Core Reactive Primitives Basic Operators How does ReactiveSwift relate to RxSwift?","title":"WorkflowUI"},{"location":"tutorial/#next-steps","text":"Tooling Adding Workflow to a Project Building a Workflow Building a View Controller from a Screen Using a Workflow to Show UI","title":"Next Steps"},{"location":"tutorial/adding-workflow-to-a-project/","text":"Adding Workflow to a project \u00b6 This document will guide you through the process of adding Workflow to an iOS project. Libraries \u00b6 You\u2019ll need the following four libraries: import Workflow import WorkflowUI import ReactiveSwift The easiest way to integrate these libraries is via Cocoapods. If you are using Cocoapods, you can simply add the dependencies to your .podspec . # MySoftware.podspec Pod :: Spec . new do | s | # ... s . dependency 'Workflow' s . dependency 'WorkflowUI' s . dependency 'ReactiveSwift' # ... end","title":"Adding Workflow to a project"},{"location":"tutorial/adding-workflow-to-a-project/#adding-workflow-to-a-project","text":"This document will guide you through the process of adding Workflow to an iOS project.","title":"Adding Workflow to a project"},{"location":"tutorial/adding-workflow-to-a-project/#libraries","text":"You\u2019ll need the following four libraries: import Workflow import WorkflowUI import ReactiveSwift The easiest way to integrate these libraries is via Cocoapods. If you are using Cocoapods, you can simply add the dependencies to your .podspec . # MySoftware.podspec Pod :: Spec . new do | s | # ... s . dependency 'Workflow' s . dependency 'WorkflowUI' s . dependency 'ReactiveSwift' # ... end","title":"Libraries"},{"location":"tutorial/building-a-view-controller-from-screen/","text":"Building a View Controller from a Screen \u00b6 Now that we have a workflow, we need a way to map our screen to an actual view controller. ScreenViewController \u00b6 The ScreenViewController provides a base class that hides the plumbing of updating a view controller from a view model update. struct DemoScreen : Screen { let title : String let onTap : () -> Void func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription { return DemoScreenViewController . description ( for : self , environment : environment ) } } class DemoScreenViewController : ScreenViewController < DemoScreen > { private let button : UIButton required init ( screen : DemoScreen , environment : ViewEnvironment ) { button = UIButton () super . init ( screen : screen , environment : environment ) update ( screen : screen ) } override func viewDidLoad () { super . viewDidLoad () button . addTarget ( self , action : #selector ( buttonPressed ( sender :)), for : . touchUpInside ) view . addSubview ( button ) } override func viewWillLayoutSubviews () { super . viewWillLayoutSubviews () button . frame = view . bounds } override func screenDidChange ( from previousScreen : DemoScreen , previousEnvironment : ViewEnvironment ) { super . screenDidChange ( from : previousScreen , previousEnvironment : previousEnvironment ) update ( screen : screen ) } private func update ( screen : DemoScreen ) { button . setTitle ( screen . title , for : . normal ) } @objc private func buttonPressed ( sender : UIButton ) { screen . onTap () } } Lifecycle \u00b6 When the view controller is first created, it is given the initial screen value. In the example, we create the button and set the title for it via the update method. The view loads as normal, adding the button the hierarchy and setting up the target:action for the button being pressed. The button is tapped. When the callback is called, we call the onTap closure passed into the screen. The workflow will handle this event, update its state, and a new screen will be rendered. The updated screen is passed to the view controller via the screenDidChange(from previousScreen: previousEnvironment: previousEnvironment:) method. Again, the view controller updates the title of the button based on what was passed in the screen.","title":"Building a View Controller from a Screen"},{"location":"tutorial/building-a-view-controller-from-screen/#building-a-view-controller-from-a-screen","text":"Now that we have a workflow, we need a way to map our screen to an actual view controller.","title":"Building a View Controller from a Screen"},{"location":"tutorial/building-a-view-controller-from-screen/#screenviewcontroller","text":"The ScreenViewController provides a base class that hides the plumbing of updating a view controller from a view model update. struct DemoScreen : Screen { let title : String let onTap : () -> Void func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription { return DemoScreenViewController . description ( for : self , environment : environment ) } } class DemoScreenViewController : ScreenViewController < DemoScreen > { private let button : UIButton required init ( screen : DemoScreen , environment : ViewEnvironment ) { button = UIButton () super . init ( screen : screen , environment : environment ) update ( screen : screen ) } override func viewDidLoad () { super . viewDidLoad () button . addTarget ( self , action : #selector ( buttonPressed ( sender :)), for : . touchUpInside ) view . addSubview ( button ) } override func viewWillLayoutSubviews () { super . viewWillLayoutSubviews () button . frame = view . bounds } override func screenDidChange ( from previousScreen : DemoScreen , previousEnvironment : ViewEnvironment ) { super . screenDidChange ( from : previousScreen , previousEnvironment : previousEnvironment ) update ( screen : screen ) } private func update ( screen : DemoScreen ) { button . setTitle ( screen . title , for : . normal ) } @objc private func buttonPressed ( sender : UIButton ) { screen . onTap () } }","title":"ScreenViewController"},{"location":"tutorial/building-a-view-controller-from-screen/#lifecycle","text":"When the view controller is first created, it is given the initial screen value. In the example, we create the button and set the title for it via the update method. The view loads as normal, adding the button the hierarchy and setting up the target:action for the button being pressed. The button is tapped. When the callback is called, we call the onTap closure passed into the screen. The workflow will handle this event, update its state, and a new screen will be rendered. The updated screen is passed to the view controller via the screenDidChange(from previousScreen: previousEnvironment: previousEnvironment:) method. Again, the view controller updates the title of the button based on what was passed in the screen.","title":"Lifecycle"},{"location":"tutorial/building-a-workflow/","text":"Building a Workflow \u00b6 Introduction \u00b6 A simple workflow looks something like this: struct DemoWorkflow : Workflow { var name : String init ( name : String ) { self . name = name } } extension DemoWorkflow { struct State {} func makeInitialState () -> State { return State () } func workflowDidChange ( from previousWorkflow : DemoWorkflow , state : inout State ) { } func render ( state : State , context : RenderContext < DemoWorkflow >) -> String { return \"Hello, \\( name ) \" } } A type conforming to Workflow represents a single node in the workflow tree. It should contain any values that must be provided by its parent (who is generally responsible for creating child workflows). Configuration parameters, strings, network services\u2026 If your workflow needs access to a value or object that it cannot create itself, they should be passed into the workflow\u2019s initializer. Every workflow defines its own State type to contain any data that should persist through subsequent render passes. Render \u00b6 Workflows are only useful when they render a value for use by their parent (or, if they are the root workflow, for display). This type is very commonly a view model, or Screen . The render(state:context:) method has a couple of parameters, so we\u2019ll work through them one by one. func render ( state : State , context : RenderContext < DemoWorkflow >) -> Rendering state \u00b6 Contains a value of type State to provide access to the current state. Any time the state of workflow changes, render is called again to take into account the change in state. context \u00b6 The render context: provides a way for a workflow to defer to nested (child) workflows to generate some or all of its rendered output. We\u2019ll walk through that process later on when we cover composition. allows a workflow to request the execution of asynchronous tasks ( Worker s) generates event handlers for use in constructing view models. In order for us to see the anything in our app, we\u2019ll need to return a Screen that can be turned into a view controller: func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { return DemoScreen ( title : \"A nice title\" ) } Actions, or \u201cThings that advance a workflow\u201d \u00b6 So far we have only covered workflows that perform simple tasks like generate strings or simple screens with no actions. If our workflows take on a complicated roles like generating view models, however, they will inevitably be required to handle events of some kind \u2013 some from UI events such as button taps, others from infrastructure events such as network responses. In conventional UIKit code, it is common to deal with each of those event types differently. The common pattern is to implement a method like handleButtonTap(sender:) . Workflows are more strict about events, however. Workflows require that all events be expressed as \u201cWorkflow Actions.\u201d These actions should be thought of as the entry point to your workflow. If any action of any kind happens (that your workflow cares about), it should be modeled as an action. struct DemoWorkflow : Workflow { /// ... } enum Action : WorkflowAction { typealias WorkflowType = DemoWorkflow case refreshButtonTapped /// UI event case refreshRequestFinished ( RefreshResponse ) /// Network event func apply ( toState state : inout DemoWorkflow . State ) -> DemoWorkflow . Output ? { /// ... } } The Update Cycle \u00b6 Every time a new action is received, it is applied to the current state of the workflow. If your workflow does more than simply render values, the action\u2019s apply is the method where the logic lives. There are two things that the apply(toState:) method is responsible for: Transitioning state (Optionally) emitting an output event Note that the render(state:context:) method is called after every state change, so you can be sure that any state changes will be reflected. Since we have a way of expressing an event from our UI, we can now use the callback on our view model to send that event back to the workflow: func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : \"A nice title\" , onTap : { sink . send ( Action . refreshButtonTapped ) } ) } State \u00b6 Some workflows do not need state at all \u2013 they simply render values based on the values they were initialized with. But for more complicated workflows, state management is critical. For example, a multi-screen flow only functions if we are able to define all of the possible steps (model the state), remember which one we are currently on (persist state), and move to other steps in the future (transition state). To define your workflow\u2019s state, simply implement the associatedtype State via an enum or struct. struct WelcomeFlowWorkflow : Workflow { enum State { case splashScreen case loginFlow case signupFlow } enum Action : WorkflowAction { case back /// ... } /// ... } Note Workflows (and their State ) should always be implemented through value types (structs and enums) due to the way the framework handles state changes. This means that you can never capture references to self , but the consistent flow of data pays dividends \u2013 try this architecture for a while and we are confident that you will see the benefits. Workers, or \u201cAsynchronous work the workflow needs done\u201d \u00b6 A workflow may need to do some amount of asynchronous work (such as a network request, reading from a SQLite database, etc). Workers provide a declarative interface to units of asynchronous work. To do something asynchronously, we define a worker that has an Output type and defines a run method that that returns a Reactive Swift SignalProducer . When this worker is run, the SignalProducer is subscribed to, starting the async task. struct RefreshWorker : Worker { enum Output { case success ( String ) case error ( Error ) } func run () -> SignalProducer < RefreshWorker . Output , Never > { return SignalProducer ( value : . success ( \"We did it!\" )) . delay ( 1.0 , on : QueueScheduler . main ) } func isEquivalent ( to otherWorker : RefreshWorker ) -> Bool { return true } } Because a Worker is a declarative representation of work, it also needs to define an isEquivalent to guarantee that we are not running more than one at the same time. For the simple example above, it is always considered equivalent as we want only one of this type of worker running at a time. In order to start asynchronous work, the workflow requests it in the render method, looking something like: public func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { RefreshWorker () . mapOutput { output -> Action in switch output { case . success ( let result ): return Action . refreshComplete ( result ) case . error ( let error ): return Action . refreshError ( error ) } } . running ( in : context ) } When running(in:) is executed on a worker, the context will do the following: Check if there is already a worker running of the same type: If there is not, or isEquivalent is false, call run on the worker and subscribe to the SignalProducer If there is already a worker running and isEquivalent is true, continue to wait for it to produce an output. When the SignalProducer from the Worker returns an output, it is mapped to an Action and handled the same way as any other action. Output Events \u00b6 The last role of the update cycle is to emit output events. As workflows form a hierarchy, it is common for children to send events up the tree. This may happen when a child workflow finishes or cancels, for example. Workflows can define an output type, which may then be returned by Actions. Composition \u00b6 Composition is the primary tool that we can use to manage complexity in a growing application. Workflows should always be kept small enough to be understandable \u2013 less than 150 lines is a good target. By composing together multiple workflows, complex problems can be broken down into individual pieces that can be quickly understood by other developers (including future you). The context provided to the render(state:context:) method defines the API through which composition is made possible. The Render Context \u00b6 The useful role of children is ultimately to provide rendered values (typically screen models) via their render(state:context:) implementation. To obtain that value from a child workflow, the rendered(with context:key:) method is invoked on the child workflow. When a workflow is rendered with the context, the context will do the following: Check if the child workflow is new or existing: If a workflow with the same type was used during the last render pass, the existing child workflow will be updated with the new workflow. Otherwise, a new child workflow node will be initialized. The child workflow\u2019s render(state:context:) method is called. The rendered value is returned. In practice, this looks something like this: struct ParentWorkflow : Workflow { func render ( state : State , context : RenderContext < ParentWorkflow >) -> String { let childWorkflow = ChildWorkflow ( text : \"Hello, World\" ) return childWorkflow . rendered ( with : context ) } } struct ChildWorkflow : Workflow { var text : String // ... func render ( state : State , context : RenderContext < ChildWorkflow >) -> String { return String ( text . reversed ()) } }","title":"Building a Workflow"},{"location":"tutorial/building-a-workflow/#building-a-workflow","text":"","title":"Building a Workflow"},{"location":"tutorial/building-a-workflow/#introduction","text":"A simple workflow looks something like this: struct DemoWorkflow : Workflow { var name : String init ( name : String ) { self . name = name } } extension DemoWorkflow { struct State {} func makeInitialState () -> State { return State () } func workflowDidChange ( from previousWorkflow : DemoWorkflow , state : inout State ) { } func render ( state : State , context : RenderContext < DemoWorkflow >) -> String { return \"Hello, \\( name ) \" } } A type conforming to Workflow represents a single node in the workflow tree. It should contain any values that must be provided by its parent (who is generally responsible for creating child workflows). Configuration parameters, strings, network services\u2026 If your workflow needs access to a value or object that it cannot create itself, they should be passed into the workflow\u2019s initializer. Every workflow defines its own State type to contain any data that should persist through subsequent render passes.","title":"Introduction"},{"location":"tutorial/building-a-workflow/#render","text":"Workflows are only useful when they render a value for use by their parent (or, if they are the root workflow, for display). This type is very commonly a view model, or Screen . The render(state:context:) method has a couple of parameters, so we\u2019ll work through them one by one. func render ( state : State , context : RenderContext < DemoWorkflow >) -> Rendering","title":"Render"},{"location":"tutorial/building-a-workflow/#state","text":"Contains a value of type State to provide access to the current state. Any time the state of workflow changes, render is called again to take into account the change in state.","title":"state"},{"location":"tutorial/building-a-workflow/#context","text":"The render context: provides a way for a workflow to defer to nested (child) workflows to generate some or all of its rendered output. We\u2019ll walk through that process later on when we cover composition. allows a workflow to request the execution of asynchronous tasks ( Worker s) generates event handlers for use in constructing view models. In order for us to see the anything in our app, we\u2019ll need to return a Screen that can be turned into a view controller: func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { return DemoScreen ( title : \"A nice title\" ) }","title":"context"},{"location":"tutorial/building-a-workflow/#actions-or-things-that-advance-a-workflow","text":"So far we have only covered workflows that perform simple tasks like generate strings or simple screens with no actions. If our workflows take on a complicated roles like generating view models, however, they will inevitably be required to handle events of some kind \u2013 some from UI events such as button taps, others from infrastructure events such as network responses. In conventional UIKit code, it is common to deal with each of those event types differently. The common pattern is to implement a method like handleButtonTap(sender:) . Workflows are more strict about events, however. Workflows require that all events be expressed as \u201cWorkflow Actions.\u201d These actions should be thought of as the entry point to your workflow. If any action of any kind happens (that your workflow cares about), it should be modeled as an action. struct DemoWorkflow : Workflow { /// ... } enum Action : WorkflowAction { typealias WorkflowType = DemoWorkflow case refreshButtonTapped /// UI event case refreshRequestFinished ( RefreshResponse ) /// Network event func apply ( toState state : inout DemoWorkflow . State ) -> DemoWorkflow . Output ? { /// ... } }","title":"Actions, or \u201cThings that advance a workflow\u201d"},{"location":"tutorial/building-a-workflow/#the-update-cycle","text":"Every time a new action is received, it is applied to the current state of the workflow. If your workflow does more than simply render values, the action\u2019s apply is the method where the logic lives. There are two things that the apply(toState:) method is responsible for: Transitioning state (Optionally) emitting an output event Note that the render(state:context:) method is called after every state change, so you can be sure that any state changes will be reflected. Since we have a way of expressing an event from our UI, we can now use the callback on our view model to send that event back to the workflow: func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : \"A nice title\" , onTap : { sink . send ( Action . refreshButtonTapped ) } ) }","title":"The Update Cycle"},{"location":"tutorial/building-a-workflow/#state_1","text":"Some workflows do not need state at all \u2013 they simply render values based on the values they were initialized with. But for more complicated workflows, state management is critical. For example, a multi-screen flow only functions if we are able to define all of the possible steps (model the state), remember which one we are currently on (persist state), and move to other steps in the future (transition state). To define your workflow\u2019s state, simply implement the associatedtype State via an enum or struct. struct WelcomeFlowWorkflow : Workflow { enum State { case splashScreen case loginFlow case signupFlow } enum Action : WorkflowAction { case back /// ... } /// ... } Note Workflows (and their State ) should always be implemented through value types (structs and enums) due to the way the framework handles state changes. This means that you can never capture references to self , but the consistent flow of data pays dividends \u2013 try this architecture for a while and we are confident that you will see the benefits.","title":"State"},{"location":"tutorial/building-a-workflow/#workers-or-asynchronous-work-the-workflow-needs-done","text":"A workflow may need to do some amount of asynchronous work (such as a network request, reading from a SQLite database, etc). Workers provide a declarative interface to units of asynchronous work. To do something asynchronously, we define a worker that has an Output type and defines a run method that that returns a Reactive Swift SignalProducer . When this worker is run, the SignalProducer is subscribed to, starting the async task. struct RefreshWorker : Worker { enum Output { case success ( String ) case error ( Error ) } func run () -> SignalProducer < RefreshWorker . Output , Never > { return SignalProducer ( value : . success ( \"We did it!\" )) . delay ( 1.0 , on : QueueScheduler . main ) } func isEquivalent ( to otherWorker : RefreshWorker ) -> Bool { return true } } Because a Worker is a declarative representation of work, it also needs to define an isEquivalent to guarantee that we are not running more than one at the same time. For the simple example above, it is always considered equivalent as we want only one of this type of worker running at a time. In order to start asynchronous work, the workflow requests it in the render method, looking something like: public func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { RefreshWorker () . mapOutput { output -> Action in switch output { case . success ( let result ): return Action . refreshComplete ( result ) case . error ( let error ): return Action . refreshError ( error ) } } . running ( in : context ) } When running(in:) is executed on a worker, the context will do the following: Check if there is already a worker running of the same type: If there is not, or isEquivalent is false, call run on the worker and subscribe to the SignalProducer If there is already a worker running and isEquivalent is true, continue to wait for it to produce an output. When the SignalProducer from the Worker returns an output, it is mapped to an Action and handled the same way as any other action.","title":"Workers, or \"Asynchronous work the workflow needs done\""},{"location":"tutorial/building-a-workflow/#output-events","text":"The last role of the update cycle is to emit output events. As workflows form a hierarchy, it is common for children to send events up the tree. This may happen when a child workflow finishes or cancels, for example. Workflows can define an output type, which may then be returned by Actions.","title":"Output Events"},{"location":"tutorial/building-a-workflow/#composition","text":"Composition is the primary tool that we can use to manage complexity in a growing application. Workflows should always be kept small enough to be understandable \u2013 less than 150 lines is a good target. By composing together multiple workflows, complex problems can be broken down into individual pieces that can be quickly understood by other developers (including future you). The context provided to the render(state:context:) method defines the API through which composition is made possible.","title":"Composition"},{"location":"tutorial/building-a-workflow/#the-render-context","text":"The useful role of children is ultimately to provide rendered values (typically screen models) via their render(state:context:) implementation. To obtain that value from a child workflow, the rendered(with context:key:) method is invoked on the child workflow. When a workflow is rendered with the context, the context will do the following: Check if the child workflow is new or existing: If a workflow with the same type was used during the last render pass, the existing child workflow will be updated with the new workflow. Otherwise, a new child workflow node will be initialized. The child workflow\u2019s render(state:context:) method is called. The rendered value is returned. In practice, this looks something like this: struct ParentWorkflow : Workflow { func render ( state : State , context : RenderContext < ParentWorkflow >) -> String { let childWorkflow = ChildWorkflow ( text : \"Hello, World\" ) return childWorkflow . rendered ( with : context ) } } struct ChildWorkflow : Workflow { var text : String // ... func render ( state : State , context : RenderContext < ChildWorkflow >) -> String { return String ( text . reversed ()) } }","title":"The Render Context"},{"location":"tutorial/tooling/","text":"Tooling \u00b6 Xcode templates \u00b6 Workflow comes with a set of file templates to simplify the process of building features. After installation, these templates can be found via File > New > New File... in Xcode. Launch terminal and navigate to the Workflow source directory. Run ./Tooling/Templates/install-xcode-templates.sh . Restart Xcode.","title":"Tooling"},{"location":"tutorial/tooling/#tooling","text":"","title":"Tooling"},{"location":"tutorial/tooling/#xcode-templates","text":"Workflow comes with a set of file templates to simplify the process of building features. After installation, these templates can be found via File > New > New File... in Xcode. Launch terminal and navigate to the Workflow source directory. Run ./Tooling/Templates/install-xcode-templates.sh . Restart Xcode.","title":"Xcode templates"},{"location":"tutorial/using-a-workflow-for-ui/","text":"Using a workflow to show UI \u00b6 ContainerViewController \u00b6 In the Workflow architecture, the container acts as the glue between the state-driven world of Workflows and the UI that is ultimately displayed. On iOS, the container is implemented as ContainerViewController . /// Drives view controllers from a root Workflow. public final class ContainerViewController < Output , ScreenType >: UIViewController where ScreenType : Screen { /// Emits output events from the bound workflow. public let output : Signal < Output , Never > public convenience init < W : Workflow >( workflow : W ) where W . Rendering == ScreenType , W . Output == Output } The initializer argument is the workflow that will drive your application. import UIKit import Workflow import WorkflowUI @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { let window = UIWindow ( frame : UIScreen . main . bounds ) let container = ContainerViewController ( workflow : DemoWorkflow () ) window . rootViewController = container self . window = window window . makeKeyAndVisible () return true } } Now, when the ContainerViewController is shown, it will start the workflow and render will be called returning the DemoScreen . The container will use viewControllerDescription to build a DemoScreenViewController and add it to the view hierarchy to display.","title":"Using a Workflow to Show UI"},{"location":"tutorial/using-a-workflow-for-ui/#using-a-workflow-to-show-ui","text":"","title":"Using a workflow to show UI"},{"location":"tutorial/using-a-workflow-for-ui/#containerviewcontroller","text":"In the Workflow architecture, the container acts as the glue between the state-driven world of Workflows and the UI that is ultimately displayed. On iOS, the container is implemented as ContainerViewController . /// Drives view controllers from a root Workflow. public final class ContainerViewController < Output , ScreenType >: UIViewController where ScreenType : Screen { /// Emits output events from the bound workflow. public let output : Signal < Output , Never > public convenience init < W : Workflow >( workflow : W ) where W . Rendering == ScreenType , W . Output == Output } The initializer argument is the workflow that will drive your application. import UIKit import Workflow import WorkflowUI @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { let window = UIWindow ( frame : UIScreen . main . bounds ) let container = ContainerViewController ( workflow : DemoWorkflow () ) window . rootViewController = container self . window = window window . makeKeyAndVisible () return true } } Now, when the ContainerViewController is shown, it will start the workflow and render will be called returning the DemoScreen . The container will use viewControllerDescription to build a DemoScreenViewController and add it to the view hierarchy to display.","title":"ContainerViewController"},{"location":"userguide/comparison/","text":"Comparison with other frameworks \u00b6 Coming soon!","title":"Comparison with other frameworks"},{"location":"userguide/comparison/#comparison-with-other-frameworks","text":"Coming soon!","title":"Comparison with other frameworks"},{"location":"userguide/concepts/","text":"Core Concepts \u00b6 Architectural Concepts \u00b6 Unidirectional Data Flow \u00b6 There is a wealth of information on the web about Unidirectional Data Flow , but it very simply means that there is a single path along which data travel from your business logic to your UI, and events travel to your business logic from your UI, and they always and only travel in one direction along that path. For Workflow, this also implies that the UI is (almost) stateless, and that the interesting state for your app is centralized and not duplicated. In practice, this makes program flow much easier to reason about because anytime something happens in an app, it removes the questions of where the state came from that caused it, which components got which events, and which sequences of cause and effect actually occurred. It makes unit testing easier because state and events are explicit, and always live in the same place and flow through the same APIs, so unit tests only need to test state transitions, for the most part. Declarative vs Imperative \u00b6 Traditionally, most mobile code is \u201cimperative\u201d \u2013 it consists of instructions for how to build and display the UI. These instructions can include control flow like loops. Imperative code is usually stateful, state is usually sprinkled all over the place, and tends to care about instances and identity. When reading imperative code, you almost have to run an interpreter and keep all the pieces of state in your head to figure out what it does. Web UI is traditionally declarative \u2013 it describes what to render, and some aspects of how to render it (style), but doesn\u2019t say how to actually draw it. Declarative code is usually easier to read than imperative code. It describes what it produces, not how to generate it. Declarative code usually cares more about pure values than instance identities. However, since computers still need actual instructions at some point, declarative code requires something else, usually imperative, either a compiler or interpreter, to actually do something with it. Workflow code is written in regular Kotlin or Swift, which are both imperative languages, but the library encourages you to write your logic in a declarative and functional style. The library manages state and wiring up event handling for you, so the only code you need to write is code that is actually interesting for your particular problem. A note about functional programming \u00b6 Kotlin and Swift are not strictly functional programming languages, but both have features that allow you to write functional -style code. Functional code discourages side effects and is generally much easier to test than object-oriented code. Functional and declarative programming go very well together, and Workflow encourages you to write such code. Core Components \u00b6 Workflows \u00b6 The Workflows at the left of the diagram contain all state and business logic for the application. This is where network requests happen, navigation decisions are made, models are saved to or loaded from disk \u2013 if it\u2019s not UI, it\u2019s in this box. For more information, see Workflow Core Concepts . View Models \u00b6 The primary job of the Workflows is to emit an observable stream of view models representing the current state of the application\u2019s UI. You will sometimes hear these view models referred to as \u2018screens\u2019, which is just another way to refer to a view model that contains the data for an entire screen in the app. For more information, see Workflow UI Concepts . Container \u00b6 The container is responsible for plumbing together the two separate halves of the application. It subscribes to the stream of view models that the workflows provide, then implements the logic to update the live UI whenever a new view model is emitted. For more information, see Workflow UI Concepts . UI \u00b6 This is typically conventional platform-specific UI code. One important note is that UI code should never attempt to navigate using system components (navigation controller pushes, modal presentation, etc). In this architecture the workflows are in charge \u2013 any navigation that happens outside of the workflow will be disregarded and stomped on during the next update cycle. For more information, see Workflow UI Concepts . Events \u00b6 In order for the application to actually do anything, the workflow needs to receive events from the UI. When the user interacts with the application by, for example, tapping a button, the workflow receives that event \u2013 which may trigger a simple state transition, or more complex behavior such as a network request. For more information, see Workflow Core Concepts . Info While the core shape of the libraries is shared by Swift and Kotlin implementations, some of the naming and types differ slightly to accommodate each language\u2019s particular type system and naming conventions. Where those differences occur in this document, they are noted in \u201cSwift vs Kotlin\u201d blurbs. See Where Swift and Kotlin Libraries Differ for an overall summary. In general, any time a generic type is referred to as Foo , in source code the Swift associated type is called Foo and the Kotlin type parameter is called FooT .","title":"Core Concepts"},{"location":"userguide/concepts/#core-concepts","text":"","title":"Core Concepts"},{"location":"userguide/concepts/#architectural-concepts","text":"","title":"Architectural Concepts"},{"location":"userguide/concepts/#unidirectional-data-flow","text":"There is a wealth of information on the web about Unidirectional Data Flow , but it very simply means that there is a single path along which data travel from your business logic to your UI, and events travel to your business logic from your UI, and they always and only travel in one direction along that path. For Workflow, this also implies that the UI is (almost) stateless, and that the interesting state for your app is centralized and not duplicated. In practice, this makes program flow much easier to reason about because anytime something happens in an app, it removes the questions of where the state came from that caused it, which components got which events, and which sequences of cause and effect actually occurred. It makes unit testing easier because state and events are explicit, and always live in the same place and flow through the same APIs, so unit tests only need to test state transitions, for the most part.","title":"Unidirectional Data Flow"},{"location":"userguide/concepts/#declarative-vs-imperative","text":"Traditionally, most mobile code is \u201cimperative\u201d \u2013 it consists of instructions for how to build and display the UI. These instructions can include control flow like loops. Imperative code is usually stateful, state is usually sprinkled all over the place, and tends to care about instances and identity. When reading imperative code, you almost have to run an interpreter and keep all the pieces of state in your head to figure out what it does. Web UI is traditionally declarative \u2013 it describes what to render, and some aspects of how to render it (style), but doesn\u2019t say how to actually draw it. Declarative code is usually easier to read than imperative code. It describes what it produces, not how to generate it. Declarative code usually cares more about pure values than instance identities. However, since computers still need actual instructions at some point, declarative code requires something else, usually imperative, either a compiler or interpreter, to actually do something with it. Workflow code is written in regular Kotlin or Swift, which are both imperative languages, but the library encourages you to write your logic in a declarative and functional style. The library manages state and wiring up event handling for you, so the only code you need to write is code that is actually interesting for your particular problem.","title":"Declarative vs Imperative"},{"location":"userguide/concepts/#a-note-about-functional-programming","text":"Kotlin and Swift are not strictly functional programming languages, but both have features that allow you to write functional -style code. Functional code discourages side effects and is generally much easier to test than object-oriented code. Functional and declarative programming go very well together, and Workflow encourages you to write such code.","title":"A note about functional programming"},{"location":"userguide/concepts/#core-components","text":"","title":"Core Components"},{"location":"userguide/concepts/#workflows","text":"The Workflows at the left of the diagram contain all state and business logic for the application. This is where network requests happen, navigation decisions are made, models are saved to or loaded from disk \u2013 if it\u2019s not UI, it\u2019s in this box. For more information, see Workflow Core Concepts .","title":"Workflows"},{"location":"userguide/concepts/#view-models","text":"The primary job of the Workflows is to emit an observable stream of view models representing the current state of the application\u2019s UI. You will sometimes hear these view models referred to as \u2018screens\u2019, which is just another way to refer to a view model that contains the data for an entire screen in the app. For more information, see Workflow UI Concepts .","title":"View Models"},{"location":"userguide/concepts/#container","text":"The container is responsible for plumbing together the two separate halves of the application. It subscribes to the stream of view models that the workflows provide, then implements the logic to update the live UI whenever a new view model is emitted. For more information, see Workflow UI Concepts .","title":"Container"},{"location":"userguide/concepts/#ui","text":"This is typically conventional platform-specific UI code. One important note is that UI code should never attempt to navigate using system components (navigation controller pushes, modal presentation, etc). In this architecture the workflows are in charge \u2013 any navigation that happens outside of the workflow will be disregarded and stomped on during the next update cycle. For more information, see Workflow UI Concepts .","title":"UI"},{"location":"userguide/concepts/#events","text":"In order for the application to actually do anything, the workflow needs to receive events from the UI. When the user interacts with the application by, for example, tapping a button, the workflow receives that event \u2013 which may trigger a simple state transition, or more complex behavior such as a network request. For more information, see Workflow Core Concepts . Info While the core shape of the libraries is shared by Swift and Kotlin implementations, some of the naming and types differ slightly to accommodate each language\u2019s particular type system and naming conventions. Where those differences occur in this document, they are noted in \u201cSwift vs Kotlin\u201d blurbs. See Where Swift and Kotlin Libraries Differ for an overall summary. In general, any time a generic type is referred to as Foo , in source code the Swift associated type is called Foo and the Kotlin type parameter is called FooT .","title":"Events"},{"location":"userguide/core-patterns/","text":"Workflow Core: Patterns/Variations \u00b6 There are a lot associated/generic types in workflow code \u2013 that doesn\u2019t mean you always need to use all of them. Here are some common configurations we\u2019ve seen. Stateless Workflows \u00b6 Remember that workflow state is made up of public and private parts. When a workflow\u2019s state consists entirely of public state (i.e. it\u2019s initializer arguments in Swift or PropsT in Kotlin), it can ignore all the machinery for private state. In Swift, the State type can be Void , and in Kotlin it can be Unit \u2013 such workflows are often referred to as \u201cstateless\u201d, since they have no state of their own. Props-less Workflows \u00b6 Some workflows manage all of their state internally, and have no public state (aka props). In Swift, this just means the workflow implementation has no parameters (although this is rare, see Injecting Dependencies below). In Kotlin, the PropsT type can be Unit . RenderContext has convenience overloads of most of its functions to implicitly pass Unit for these workflows. Outputless Workflows \u00b6 Workflows that only talk to their parent via their Rendering , and never emit any output, are encouraged to indicate that by using the bottom type as their Output type. In addition to documenting the fact that the workflow will never output, using the bottom type also lets the compiler enforce it \u2013 code that tries to emit outputs will not compile. In Swift, the Output type is specified as Never . In Kotlin, use Nothing . Composite Workflows \u00b6 Composition is a powerful tool for working with Workflows. A workflow can often accomplish a lot simply by rendering various children. It may just combine the renderings of multiple children, or use its props to determine which of a set of children to render. Such workflows can often be stateless. Props values v. Injected Dependencies \u00b6 Dependency injection is a technique for making code less coupled and more testable. In short, it\u2019s better for classes/structs to accept their dependencies when they\u2019re created instead of hard-coding them. Workflows typically have dependencies like specific Workers they need to perform some tasks, child workflows to delegate rendering to, or helpers for things like network requests, formatting and logging. Swift \u00b6 A Swift workflow typically receives its dependencies as initializer arguments, just like its input values, and is normally instantiated anew by its parent in each call to the parent\u2019s render method. The factory pattern can be employed to keep knowledge of children\u2019s implementation details from leaking into their parents. Kotlin \u00b6 Kotlin workflows make a more formal distinction between dependencies and props, via the PropsT parameter type on the Kotlin Workflow interface. Dependencies (e.g. a network service) are typically provided as constructor parameters, while props values (e.g. a record locator) are provided by the parent as an argument to the RenderContext.renderChild method. This works seamlessly with DI libraries like Dagger . The careful reader will note that this is technically storing \u201cstate\u201d in the workflow instance \u2013 something that is generally discouraged. However, since this \u201cstate\u201d is never changed, we can make an exception for this case. If a workflow has properties, they should only be used to store injected dependencies or dependencies derived from injected ones (e.g. Worker s created from Observable s). Info This difference between Swift and Kotlin practices is a side effect of Kotlin\u2019s lack of a parallel to Swift\u2019s Self type. Kotlin has no practical way to provide a method like Swift\u2019s Workflow.workflowDidChange , which accepts a strongly typed reference to the instance from the previous run of a parent\u2019s Render method. Kotlin\u2019s alternative, StatefulWorkflow.onPropsChanged , requires the extra PropsT type parameter.","title":"Patterns"},{"location":"userguide/core-patterns/#workflow-core-patternsvariations","text":"There are a lot associated/generic types in workflow code \u2013 that doesn\u2019t mean you always need to use all of them. Here are some common configurations we\u2019ve seen.","title":"Workflow Core: Patterns/Variations"},{"location":"userguide/core-patterns/#stateless-workflows","text":"Remember that workflow state is made up of public and private parts. When a workflow\u2019s state consists entirely of public state (i.e. it\u2019s initializer arguments in Swift or PropsT in Kotlin), it can ignore all the machinery for private state. In Swift, the State type can be Void , and in Kotlin it can be Unit \u2013 such workflows are often referred to as \u201cstateless\u201d, since they have no state of their own.","title":"Stateless Workflows"},{"location":"userguide/core-patterns/#props-less-workflows","text":"Some workflows manage all of their state internally, and have no public state (aka props). In Swift, this just means the workflow implementation has no parameters (although this is rare, see Injecting Dependencies below). In Kotlin, the PropsT type can be Unit . RenderContext has convenience overloads of most of its functions to implicitly pass Unit for these workflows.","title":"Props-less Workflows"},{"location":"userguide/core-patterns/#outputless-workflows","text":"Workflows that only talk to their parent via their Rendering , and never emit any output, are encouraged to indicate that by using the bottom type as their Output type. In addition to documenting the fact that the workflow will never output, using the bottom type also lets the compiler enforce it \u2013 code that tries to emit outputs will not compile. In Swift, the Output type is specified as Never . In Kotlin, use Nothing .","title":"Outputless Workflows"},{"location":"userguide/core-patterns/#composite-workflows","text":"Composition is a powerful tool for working with Workflows. A workflow can often accomplish a lot simply by rendering various children. It may just combine the renderings of multiple children, or use its props to determine which of a set of children to render. Such workflows can often be stateless.","title":"Composite Workflows"},{"location":"userguide/core-patterns/#props-values-v-injected-dependencies","text":"Dependency injection is a technique for making code less coupled and more testable. In short, it\u2019s better for classes/structs to accept their dependencies when they\u2019re created instead of hard-coding them. Workflows typically have dependencies like specific Workers they need to perform some tasks, child workflows to delegate rendering to, or helpers for things like network requests, formatting and logging.","title":"Props values v. Injected Dependencies"},{"location":"userguide/core-patterns/#swift","text":"A Swift workflow typically receives its dependencies as initializer arguments, just like its input values, and is normally instantiated anew by its parent in each call to the parent\u2019s render method. The factory pattern can be employed to keep knowledge of children\u2019s implementation details from leaking into their parents.","title":"Swift"},{"location":"userguide/core-patterns/#kotlin","text":"Kotlin workflows make a more formal distinction between dependencies and props, via the PropsT parameter type on the Kotlin Workflow interface. Dependencies (e.g. a network service) are typically provided as constructor parameters, while props values (e.g. a record locator) are provided by the parent as an argument to the RenderContext.renderChild method. This works seamlessly with DI libraries like Dagger . The careful reader will note that this is technically storing \u201cstate\u201d in the workflow instance \u2013 something that is generally discouraged. However, since this \u201cstate\u201d is never changed, we can make an exception for this case. If a workflow has properties, they should only be used to store injected dependencies or dependencies derived from injected ones (e.g. Worker s created from Observable s). Info This difference between Swift and Kotlin practices is a side effect of Kotlin\u2019s lack of a parallel to Swift\u2019s Self type. Kotlin has no practical way to provide a method like Swift\u2019s Workflow.workflowDidChange , which accepts a strongly typed reference to the instance from the previous run of a parent\u2019s Render method. Kotlin\u2019s alternative, StatefulWorkflow.onPropsChanged , requires the extra PropsT type parameter.","title":"Kotlin"},{"location":"userguide/core-worker/","text":"Workflow Core: Worker \u00b6 The Role of a Worker \u00b6 Worker is a protocol (in Swift) and interface (in Kotlin) that defines an asynchronous task that can be performed by a Workflow . Worker s only emit outputs, they do not have a Rendering type. They are similar to child workflows with Void / Unit rendering types. A workflow can ask the infrastructure to await the result of a worker by passing that worker to the RenderContext.runningWorker method within a call to the render method. A workflow can handle outputs from a Worker . Workers provide a declarative window into the imperative world \u00b6 As nice as it is to write declarative code, real apps need to interact with imperative APIs. Workers allow wrapping imperative APIs so that Workflows can interact with them in a declarative fashion. Instead of making imperative \u201cstart this, do that, now stop\u201d calls, a Workflow can say \u201cI declare that this task should now be running\u201d and let the infrastructure worry about ensuring the task is actually started when necessary, continues running if it was already in flight, and torn down when it\u2019s not needed anymore. Workers can perform side effects \u00b6 Unlike workflows\u2019 render method, which can be called many times and must be idempotent, workers are started and then ran until completion (or cancellation) \u2013 independently of how many times the workflow running them is actually rendered. This means that side effects that should be performed only once when a workflow enters a particular state, for example, should be placed into a Worker that the workflow runs while in that state. Workers are cold reactive streams \u00b6 Workers are effectively simple wrappers around asynchronous streams with explicit equivalence. In Swift, workers are backed by ReactiveSwift SignalProducer s . In Kotlin, they\u2019re backed by Kotlin Flow s . They are also easily derived from Reactive Streams Publishers , including RxJava Observable , Flowable , or Single instances. Worker subscriptions are managed automatically \u00b6 While Workers are backed by reactive streams with library-specific subscription APIs, you never actually subscribe directly to a worker yourself. Instead, a Workflow asks the infrastructure to run a worker, and the infrastructure will take care of initializing and tearing down the subscription as appropriate \u2013 much like how child workflows\u2019 lifetimes are automatically managed by the runtime. This makes it impossible to accidentally leak a subscription to a worker. Workers manage their own internal state \u00b6 Unlike Workflows, which are effectively collections of functions defining state transitions, Workers represent long-running tasks. For example, Workers commonly execute network requests. The worker\u2019s stream will open a socket and, either blocking on a background thread or asynchronously, read from that socket and eventually emit data to the workflow that is running it. Workers define their own equivalence \u00b6 Since Workers represent ongoing tasks, the infrastructure needs to be able to tell when two workers represent the same task (so it doesn\u2019t perform the task twice), or when a worker has changed between render passes such that it needs to be torn down and re-started for the new work. For these reasons, any time a workflow requests that a worker be run in sequential render passes, it is asked to compare itself with its last instance and determine if they are equivalent. In Swift, this is determined by the Worker isEquivalent:to: method. Worker s that conform to Equatable will automatically get an isEquivalent:to: method based on the Equatable implementation. In Kotlin, the Worker interface defines the doesSameWorkAs method which is passed the previous worker. Kotlin: Why don\u2019t Workers use equals ? Worker equivalence is a key part of the Worker API. The default implementation of equals , which just compares object identity, is almost always incorrect for workers. Defining a separate method forces implementers to think about how equivalence is defined. Workers are lifecycle-aware \u00b6 Workers are aware of when they\u2019re started (just like Workflows), but they are also aware of when they are torn down. This makes them handy for managing resources as well.","title":"Worker"},{"location":"userguide/core-worker/#workflow-core-worker","text":"","title":"Workflow Core: Worker"},{"location":"userguide/core-worker/#the-role-of-a-worker","text":"Worker is a protocol (in Swift) and interface (in Kotlin) that defines an asynchronous task that can be performed by a Workflow . Worker s only emit outputs, they do not have a Rendering type. They are similar to child workflows with Void / Unit rendering types. A workflow can ask the infrastructure to await the result of a worker by passing that worker to the RenderContext.runningWorker method within a call to the render method. A workflow can handle outputs from a Worker .","title":"The Role of a Worker"},{"location":"userguide/core-worker/#workers-provide-a-declarative-window-into-the-imperative-world","text":"As nice as it is to write declarative code, real apps need to interact with imperative APIs. Workers allow wrapping imperative APIs so that Workflows can interact with them in a declarative fashion. Instead of making imperative \u201cstart this, do that, now stop\u201d calls, a Workflow can say \u201cI declare that this task should now be running\u201d and let the infrastructure worry about ensuring the task is actually started when necessary, continues running if it was already in flight, and torn down when it\u2019s not needed anymore.","title":"Workers provide a declarative window into the imperative world"},{"location":"userguide/core-worker/#workers-can-perform-side-effects","text":"Unlike workflows\u2019 render method, which can be called many times and must be idempotent, workers are started and then ran until completion (or cancellation) \u2013 independently of how many times the workflow running them is actually rendered. This means that side effects that should be performed only once when a workflow enters a particular state, for example, should be placed into a Worker that the workflow runs while in that state.","title":"Workers can perform side effects"},{"location":"userguide/core-worker/#workers-are-cold-reactive-streams","text":"Workers are effectively simple wrappers around asynchronous streams with explicit equivalence. In Swift, workers are backed by ReactiveSwift SignalProducer s . In Kotlin, they\u2019re backed by Kotlin Flow s . They are also easily derived from Reactive Streams Publishers , including RxJava Observable , Flowable , or Single instances.","title":"Workers are cold reactive streams"},{"location":"userguide/core-worker/#worker-subscriptions-are-managed-automatically","text":"While Workers are backed by reactive streams with library-specific subscription APIs, you never actually subscribe directly to a worker yourself. Instead, a Workflow asks the infrastructure to run a worker, and the infrastructure will take care of initializing and tearing down the subscription as appropriate \u2013 much like how child workflows\u2019 lifetimes are automatically managed by the runtime. This makes it impossible to accidentally leak a subscription to a worker.","title":"Worker subscriptions are managed automatically"},{"location":"userguide/core-worker/#workers-manage-their-own-internal-state","text":"Unlike Workflows, which are effectively collections of functions defining state transitions, Workers represent long-running tasks. For example, Workers commonly execute network requests. The worker\u2019s stream will open a socket and, either blocking on a background thread or asynchronously, read from that socket and eventually emit data to the workflow that is running it.","title":"Workers manage their own internal state"},{"location":"userguide/core-worker/#workers-define-their-own-equivalence","text":"Since Workers represent ongoing tasks, the infrastructure needs to be able to tell when two workers represent the same task (so it doesn\u2019t perform the task twice), or when a worker has changed between render passes such that it needs to be torn down and re-started for the new work. For these reasons, any time a workflow requests that a worker be run in sequential render passes, it is asked to compare itself with its last instance and determine if they are equivalent. In Swift, this is determined by the Worker isEquivalent:to: method. Worker s that conform to Equatable will automatically get an isEquivalent:to: method based on the Equatable implementation. In Kotlin, the Worker interface defines the doesSameWorkAs method which is passed the previous worker. Kotlin: Why don\u2019t Workers use equals ? Worker equivalence is a key part of the Worker API. The default implementation of equals , which just compares object identity, is almost always incorrect for workers. Defining a separate method forces implementers to think about how equivalence is defined.","title":"Workers define their own equivalence"},{"location":"userguide/core-worker/#workers-are-lifecycle-aware","text":"Workers are aware of when they\u2019re started (just like Workflows), but they are also aware of when they are torn down. This makes them handy for managing resources as well.","title":"Workers are lifecycle-aware"},{"location":"userguide/core-workflow/","text":"Workflow Core: Workflow \u00b6 The Role of a Workflow \u00b6 Workflow is a protocol (in Swift) and interface (in Kotlin) that defines the contract for a single node in the workflow hierarchy. Swift public protocol Workflow : AnyWorkflowConvertible { associatedtype State associatedtype Output = Never associatedtype Rendering func makeInitialState () -> State func workflowDidChange ( from previousWorkflow : Self , state : inout State ) func render ( state : State , context : RenderContext < Self >) -> Rendering } Kotlin abstract class StatefulWorkflow < in PropsT , StateT , out OutputT : Any , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > { abstract fun initialState ( props : PropsT , initialSnapshot : Snapshot? ): StateT open fun onPropsChanged ( old : PropsT , new : PropsT , state : StateT ): StateT = state abstract fun render ( props : PropsT , state : StateT , context : RenderContext < StateT , OutputT > ): RenderingT abstract fun snapshotState ( state : StateT ): Snapshot } Swift: What is AnyWorkflowConvertible ? When a protocol has an associated Self type, Swift requires the use of a type-erasing wrapper to store references to instances of that protocol. AnyWorkflow is such a wrapper for Workflow . AnyWorkflowConvertible is a protocol with a single method that returns an AnyWorkflow . It is useful as a base type because it allows instances of Workflow to be used directly by any code that requires the type-erased AnyWorkflow . Kotlin: StatefulWorkflow vs Workflow It is a common practice in Kotlin to divide types into two parts: an interface for public API, and a class for private implementation. The Workflow library defines a Workflow interface, which should be used as the type of properties and parameters by code that needs to refer to a particular Workflow interface. The Workflow interface contains a single method, which simply returns a StatefulWorkflow \u2013 a Workflow can be described as \u201canything that can be expressed as a StatefulWorkflow .\u201d The library also defines two abstract classes which define the contract for workflows and should be subclassed to implement your workflows: StatefulWorkflow should be subclassed to implement Workflows that have private state . StatelessWorkflow should be subclassed to implement Workflows that don\u2019t have any private state. See Stateless Workflows . Workflows have several responsibilities: Workflows have state \u00b6 Once a Workflow has been started, it always operates in the context of some state. This state is divided into two parts: private state, which only the Workflow implementation itself knows about, which is defined by the State type, and properties (or \u201cprops\u201d), which is passed to the Workflow from its parent (more on hierarchical workflows below). Private state \u00b6 Every Workflow implementation defines a State type to maintain any necessary state while the workflow is running. For example, a tic-tac-toe game might have a state like this: Swift struct State { enum Player { case x case o } enum Space { case unfilled filled ( Player ) } // 3 rows * 3 columns = 9 spaces var spaces : [ Space ] = Array ( repeating : . unfilled , count : 9 ) var currentTurn : Player = . x } Kotlin data class State ( // 3 rows * 3 columns = 9 spaces val spaces : List < Space > = List ( 9 ) { Unfilled }, val currentTurn : Player = X ) { enum class Player { X , O } sealed class Space { object Unfilled : Space () data class Filled ( val player : Player ) : Space () } } When the workflow is first started, it is queried for an initial state value. From that point forward, the workflow may advance to a new state as the result of events occurring from various sources (which will be covered below). Stateless Workflows If a workflow does not have any private state, it is often referred to as a \u201cstateless workflow\u201d. A stateless Workflow is simply a Workflow that has a Void or Unit State type. See more below . Props \u00b6 Every Workflow implementation also defines data that is passed into it. The Workflow is not able to modify this state itself, but it may change between render passes. This public state is called Props . In Swift, the props are simply defined as properties of the struct implementing Workflow itself. In Kotlin, the Workflow interface defines a separate PropsT type parameter. (This additional type parameter is necessary due to Kotlin\u2019s lack of the Self type that Swift workflow\u2019s workflowDidChange method relies upon.) Swift TK Kotlin data class Props ( val playerXName : String val playerOName : String ) Workflows are advanced by WorkflowAction s \u00b6 Any time something happens that should advance a workflow \u2013 a UI event, a network response, a child\u2019s output event \u2013 actions are used to perform the update. For example, a workflow may respond to UI events by mapping those events into a type conforming to/implementing WorkflowAction . These types implement the logic to advance a workflow by: Advancing to a new state (Optionally) emitting an output event up the tree. WorkflowAction s are typically defined as enums with associated types (Swift) or sealed classes (Kotlin), and can include data from the event \u2013 for example, the ID of the item in the list that was clicked. Side effects such as logging button clicks to an analytics framework are also typically performed in actions. If you\u2019re familiar with React/Redux, WorkflowAction s are essentially reducers. Workflows can emit output events up the hierarchy to their parent \u00b6 When a workflow is advanced by an action, an optional output event can be sent up the workflow hierarchy. This is the opportunity for a workflow to notify its parent that something has happened (and the parent\u2019s opportunity to respond to that event by dispatching its own action, continuing up the tree as long as output events are emitted). Workflows produce an external representation of their state via Rendering \u00b6 Immediately after starting up, or after a state transition occurs, a workflow will have its render method called. This method is responsible for creating and returning a value of type Rendering . You can think of Rendering as the \u201cexternal published state\u201d of the workflow, and the render function as a map of ( Props + State + childrens\u2019 Rendering s) -> Rendering . While a workflow\u2019s internal state may contain more detailed or comprehensive state, the Rendering (external state) is a type that is useful outside of the workflow. Because a workflow\u2019s render method may be called by infrastructure for a variety of reasons, it\u2019s important to not perform side effects when rendering \u2014 render methods must be idempotent. Event-based side effects should use Actions and state-based side effects should use Workers. When building an interactive application, the Rendering type is commonly (but not always) a view model that will drive the UI layer. Workflows can respond to UI events \u00b6 The RenderContext that is passed into render as the last parameter provides some useful tools to assist in creating the Rendering value. If a workflow is producing a view model, it is common to need an event handler to respond to UI events. The RenderContext has API to create an event handler, called a Sink , that when called will advance the workflow by dispatching an action back to the workflow (for more on actions, see below ). Swift func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : \"A nice title\" , onTap : { sink . send ( Action . refreshButtonTapped ) } } Kotlin TK Workflows form a hierarchy (they may have children) \u00b6 As they produce a Rendering value, it is common for workflows to delegate some portion of that work to a child workflow . This is done via the RenderContext that is passed into the render method. In order to delegate to a child, the parent calls renderChild on the context, with the child workflow as the single argument. The infrastructure will spin up the child workflow (including initializing its initial state) if this is the first time this child has been used, or, if the child was also used on the previous render pass, the existing child will be updated. Either way, render will immediately be called on the child (by the Workflow infrastructure), and the resulting child\u2019s Rendering value will be returned to the parent. This allows a parent to return complex Rendering types (such as a view model representing the entire UI state of an application) without needing to model all of that complexity within a single workflow. Workflow Identity The Workflow infrastructure automatically detects the first time and the last subsequent time you\u2019ve asked to render a child workflow, and will automatically initialize the child and clean it up. In both Swift and Kotlin, this is done using the workflow\u2019s concrete type. Both languages use reflection to do this comparison (e.g. in Kotlin, the workflows\u2019 KClass es are compared). It is an error to render workflows of the same type more than once in the same render pass. Since type is used for workflow identity, the child rendering APIs take an optional string key to differentiate between multiple child workflows of the same type. Workflows can subscribe to external event sources \u00b6 If a workflow needs to respond to some external event source (e.g. push notifications), the workflow can ask the context to listen to those events from within the render method. Swift vs Kotlin In the Swift library, there is a special API for subscribing to hot streams ( Signal in ReactiveSwift). The Kotlin library does not have any special API for subscribing to hot streams (channels), though it does have extension methods to convert ReceiveChannel s , and RxJava Flowable s and Observables , to Worker s . The reason for this discrepancy is simply that we don\u2019t have any uses of channels yet in production, and so we\u2019ve decided to keep the API simpler. If we start using channels in the future, it may make sense to make subscribing to them a first-class API like in Swift. Workflows can perform asynchronous tasks (Workers) \u00b6 Workers are very similar in concept to child workflows. Unlike child workflows, however, workers do not have a Rendering type; they only exist to perform a single asynchronous task before sending zero or more output events back up the tree to their parent. For more information about workers, see the Worker section below. Workflows can be saved to and restored from a snapshot (Kotlin only) \u00b6 On every render pass, each workflow is asked to create a \u201csnapshot\u201d of its state \u2013 a lazily-produced serialization of the workflow\u2019s State as a binary blob. These Snapshot s are aggregated into a single Snapshot for the entire workflow tree and emitted along with the root workflow\u2019s Rendering . When the workflow runtime is started, it can be passed an optional Snapshot to restore the tree from. When non-null, the root workflow\u2019s snapshot is extracted and passed to the root workflow\u2019s initialState . The workflow can choose to either ignore the snapshot or use it to restore its State . On the first render pass, if the root workflow renders any children that were also being rendered when the snapshot was taken, those children\u2019s snapshots are also extracted from the aggregate and used to initialize their states. !!! faq Why don\u2019t Swift Workflows support snapshotting? Snapshotting was built into Kotlin workflows specifically to support Android\u2019s app lifecycle, which requires apps to serialize their current state before being backgrounded so that they can be restored in case the system needs to kill the hosting process. iOS apps don\u2019t have this requirement, so the Swift library doesn\u2019t need to support it.","title":"Workflow"},{"location":"userguide/core-workflow/#workflow-core-workflow","text":"","title":"Workflow Core: Workflow"},{"location":"userguide/core-workflow/#the-role-of-a-workflow","text":"Workflow is a protocol (in Swift) and interface (in Kotlin) that defines the contract for a single node in the workflow hierarchy. Swift public protocol Workflow : AnyWorkflowConvertible { associatedtype State associatedtype Output = Never associatedtype Rendering func makeInitialState () -> State func workflowDidChange ( from previousWorkflow : Self , state : inout State ) func render ( state : State , context : RenderContext < Self >) -> Rendering } Kotlin abstract class StatefulWorkflow < in PropsT , StateT , out OutputT : Any , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > { abstract fun initialState ( props : PropsT , initialSnapshot : Snapshot? ): StateT open fun onPropsChanged ( old : PropsT , new : PropsT , state : StateT ): StateT = state abstract fun render ( props : PropsT , state : StateT , context : RenderContext < StateT , OutputT > ): RenderingT abstract fun snapshotState ( state : StateT ): Snapshot } Swift: What is AnyWorkflowConvertible ? When a protocol has an associated Self type, Swift requires the use of a type-erasing wrapper to store references to instances of that protocol. AnyWorkflow is such a wrapper for Workflow . AnyWorkflowConvertible is a protocol with a single method that returns an AnyWorkflow . It is useful as a base type because it allows instances of Workflow to be used directly by any code that requires the type-erased AnyWorkflow . Kotlin: StatefulWorkflow vs Workflow It is a common practice in Kotlin to divide types into two parts: an interface for public API, and a class for private implementation. The Workflow library defines a Workflow interface, which should be used as the type of properties and parameters by code that needs to refer to a particular Workflow interface. The Workflow interface contains a single method, which simply returns a StatefulWorkflow \u2013 a Workflow can be described as \u201canything that can be expressed as a StatefulWorkflow .\u201d The library also defines two abstract classes which define the contract for workflows and should be subclassed to implement your workflows: StatefulWorkflow should be subclassed to implement Workflows that have private state . StatelessWorkflow should be subclassed to implement Workflows that don\u2019t have any private state. See Stateless Workflows . Workflows have several responsibilities:","title":"The Role of a Workflow"},{"location":"userguide/core-workflow/#workflows-have-state","text":"Once a Workflow has been started, it always operates in the context of some state. This state is divided into two parts: private state, which only the Workflow implementation itself knows about, which is defined by the State type, and properties (or \u201cprops\u201d), which is passed to the Workflow from its parent (more on hierarchical workflows below).","title":"Workflows have state"},{"location":"userguide/core-workflow/#private-state","text":"Every Workflow implementation defines a State type to maintain any necessary state while the workflow is running. For example, a tic-tac-toe game might have a state like this: Swift struct State { enum Player { case x case o } enum Space { case unfilled filled ( Player ) } // 3 rows * 3 columns = 9 spaces var spaces : [ Space ] = Array ( repeating : . unfilled , count : 9 ) var currentTurn : Player = . x } Kotlin data class State ( // 3 rows * 3 columns = 9 spaces val spaces : List < Space > = List ( 9 ) { Unfilled }, val currentTurn : Player = X ) { enum class Player { X , O } sealed class Space { object Unfilled : Space () data class Filled ( val player : Player ) : Space () } } When the workflow is first started, it is queried for an initial state value. From that point forward, the workflow may advance to a new state as the result of events occurring from various sources (which will be covered below). Stateless Workflows If a workflow does not have any private state, it is often referred to as a \u201cstateless workflow\u201d. A stateless Workflow is simply a Workflow that has a Void or Unit State type. See more below .","title":"Private state"},{"location":"userguide/core-workflow/#props","text":"Every Workflow implementation also defines data that is passed into it. The Workflow is not able to modify this state itself, but it may change between render passes. This public state is called Props . In Swift, the props are simply defined as properties of the struct implementing Workflow itself. In Kotlin, the Workflow interface defines a separate PropsT type parameter. (This additional type parameter is necessary due to Kotlin\u2019s lack of the Self type that Swift workflow\u2019s workflowDidChange method relies upon.) Swift TK Kotlin data class Props ( val playerXName : String val playerOName : String )","title":"Props"},{"location":"userguide/core-workflow/#workflows-are-advanced-by-workflowactions","text":"Any time something happens that should advance a workflow \u2013 a UI event, a network response, a child\u2019s output event \u2013 actions are used to perform the update. For example, a workflow may respond to UI events by mapping those events into a type conforming to/implementing WorkflowAction . These types implement the logic to advance a workflow by: Advancing to a new state (Optionally) emitting an output event up the tree. WorkflowAction s are typically defined as enums with associated types (Swift) or sealed classes (Kotlin), and can include data from the event \u2013 for example, the ID of the item in the list that was clicked. Side effects such as logging button clicks to an analytics framework are also typically performed in actions. If you\u2019re familiar with React/Redux, WorkflowAction s are essentially reducers.","title":"Workflows are advanced by WorkflowActions"},{"location":"userguide/core-workflow/#workflows-can-emit-output-events-up-the-hierarchy-to-their-parent","text":"When a workflow is advanced by an action, an optional output event can be sent up the workflow hierarchy. This is the opportunity for a workflow to notify its parent that something has happened (and the parent\u2019s opportunity to respond to that event by dispatching its own action, continuing up the tree as long as output events are emitted).","title":"Workflows can emit output events up the hierarchy to their parent"},{"location":"userguide/core-workflow/#workflows-produce-an-external-representation-of-their-state-via-rendering","text":"Immediately after starting up, or after a state transition occurs, a workflow will have its render method called. This method is responsible for creating and returning a value of type Rendering . You can think of Rendering as the \u201cexternal published state\u201d of the workflow, and the render function as a map of ( Props + State + childrens\u2019 Rendering s) -> Rendering . While a workflow\u2019s internal state may contain more detailed or comprehensive state, the Rendering (external state) is a type that is useful outside of the workflow. Because a workflow\u2019s render method may be called by infrastructure for a variety of reasons, it\u2019s important to not perform side effects when rendering \u2014 render methods must be idempotent. Event-based side effects should use Actions and state-based side effects should use Workers. When building an interactive application, the Rendering type is commonly (but not always) a view model that will drive the UI layer.","title":"Workflows produce an external representation of their state via Rendering"},{"location":"userguide/core-workflow/#workflows-can-respond-to-ui-events","text":"The RenderContext that is passed into render as the last parameter provides some useful tools to assist in creating the Rendering value. If a workflow is producing a view model, it is common to need an event handler to respond to UI events. The RenderContext has API to create an event handler, called a Sink , that when called will advance the workflow by dispatching an action back to the workflow (for more on actions, see below ). Swift func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : \"A nice title\" , onTap : { sink . send ( Action . refreshButtonTapped ) } } Kotlin TK","title":"Workflows can respond to UI events"},{"location":"userguide/core-workflow/#workflows-form-a-hierarchy-they-may-have-children","text":"As they produce a Rendering value, it is common for workflows to delegate some portion of that work to a child workflow . This is done via the RenderContext that is passed into the render method. In order to delegate to a child, the parent calls renderChild on the context, with the child workflow as the single argument. The infrastructure will spin up the child workflow (including initializing its initial state) if this is the first time this child has been used, or, if the child was also used on the previous render pass, the existing child will be updated. Either way, render will immediately be called on the child (by the Workflow infrastructure), and the resulting child\u2019s Rendering value will be returned to the parent. This allows a parent to return complex Rendering types (such as a view model representing the entire UI state of an application) without needing to model all of that complexity within a single workflow. Workflow Identity The Workflow infrastructure automatically detects the first time and the last subsequent time you\u2019ve asked to render a child workflow, and will automatically initialize the child and clean it up. In both Swift and Kotlin, this is done using the workflow\u2019s concrete type. Both languages use reflection to do this comparison (e.g. in Kotlin, the workflows\u2019 KClass es are compared). It is an error to render workflows of the same type more than once in the same render pass. Since type is used for workflow identity, the child rendering APIs take an optional string key to differentiate between multiple child workflows of the same type.","title":"Workflows form a hierarchy (they may have children)"},{"location":"userguide/core-workflow/#workflows-can-subscribe-to-external-event-sources","text":"If a workflow needs to respond to some external event source (e.g. push notifications), the workflow can ask the context to listen to those events from within the render method. Swift vs Kotlin In the Swift library, there is a special API for subscribing to hot streams ( Signal in ReactiveSwift). The Kotlin library does not have any special API for subscribing to hot streams (channels), though it does have extension methods to convert ReceiveChannel s , and RxJava Flowable s and Observables , to Worker s . The reason for this discrepancy is simply that we don\u2019t have any uses of channels yet in production, and so we\u2019ve decided to keep the API simpler. If we start using channels in the future, it may make sense to make subscribing to them a first-class API like in Swift.","title":"Workflows can subscribe to external event sources"},{"location":"userguide/core-workflow/#workflows-can-perform-asynchronous-tasks-workers","text":"Workers are very similar in concept to child workflows. Unlike child workflows, however, workers do not have a Rendering type; they only exist to perform a single asynchronous task before sending zero or more output events back up the tree to their parent. For more information about workers, see the Worker section below.","title":"Workflows can perform asynchronous tasks (Workers)"},{"location":"userguide/core-workflow/#workflows-can-be-saved-to-and-restored-from-a-snapshot-kotlin-only","text":"On every render pass, each workflow is asked to create a \u201csnapshot\u201d of its state \u2013 a lazily-produced serialization of the workflow\u2019s State as a binary blob. These Snapshot s are aggregated into a single Snapshot for the entire workflow tree and emitted along with the root workflow\u2019s Rendering . When the workflow runtime is started, it can be passed an optional Snapshot to restore the tree from. When non-null, the root workflow\u2019s snapshot is extracted and passed to the root workflow\u2019s initialState . The workflow can choose to either ignore the snapshot or use it to restore its State . On the first render pass, if the root workflow renders any children that were also being rendered when the snapshot was taken, those children\u2019s snapshots are also extracted from the aggregate and used to initialize their states. !!! faq Why don\u2019t Swift Workflows support snapshotting? Snapshotting was built into Kotlin workflows specifically to support Android\u2019s app lifecycle, which requires apps to serialize their current state before being backgrounded so that they can be restored in case the system needs to kill the hosting process. iOS apps don\u2019t have this requirement, so the Swift library doesn\u2019t need to support it.","title":"Workflows can be saved to and restored from a snapshot (Kotlin only)"},{"location":"userguide/implementation/","text":"Implementation Notes \u00b6 Work in progress\u2026 Swift \u00b6 The Render loop \u00b6 Initial pass \u00b6 The root of your workflow hierarchy gets put into a WorkflowHost (if you\u2019re using ContainerViewController this is created for you). As part of its initializer, WorkflowHost creates a WorkflowNode that wraps the given root Workflow (and keeps track of the Workflow \u2018s State ). It then calls render() on the node: // WorkflowHost public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) { self . debugger = debugger self . rootNode = WorkflowNode ( workflow : workflow ) // 1. Create the node self . mutableRendering = MutableProperty ( self . rootNode . render ()) // 2. Call render() WorkflowNode contains a SubtreeManager , whose primary purpose is to manage child workflows (more on this later). When render() gets invoked on the node, it calls render on the SubtreeManager and passes a closure that takes a RenderContext and returns a Rendering for the Workflow associated with the node. // WorkflowNode func render () -> WorkflowType . Rendering { return subtreeManager . render { context in return workflow . render ( state : state , context : context ) } } The SubtreeManager instantiates a RenderContext and invokes the closure that was passed in. This last step generates the Rendering . This Rendering then gets passed back up the call stack until it reaches the WorkflowHost . Composition \u00b6 In cases where a Workflow has child Workflow s, the render sequence is similar. The [tutorial] (../tutorial/building-a-workflow/#the-render-context) goes through this in more detail. Essentially, a Workflow containing child Workflow s calls render(context:key:outputMap:) on each child Workflow and passes in the RenderContext . The context does some bookkeeping for the child Workflow (creating or updating a ChildWorkflow<T> ) and then calls render() . ChildWorkflow<T>.render() calls render() on its WorkflowNode and we recurse back to step 2.","title":"Under the Hood: Implementation Notes"},{"location":"userguide/implementation/#implementation-notes","text":"Work in progress\u2026","title":"Implementation Notes"},{"location":"userguide/implementation/#swift","text":"","title":"Swift"},{"location":"userguide/implementation/#the-render-loop","text":"","title":"The Render loop"},{"location":"userguide/implementation/#initial-pass","text":"The root of your workflow hierarchy gets put into a WorkflowHost (if you\u2019re using ContainerViewController this is created for you). As part of its initializer, WorkflowHost creates a WorkflowNode that wraps the given root Workflow (and keeps track of the Workflow \u2018s State ). It then calls render() on the node: // WorkflowHost public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) { self . debugger = debugger self . rootNode = WorkflowNode ( workflow : workflow ) // 1. Create the node self . mutableRendering = MutableProperty ( self . rootNode . render ()) // 2. Call render() WorkflowNode contains a SubtreeManager , whose primary purpose is to manage child workflows (more on this later). When render() gets invoked on the node, it calls render on the SubtreeManager and passes a closure that takes a RenderContext and returns a Rendering for the Workflow associated with the node. // WorkflowNode func render () -> WorkflowType . Rendering { return subtreeManager . render { context in return workflow . render ( state : state , context : context ) } } The SubtreeManager instantiates a RenderContext and invokes the closure that was passed in. This last step generates the Rendering . This Rendering then gets passed back up the call stack until it reaches the WorkflowHost .","title":"Initial pass"},{"location":"userguide/implementation/#composition","text":"In cases where a Workflow has child Workflow s, the render sequence is similar. The [tutorial] (../tutorial/building-a-workflow/#the-render-context) goes through this in more detail. Essentially, a Workflow containing child Workflow s calls render(context:key:outputMap:) on each child Workflow and passes in the RenderContext . The context does some bookkeeping for the child Workflow (creating or updating a ChildWorkflow<T> ) and then calls render() . ChildWorkflow<T>.render() calls render() on its WorkflowNode and we recurse back to step 2.","title":"Composition"},{"location":"userguide/motivation/","text":"Motivation & Architectural Concepts \u00b6 Coming soon!","title":"Motivation & Architectural Concepts"},{"location":"userguide/motivation/#motivation-architectural-concepts","text":"Coming soon!","title":"Motivation &amp; Architectural Concepts"},{"location":"userguide/testing-concepts/","text":"Workflow Testing \u00b6 Coming soon!","title":"Workflow Testing"},{"location":"userguide/testing-concepts/#workflow-testing","text":"Coming soon!","title":"Workflow Testing"},{"location":"userguide/ui-concepts/","text":"Workflow UI \u00b6 Coming soon!","title":"Workflow UI"},{"location":"userguide/ui-concepts/#workflow-ui","text":"Coming soon!","title":"Workflow UI"}]}