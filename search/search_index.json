{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Square Workflow \u00b6 A unidirectional data flow library for Kotlin and Swift, emphasizing: Strong support for state-machine driven UI and navigation. Composition and scaling. Effortless separation of business and UI concerns. This project is currently in development and the API subject to breaking changes without notice. Follow Square\u2019s engineering blog, The Corner , to see when this project becomes stable. While the API is not yet stable, this code is in heavy production use in Android and iOS apps with millions of users. Using Workflows in your project \u00b6 Swift \u00b6 See the square/workflow-swift repository. Kotlin \u00b6 See the square/workflow-kotlin repository. Resources \u00b6 Square Workflow \u2013 Droidcon NYC 2019 ( slides ) SF Android GDG @ Square 2019 - Hello Workflow (live coding) Android Dialogs 5-part Coding Series 1 , 2 , 3 , 4 , 5 Reactive Workflows a Year Later \u2013 Droidcon NYC 2018 The Reactive Workflow Pattern \u2013 Fragmented Podcast The Reactive Workflow Pattern Update \u2013 Droidcon SF 2017 The Rx Workflow Pattern \u2013 Droidcon NYC 2017 ( slides ) Support & Contact \u00b6 Workflow maintainers hang out in the #squarelibraries channel on the Kotlin Slack . Releasing and Deploying \u00b6 See RELEASING.md . License \u00b6 Copyright 2019 Square Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#square-workflow","text":"A unidirectional data flow library for Kotlin and Swift, emphasizing: Strong support for state-machine driven UI and navigation. Composition and scaling. Effortless separation of business and UI concerns. This project is currently in development and the API subject to breaking changes without notice. Follow Square\u2019s engineering blog, The Corner , to see when this project becomes stable. While the API is not yet stable, this code is in heavy production use in Android and iOS apps with millions of users.","title":"Square Workflow"},{"location":"#using-workflows-in-your-project","text":"","title":"Using Workflows in your project"},{"location":"#swift","text":"See the square/workflow-swift repository.","title":"Swift"},{"location":"#kotlin","text":"See the square/workflow-kotlin repository.","title":"Kotlin"},{"location":"#resources","text":"Square Workflow \u2013 Droidcon NYC 2019 ( slides ) SF Android GDG @ Square 2019 - Hello Workflow (live coding) Android Dialogs 5-part Coding Series 1 , 2 , 3 , 4 , 5 Reactive Workflows a Year Later \u2013 Droidcon NYC 2018 The Reactive Workflow Pattern \u2013 Fragmented Podcast The Reactive Workflow Pattern Update \u2013 Droidcon SF 2017 The Rx Workflow Pattern \u2013 Droidcon NYC 2017 ( slides )","title":"Resources"},{"location":"#support-contact","text":"Workflow maintainers hang out in the #squarelibraries channel on the Kotlin Slack .","title":"Support &amp; Contact"},{"location":"#releasing-and-deploying","text":"See RELEASING.md .","title":"Releasing and Deploying"},{"location":"#license","text":"Copyright 2019 Square Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"CHANGELOG/","text":"Changelog \u00b6 You can find the changelogs for the library in the respective language repositories: Kotlin Swift","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"You can find the changelogs for the library in the respective language repositories: Kotlin Swift","title":"Changelog"},{"location":"CODE_OF_CONDUCT/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure ourcommunity continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure ourcommunity continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"CODE_OF_CONDUCT/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"CODE_OF_CONDUCT/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"CODE_OF_CONDUCT/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"CODE_OF_CONDUCT/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 If you would like to contribute code to Workflow you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . If you\u2019re using IntelliJ IDEA, we use Square\u2019s code style definitions . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"If you would like to contribute code to Workflow you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . If you\u2019re using IntelliJ IDEA, we use Square\u2019s code style definitions . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"RELEASING/","text":"Releasing workflow \u00b6 Deploying the documentation website \u00b6 Official Workflow documentation lives at https://square.github.io/workflow . The website content consists of three parts: Markdown documentation: Lives in the docs/ folder, and consists of a set of hand-written Markdown files that document high-level concepts. The static site generator mkdocs (with Material theming) is used to convert the Markdown to static, styled HTML. Kotlin API reference: Kdoc embedded in Kotlin source files is converted to GitHub-flavored Markdown by Dokka and then included in the statically-generated website. Swift API reference: Markup comments from Swift files are converted Markdown by Sourcedocs and then included in the statically-generated website. Note: The documentation site is automatically built and deployed whenever a version tag is pushed. You only need these steps if you want to work on the site locally. Setting up the site generators \u00b6 If you\u2019ve already done this, you can skip to Deploying the website to production below. Kotlin: Dokka \u00b6 Dokka runs as a Gradle plugin, so you need to be able to build the Kotlin source with Gradle, but that\u2019s it. To generate the docs manually, run: cd kotlin ./gradlew dokka Swift: Sourcedocs \u00b6 Sourcedocs generates a Markdown site from Swift files. You need Ruby, rubygems, bundler (2.x), Xcode 10.2+, CocoaPods, and of course Sourcedocs itself, to run it. Assuming you\u2019ve already got Xcode, Ruby, and rubygems set up, install the rest of the dependencies: gem install bundler cocoapods brew install sourcedocs You will also need a checkout of the Swift repo: git clone https://github.com/square/workflow-swift.git cd workflow-swift Then generate an Xcode project before running Sourcedocs: cd Samples/SampleApp/ bundle exec pod install # If this is your first time running CocoaPods, that will fail and you'll need to run this instead: #bundle exec pod install --repo-update You can manually generate the docs to verify everything is working correctly by running: #cd Samples/SampleApp/ sourcedocs generate -- -scheme Workflow -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowUI -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowTesting -workspace SampleApp.xcworkspace Note that currently sourcedocs only supports Xcode 10, if you run it with Xcode 11 you might see an error about Catalyst and only empty READMEs will get generated. mkdocs \u00b6 Mkdocs is written in Python, so you\u2019ll need Python 3 and pip in order to run it. Assuming those are set up, run: pip install -r requirements.txt Generate the site manually with: mkdocs build While you\u2019re working on the documentation files, you can run the site locally with: mkdocs serve Deploying the website to production \u00b6 Note: The documentation site is automatically built and deployed by a Github Workflow whenever a version tag is pushed. You only need these steps if you want to publish the site manually. Before deploying the website for real, you need to export our Google Analytics key in an environment variable so that it will get added to the HTML. Get the key from one of the project maintainers, then add the following to your .bashrc and re-source it: export WORKFLOW_GOOGLE_ANALYTICS_KEY = UA-__________-1 Now you\u2019re ready to publish the site! Just choose a tag or SHA to deploy from, and run: ./deploy_website.sh TAG_OR_SHA # For example: #./deploy_website.sh v0.18.0 This will clone the repo to a temporary directory, checkout the right SHA, build Kotlin and Swift API docs, generate HTML, and push the newly-generated content to the gh-pages branch on GitHub. Validating Markdown \u00b6 Since all of our high-level documentation is written in Markdown, we run a linter in CI to ensure we use consistent formatting. Lint errors will fail your PR builds, so to run locally, install markdownlint : gem install mdl Run the linter using the lint_docs.sh : ./lint_docs.sh Rules can be configured by editing .markdownlint.rb . Kotlin Notes \u00b6 Development \u00b6 To build and install the current version to your local Maven repository ( ~/.m2 ), run: ./gradlew clean installArchives Deploying \u00b6 Configuration \u00b6 In order to deploy artifacts to a Maven repository, you\u2019ll need to set 4 properties in your private Gradle properties file ( ~/.gradle/gradle.properties ): RELEASE_REPOSITORY_URL=<url of release repository> SNAPSHOT_REPOSITORY_URL=<url of snapshot repository SONATYPE_NEXUS_USERNAME=<username> SONATYPE_NEXUS_PASSWORD=<password> Snapshot Releases \u00b6 Double-check that gradle.properties correctly contains the -SNAPSHOT suffix, then upload snapshot artifacts to Sonatype just like you would for a production release: ./gradlew clean build && ./gradlew uploadArchives --no-parallel --no-daemon You can verify the artifacts are available by visiting https://oss.sonatype.org/content/repositories/snapshots/com/squareup/workflow/ .","title":"Releasing workflow"},{"location":"RELEASING/#releasing-workflow","text":"","title":"Releasing workflow"},{"location":"RELEASING/#deploying-the-documentation-website","text":"Official Workflow documentation lives at https://square.github.io/workflow . The website content consists of three parts: Markdown documentation: Lives in the docs/ folder, and consists of a set of hand-written Markdown files that document high-level concepts. The static site generator mkdocs (with Material theming) is used to convert the Markdown to static, styled HTML. Kotlin API reference: Kdoc embedded in Kotlin source files is converted to GitHub-flavored Markdown by Dokka and then included in the statically-generated website. Swift API reference: Markup comments from Swift files are converted Markdown by Sourcedocs and then included in the statically-generated website. Note: The documentation site is automatically built and deployed whenever a version tag is pushed. You only need these steps if you want to work on the site locally.","title":"Deploying the documentation website"},{"location":"RELEASING/#setting-up-the-site-generators","text":"If you\u2019ve already done this, you can skip to Deploying the website to production below.","title":"Setting up the site generators"},{"location":"RELEASING/#kotlin-dokka","text":"Dokka runs as a Gradle plugin, so you need to be able to build the Kotlin source with Gradle, but that\u2019s it. To generate the docs manually, run: cd kotlin ./gradlew dokka","title":"Kotlin: Dokka"},{"location":"RELEASING/#swift-sourcedocs","text":"Sourcedocs generates a Markdown site from Swift files. You need Ruby, rubygems, bundler (2.x), Xcode 10.2+, CocoaPods, and of course Sourcedocs itself, to run it. Assuming you\u2019ve already got Xcode, Ruby, and rubygems set up, install the rest of the dependencies: gem install bundler cocoapods brew install sourcedocs You will also need a checkout of the Swift repo: git clone https://github.com/square/workflow-swift.git cd workflow-swift Then generate an Xcode project before running Sourcedocs: cd Samples/SampleApp/ bundle exec pod install # If this is your first time running CocoaPods, that will fail and you'll need to run this instead: #bundle exec pod install --repo-update You can manually generate the docs to verify everything is working correctly by running: #cd Samples/SampleApp/ sourcedocs generate -- -scheme Workflow -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowUI -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowTesting -workspace SampleApp.xcworkspace Note that currently sourcedocs only supports Xcode 10, if you run it with Xcode 11 you might see an error about Catalyst and only empty READMEs will get generated.","title":"Swift: Sourcedocs"},{"location":"RELEASING/#mkdocs","text":"Mkdocs is written in Python, so you\u2019ll need Python 3 and pip in order to run it. Assuming those are set up, run: pip install -r requirements.txt Generate the site manually with: mkdocs build While you\u2019re working on the documentation files, you can run the site locally with: mkdocs serve","title":"mkdocs"},{"location":"RELEASING/#deploying-the-website-to-production","text":"Note: The documentation site is automatically built and deployed by a Github Workflow whenever a version tag is pushed. You only need these steps if you want to publish the site manually. Before deploying the website for real, you need to export our Google Analytics key in an environment variable so that it will get added to the HTML. Get the key from one of the project maintainers, then add the following to your .bashrc and re-source it: export WORKFLOW_GOOGLE_ANALYTICS_KEY = UA-__________-1 Now you\u2019re ready to publish the site! Just choose a tag or SHA to deploy from, and run: ./deploy_website.sh TAG_OR_SHA # For example: #./deploy_website.sh v0.18.0 This will clone the repo to a temporary directory, checkout the right SHA, build Kotlin and Swift API docs, generate HTML, and push the newly-generated content to the gh-pages branch on GitHub.","title":"Deploying the website to production"},{"location":"RELEASING/#validating-markdown","text":"Since all of our high-level documentation is written in Markdown, we run a linter in CI to ensure we use consistent formatting. Lint errors will fail your PR builds, so to run locally, install markdownlint : gem install mdl Run the linter using the lint_docs.sh : ./lint_docs.sh Rules can be configured by editing .markdownlint.rb .","title":"Validating Markdown"},{"location":"RELEASING/#kotlin-notes","text":"","title":"Kotlin Notes"},{"location":"RELEASING/#development","text":"To build and install the current version to your local Maven repository ( ~/.m2 ), run: ./gradlew clean installArchives","title":"Development"},{"location":"RELEASING/#deploying","text":"","title":"Deploying"},{"location":"RELEASING/#configuration","text":"In order to deploy artifacts to a Maven repository, you\u2019ll need to set 4 properties in your private Gradle properties file ( ~/.gradle/gradle.properties ): RELEASE_REPOSITORY_URL=<url of release repository> SNAPSHOT_REPOSITORY_URL=<url of snapshot repository SONATYPE_NEXUS_USERNAME=<username> SONATYPE_NEXUS_PASSWORD=<password>","title":"Configuration"},{"location":"RELEASING/#snapshot-releases","text":"Double-check that gradle.properties correctly contains the -SNAPSHOT suffix, then upload snapshot artifacts to Sonatype just like you would for a production release: ./gradlew clean build && ./gradlew uploadArchives --no-parallel --no-daemon You can verify the artifacts are available by visiting https://oss.sonatype.org/content/repositories/snapshots/com/squareup/workflow/ .","title":"Snapshot Releases"},{"location":"code-recipes/","text":"Code Receipes \u00b6 Coming soon!","title":"Code Recipes"},{"location":"code-recipes/#code-receipes","text":"Coming soon!","title":"Code Receipes"},{"location":"development-process/","text":"Development Process \u00b6 Coming soon!","title":"Development Process"},{"location":"development-process/#development-process","text":"Coming soon!","title":"Development Process"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 Isn\u2019t this basically React/Elm? \u00b6 React and the Elm architecture were both strong influences for this library. However both those libraries are written for JavaScript. Workflows are written in and for both Kotlin and Swift, making use of features of those languages, and with usability from those languages as a major design goal. There are also a few architectural differences: React Elm Workflow Modularity Component TK Workflow is analogous to React\u2019s Component State Each Component has a state property that is read directly and updated via a setState method. State is called Model in Elm. Workflow s have an associated state type. The state can only be updated when the props change, or with a WorkflowAction . Views Component s have a render method that returns a tree of elements. Elm applications have a view function that returns a tree of elements. Since workflows are not tied to any particular UI view layer, they can have an arbitrary rendering type. The render() method returns this type. Dependencies React allows parent components to pass \u201cprops\u201d down to their children. TK In Swift, Workflow s are often structs that need to be initialized with their dependencies and configuration data from their parent. In Kotlin, they have a separate type parameter ( PropsT ) that is always passed down from the parent. Workflow instances can also inject dependencies, and play nicely with dependency injection frameworks. Composability TK TK TK Event Handling TK TK TK How is this different than MvRx? \u00b6 Besides being very Android and Rx specific, MvRx solves view modeling problems only per screen. Workflow was mainly inspired by the need to manage and compose navigation in apps with dozens or hundreds of screens. How do I get involved and/or contribute? \u00b6 Workflow is open source! See our CONTRIBUTING doc to get started. Stay tuned! We\u2019re considering hosting a public Slack channel for open source contributors. This seems clever. Can I stick with a traditional development approach? \u00b6 Of course! Workflow was designed to make complex application architecture predictable and safe for large development teams. We\u2019re confident that it brings benefits even to smaller projects, but there is never only one right way to build software. We recommend to follow good practices and use an architecture that makes sense for your project . Why do we need another architecture? \u00b6 Architectural patterns with weak access controls and heavy use of shared mutable state make it incredibly difficult to fully understand the behavior of the code that we are writing. This quickly devolves into an arms race as the codebase grows: if every feature or component in the codebase might change anything at any time, bug fixes turn into a really sad game of whack-a-mole. We have seen this pattern occur repeatedly in traditional mobile applications using patterns like MVC. Workflow defines strong boundaries and contracts between separate parts of the application to ensure that our code remains predictable and maintainable as the size and complexity of the codebase grows.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#isnt-this-basically-reactelm","text":"React and the Elm architecture were both strong influences for this library. However both those libraries are written for JavaScript. Workflows are written in and for both Kotlin and Swift, making use of features of those languages, and with usability from those languages as a major design goal. There are also a few architectural differences: React Elm Workflow Modularity Component TK Workflow is analogous to React\u2019s Component State Each Component has a state property that is read directly and updated via a setState method. State is called Model in Elm. Workflow s have an associated state type. The state can only be updated when the props change, or with a WorkflowAction . Views Component s have a render method that returns a tree of elements. Elm applications have a view function that returns a tree of elements. Since workflows are not tied to any particular UI view layer, they can have an arbitrary rendering type. The render() method returns this type. Dependencies React allows parent components to pass \u201cprops\u201d down to their children. TK In Swift, Workflow s are often structs that need to be initialized with their dependencies and configuration data from their parent. In Kotlin, they have a separate type parameter ( PropsT ) that is always passed down from the parent. Workflow instances can also inject dependencies, and play nicely with dependency injection frameworks. Composability TK TK TK Event Handling TK TK TK","title":"Isn't this basically React/Elm?"},{"location":"faq/#how-is-this-different-than-mvrx","text":"Besides being very Android and Rx specific, MvRx solves view modeling problems only per screen. Workflow was mainly inspired by the need to manage and compose navigation in apps with dozens or hundreds of screens.","title":"How is this different than MvRx?"},{"location":"faq/#how-do-i-get-involved-andor-contribute","text":"Workflow is open source! See our CONTRIBUTING doc to get started. Stay tuned! We\u2019re considering hosting a public Slack channel for open source contributors.","title":"How do I get involved and/or contribute?"},{"location":"faq/#this-seems-clever-can-i-stick-with-a-traditional-development-approach","text":"Of course! Workflow was designed to make complex application architecture predictable and safe for large development teams. We\u2019re confident that it brings benefits even to smaller projects, but there is never only one right way to build software. We recommend to follow good practices and use an architecture that makes sense for your project .","title":"This seems clever. Can I stick with a traditional development approach?"},{"location":"faq/#why-do-we-need-another-architecture","text":"Architectural patterns with weak access controls and heavy use of shared mutable state make it incredibly difficult to fully understand the behavior of the code that we are writing. This quickly devolves into an arms race as the codebase grows: if every feature or component in the codebase might change anything at any time, bug fixes turn into a really sad game of whack-a-mole. We have seen this pattern occur repeatedly in traditional mobile applications using patterns like MVC. Workflow defines strong boundaries and contracts between separate parts of the application to ensure that our code remains predictable and maintainable as the size and complexity of the codebase grows.","title":"Why do we need another architecture?"},{"location":"kotlin/api/workflow/","text":"workflow Packages \u00b6 Name Summary com.squareup.tracing com.squareup.workflow1 com.squareup.workflow1.diagnostic.tracing com.squareup.workflow1.rx2 com.squareup.workflow1.testing com.squareup.workflow1.ui com.squareup.workflow1.ui.backstack com.squareup.workflow1.ui.modal Index \u00b6 All Types","title":"Kotlin"},{"location":"kotlin/api/workflow/#packages","text":"Name Summary com.squareup.tracing com.squareup.workflow1 com.squareup.workflow1.diagnostic.tracing com.squareup.workflow1.rx2 com.squareup.workflow1.testing com.squareup.workflow1.ui com.squareup.workflow1.ui.backstack com.squareup.workflow1.ui.modal","title":"Packages"},{"location":"kotlin/api/workflow/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow/alltypes/","text":"All Types \u00b6 Name Summary com.squareup.workflow1.ui.modal.AlertContainer \u00b6 Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s. | com.squareup.workflow1.ui.modal.AlertContainerScreen \u00b6 May show a stack of AlertScreen over a beneathModals . | com.squareup.workflow1.ui.modal.AlertScreen \u00b6 Models a typical \u201cYou sure about that?\u201d alert box. | com.squareup.workflow1.ui.AndroidViewRendering \u00b6 Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. | com.squareup.workflow1.ui.BackPressHandler \u00b6 A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. | com.squareup.workflow1.ui.backstack.BackStackConfig \u00b6 Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not . | com.squareup.workflow1.ui.backstack.BackStackContainer \u00b6 A container view that can display a stream of BackStackScreen instances. | com.squareup.workflow1.ui.backstack.BackStackScreen \u00b6 Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. | com.squareup.workflow1.BaseRenderContext \u00b6 Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. | (extensions in package com.squareup.workflow1) okio.BufferedSink \u00b6 | (extensions in package com.squareup.workflow1) okio.BufferedSource \u00b6 | com.squareup.workflow1.ui.BuilderViewFactory \u00b6 A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) | (extensions in package com.squareup.workflow1) okio.ByteString \u00b6 | (extensions in package com.squareup.workflow1.ui) okio.ByteString \u00b6 | com.squareup.workflow1.ui.Compatible \u00b6 Implemented by objects whose compatibility requires more nuance than just being of the same type. | (extensions in package com.squareup.workflow1.rx2) io.reactivex.Completable \u00b6 | (extensions in package com.squareup.workflow1.ui) android.content.Context \u00b6 | com.squareup.workflow1.ui.DecorativeViewFactory \u00b6 A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. | (extensions in package com.squareup.workflow1.ui) android.widget.EditText \u00b6 | com.squareup.workflow1.ExperimentalWorkflowApi \u00b6 Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. | (extensions in package com.squareup.workflow1) kotlinx.coroutines.flow.Flow \u00b6 | com.squareup.workflow1.ui.modal.HasModals \u00b6 Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . | com.squareup.workflow1.ImpostorWorkflow \u00b6 Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. Two ImpostorWorkflow s with the same concrete class, but different realIdentifier s will be considered different workflows by the runtime. | (extensions in package com.squareup.workflow1) kotlin.reflect.KClass \u00b6 | com.squareup.workflow1.ui.LayoutRunner \u00b6 | com.squareup.workflow1.LifecycleWorker \u00b6 Worker that performs some action when the worker is started and/or stopped. | (extensions in package com.squareup.workflow1.ui.backstack) kotlin.collections.List \u00b6 | (extensions in package com.squareup.workflow1.rx2) io.reactivex.Maybe \u00b6 | com.squareup.workflow1.diagnostic.tracing.MemoryStats \u00b6 Reports free/available memory. | com.squareup.workflow1.ui.modal.ModalContainer \u00b6 Base class for containers that show HasModals.modals in Dialog windows. | com.squareup.workflow1.ui.modal.ModalViewContainer \u00b6 Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . | com.squareup.workflow1.ui.Named \u00b6 Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. | com.squareup.workflow1.ui.NamedViewFactory \u00b6 ViewFactory that allows views to display instances of Named . Delegates to the factory for Named.wrapped . | com.squareup.workflow1.NoopWorkflowInterceptor \u00b6 A WorkflowInterceptor that does not intercept anything. | (extensions in package com.squareup.workflow1.rx2) io.reactivex.Observable \u00b6 | (extensions in package com.squareup.workflow1.ui) android.os.Parcelable \u00b6 | (extensions in package com.squareup.workflow1.rx2) org.reactivestreams.Publisher \u00b6 | com.squareup.workflow1.rx2.PublisherWorker \u00b6 An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . | com.squareup.workflow1.testing.RenderIdempotencyChecker \u00b6 Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. | com.squareup.workflow1.RenderingAndSnapshot \u00b6 Tuple of rendering and snapshot used by renderWorkflowIn . | com.squareup.workflow1.testing.RenderTester \u00b6 The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . | com.squareup.workflow1.testing.RenderTestResult \u00b6 Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action. | com.squareup.workflow1.diagnostic.tracing.RuntimeMemoryStats \u00b6 A MemoryStats that reports memory stats using this Runtime instance. | com.squareup.workflow1.ui.ShowRenderingTag \u00b6 ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . | com.squareup.workflow1.SimpleLoggingWorkflowInterceptor \u00b6 A WorkflowInterceptor that just prints all method calls using log . | (extensions in package com.squareup.workflow1.rx2) io.reactivex.Single \u00b6 | com.squareup.workflow1.Sink \u00b6 | com.squareup.workflow1.Snapshot \u00b6 A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. | com.squareup.workflow1.StatefulWorkflow \u00b6 A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. | com.squareup.workflow1.StatelessWorkflow \u00b6 Minimal implementation of Workflow that maintains no state of its own. | com.squareup.tracing.TraceEncoder \u00b6 Encodes and writes trace events to an Okio BufferedSink . | com.squareup.tracing.TraceEvent \u00b6 Represents a single event in a trace. | com.squareup.tracing.TraceLogger \u00b6 Logs TraceEvent s to a TraceEncoder under a given process and thread name. | com.squareup.workflow1.diagnostic.tracing.TracingWorkflowInterceptor \u00b6 A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . | com.squareup.workflow1.TreeSnapshot \u00b6 Aggregate of all the snapshots of a tree of workflows. | (extensions in package com.squareup.workflow1.ui) android.view.View \u00b6 | com.squareup.workflow1.ui.ViewBindingInflater \u00b6 | com.squareup.workflow1.ui.ViewEnvironment \u00b6 Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing. | com.squareup.workflow1.ui.ViewEnvironmentKey \u00b6 Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. | com.squareup.workflow1.ui.ViewFactory \u00b6 Factory for View instances that can show renderings of type RenderingT . | com.squareup.workflow1.ui.ViewRegistry \u00b6 The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. This is the engine behind AndroidViewRendering , WorkflowViewStub and ViewFactory . Most apps can ignore ViewRegistry as an implementation detail, by using AndroidViewRendering to tie their rendering classes to view code. | com.squareup.workflow1.ui.ViewShowRendering \u00b6 Function attached to a view created by ViewFactory , to allow it to respond to View.showRendering . | com.squareup.workflow1.ui.backstack.ViewStateCache \u00b6 Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets. | com.squareup.workflow1.Worker \u00b6 Represents a unit of asynchronous work that can have zero, one, or multiple outputs. | com.squareup.workflow1.testing.WorkerSink \u00b6 Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. | com.squareup.workflow1.testing.WorkerTester \u00b6 | com.squareup.workflow1.Workflow \u00b6 A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. | com.squareup.workflow1.WorkflowAction \u00b6 An atomic operation that updates the state of a Workflow , and also optionally emits an output. | com.squareup.workflow1.WorkflowIdentifier \u00b6 Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. | com.squareup.workflow1.WorkflowInterceptor \u00b6 Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. | com.squareup.workflow1.ui.WorkflowLayout \u00b6 A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. | com.squareup.workflow1.WorkflowOutput \u00b6 Wrapper around a potentially-nullable OutputT value. | com.squareup.workflow1.testing.WorkflowTestParams \u00b6 Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . | com.squareup.workflow1.testing.WorkflowTestRuntime \u00b6 Runs a Workflow and provides access to its renderings , outputs , and snapshots . | com.squareup.workflow1.ui.WorkflowUiExperimentalApi \u00b6 Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. | com.squareup.workflow1.ui.WorkflowViewStub \u00b6 A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"Index"},{"location":"kotlin/api/workflow/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uimodalalertcontainer","text":"Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s. |","title":"com.squareup.workflow1.ui.modal.AlertContainer"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uimodalalertcontainerscreen","text":"May show a stack of AlertScreen over a beneathModals . |","title":"com.squareup.workflow1.ui.modal.AlertContainerScreen"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uimodalalertscreen","text":"Models a typical \u201cYou sure about that?\u201d alert box. |","title":"com.squareup.workflow1.ui.modal.AlertScreen"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiandroidviewrendering","text":"Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. |","title":"com.squareup.workflow1.ui.AndroidViewRendering"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uibackpresshandler","text":"A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. |","title":"com.squareup.workflow1.ui.BackPressHandler"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uibackstackbackstackconfig","text":"Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not . |","title":"com.squareup.workflow1.ui.backstack.BackStackConfig"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uibackstackbackstackcontainer","text":"A container view that can display a stream of BackStackScreen instances. |","title":"com.squareup.workflow1.ui.backstack.BackStackContainer"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uibackstackbackstackscreen","text":"Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. |","title":"com.squareup.workflow1.ui.backstack.BackStackScreen"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1baserendercontext","text":"Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. | (extensions in package com.squareup.workflow1)","title":"com.squareup.workflow1.BaseRenderContext"},{"location":"kotlin/api/workflow/alltypes/#okiobufferedsink","text":"| (extensions in package com.squareup.workflow1)","title":"okio.BufferedSink"},{"location":"kotlin/api/workflow/alltypes/#okiobufferedsource","text":"|","title":"okio.BufferedSource"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uibuilderviewfactory","text":"A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) | (extensions in package com.squareup.workflow1)","title":"com.squareup.workflow1.ui.BuilderViewFactory"},{"location":"kotlin/api/workflow/alltypes/#okiobytestring","text":"| (extensions in package com.squareup.workflow1.ui)","title":"okio.ByteString"},{"location":"kotlin/api/workflow/alltypes/#okiobytestring_1","text":"|","title":"okio.ByteString"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uicompatible","text":"Implemented by objects whose compatibility requires more nuance than just being of the same type. | (extensions in package com.squareup.workflow1.rx2)","title":"com.squareup.workflow1.ui.Compatible"},{"location":"kotlin/api/workflow/alltypes/#ioreactivexcompletable","text":"| (extensions in package com.squareup.workflow1.ui)","title":"io.reactivex.Completable"},{"location":"kotlin/api/workflow/alltypes/#androidcontentcontext","text":"|","title":"android.content.Context"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uidecorativeviewfactory","text":"A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. | (extensions in package com.squareup.workflow1.ui)","title":"com.squareup.workflow1.ui.DecorativeViewFactory"},{"location":"kotlin/api/workflow/alltypes/#androidwidgetedittext","text":"|","title":"android.widget.EditText"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1experimentalworkflowapi","text":"Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. | (extensions in package com.squareup.workflow1)","title":"com.squareup.workflow1.ExperimentalWorkflowApi"},{"location":"kotlin/api/workflow/alltypes/#kotlinxcoroutinesflowflow","text":"|","title":"kotlinx.coroutines.flow.Flow"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uimodalhasmodals","text":"Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . |","title":"com.squareup.workflow1.ui.modal.HasModals"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1impostorworkflow","text":"Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. Two ImpostorWorkflow s with the same concrete class, but different realIdentifier s will be considered different workflows by the runtime. | (extensions in package com.squareup.workflow1)","title":"com.squareup.workflow1.ImpostorWorkflow"},{"location":"kotlin/api/workflow/alltypes/#kotlinreflectkclass","text":"|","title":"kotlin.reflect.KClass"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uilayoutrunner","text":"|","title":"com.squareup.workflow1.ui.LayoutRunner"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1lifecycleworker","text":"Worker that performs some action when the worker is started and/or stopped. | (extensions in package com.squareup.workflow1.ui.backstack)","title":"com.squareup.workflow1.LifecycleWorker"},{"location":"kotlin/api/workflow/alltypes/#kotlincollectionslist","text":"| (extensions in package com.squareup.workflow1.rx2)","title":"kotlin.collections.List"},{"location":"kotlin/api/workflow/alltypes/#ioreactivexmaybe","text":"|","title":"io.reactivex.Maybe"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1diagnostictracingmemorystats","text":"Reports free/available memory. |","title":"com.squareup.workflow1.diagnostic.tracing.MemoryStats"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uimodalmodalcontainer","text":"Base class for containers that show HasModals.modals in Dialog windows. |","title":"com.squareup.workflow1.ui.modal.ModalContainer"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uimodalmodalviewcontainer","text":"Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . |","title":"com.squareup.workflow1.ui.modal.ModalViewContainer"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uinamed","text":"Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. |","title":"com.squareup.workflow1.ui.Named"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uinamedviewfactory","text":"ViewFactory that allows views to display instances of Named . Delegates to the factory for Named.wrapped . |","title":"com.squareup.workflow1.ui.NamedViewFactory"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1noopworkflowinterceptor","text":"A WorkflowInterceptor that does not intercept anything. | (extensions in package com.squareup.workflow1.rx2)","title":"com.squareup.workflow1.NoopWorkflowInterceptor"},{"location":"kotlin/api/workflow/alltypes/#ioreactivexobservable","text":"| (extensions in package com.squareup.workflow1.ui)","title":"io.reactivex.Observable"},{"location":"kotlin/api/workflow/alltypes/#androidosparcelable","text":"| (extensions in package com.squareup.workflow1.rx2)","title":"android.os.Parcelable"},{"location":"kotlin/api/workflow/alltypes/#orgreactivestreamspublisher","text":"|","title":"org.reactivestreams.Publisher"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1rx2publisherworker","text":"An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . |","title":"com.squareup.workflow1.rx2.PublisherWorker"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1testingrenderidempotencychecker","text":"Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. |","title":"com.squareup.workflow1.testing.RenderIdempotencyChecker"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1renderingandsnapshot","text":"Tuple of rendering and snapshot used by renderWorkflowIn . |","title":"com.squareup.workflow1.RenderingAndSnapshot"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1testingrendertester","text":"The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . |","title":"com.squareup.workflow1.testing.RenderTester"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1testingrendertestresult","text":"Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action. |","title":"com.squareup.workflow1.testing.RenderTestResult"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1diagnostictracingruntimememorystats","text":"A MemoryStats that reports memory stats using this Runtime instance. |","title":"com.squareup.workflow1.diagnostic.tracing.RuntimeMemoryStats"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uishowrenderingtag","text":"` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . |","title":"com.squareup.workflow1.ui.ShowRenderingTag"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1simpleloggingworkflowinterceptor","text":"A WorkflowInterceptor that just prints all method calls using log . | (extensions in package com.squareup.workflow1.rx2)","title":"com.squareup.workflow1.SimpleLoggingWorkflowInterceptor"},{"location":"kotlin/api/workflow/alltypes/#ioreactivexsingle","text":"|","title":"io.reactivex.Single"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1sink","text":"|","title":"com.squareup.workflow1.Sink"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1snapshot","text":"A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. |","title":"com.squareup.workflow1.Snapshot"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1statefulworkflow","text":"A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. |","title":"com.squareup.workflow1.StatefulWorkflow"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1statelessworkflow","text":"Minimal implementation of Workflow that maintains no state of its own. |","title":"com.squareup.workflow1.StatelessWorkflow"},{"location":"kotlin/api/workflow/alltypes/#comsquareuptracingtraceencoder","text":"Encodes and writes trace events to an Okio BufferedSink . |","title":"com.squareup.tracing.TraceEncoder"},{"location":"kotlin/api/workflow/alltypes/#comsquareuptracingtraceevent","text":"Represents a single event in a trace. |","title":"com.squareup.tracing.TraceEvent"},{"location":"kotlin/api/workflow/alltypes/#comsquareuptracingtracelogger","text":"Logs TraceEvent s to a TraceEncoder under a given process and thread name. |","title":"com.squareup.tracing.TraceLogger"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1diagnostictracingtracingworkflowinterceptor","text":"A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . |","title":"com.squareup.workflow1.diagnostic.tracing.TracingWorkflowInterceptor"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1treesnapshot","text":"Aggregate of all the snapshots of a tree of workflows. | (extensions in package com.squareup.workflow1.ui)","title":"com.squareup.workflow1.TreeSnapshot"},{"location":"kotlin/api/workflow/alltypes/#androidviewview","text":"|","title":"android.view.View"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiviewbindinginflater","text":"|","title":"com.squareup.workflow1.ui.ViewBindingInflater"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiviewenvironment","text":"Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing. |","title":"com.squareup.workflow1.ui.ViewEnvironment"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiviewenvironmentkey","text":"Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. |","title":"com.squareup.workflow1.ui.ViewEnvironmentKey"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiviewfactory","text":"Factory for View instances that can show renderings of type RenderingT . |","title":"com.squareup.workflow1.ui.ViewFactory"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiviewregistry","text":"The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. This is the engine behind AndroidViewRendering , WorkflowViewStub and ViewFactory . Most apps can ignore ViewRegistry as an implementation detail, by using AndroidViewRendering to tie their rendering classes to view code. |","title":"com.squareup.workflow1.ui.ViewRegistry"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiviewshowrendering","text":"Function attached to a view created by ViewFactory , to allow it to respond to View.showRendering . |","title":"com.squareup.workflow1.ui.ViewShowRendering"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uibackstackviewstatecache","text":"Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets. |","title":"com.squareup.workflow1.ui.backstack.ViewStateCache"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1worker","text":"Represents a unit of asynchronous work that can have zero, one, or multiple outputs. |","title":"com.squareup.workflow1.Worker"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1testingworkersink","text":"Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. |","title":"com.squareup.workflow1.testing.WorkerSink"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1testingworkertester","text":"|","title":"com.squareup.workflow1.testing.WorkerTester"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1workflow","text":"A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. |","title":"com.squareup.workflow1.Workflow"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1workflowaction","text":"An atomic operation that updates the state of a Workflow , and also optionally emits an output. |","title":"com.squareup.workflow1.WorkflowAction"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1workflowidentifier","text":"Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. |","title":"com.squareup.workflow1.WorkflowIdentifier"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1workflowinterceptor","text":"Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. |","title":"com.squareup.workflow1.WorkflowInterceptor"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiworkflowlayout","text":"A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. |","title":"com.squareup.workflow1.ui.WorkflowLayout"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1workflowoutput","text":"Wrapper around a potentially-nullable OutputT value. |","title":"com.squareup.workflow1.WorkflowOutput"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1testingworkflowtestparams","text":"Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . |","title":"com.squareup.workflow1.testing.WorkflowTestParams"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1testingworkflowtestruntime","text":"Runs a Workflow and provides access to its renderings , outputs , and snapshots . |","title":"com.squareup.workflow1.testing.WorkflowTestRuntime"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiworkflowuiexperimentalapi","text":"Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. |","title":"com.squareup.workflow1.ui.WorkflowUiExperimentalApi"},{"location":"kotlin/api/workflow/alltypes/#comsquareupworkflow1uiworkflowviewstub","text":"A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"com.squareup.workflow1.ui.WorkflowViewStub"},{"location":"kotlin/api/workflow/com.squareup.tracing/","text":"workflow / com.squareup.tracing Package com.squareup.tracing \u00b6 Types \u00b6 Name Summary TraceEncoder Encodes and writes trace events to an Okio BufferedSink . class TraceEncoder : Closeable TraceEvent Represents a single event in a trace. sealed class TraceEvent TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name. interface TraceLogger","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/#package-comsquareuptracing","text":"","title":"Package com.squareup.tracing"},{"location":"kotlin/api/workflow/com.squareup.tracing/#types","text":"Name Summary TraceEncoder Encodes and writes trace events to an Okio BufferedSink . class TraceEncoder : Closeable TraceEvent Represents a single event in a trace. sealed class TraceEvent TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name. interface TraceLogger","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/","text":"workflow / com.squareup.tracing / TraceEncoder TraceEncoder \u00b6 class TraceEncoder : Closeable Encodes and writes trace events to an Okio BufferedSink . Parameters \u00b6 scope - The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start - The TimeMark to consider the beginning timestamp of the trace. All trace events\u2019 timestamps are relative to this mark. TimeSource.Monotonic . markNow by default. ioDispatcher - The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider - Returns the BufferedSink to use to write trace events to. Called on a background thread. Constructors \u00b6 Name Summary <init> Encodes and writes trace events to an Okio BufferedSink . TraceEncoder(scope: CoroutineScope, start: TimeMark = TimeSource.Monotonic.markNow(), ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () -> BufferedSink) Functions \u00b6 Name Summary close fun close(): Unit createLogger Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID. fun createLogger(processName: String = \"\", threadName: String = \"\"): TraceLogger","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/#traceencoder","text":"class TraceEncoder : Closeable Encodes and writes trace events to an Okio BufferedSink .","title":"TraceEncoder"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/#parameters","text":"scope - The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start - The TimeMark to consider the beginning timestamp of the trace. All trace events\u2019 timestamps are relative to this mark. TimeSource.Monotonic . markNow by default. ioDispatcher - The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider - Returns the BufferedSink to use to write trace events to. Called on a background thread.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/#constructors","text":"Name Summary <init> Encodes and writes trace events to an Okio BufferedSink . TraceEncoder(scope: CoroutineScope, start: TimeMark = TimeSource.Monotonic.markNow(), ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () -> BufferedSink)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/#functions","text":"Name Summary close fun close(): Unit createLogger Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID. fun createLogger(processName: String = \"\", threadName: String = \"\"): TraceLogger","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/-init-/","text":"workflow / com.squareup.tracing / TraceEncoder / <init> <init> \u00b6 TraceEncoder(scope: CoroutineScope, start: TimeMark = TimeSource.Monotonic.markNow(), ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () -> BufferedSink) Encodes and writes trace events to an Okio BufferedSink . Parameters \u00b6 scope - The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start - The TimeMark to consider the beginning timestamp of the trace. All trace events\u2019 timestamps are relative to this mark. TimeSource.Monotonic . markNow by default. ioDispatcher - The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider - Returns the BufferedSink to use to write trace events to. Called on a background thread.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/-init-/#init","text":"TraceEncoder(scope: CoroutineScope, start: TimeMark = TimeSource.Monotonic.markNow(), ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () -> BufferedSink) Encodes and writes trace events to an Okio BufferedSink .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/-init-/#parameters","text":"scope - The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start - The TimeMark to consider the beginning timestamp of the trace. All trace events\u2019 timestamps are relative to this mark. TimeSource.Monotonic . markNow by default. ioDispatcher - The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider - Returns the BufferedSink to use to write trace events to. Called on a background thread.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/close/","text":"workflow / com.squareup.tracing / TraceEncoder / close close \u00b6 fun close(): Unit","title":"Close"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/close/#close","text":"fun close(): Unit","title":"close"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/create-logger/","text":"workflow / com.squareup.tracing / TraceEncoder / createLogger createLogger \u00b6 fun createLogger(processName: String = \"\", threadName: String = \"\"): TraceLogger Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID. Note this does not do anything with actual threads, it just affects the thread ID used in trace events.","title":"Create logger"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-encoder/create-logger/#createlogger","text":"fun createLogger(processName: String = \"\", threadName: String = \"\"): TraceLogger Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID. Note this does not do anything with actual threads, it just affects the thread ID used in trace events.","title":"createLogger"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/","text":"workflow / com.squareup.tracing / TraceEvent TraceEvent \u00b6 sealed class TraceEvent Represents a single event in a trace. Types \u00b6 Name Summary AsyncDurationBegin data class AsyncDurationBegin : TraceEvent AsyncDurationEnd data class AsyncDurationEnd : TraceEvent Counter data class Counter : TraceEvent DurationBegin data class DurationBegin : TraceEvent DurationEnd data class DurationEnd : TraceEvent Instant data class Instant : TraceEvent ObjectCreated data class ObjectCreated : TraceEvent ObjectDestroyed data class ObjectDestroyed : TraceEvent ObjectSnapshot data class ObjectSnapshot : TraceEvent Properties \u00b6 Name Summary category open val category: String ?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/#traceevent","text":"sealed class TraceEvent Represents a single event in a trace.","title":"TraceEvent"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/#types","text":"Name Summary AsyncDurationBegin data class AsyncDurationBegin : TraceEvent AsyncDurationEnd data class AsyncDurationEnd : TraceEvent Counter data class Counter : TraceEvent DurationBegin data class DurationBegin : TraceEvent DurationEnd data class DurationEnd : TraceEvent Instant data class Instant : TraceEvent ObjectCreated data class ObjectCreated : TraceEvent ObjectDestroyed data class ObjectDestroyed : TraceEvent ObjectSnapshot data class ObjectSnapshot : TraceEvent","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/#properties","text":"Name Summary category open val category: String ?","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/category/","text":"workflow / com.squareup.tracing / TraceEvent / category category \u00b6 open val category: String ?","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/category/#category","text":"open val category: String ?","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin AsyncDurationBegin \u00b6 data class AsyncDurationBegin : TraceEvent Constructors \u00b6 Name Summary <init> AsyncDurationBegin(id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null) Properties \u00b6 Name Summary args val args: Map < String , Any ?> category val category: String ? id val id: Any name val name: String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/#asyncdurationbegin","text":"data class AsyncDurationBegin : TraceEvent","title":"AsyncDurationBegin"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/#constructors","text":"Name Summary <init> AsyncDurationBegin(id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/#properties","text":"Name Summary args val args: Map < String , Any ?> category val category: String ? id val id: Any name val name: String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/-init-/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / <init> <init> \u00b6 AsyncDurationBegin(id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/-init-/#init","text":"AsyncDurationBegin(id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/args/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / args args \u00b6 val args: Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/args/#args","text":"val args: Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/category/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / category category \u00b6 val category: String ?","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/category/#category","text":"val category: String ?","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/id/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / id id \u00b6 val id: Any","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/id/#id","text":"val id: Any","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/name/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationBegin / name name \u00b6 val name: String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-begin/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd AsyncDurationEnd \u00b6 data class AsyncDurationEnd : TraceEvent Constructors \u00b6 Name Summary <init> AsyncDurationEnd(id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null) Properties \u00b6 Name Summary args val args: Map < String , Any ?> category val category: String ? id val id: Any name val name: String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/#asyncdurationend","text":"data class AsyncDurationEnd : TraceEvent","title":"AsyncDurationEnd"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/#constructors","text":"Name Summary <init> AsyncDurationEnd(id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/#properties","text":"Name Summary args val args: Map < String , Any ?> category val category: String ? id val id: Any name val name: String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/-init-/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / <init> <init> \u00b6 AsyncDurationEnd(id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/-init-/#init","text":"AsyncDurationEnd(id: Any , name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/args/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / args args \u00b6 val args: Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/args/#args","text":"val args: Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/category/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / category category \u00b6 val category: String ?","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/category/#category","text":"val category: String ?","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/id/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / id id \u00b6 val id: Any","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/id/#id","text":"val id: Any","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/name/","text":"workflow / com.squareup.tracing / TraceEvent / AsyncDurationEnd / name name \u00b6 val name: String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-async-duration-end/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/","text":"workflow / com.squareup.tracing / TraceEvent / Counter Counter \u00b6 data class Counter : TraceEvent Constructors \u00b6 Name Summary <init> Counter(name: String , series: Map < String , Number >, id: Long ? = null) Properties \u00b6 Name Summary id val id: Long ? name val name: String series val series: Map < String , Number >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/#counter","text":"data class Counter : TraceEvent","title":"Counter"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/#constructors","text":"Name Summary <init> Counter(name: String , series: Map < String , Number >, id: Long ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/#properties","text":"Name Summary id val id: Long ? name val name: String series val series: Map < String , Number >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/-init-/","text":"workflow / com.squareup.tracing / TraceEvent / Counter / <init> <init> \u00b6 Counter(name: String , series: Map < String , Number >, id: Long ? = null)","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/-init-/#init","text":"Counter(name: String , series: Map < String , Number >, id: Long ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/id/","text":"workflow / com.squareup.tracing / TraceEvent / Counter / id id \u00b6 val id: Long ?","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/id/#id","text":"val id: Long ?","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/name/","text":"workflow / com.squareup.tracing / TraceEvent / Counter / name name \u00b6 val name: String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/series/","text":"workflow / com.squareup.tracing / TraceEvent / Counter / series series \u00b6 val series: Map < String , Number >","title":"Series"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-counter/series/#series","text":"val series: Map < String , Number >","title":"series"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/","text":"workflow / com.squareup.tracing / TraceEvent / DurationBegin DurationBegin \u00b6 data class DurationBegin : TraceEvent Constructors \u00b6 Name Summary <init> DurationBegin(name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null) Properties \u00b6 Name Summary args val args: Map < String , Any ?> category val category: String ? name val name: String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/#durationbegin","text":"data class DurationBegin : TraceEvent","title":"DurationBegin"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/#constructors","text":"Name Summary <init> DurationBegin(name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/#properties","text":"Name Summary args val args: Map < String , Any ?> category val category: String ? name val name: String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/-init-/","text":"workflow / com.squareup.tracing / TraceEvent / DurationBegin / <init> <init> \u00b6 DurationBegin(name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/-init-/#init","text":"DurationBegin(name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/args/","text":"workflow / com.squareup.tracing / TraceEvent / DurationBegin / args args \u00b6 val args: Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/args/#args","text":"val args: Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/category/","text":"workflow / com.squareup.tracing / TraceEvent / DurationBegin / category category \u00b6 val category: String ?","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/category/#category","text":"val category: String ?","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/name/","text":"workflow / com.squareup.tracing / TraceEvent / DurationBegin / name name \u00b6 val name: String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-begin/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/","text":"workflow / com.squareup.tracing / TraceEvent / DurationEnd DurationEnd \u00b6 data class DurationEnd : TraceEvent Constructors \u00b6 Name Summary <init> DurationEnd(name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null) Properties \u00b6 Name Summary args val args: Map < String , Any ?> category val category: String ? name val name: String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/#durationend","text":"data class DurationEnd : TraceEvent","title":"DurationEnd"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/#constructors","text":"Name Summary <init> DurationEnd(name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/#properties","text":"Name Summary args val args: Map < String , Any ?> category val category: String ? name val name: String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/-init-/","text":"workflow / com.squareup.tracing / TraceEvent / DurationEnd / <init> <init> \u00b6 DurationEnd(name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/-init-/#init","text":"DurationEnd(name: String , args: Map < String , Any ?> = emptyMap(), category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/args/","text":"workflow / com.squareup.tracing / TraceEvent / DurationEnd / args args \u00b6 val args: Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/args/#args","text":"val args: Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/category/","text":"workflow / com.squareup.tracing / TraceEvent / DurationEnd / category category \u00b6 val category: String ?","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/category/#category","text":"val category: String ?","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/name/","text":"workflow / com.squareup.tracing / TraceEvent / DurationEnd / name name \u00b6 val name: String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-duration-end/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/","text":"workflow / com.squareup.tracing / TraceEvent / Instant Instant \u00b6 data class Instant : TraceEvent Types \u00b6 Name Summary InstantScope enum class InstantScope Constructors \u00b6 Name Summary <init> Instant(name: String , args: Map < String , Any ?> = emptyMap(), scope: InstantScope = THREAD, category: String ? = null) Properties \u00b6 Name Summary args val args: Map < String , Any ?> category val category: String ? name val name: String scope val scope: InstantScope","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/#instant","text":"data class Instant : TraceEvent","title":"Instant"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/#types","text":"Name Summary InstantScope enum class InstantScope","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/#constructors","text":"Name Summary <init> Instant(name: String , args: Map < String , Any ?> = emptyMap(), scope: InstantScope = THREAD, category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/#properties","text":"Name Summary args val args: Map < String , Any ?> category val category: String ? name val name: String scope val scope: InstantScope","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-init-/","text":"workflow / com.squareup.tracing / TraceEvent / Instant / <init> <init> \u00b6 Instant(name: String , args: Map < String , Any ?> = emptyMap(), scope: InstantScope = THREAD, category: String ? = null)","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-init-/#init","text":"Instant(name: String , args: Map < String , Any ?> = emptyMap(), scope: InstantScope = THREAD, category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/args/","text":"workflow / com.squareup.tracing / TraceEvent / Instant / args args \u00b6 val args: Map < String , Any ?>","title":"Args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/args/#args","text":"val args: Map < String , Any ?>","title":"args"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/category/","text":"workflow / com.squareup.tracing / TraceEvent / Instant / category category \u00b6 val category: String ?","title":"Category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/category/#category","text":"val category: String ?","title":"category"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/name/","text":"workflow / com.squareup.tracing / TraceEvent / Instant / name name \u00b6 val name: String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/scope/","text":"workflow / com.squareup.tracing / TraceEvent / Instant / scope scope \u00b6 val scope: InstantScope","title":"Scope"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/scope/#scope","text":"val scope: InstantScope","title":"scope"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/","text":"workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope InstantScope \u00b6 enum class InstantScope Enum Values \u00b6 Name Summary THREAD PROCESS GLOBAL","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/#instantscope","text":"enum class InstantScope","title":"InstantScope"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/#enum-values","text":"Name Summary THREAD PROCESS GLOBAL","title":"Enum Values"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/","text":"workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / GLOBAL GLOBAL \u00b6 GLOBAL","title":" g l o b a l"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/#global","text":"GLOBAL","title":"GLOBAL"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/","text":"workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / PROCESS PROCESS \u00b6 PROCESS","title":" p r o c e s s"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/#process","text":"PROCESS","title":"PROCESS"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/","text":"workflow / com.squareup.tracing / TraceEvent / Instant / InstantScope / THREAD THREAD \u00b6 THREAD","title":" t h r e a d"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/#thread","text":"THREAD","title":"THREAD"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectCreated ObjectCreated \u00b6 data class ObjectCreated : TraceEvent Constructors \u00b6 Name Summary <init> ObjectCreated(id: Long , objectType: String ) Properties \u00b6 Name Summary id val id: Long objectType val objectType: String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/#objectcreated","text":"data class ObjectCreated : TraceEvent","title":"ObjectCreated"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/#constructors","text":"Name Summary <init> ObjectCreated(id: Long , objectType: String )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/#properties","text":"Name Summary id val id: Long objectType val objectType: String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/-init-/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectCreated / <init> <init> \u00b6 ObjectCreated(id: Long , objectType: String )","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/-init-/#init","text":"ObjectCreated(id: Long , objectType: String )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/id/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectCreated / id id \u00b6 val id: Long","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/id/#id","text":"val id: Long","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/object-type/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectCreated / objectType objectType \u00b6 val objectType: String","title":"Object type"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-created/object-type/#objecttype","text":"val objectType: String","title":"objectType"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectDestroyed ObjectDestroyed \u00b6 data class ObjectDestroyed : TraceEvent Constructors \u00b6 Name Summary <init> ObjectDestroyed(id: Long , objectType: String ) Properties \u00b6 Name Summary id val id: Long objectType val objectType: String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/#objectdestroyed","text":"data class ObjectDestroyed : TraceEvent","title":"ObjectDestroyed"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/#constructors","text":"Name Summary <init> ObjectDestroyed(id: Long , objectType: String )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/#properties","text":"Name Summary id val id: Long objectType val objectType: String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/-init-/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectDestroyed / <init> <init> \u00b6 ObjectDestroyed(id: Long , objectType: String )","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/-init-/#init","text":"ObjectDestroyed(id: Long , objectType: String )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/id/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectDestroyed / id id \u00b6 val id: Long","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/id/#id","text":"val id: Long","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/object-type/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectDestroyed / objectType objectType \u00b6 val objectType: String","title":"Object type"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-destroyed/object-type/#objecttype","text":"val objectType: String","title":"objectType"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot ObjectSnapshot \u00b6 data class ObjectSnapshot : TraceEvent Constructors \u00b6 Name Summary <init> ObjectSnapshot(id: Long , objectType: String , snapshot: Any ) Properties \u00b6 Name Summary id val id: Long objectType val objectType: String snapshot val snapshot: Any","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/#objectsnapshot","text":"data class ObjectSnapshot : TraceEvent","title":"ObjectSnapshot"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/#constructors","text":"Name Summary <init> ObjectSnapshot(id: Long , objectType: String , snapshot: Any )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/#properties","text":"Name Summary id val id: Long objectType val objectType: String snapshot val snapshot: Any","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/-init-/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot / <init> <init> \u00b6 ObjectSnapshot(id: Long , objectType: String , snapshot: Any )","title":" init "},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/-init-/#init","text":"ObjectSnapshot(id: Long , objectType: String , snapshot: Any )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/id/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot / id id \u00b6 val id: Long","title":"Id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/id/#id","text":"val id: Long","title":"id"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/object-type/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot / objectType objectType \u00b6 val objectType: String","title":"Object type"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/object-type/#objecttype","text":"val objectType: String","title":"objectType"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/snapshot/","text":"workflow / com.squareup.tracing / TraceEvent / ObjectSnapshot / snapshot snapshot \u00b6 val snapshot: Any","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-event/-object-snapshot/snapshot/#snapshot","text":"val snapshot: Any","title":"snapshot"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/","text":"workflow / com.squareup.tracing / TraceLogger TraceLogger \u00b6 interface TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name. Create with TraceEncoder.createLogger . Functions \u00b6 Name Summary log Tags all events with the current timestamp and then enqueues them to be written to the trace file. abstract fun log(eventBatch: List < TraceEvent >): Unit Tags event with the current timestamp and then enqueues it to be written to the trace file. abstract fun log(event: TraceEvent ): Unit","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/#tracelogger","text":"interface TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name. Create with TraceEncoder.createLogger .","title":"TraceLogger"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/#functions","text":"Name Summary log Tags all events with the current timestamp and then enqueues them to be written to the trace file. abstract fun log(eventBatch: List < TraceEvent >): Unit Tags event with the current timestamp and then enqueues it to be written to the trace file. abstract fun log(event: TraceEvent ): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/log/","text":"workflow / com.squareup.tracing / TraceLogger / log log \u00b6 abstract fun log(eventBatch: List < TraceEvent >): Unit Tags all events with the current timestamp and then enqueues them to be written to the trace file. abstract fun log(event: TraceEvent ): Unit Tags event with the current timestamp and then enqueues it to be written to the trace file.","title":"Log"},{"location":"kotlin/api/workflow/com.squareup.tracing/-trace-logger/log/#log","text":"abstract fun log(eventBatch: List < TraceEvent >): Unit Tags all events with the current timestamp and then enqueues them to be written to the trace file. abstract fun log(event: TraceEvent ): Unit Tags event with the current timestamp and then enqueues it to be written to the trace file.","title":"log"},{"location":"kotlin/api/workflow/com.squareup.workflow1/","text":"workflow / com.squareup.workflow1 Package com.squareup.workflow1 \u00b6 Types \u00b6 Name Summary BaseRenderContext Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. interface BaseRenderContext<out PropsT, StateT, in OutputT> ImpostorWorkflow Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. Two ImpostorWorkflow s with the same concrete class, but different realIdentifier s will be considered different workflows by the runtime. interface ImpostorWorkflow LifecycleWorker Worker that performs some action when the worker is started and/or stopped. abstract class LifecycleWorker : Worker < Nothing > NoopWorkflowInterceptor A WorkflowInterceptor that does not intercept anything. object NoopWorkflowInterceptor : WorkflowInterceptor RenderingAndSnapshot Tuple of rendering and snapshot used by renderWorkflowIn . class RenderingAndSnapshot<out RenderingT> SimpleLoggingWorkflowInterceptor A WorkflowInterceptor that just prints all method calls using log . open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor Sink interface Sink<in T> Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. class Snapshot StatefulWorkflow A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. abstract class StatefulWorkflow<in PropsT, StateT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> StatelessWorkflow Minimal implementation of Workflow that maintains no state of its own. abstract class StatelessWorkflow<in PropsT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> TreeSnapshot Aggregate of all the snapshots of a tree of workflows. class TreeSnapshot Worker Represents a unit of asynchronous work that can have zero, one, or multiple outputs. interface Worker<out OutputT> Workflow A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. interface Workflow<in PropsT, out OutputT, out RenderingT> WorkflowAction An atomic operation that updates the state of a Workflow , and also optionally emits an output. abstract class WorkflowAction<in PropsT, StateT, out OutputT> WorkflowIdentifier Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. class WorkflowIdentifier WorkflowInterceptor Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. interface WorkflowInterceptor WorkflowOutput Wrapper around a potentially-nullable OutputT value. class WorkflowOutput<out OutputT> Annotations \u00b6 Name Summary ExperimentalWorkflowApi Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. annotation class ExperimentalWorkflowApi Extensions for External Classes \u00b6 Name Summary kotlin.reflect.KClass kotlinx.coroutines.flow.Flow okio.BufferedSink okio.BufferedSource okio.ByteString Properties \u00b6 Name Summary identifier The WorkflowIdentifier that identifies this Workflow . val Workflow <*, *, *>.identifier: WorkflowIdentifier Functions \u00b6 Name Summary <no name provided> An object that receives values (commonly events or WorkflowAction ). RenderContext.actionSink implements this interface. fun <no name provided>(): Unit action Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . fun <PropsT, StateT, OutputT> action(name: String = \"\", apply: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> fun <PropsT, StateT, OutputT> action(name: () -> String , apply: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> applyTo Applies this WorkflowAction to state . fun <PropsT, StateT, OutputT> WorkflowAction <PropsT, StateT, OutputT>.applyTo(props: PropsT, state: StateT): Pair <StateT, WorkflowOutput <OutputT>?> contraMap Generates a new sink of type T2 . fun <T1, T2> Sink <T1>.contraMap(transform: (T2) -> T1): Sink <T2> invoke EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument. operator fun EventHandler< Unit >.invoke(): Unit mapRendering Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> renderChild Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. fun <PropsT, StateT, OutputT, ChildOutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , ChildOutputT, ChildRenderingT>, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. fun <PropsT, ChildPropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow <ChildPropsT, Nothing , ChildRenderingT>, props: ChildPropsT, key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output. fun <PropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , Nothing , ChildRenderingT>, key: String = \"\"): ChildRenderingT RenderContext Creates a RenderContext from a BaseRenderContext for the given StatefulWorkflow . fun <PropsT, StateT, OutputT, RenderingT> RenderContext(baseContext: BaseRenderContext <PropsT, StateT, OutputT>, workflow: StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>): RenderContext<PropsT, StateT, OutputT, RenderingT> Creates a RenderContext from a BaseRenderContext for the given StatelessWorkflow . fun <PropsT, OutputT, RenderingT> RenderContext(baseContext: BaseRenderContext <PropsT, *, OutputT>, workflow: StatelessWorkflow <PropsT, OutputT, RenderingT>): RenderContext<PropsT, OutputT, RenderingT> renderWorkflowIn Launches the workflow in a new coroutine in scope and returns a StateFlow of its renderings and snapshots . The workflow tree is seeded with initialSnapshot and the current value value of props . Subsequent values emitted from props will be used to re-render the workflow. fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, props: StateFlow<PropsT>, initialSnapshot: TreeSnapshot ? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit ): StateFlow< RenderingAndSnapshot <RenderingT>> runningWorker Ensures a Worker that never emits anything is running. Since worker can\u2019t emit anything, it can\u2019t trigger any WorkflowAction s. fun <W : Worker < Nothing >, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\"): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). fun <T, W : Worker <T>, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\", handler: (T) -> WorkflowAction <PropsT, StateT, OutputT>): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R> unsnapshottableIdentifier Creates a WorkflowIdentifier that is not capable of being snapshotted and will cause any ImpostorWorkflow workflow identified by it to also not be snapshotted. fun unsnapshottableIdentifier(type: KType ): WorkflowIdentifier Companion Object Functions \u00b6 Name Summary rendering Returns a workflow that does nothing but echo the given rendering . Handy for testing. fun <RenderingT> Workflow.Companion.rendering(rendering: RenderingT): Workflow < Unit , Nothing , RenderingT> stateful Returns a stateful Workflow implemented via the given functions. fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: (PropsT, Snapshot ?) -> StateT, render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, snapshot: (StateT) -> Snapshot ?, onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: (PropsT) -> StateT, render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given functions. fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: ( Snapshot ?) -> StateT, render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT, snapshot: (StateT) -> Snapshot ?): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given function. fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: StateT, render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> stateless Returns a stateless Workflow via the given render function. fun <PropsT, OutputT, RenderingT> Workflow.Companion.stateless(render: BaseRenderContext <PropsT, Nothing , OutputT>.(props: PropsT) -> RenderingT): Workflow <PropsT, OutputT, RenderingT>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#package-comsquareupworkflow1","text":"","title":"Package com.squareup.workflow1"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#types","text":"Name Summary BaseRenderContext Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. interface BaseRenderContext<out PropsT, StateT, in OutputT> ImpostorWorkflow Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. Two ImpostorWorkflow s with the same concrete class, but different realIdentifier s will be considered different workflows by the runtime. interface ImpostorWorkflow LifecycleWorker Worker that performs some action when the worker is started and/or stopped. abstract class LifecycleWorker : Worker < Nothing > NoopWorkflowInterceptor A WorkflowInterceptor that does not intercept anything. object NoopWorkflowInterceptor : WorkflowInterceptor RenderingAndSnapshot Tuple of rendering and snapshot used by renderWorkflowIn . class RenderingAndSnapshot<out RenderingT> SimpleLoggingWorkflowInterceptor A WorkflowInterceptor that just prints all method calls using log . open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor Sink interface Sink<in T> Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. class Snapshot StatefulWorkflow A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. abstract class StatefulWorkflow<in PropsT, StateT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> StatelessWorkflow Minimal implementation of Workflow that maintains no state of its own. abstract class StatelessWorkflow<in PropsT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> TreeSnapshot Aggregate of all the snapshots of a tree of workflows. class TreeSnapshot Worker Represents a unit of asynchronous work that can have zero, one, or multiple outputs. interface Worker<out OutputT> Workflow A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. interface Workflow<in PropsT, out OutputT, out RenderingT> WorkflowAction An atomic operation that updates the state of a Workflow , and also optionally emits an output. abstract class WorkflowAction<in PropsT, StateT, out OutputT> WorkflowIdentifier Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. class WorkflowIdentifier WorkflowInterceptor Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. interface WorkflowInterceptor WorkflowOutput Wrapper around a potentially-nullable OutputT value. class WorkflowOutput<out OutputT>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#annotations","text":"Name Summary ExperimentalWorkflowApi Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. annotation class ExperimentalWorkflowApi","title":"Annotations"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#extensions-for-external-classes","text":"Name Summary kotlin.reflect.KClass kotlinx.coroutines.flow.Flow okio.BufferedSink okio.BufferedSource okio.ByteString","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#properties","text":"Name Summary identifier The WorkflowIdentifier that identifies this Workflow . val Workflow <*, *, *>.identifier: WorkflowIdentifier","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#functions","text":"Name Summary <no name provided> An object that receives values (commonly events or WorkflowAction ). RenderContext.actionSink implements this interface. fun <no name provided>(): Unit action Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . fun <PropsT, StateT, OutputT> action(name: String = \"\", apply: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> fun <PropsT, StateT, OutputT> action(name: () -> String , apply: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> applyTo Applies this WorkflowAction to state . fun <PropsT, StateT, OutputT> WorkflowAction <PropsT, StateT, OutputT>.applyTo(props: PropsT, state: StateT): Pair <StateT, WorkflowOutput <OutputT>?> contraMap Generates a new sink of type T2 . fun <T1, T2> Sink <T1>.contraMap(transform: (T2) -> T1): Sink <T2> invoke EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument. operator fun EventHandler< Unit >.invoke(): Unit mapRendering Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> renderChild Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. fun <PropsT, StateT, OutputT, ChildOutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , ChildOutputT, ChildRenderingT>, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. fun <PropsT, ChildPropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow <ChildPropsT, Nothing , ChildRenderingT>, props: ChildPropsT, key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output. fun <PropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , Nothing , ChildRenderingT>, key: String = \"\"): ChildRenderingT RenderContext Creates a RenderContext from a BaseRenderContext for the given StatefulWorkflow . fun <PropsT, StateT, OutputT, RenderingT> RenderContext(baseContext: BaseRenderContext <PropsT, StateT, OutputT>, workflow: StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>): RenderContext<PropsT, StateT, OutputT, RenderingT> Creates a RenderContext from a BaseRenderContext for the given StatelessWorkflow . fun <PropsT, OutputT, RenderingT> RenderContext(baseContext: BaseRenderContext <PropsT, *, OutputT>, workflow: StatelessWorkflow <PropsT, OutputT, RenderingT>): RenderContext<PropsT, OutputT, RenderingT> renderWorkflowIn Launches the workflow in a new coroutine in scope and returns a StateFlow of its renderings and snapshots . The workflow tree is seeded with initialSnapshot and the current value value of props . Subsequent values emitted from props will be used to re-render the workflow. fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, props: StateFlow<PropsT>, initialSnapshot: TreeSnapshot ? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit ): StateFlow< RenderingAndSnapshot <RenderingT>> runningWorker Ensures a Worker that never emits anything is running. Since worker can\u2019t emit anything, it can\u2019t trigger any WorkflowAction s. fun <W : Worker < Nothing >, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\"): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). fun <T, W : Worker <T>, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\", handler: (T) -> WorkflowAction <PropsT, StateT, OutputT>): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R> unsnapshottableIdentifier Creates a WorkflowIdentifier that is not capable of being snapshotted and will cause any ImpostorWorkflow workflow identified by it to also not be snapshotted. fun unsnapshottableIdentifier(type: KType ): WorkflowIdentifier","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/#companion-object-functions","text":"Name Summary rendering Returns a workflow that does nothing but echo the given rendering . Handy for testing. fun <RenderingT> Workflow.Companion.rendering(rendering: RenderingT): Workflow < Unit , Nothing , RenderingT> stateful Returns a stateful Workflow implemented via the given functions. fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: (PropsT, Snapshot ?) -> StateT, render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, snapshot: (StateT) -> Snapshot ?, onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: (PropsT) -> StateT, render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given functions. fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: ( Snapshot ?) -> StateT, render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT, snapshot: (StateT) -> Snapshot ?): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given function. fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: StateT, render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> stateless Returns a stateless Workflow via the given render function. fun <PropsT, OutputT, RenderingT> Workflow.Companion.stateless(render: BaseRenderContext <PropsT, Nothing , OutputT>.(props: PropsT) -> RenderingT): Workflow <PropsT, OutputT, RenderingT>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-no%20name%20provided-/","text":"workflow / com.squareup.workflow1 / <no name provided> <no name provided> \u00b6 fun <no name provided>(): Unit An object that receives values (commonly events or WorkflowAction ). RenderContext.actionSink implements this interface.","title":" no name provided "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-no%20name%20provided-/#no-name-provided","text":"fun <no name provided>(): Unit An object that receives values (commonly events or WorkflowAction ). RenderContext.actionSink implements this interface.","title":"&lt;no name provided&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-noop-workflow-interceptor/","text":"workflow / com.squareup.workflow1 / NoopWorkflowInterceptor NoopWorkflowInterceptor \u00b6 @ExperimentalWorkflowApi object NoopWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that does not intercept anything.","title":" noop workflow interceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-noop-workflow-interceptor/#noopworkflowinterceptor","text":"@ExperimentalWorkflowApi object NoopWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that does not intercept anything.","title":"NoopWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-render-context/","text":"workflow / com.squareup.workflow1 / RenderContext RenderContext \u00b6 fun <PropsT, StateT, OutputT, RenderingT> RenderContext(baseContext: BaseRenderContext <PropsT, StateT, OutputT>, workflow: StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>): RenderContext<PropsT, StateT, OutputT, RenderingT> Creates a RenderContext from a BaseRenderContext for the given StatefulWorkflow . fun <PropsT, OutputT, RenderingT> RenderContext(baseContext: BaseRenderContext <PropsT, *, OutputT>, workflow: StatelessWorkflow <PropsT, OutputT, RenderingT>): RenderContext<PropsT, OutputT, RenderingT> Creates a RenderContext from a BaseRenderContext for the given StatelessWorkflow .","title":" render context"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-render-context/#rendercontext","text":"fun <PropsT, StateT, OutputT, RenderingT> RenderContext(baseContext: BaseRenderContext <PropsT, StateT, OutputT>, workflow: StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>): RenderContext<PropsT, StateT, OutputT, RenderingT> Creates a RenderContext from a BaseRenderContext for the given StatefulWorkflow . fun <PropsT, OutputT, RenderingT> RenderContext(baseContext: BaseRenderContext <PropsT, *, OutputT>, workflow: StatelessWorkflow <PropsT, OutputT, RenderingT>): RenderContext<PropsT, OutputT, RenderingT> Creates a RenderContext from a BaseRenderContext for the given StatelessWorkflow .","title":"RenderContext"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/","text":"workflow / com.squareup.workflow1 / action action \u00b6 fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . Parameters \u00b6 name - A string describing the update for debugging, included in toString . update - Function that defines the workflow update. fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . Parameters \u00b6 name - Function that returns a string describing the update for debugging, included in toString . update - Function that defines the workflow update. fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . Parameters \u00b6 name - A string describing the update for debugging, included in toString . update - Function that defines the workflow update. fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . Parameters \u00b6 name - Function that returns a string describing the update for debugging, included in toString . update - Function that defines the workflow update. inline fun <PropsT, StateT, OutputT> action(name: String = \"\", crossinline apply: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types. Parameters \u00b6 name - A string describing the update for debugging. apply - Function that defines the workflow update. See Also StatelessWorkflow.action StatefulWorkflow.action inline fun <PropsT, StateT, OutputT> action(crossinline name: () -> String , crossinline apply: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types. Parameters \u00b6 name - Function that returns a string describing the update for debugging. apply - Function that defines the workflow update. See Also StatelessWorkflow.action StatefulWorkflow.action","title":"Action"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#action","text":"fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"action"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters","text":"name - A string describing the update for debugging, included in toString . update - Function that defines the workflow update. fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_1","text":"name - Function that returns a string describing the update for debugging, included in toString . update - Function that defines the workflow update. fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_2","text":"name - A string describing the update for debugging, included in toString . update - Function that defines the workflow update. fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_3","text":"name - Function that returns a string describing the update for debugging, included in toString . update - Function that defines the workflow update. inline fun <PropsT, StateT, OutputT> action(name: String = \"\", crossinline apply: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_4","text":"name - A string describing the update for debugging. apply - Function that defines the workflow update. See Also StatelessWorkflow.action StatefulWorkflow.action inline fun <PropsT, StateT, OutputT> action(crossinline name: () -> String , crossinline apply: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/action/#parameters_5","text":"name - Function that returns a string describing the update for debugging. apply - Function that defines the workflow update. See Also StatelessWorkflow.action StatefulWorkflow.action","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/apply-to/","text":"workflow / com.squareup.workflow1 / applyTo applyTo \u00b6 @ExperimentalWorkflowApi fun <PropsT, StateT, OutputT> WorkflowAction <PropsT, StateT, OutputT>.applyTo(props: PropsT, state: StateT): Pair <StateT, WorkflowOutput <OutputT>?> Applies this WorkflowAction to state .","title":"Apply to"},{"location":"kotlin/api/workflow/com.squareup.workflow1/apply-to/#applyto","text":"@ExperimentalWorkflowApi fun <PropsT, StateT, OutputT> WorkflowAction <PropsT, StateT, OutputT>.applyTo(props: PropsT, state: StateT): Pair <StateT, WorkflowOutput <OutputT>?> Applies this WorkflowAction to state .","title":"applyTo"},{"location":"kotlin/api/workflow/com.squareup.workflow1/contra-map/","text":"workflow / com.squareup.workflow1 / contraMap contraMap \u00b6 fun <T1, T2> Sink <T1>.contraMap(transform: (T2) -> T1): Sink <T2> Generates a new sink of type T2 . Given a transform closure, the following code is functionally equivalent: sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type<T> into Type<U> via (T)->U . - contraMap turns Type<T> into Type<U> via (U)->T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API.","title":"Contra map"},{"location":"kotlin/api/workflow/com.squareup.workflow1/contra-map/#contramap","text":"fun <T1, T2> Sink <T1>.contraMap(transform: (T2) -> T1): Sink <T2> Generates a new sink of type T2 . Given a transform closure, the following code is functionally equivalent: sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type<T> into Type<U> via (T)->U . - contraMap turns Type<T> into Type<U> via (U)->T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API.","title":"contraMap"},{"location":"kotlin/api/workflow/com.squareup.workflow1/identifier/","text":"workflow / com.squareup.workflow1 / identifier identifier \u00b6 @ExperimentalWorkflowApi val Workflow <*, *, *>.identifier: WorkflowIdentifier The WorkflowIdentifier that identifies this Workflow .","title":"Identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/identifier/#identifier","text":"@ExperimentalWorkflowApi val Workflow <*, *, *>.identifier: WorkflowIdentifier The WorkflowIdentifier that identifies this Workflow .","title":"identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/invoke/","text":"workflow / com.squareup.workflow1 / invoke invoke \u00b6 operator fun EventHandler< Unit >.invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"Invoke"},{"location":"kotlin/api/workflow/com.squareup.workflow1/invoke/#invoke","text":"operator fun EventHandler< Unit >.invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"invoke"},{"location":"kotlin/api/workflow/com.squareup.workflow1/map-rendering/","text":"workflow / com.squareup.workflow1 / mapRendering mapRendering \u00b6 fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Map rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/map-rendering/#maprendering","text":"fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"mapRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-child/","text":"workflow / com.squareup.workflow1 / renderChild renderChild \u00b6 fun <PropsT, StateT, OutputT, ChildOutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , ChildOutputT, ChildRenderingT>, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. fun <PropsT, ChildPropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow <ChildPropsT, Nothing , ChildRenderingT>, props: ChildPropsT, key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. fun <PropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , Nothing , ChildRenderingT>, key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output.","title":"Render child"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-child/#renderchild","text":"fun <PropsT, StateT, OutputT, ChildOutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , ChildOutputT, ChildRenderingT>, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. fun <PropsT, ChildPropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow <ChildPropsT, Nothing , ChildRenderingT>, props: ChildPropsT, key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. fun <PropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , Nothing , ChildRenderingT>, key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output.","title":"renderChild"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/","text":"workflow / com.squareup.workflow1 / renderWorkflowIn renderWorkflowIn \u00b6 fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, props: StateFlow<PropsT>, initialSnapshot: TreeSnapshot ? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit ): StateFlow< RenderingAndSnapshot <RenderingT>> Launches the workflow in a new coroutine in scope and returns a StateFlow of its renderings and snapshots . The workflow tree is seeded with initialSnapshot and the current value value of props . Subsequent values emitted from props will be used to re-render the workflow. This is the primary low-level entry point into the workflow runtime. If you are writing an app, you should probably be using a higher-level entry point that will also let you define UI bindings for your renderings. Initialization \u00b6 When this function is called, the workflow runtime is started immediately, before the function even returns. The current value of the props is used to perform the initial render pass. The result of this render pass is used to initialize the StateFlow of renderings and snapshots that is returned. Once the initial render pass is complete, the workflow runtime will continue executing in a new coroutine launched in scope . Scoping \u00b6 The workflow runtime makes use of structured concurrency . The runtime is started in scope , which defines the context for the entire workflow tree \u2013 most importantly, the Job that governs the runtime\u2019s lifetime and exception reporting path, and the CoroutineDispatcher that decides on what thread(s) to run workflow code. Note that if the scope\u2019s dispatcher executes on threads different than the caller, then the initial render pass will occur on the current thread but all subsequent render passes, and actions, will be executed on that dispatcher. This shouldn\u2019t affect well-written workflows, since the render method should not perform side effects anyway. All workers that are run by this runtime will be collected in coroutines that are children of scope . When the root workflow emits an output, onOutput will be invoked in a child of scope . To stop the workflow runtime, simply cancel scope . Any running workers will be cancelled, and if onOutput is currently running it will be cancelled as well. Error handling \u00b6 If the initial render pass throws an exception, that exception will be thrown from this function. Any exceptions thrown from the runtime (and any workflows or workers) after that will bubble up and be handled by scope (usually by cancelling it). Since the onOutput function is executed in scope , any exceptions it throws will also bubble up to scope . Any exceptions thrown by subscribers of the returned StateFlow will not cancel scope or cancel the runtime, but will be handled in the CoroutineScope of the subscriber. Parameters \u00b6 workflow - The root workflow to render. scope - The CoroutineScope in which to launch the workflow runtime. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. props - Specifies the initial PropsT to use to render the root workflow, and will cause a re-render when new props are emitted. If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. To only pass a single props value, simply create a MutableStateFlow with the value. initialSnapshot - If not null or empty, used to restore the workflow. Should be obtained from a previous runtime\u2019s RenderingAndSnapshot . interceptors - An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to- length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput - A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel , for example. Return A StateFlow of RenderingAndSnapshot s that will emit any time the root workflow creates a new rendering.","title":"Render workflow in"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#renderworkflowin","text":"fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, props: StateFlow<PropsT>, initialSnapshot: TreeSnapshot ? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit ): StateFlow< RenderingAndSnapshot <RenderingT>> Launches the workflow in a new coroutine in scope and returns a StateFlow of its renderings and snapshots . The workflow tree is seeded with initialSnapshot and the current value value of props . Subsequent values emitted from props will be used to re-render the workflow. This is the primary low-level entry point into the workflow runtime. If you are writing an app, you should probably be using a higher-level entry point that will also let you define UI bindings for your renderings.","title":"renderWorkflowIn"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#initialization","text":"When this function is called, the workflow runtime is started immediately, before the function even returns. The current value of the props is used to perform the initial render pass. The result of this render pass is used to initialize the StateFlow of renderings and snapshots that is returned. Once the initial render pass is complete, the workflow runtime will continue executing in a new coroutine launched in scope .","title":"Initialization"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#scoping","text":"The workflow runtime makes use of structured concurrency . The runtime is started in scope , which defines the context for the entire workflow tree \u2013 most importantly, the Job that governs the runtime\u2019s lifetime and exception reporting path, and the CoroutineDispatcher that decides on what thread(s) to run workflow code. Note that if the scope\u2019s dispatcher executes on threads different than the caller, then the initial render pass will occur on the current thread but all subsequent render passes, and actions, will be executed on that dispatcher. This shouldn\u2019t affect well-written workflows, since the render method should not perform side effects anyway. All workers that are run by this runtime will be collected in coroutines that are children of scope . When the root workflow emits an output, onOutput will be invoked in a child of scope . To stop the workflow runtime, simply cancel scope . Any running workers will be cancelled, and if onOutput is currently running it will be cancelled as well.","title":"Scoping"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#error-handling","text":"If the initial render pass throws an exception, that exception will be thrown from this function. Any exceptions thrown from the runtime (and any workflows or workers) after that will bubble up and be handled by scope (usually by cancelling it). Since the onOutput function is executed in scope , any exceptions it throws will also bubble up to scope . Any exceptions thrown by subscribers of the returned StateFlow will not cancel scope or cancel the runtime, but will be handled in the CoroutineScope of the subscriber.","title":"Error handling"},{"location":"kotlin/api/workflow/com.squareup.workflow1/render-workflow-in/#parameters","text":"workflow - The root workflow to render. scope - The CoroutineScope in which to launch the workflow runtime. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. props - Specifies the initial PropsT to use to render the root workflow, and will cause a re-render when new props are emitted. If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. To only pass a single props value, simply create a MutableStateFlow with the value. initialSnapshot - If not null or empty, used to restore the workflow. Should be obtained from a previous runtime\u2019s RenderingAndSnapshot . interceptors - An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to- length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput - A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel , for example. Return A StateFlow of RenderingAndSnapshot s that will emit any time the root workflow creates a new rendering.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/rendering/","text":"workflow / com.squareup.workflow1 / rendering rendering \u00b6 fun <RenderingT> Workflow.Companion.rendering(rendering: RenderingT): Workflow < Unit , Nothing , RenderingT> Returns a workflow that does nothing but echo the given rendering . Handy for testing.","title":"Rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/rendering/#rendering","text":"fun <RenderingT> Workflow.Companion.rendering(rendering: RenderingT): Workflow < Unit , Nothing , RenderingT> Returns a workflow that does nothing but echo the given rendering . Handy for testing.","title":"rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/running-worker/","text":"workflow / com.squareup.workflow1 / runningWorker runningWorker \u00b6 fun <reified W : Worker < Nothing >, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can\u2019t emit anything, it can\u2019t trigger any WorkflowAction s. A simple way to create workers that don\u2019t output anything is using Worker.createSideEffect . Parameters \u00b6 key - An optional string key that is used to distinguish between identical Worker s. inline fun <T, reified W : Worker <T>, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\", noinline handler: (T) -> WorkflowAction <PropsT, StateT, OutputT>): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). Like workflows, workers are kept alive across multiple render passes if they\u2019re the same type, and different workers of distinct types can be run concurrently. However, unlike workflows, workers are compared by their declared type, not their actual type. This means that if you pass a worker stored in a variable to this function, the type that will be used to compare the worker will be the type of the variable, not the type of the object the variable refers to. Parameters \u00b6 key - An optional string key that is used to distinguish between identical Worker s.","title":"Running worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/running-worker/#runningworker","text":"fun <reified W : Worker < Nothing >, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can\u2019t emit anything, it can\u2019t trigger any WorkflowAction s. A simple way to create workers that don\u2019t output anything is using Worker.createSideEffect .","title":"runningWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/running-worker/#parameters","text":"key - An optional string key that is used to distinguish between identical Worker s. inline fun <T, reified W : Worker <T>, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\", noinline handler: (T) -> WorkflowAction <PropsT, StateT, OutputT>): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). Like workflows, workers are kept alive across multiple render passes if they\u2019re the same type, and different workers of distinct types can be run concurrently. However, unlike workflows, workers are compared by their declared type, not their actual type. This means that if you pass a worker stored in a variable to this function, the type that will be used to compare the worker will be the type of the variable, not the type of the object the variable refers to.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/running-worker/#parameters_1","text":"key - An optional string key that is used to distinguish between identical Worker s.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/stateful/","text":"workflow / com.squareup.workflow1 / stateful stateful \u00b6 inline fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(crossinline initialState: (PropsT, Snapshot ?) -> StateT, crossinline render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, crossinline snapshot: (StateT) -> Snapshot ?, crossinline onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Returns a stateful Workflow implemented via the given functions. inline fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(crossinline initialState: ( Snapshot ?) -> StateT, crossinline render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT, crossinline snapshot: (StateT) -> Snapshot ?): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given functions. inline fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(crossinline initialState: (PropsT) -> StateT, crossinline render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, crossinline onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Returns a stateful Workflow implemented via the given functions. This overload does not support snapshotting, but there are other overloads that do. inline fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: StateT, crossinline render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given function. This overload does not support snapshots, but there are others that do.","title":"Stateful"},{"location":"kotlin/api/workflow/com.squareup.workflow1/stateful/#stateful","text":"inline fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(crossinline initialState: (PropsT, Snapshot ?) -> StateT, crossinline render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, crossinline snapshot: (StateT) -> Snapshot ?, crossinline onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Returns a stateful Workflow implemented via the given functions. inline fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(crossinline initialState: ( Snapshot ?) -> StateT, crossinline render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT, crossinline snapshot: (StateT) -> Snapshot ?): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given functions. inline fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(crossinline initialState: (PropsT) -> StateT, crossinline render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, crossinline onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Returns a stateful Workflow implemented via the given functions. This overload does not support snapshotting, but there are other overloads that do. inline fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: StateT, crossinline render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given function. This overload does not support snapshots, but there are others that do.","title":"stateful"},{"location":"kotlin/api/workflow/com.squareup.workflow1/stateless/","text":"workflow / com.squareup.workflow1 / stateless stateless \u00b6 inline fun <PropsT, OutputT, RenderingT> Workflow.Companion.stateless(crossinline render: BaseRenderContext <PropsT, Nothing , OutputT>.(props: PropsT) -> RenderingT): Workflow <PropsT, OutputT, RenderingT> Returns a stateless Workflow via the given render function. Note that while the returned workflow doesn\u2019t have any internal state of its own, it may use props received from its parent, and it may render child workflows that do have their own internal state.","title":"Stateless"},{"location":"kotlin/api/workflow/com.squareup.workflow1/stateless/#stateless","text":"inline fun <PropsT, OutputT, RenderingT> Workflow.Companion.stateless(crossinline render: BaseRenderContext <PropsT, Nothing , OutputT>.(props: PropsT) -> RenderingT): Workflow <PropsT, OutputT, RenderingT> Returns a stateless Workflow via the given render function. Note that while the returned workflow doesn\u2019t have any internal state of its own, it may use props received from its parent, and it may render child workflows that do have their own internal state.","title":"stateless"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/","text":"workflow / com.squareup.workflow1 / transform transform \u00b6 fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R> Returns a Worker that transforms this Worker \u2018s Flow by calling transform . The returned worker is considered equivalent with any other worker returned by this function with the same receiver. Examples \u00b6 Workers from the same source are equivalent \u00b6 val secondsWorker = millisWorker.transform { it.map { millis -> millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = millisWorker.transform { it.map { millis -> millis.toSeconds() } } assert(secondsWorker.doesSameWorkAs(otherSecondsWorker)) Workers from different sources are not equivalent \u00b6 val secondsWorker = millisWorker.transform { it.map { millis -> millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = secondsWorker.transform { it } assert(!secondsWorker.doesSameWorkAs(otherSecondsWorker))","title":"Transform"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/#transform","text":"fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R> Returns a Worker that transforms this Worker \u2018s Flow by calling transform . The returned worker is considered equivalent with any other worker returned by this function with the same receiver.","title":"transform"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/#examples","text":"","title":"Examples"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/#workers-from-the-same-source-are-equivalent","text":"val secondsWorker = millisWorker.transform { it.map { millis -> millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = millisWorker.transform { it.map { millis -> millis.toSeconds() } } assert(secondsWorker.doesSameWorkAs(otherSecondsWorker))","title":"Workers from the same source are equivalent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/transform/#workers-from-different-sources-are-not-equivalent","text":"val secondsWorker = millisWorker.transform { it.map { millis -> millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = secondsWorker.transform { it } assert(!secondsWorker.doesSameWorkAs(otherSecondsWorker))","title":"Workers from different sources are not equivalent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/unsnapshottable-identifier/","text":"workflow / com.squareup.workflow1 / unsnapshottableIdentifier unsnapshottableIdentifier \u00b6 @ExperimentalWorkflowApi fun unsnapshottableIdentifier(type: KType ): WorkflowIdentifier Creates a WorkflowIdentifier that is not capable of being snapshotted and will cause any ImpostorWorkflow workflow identified by it to also not be snapshotted. This function should not be used for ImpostorWorkflow s that wrap arbitrary workflows , since those workflows may expect to be on snapshotted. Using such identifiers anywhere in the ImpostorWorkflow.realIdentifier chain will disable snapshotting for that workflow. Thisfunction should only be used for ImpostorWorkflow s that wrap a closed set of known workflowtypes.","title":"Unsnapshottable identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/unsnapshottable-identifier/#unsnapshottableidentifier","text":"@ExperimentalWorkflowApi fun unsnapshottableIdentifier(type: KType ): WorkflowIdentifier Creates a WorkflowIdentifier that is not capable of being snapshotted and will cause any ImpostorWorkflow workflow identified by it to also not be snapshotted. This function should not be used for ImpostorWorkflow s that wrap arbitrary workflows , since those workflows may expect to be on snapshotted. Using such identifiers anywhere in the ImpostorWorkflow.realIdentifier chain will disable snapshotting for that workflow. Thisfunction should only be used for ImpostorWorkflow s that wrap a closed set of known workflowtypes.","title":"unsnapshottableIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/","text":"workflow / com.squareup.workflow1 / BaseRenderContext BaseRenderContext \u00b6 interface BaseRenderContext<out PropsT, StateT, in OutputT> Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. Handling events from the UI \u00b6 While a workflow\u2019s rendering can represent whatever you need it to, it is common for the rendering to contain the data for some part of your UI. In addition to shuttling data to the UI, the rendering can also contain functions that the UI can call to send events to the workflow. E.g. data class Rendering( val radioButtonTexts: List<String>, val onSelected: (index: Int) -> Unit ) To create populate such functions from your render method, you first need to define a WorkflowAction to handle the event by changing state, emitting an output, or both. Then, just pass a lambda to your rendering that instantiates the action and passes it to actionSink.send . Performing asynchronous work \u00b6 See runningWorker . Composing children \u00b6 See renderChild . Properties \u00b6 Name Summary actionSink Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null. abstract val actionSink: Sink < WorkflowAction <PropsT, StateT, OutputT>> Functions \u00b6 Name Summary eventHandler Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . Handy for attaching event handlers to renderings. open fun eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.() -> Unit ): () -> Unit open fun <EventT> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(EventT) -> Unit ): (EventT) -> Unit open fun <E1, E2> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2) -> Unit ): (E1, E2) -> Unit open fun <E1, E2, E3> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3) -> Unit ): (E1, E2, E3) -> Unit open fun <E1, E2, E3, E4> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4) -> Unit ): (E1, E2, E3, E4) -> Unit open fun <E1, E2, E3, E4, E5> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5) -> Unit ): (E1, E2, E3, E4, E5) -> Unit open fun <E1, E2, E3, E4, E5, E6> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6) -> Unit ): (E1, E2, E3, E4, E5, E6) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7) -> Unit ): (E1, E2, E3, E4, E5, E6, E7) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8, E9> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8, E9, E10> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit renderChild Ensures child is running as a child of this workflow, and returns the result of its render method. abstract fun <ChildPropsT, ChildOutputT, ChildRenderingT> renderChild(child: Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>, props: ChildPropsT, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT runningSideEffect Ensures sideEffect is running with the given key . abstract fun runningSideEffect(key: String , sideEffect: suspend CoroutineScope.() -> Unit ): Unit Extension Functions \u00b6 Name Summary renderChild Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. fun <PropsT, StateT, OutputT, ChildOutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , ChildOutputT, ChildRenderingT>, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. fun <PropsT, ChildPropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow <ChildPropsT, Nothing , ChildRenderingT>, props: ChildPropsT, key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output. fun <PropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , Nothing , ChildRenderingT>, key: String = \"\"): ChildRenderingT runningWorker Ensures a Worker that never emits anything is running. Since worker can\u2019t emit anything, it can\u2019t trigger any WorkflowAction s. fun <W : Worker < Nothing >, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\"): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). fun <T, W : Worker <T>, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\", handler: (T) -> WorkflowAction <PropsT, StateT, OutputT>): Unit","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#baserendercontext","text":"interface BaseRenderContext<out PropsT, StateT, in OutputT> Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function.","title":"BaseRenderContext"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#handling-events-from-the-ui","text":"While a workflow\u2019s rendering can represent whatever you need it to, it is common for the rendering to contain the data for some part of your UI. In addition to shuttling data to the UI, the rendering can also contain functions that the UI can call to send events to the workflow. E.g. data class Rendering( val radioButtonTexts: List<String>, val onSelected: (index: Int) -> Unit ) To create populate such functions from your render method, you first need to define a WorkflowAction to handle the event by changing state, emitting an output, or both. Then, just pass a lambda to your rendering that instantiates the action and passes it to actionSink.send .","title":"Handling events from the UI"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#performing-asynchronous-work","text":"See runningWorker .","title":"Performing asynchronous work"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#composing-children","text":"See renderChild .","title":"Composing children"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#properties","text":"Name Summary actionSink Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null. abstract val actionSink: Sink < WorkflowAction <PropsT, StateT, OutputT>>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#functions","text":"Name Summary eventHandler Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . Handy for attaching event handlers to renderings. open fun eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.() -> Unit ): () -> Unit open fun <EventT> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(EventT) -> Unit ): (EventT) -> Unit open fun <E1, E2> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2) -> Unit ): (E1, E2) -> Unit open fun <E1, E2, E3> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3) -> Unit ): (E1, E2, E3) -> Unit open fun <E1, E2, E3, E4> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4) -> Unit ): (E1, E2, E3, E4) -> Unit open fun <E1, E2, E3, E4, E5> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5) -> Unit ): (E1, E2, E3, E4, E5) -> Unit open fun <E1, E2, E3, E4, E5, E6> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6) -> Unit ): (E1, E2, E3, E4, E5, E6) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7) -> Unit ): (E1, E2, E3, E4, E5, E6, E7) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8, E9> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8, E9, E10> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit renderChild Ensures child is running as a child of this workflow, and returns the result of its render method. abstract fun <ChildPropsT, ChildOutputT, ChildRenderingT> renderChild(child: Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>, props: ChildPropsT, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT runningSideEffect Ensures sideEffect is running with the given key . abstract fun runningSideEffect(key: String , sideEffect: suspend CoroutineScope.() -> Unit ): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/#extension-functions","text":"Name Summary renderChild Convenience alias of RenderContext.renderChild for workflows that don\u2019t take props. fun <PropsT, StateT, OutputT, ChildOutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , ChildOutputT, ChildRenderingT>, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don\u2019t emit output. fun <PropsT, ChildPropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow <ChildPropsT, Nothing , ChildRenderingT>, props: ChildPropsT, key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for children that don\u2019t take props or emit output. fun <PropsT, StateT, OutputT, ChildRenderingT> BaseRenderContext <PropsT, StateT, OutputT>.renderChild(child: Workflow < Unit , Nothing , ChildRenderingT>, key: String = \"\"): ChildRenderingT runningWorker Ensures a Worker that never emits anything is running. Since worker can\u2019t emit anything, it can\u2019t trigger any WorkflowAction s. fun <W : Worker < Nothing >, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\"): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). fun <T, W : Worker <T>, PropsT, StateT, OutputT> BaseRenderContext <PropsT, StateT, OutputT>.runningWorker(worker: W, key: String = \"\", handler: (T) -> WorkflowAction <PropsT, StateT, OutputT>): Unit","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/action-sink/","text":"workflow / com.squareup.workflow1 / BaseRenderContext / actionSink actionSink \u00b6 abstract val actionSink: Sink < WorkflowAction <PropsT, StateT, OutputT>> Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null.","title":"Action sink"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/action-sink/#actionsink","text":"abstract val actionSink: Sink < WorkflowAction <PropsT, StateT, OutputT>> Accepts a single WorkflowAction , invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null.","title":"actionSink"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/event-handler/","text":"workflow / com.squareup.workflow1 / BaseRenderContext / eventHandler eventHandler \u00b6 open fun eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.() -> Unit ): () -> Unit Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . Handy for attaching event handlers to renderings. Parameters \u00b6 name - A string describing the update, included in the action\u2019s toString as a debugging aid update - Function that defines the workflow update. open fun <EventT> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(EventT) -> Unit ): (EventT) -> Unit open fun <E1, E2> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2) -> Unit ): (E1, E2) -> Unit open fun <E1, E2, E3> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3) -> Unit ): (E1, E2, E3) -> Unit open fun <E1, E2, E3, E4> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4) -> Unit ): (E1, E2, E3, E4) -> Unit open fun <E1, E2, E3, E4, E5> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5) -> Unit ): (E1, E2, E3, E4, E5) -> Unit open fun <E1, E2, E3, E4, E5, E6> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6) -> Unit ): (E1, E2, E3, E4, E5, E6) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7) -> Unit ): (E1, E2, E3, E4, E5, E6, E7) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8, E9> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8, E9, E10> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit","title":"Event handler"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/event-handler/#eventhandler","text":"open fun eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.() -> Unit ): () -> Unit Creates a function which builds a WorkflowAction from the given update function, and immediately passes it to actionSink . Handy for attaching event handlers to renderings.","title":"eventHandler"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/event-handler/#parameters","text":"name - A string describing the update, included in the action\u2019s toString as a debugging aid update - Function that defines the workflow update. open fun <EventT> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(EventT) -> Unit ): (EventT) -> Unit open fun <E1, E2> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2) -> Unit ): (E1, E2) -> Unit open fun <E1, E2, E3> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3) -> Unit ): (E1, E2, E3) -> Unit open fun <E1, E2, E3, E4> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4) -> Unit ): (E1, E2, E3, E4) -> Unit open fun <E1, E2, E3, E4, E5> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5) -> Unit ): (E1, E2, E3, E4, E5) -> Unit open fun <E1, E2, E3, E4, E5, E6> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6) -> Unit ): (E1, E2, E3, E4, E5, E6) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7) -> Unit ): (E1, E2, E3, E4, E5, E6, E7) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8, E9> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9) -> Unit open fun <E1, E2, E3, E4, E5, E6, E7, E8, E9, E10> eventHandler(name: () -> String = { \"eventHandler\" }, update: Updater<PropsT, StateT, OutputT>.(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit ): (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) -> Unit","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/render-child/","text":"workflow / com.squareup.workflow1 / BaseRenderContext / renderChild renderChild \u00b6 abstract fun <ChildPropsT, ChildOutputT, ChildRenderingT> renderChild(child: Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>, props: ChildPropsT, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method. Never call StatefulWorkflow.render or StatelessWorkflow.render directly, always do itthrough this context method. If the child wasn\u2019t already running, it will be started either from initialState or its snapshot. If the child was already running, The workflow\u2019s onPropsChanged method is invoked with the previous input and this one. The child\u2019s render method is invoked with input and the child\u2019s state. After this method returns, if something happens that trigger\u2019s one of child \u2018s handlers, and that handler emits an output, the function passed as handler will be invoked with that output. Parameters \u00b6 key - An optional string key that is used to distinguish between workflows of the same type.","title":"Render child"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/render-child/#renderchild","text":"abstract fun <ChildPropsT, ChildOutputT, ChildRenderingT> renderChild(child: Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>, props: ChildPropsT, key: String = \"\", handler: (ChildOutputT) -> WorkflowAction <PropsT, StateT, OutputT>): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method. Never call StatefulWorkflow.render or StatelessWorkflow.render directly, always do itthrough this context method. If the child wasn\u2019t already running, it will be started either from initialState or its snapshot. If the child was already running, The workflow\u2019s onPropsChanged method is invoked with the previous input and this one. The child\u2019s render method is invoked with input and the child\u2019s state. After this method returns, if something happens that trigger\u2019s one of child \u2018s handlers, and that handler emits an output, the function passed as handler will be invoked with that output.","title":"renderChild"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/render-child/#parameters","text":"key - An optional string key that is used to distinguish between workflows of the same type.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/running-side-effect/","text":"workflow / com.squareup.workflow1 / BaseRenderContext / runningSideEffect runningSideEffect \u00b6 abstract fun runningSideEffect(key: String , sideEffect: suspend CoroutineScope.() -> Unit ): Unit Ensures sideEffect is running with the given key . The first render pass in which this method is called, sideEffect will be launched in a new coroutine that will be scoped to the rendering Workflow . Subsequent render passes that invoke this method with the same key will not launch the coroutine again, but let it keep running. Note that if a different function is passed with the same key, the side effect will not be restarted, the new function will simply be ignored. The next render pass in which the workflow does not call this method with the same key, the coroutine running sideEffect will be cancelled . The coroutine will run with the same CoroutineContext that the workflow runtime is running in. The side effect coroutine will not be started until after the first render call than runs it returns. Parameters \u00b6 key - The string key that is used to distinguish between side effects. sideEffect - The suspend function that will be launched in a coroutine to perform the side effect.","title":"Running side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/running-side-effect/#runningsideeffect","text":"abstract fun runningSideEffect(key: String , sideEffect: suspend CoroutineScope.() -> Unit ): Unit Ensures sideEffect is running with the given key . The first render pass in which this method is called, sideEffect will be launched in a new coroutine that will be scoped to the rendering Workflow . Subsequent render passes that invoke this method with the same key will not launch the coroutine again, but let it keep running. Note that if a different function is passed with the same key, the side effect will not be restarted, the new function will simply be ignored. The next render pass in which the workflow does not call this method with the same key, the coroutine running sideEffect will be cancelled . The coroutine will run with the same CoroutineContext that the workflow runtime is running in. The side effect coroutine will not be started until after the first render call than runs it returns.","title":"runningSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-base-render-context/running-side-effect/#parameters","text":"key - The string key that is used to distinguish between side effects. sideEffect - The suspend function that will be launched in a coroutine to perform the side effect.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/","text":"workflow / com.squareup.workflow1 / ExperimentalWorkflowApi ExperimentalWorkflowApi \u00b6 annotation class ExperimentalWorkflowApi Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. Constructors \u00b6 Name Summary <init> Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. ExperimentalWorkflowApi()","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/#experimentalworkflowapi","text":"annotation class ExperimentalWorkflowApi Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"ExperimentalWorkflowApi"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/#constructors","text":"Name Summary <init> Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. ExperimentalWorkflowApi()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/-init-/","text":"workflow / com.squareup.workflow1 / ExperimentalWorkflowApi / <init> <init> \u00b6 ExperimentalWorkflowApi() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-experimental-workflow-api/-init-/#init","text":"ExperimentalWorkflowApi() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/","text":"workflow / com.squareup.workflow1 / ImpostorWorkflow ImpostorWorkflow \u00b6 @ExperimentalWorkflowApi interface ImpostorWorkflow Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. Two ImpostorWorkflow s with the same concrete class, but different realIdentifier s will be considered different workflows by the runtime. This is intended to be used for helper workflows that implement things like operators by wrapping and delegating to other workflows, and which need to be able to express that the identity of the operator workflow is derived from the identity of the wrapped workflow. Properties \u00b6 Name Summary realIdentifier The WorkflowIdentifier of another workflow to be combined with the identifier of this workflow, as obtained by Workflow.identifier . abstract val realIdentifier: WorkflowIdentifier Functions \u00b6 Name Summary describeRealIdentifier Returns a string that describes how this workflow is related to realIdentifier . open fun describeRealIdentifier(): String ?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/#impostorworkflow","text":"@ExperimentalWorkflowApi interface ImpostorWorkflow Optional interface that Workflow s should implement if they need the runtime to consider their identity to include a child workflow\u2019s identity. Two ImpostorWorkflow s with the same concrete class, but different realIdentifier s will be considered different workflows by the runtime. This is intended to be used for helper workflows that implement things like operators by wrapping and delegating to other workflows, and which need to be able to express that the identity of the operator workflow is derived from the identity of the wrapped workflow.","title":"ImpostorWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/#properties","text":"Name Summary realIdentifier The WorkflowIdentifier of another workflow to be combined with the identifier of this workflow, as obtained by Workflow.identifier . abstract val realIdentifier: WorkflowIdentifier","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/#functions","text":"Name Summary describeRealIdentifier Returns a string that describes how this workflow is related to realIdentifier . open fun describeRealIdentifier(): String ?","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/describe-real-identifier/","text":"workflow / com.squareup.workflow1 / ImpostorWorkflow / describeRealIdentifier describeRealIdentifier \u00b6 open fun describeRealIdentifier(): String ? Returns a string that describes how this workflow is related to realIdentifier .","title":"Describe real identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/describe-real-identifier/#describerealidentifier","text":"open fun describeRealIdentifier(): String ? Returns a string that describes how this workflow is related to realIdentifier .","title":"describeRealIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/real-identifier/","text":"workflow / com.squareup.workflow1 / ImpostorWorkflow / realIdentifier realIdentifier \u00b6 abstract val realIdentifier: WorkflowIdentifier The WorkflowIdentifier of another workflow to be combined with the identifier of this workflow, as obtained by Workflow.identifier . For workflows that implement operators, this should be the identifier of the upstream Workflow that this workflow wraps.","title":"Real identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-impostor-workflow/real-identifier/#realidentifier","text":"abstract val realIdentifier: WorkflowIdentifier The WorkflowIdentifier of another workflow to be combined with the identifier of this workflow, as obtained by Workflow.identifier . For workflows that implement operators, this should be the identifier of the upstream Workflow that this workflow wraps.","title":"realIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/","text":"workflow / com.squareup.workflow1 / LifecycleWorker LifecycleWorker \u00b6 abstract class LifecycleWorker : Worker < Nothing > Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down. Constructors \u00b6 Name Summary <init> Worker that performs some action when the worker is started and/or stopped. LifecycleWorker() Functions \u00b6 Name Summary doesSameWorkAs Equates LifecycleWorker s that have the same concrete class. open fun doesSameWorkAs(otherWorker: Worker <*>): Boolean onStarted Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. open fun onStarted(): Unit onStopped Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. open fun onStopped(): Unit run Returns a Flow to execute the work represented by this worker. fun run(): Flow< Nothing > Extension Functions \u00b6 Name Summary test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/#lifecycleworker","text":"abstract class LifecycleWorker : Worker < Nothing > Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down.","title":"LifecycleWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/#constructors","text":"Name Summary <init> Worker that performs some action when the worker is started and/or stopped. LifecycleWorker()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/#functions","text":"Name Summary doesSameWorkAs Equates LifecycleWorker s that have the same concrete class. open fun doesSameWorkAs(otherWorker: Worker <*>): Boolean onStarted Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. open fun onStarted(): Unit onStopped Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. open fun onStopped(): Unit run Returns a Flow to execute the work represented by this worker. fun run(): Flow< Nothing >","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/#extension-functions","text":"Name Summary test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/-init-/","text":"workflow / com.squareup.workflow1 / LifecycleWorker / <init> <init> \u00b6 LifecycleWorker() Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/-init-/#init","text":"LifecycleWorker() Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/does-same-work-as/","text":"workflow / com.squareup.workflow1 / LifecycleWorker / doesSameWorkAs doesSameWorkAs \u00b6 open fun doesSameWorkAs(otherWorker: Worker <*>): Boolean Equates LifecycleWorker s that have the same concrete class.","title":"Does same work as"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/does-same-work-as/#doessameworkas","text":"open fun doesSameWorkAs(otherWorker: Worker <*>): Boolean Equates LifecycleWorker s that have the same concrete class.","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/on-started/","text":"workflow / com.squareup.workflow1 / LifecycleWorker / onStarted onStarted \u00b6 open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStopped , and it will always be called first. Invoked on the dispatcher running the workflow.","title":"On started"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/on-started/#onstarted","text":"open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStopped , and it will always be called first. Invoked on the dispatcher running the workflow.","title":"onStarted"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/on-stopped/","text":"workflow / com.squareup.workflow1 / LifecycleWorker / onStopped onStopped \u00b6 open fun onStopped(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStarted , and it will always be called second. Invoked on the dispatcher running the workflow.","title":"On stopped"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/on-stopped/#onstopped","text":"open fun onStopped(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStarted , and it will always be called second. Invoked on the dispatcher running the workflow.","title":"onStopped"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/run/","text":"workflow / com.squareup.workflow1 / LifecycleWorker / run run \u00b6 fun run(): Flow< Nothing > Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker<Nothing> ). Coroutine Context \u00b6 When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don\u2019t care which thread they\u2019re executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString ) and the key specified by the workflow running the worker. Exceptions \u00b6 If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Run"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/run/#run","text":"fun run(): Flow< Nothing > Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker<Nothing> ).","title":"run"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/run/#coroutine-context","text":"When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don\u2019t care which thread they\u2019re executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString ) and the key specified by the workflow running the worker.","title":"Coroutine Context"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-lifecycle-worker/run/#exceptions","text":"If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/","text":"workflow / com.squareup.workflow1 / RenderingAndSnapshot RenderingAndSnapshot \u00b6 class RenderingAndSnapshot<out RenderingT> Tuple of rendering and snapshot used by renderWorkflowIn . Note that this class keeps the default identity equality implementation it inherits from Any , rather than comparing its rendering or snapshot . Constructors \u00b6 Name Summary <init> Tuple of rendering and snapshot used by renderWorkflowIn . RenderingAndSnapshot(rendering: RenderingT, snapshot: TreeSnapshot ) Properties \u00b6 Name Summary rendering val rendering: RenderingT snapshot val snapshot: TreeSnapshot Functions \u00b6 Name Summary component1 operator fun component1(): RenderingT component2 operator fun component2(): TreeSnapshot","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/#renderingandsnapshot","text":"class RenderingAndSnapshot<out RenderingT> Tuple of rendering and snapshot used by renderWorkflowIn . Note that this class keeps the default identity equality implementation it inherits from Any , rather than comparing its rendering or snapshot .","title":"RenderingAndSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/#constructors","text":"Name Summary <init> Tuple of rendering and snapshot used by renderWorkflowIn . RenderingAndSnapshot(rendering: RenderingT, snapshot: TreeSnapshot )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/#properties","text":"Name Summary rendering val rendering: RenderingT snapshot val snapshot: TreeSnapshot","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/#functions","text":"Name Summary component1 operator fun component1(): RenderingT component2 operator fun component2(): TreeSnapshot","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/-init-/","text":"workflow / com.squareup.workflow1 / RenderingAndSnapshot / <init> <init> \u00b6 RenderingAndSnapshot(rendering: RenderingT, snapshot: TreeSnapshot ) Tuple of rendering and snapshot used by renderWorkflowIn . Note that this class keeps the default identity equality implementation it inherits from Any , rather than comparing its rendering or snapshot .","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/-init-/#init","text":"RenderingAndSnapshot(rendering: RenderingT, snapshot: TreeSnapshot ) Tuple of rendering and snapshot used by renderWorkflowIn . Note that this class keeps the default identity equality implementation it inherits from Any , rather than comparing its rendering or snapshot .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/component1/","text":"workflow / com.squareup.workflow1 / RenderingAndSnapshot / component1 component1 \u00b6 operator fun component1(): RenderingT","title":"Component1"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/component1/#component1","text":"operator fun component1(): RenderingT","title":"component1"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/component2/","text":"workflow / com.squareup.workflow1 / RenderingAndSnapshot / component2 component2 \u00b6 operator fun component2(): TreeSnapshot","title":"Component2"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/component2/#component2","text":"operator fun component2(): TreeSnapshot","title":"component2"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/rendering/","text":"workflow / com.squareup.workflow1 / RenderingAndSnapshot / rendering rendering \u00b6 val rendering: RenderingT","title":"Rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/rendering/#rendering","text":"val rendering: RenderingT","title":"rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/snapshot/","text":"workflow / com.squareup.workflow1 / RenderingAndSnapshot / snapshot snapshot \u00b6 val snapshot: TreeSnapshot","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-rendering-and-snapshot/snapshot/#snapshot","text":"val snapshot: TreeSnapshot","title":"snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor SimpleLoggingWorkflowInterceptor \u00b6 open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that just prints all method calls using log . Constructors \u00b6 Name Summary <init> A WorkflowInterceptor that just prints all method calls using log . SimpleLoggingWorkflowInterceptor() Functions \u00b6 Name Summary log Called by logBeforeMethod and logAfterMethod to display a log message. open fun log(text: String ): Unit logAfterMethod Called with descriptions of every event. Default implementation just calls log . open fun logAfterMethod(name: String , session: WorkflowSession, vararg extras: Pair < String , Any ?>): Unit logBeforeMethod Called with descriptions of every event. Default implementation just calls log . open fun logBeforeMethod(name: String , session: WorkflowSession, vararg extras: Pair < String , Any ?>): Unit logError open fun logError(text: String ): Unit onInitialState Intercepts calls to StatefulWorkflow.initialState . open fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S onPropsChanged Intercepts calls to StatefulWorkflow.onPropsChanged . open fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S onRender Intercepts calls to StatefulWorkflow.render . open fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R onSessionStarted Called when the session is starting, before onInitialState . open fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit onSnapshotState Intercepts calls to StatefulWorkflow.snapshotState . open fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/#simpleloggingworkflowinterceptor","text":"open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that just prints all method calls using log .","title":"SimpleLoggingWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/#constructors","text":"Name Summary <init> A WorkflowInterceptor that just prints all method calls using log . SimpleLoggingWorkflowInterceptor()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/#functions","text":"Name Summary log Called by logBeforeMethod and logAfterMethod to display a log message. open fun log(text: String ): Unit logAfterMethod Called with descriptions of every event. Default implementation just calls log . open fun logAfterMethod(name: String , session: WorkflowSession, vararg extras: Pair < String , Any ?>): Unit logBeforeMethod Called with descriptions of every event. Default implementation just calls log . open fun logBeforeMethod(name: String , session: WorkflowSession, vararg extras: Pair < String , Any ?>): Unit logError open fun logError(text: String ): Unit onInitialState Intercepts calls to StatefulWorkflow.initialState . open fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S onPropsChanged Intercepts calls to StatefulWorkflow.onPropsChanged . open fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S onRender Intercepts calls to StatefulWorkflow.render . open fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R onSessionStarted Called when the session is starting, before onInitialState . open fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit onSnapshotState Intercepts calls to StatefulWorkflow.snapshotState . open fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ?","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/-init-/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / <init> <init> \u00b6 SimpleLoggingWorkflowInterceptor() A WorkflowInterceptor that just prints all method calls using log .","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/-init-/#init","text":"SimpleLoggingWorkflowInterceptor() A WorkflowInterceptor that just prints all method calls using log .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/log-after-method/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / logAfterMethod logAfterMethod \u00b6 protected open fun logAfterMethod(name: String , session: WorkflowSession, vararg extras: Pair < String , Any ?>): Unit Called with descriptions of every event. Default implementation just calls log .","title":"Log after method"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/log-after-method/#logaftermethod","text":"protected open fun logAfterMethod(name: String , session: WorkflowSession, vararg extras: Pair < String , Any ?>): Unit Called with descriptions of every event. Default implementation just calls log .","title":"logAfterMethod"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/log-before-method/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / logBeforeMethod logBeforeMethod \u00b6 protected open fun logBeforeMethod(name: String , session: WorkflowSession, vararg extras: Pair < String , Any ?>): Unit Called with descriptions of every event. Default implementation just calls log .","title":"Log before method"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/log-before-method/#logbeforemethod","text":"protected open fun logBeforeMethod(name: String , session: WorkflowSession, vararg extras: Pair < String , Any ?>): Unit Called with descriptions of every event. Default implementation just calls log .","title":"logBeforeMethod"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/log-error/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / logError logError \u00b6 protected open fun logError(text: String ): Unit","title":"Log error"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/log-error/#logerror","text":"protected open fun logError(text: String ): Unit","title":"logError"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/log/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / log log \u00b6 protected open fun log(text: String ): Unit Called by logBeforeMethod and logAfterMethod to display a log message.","title":"Log"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/log/#log","text":"protected open fun log(text: String ): Unit Called by logBeforeMethod and logAfterMethod to display a log message.","title":"log"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-initial-state/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onInitialState onInitialState \u00b6 open fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.initialState .","title":"On initial state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-initial-state/#oninitialstate","text":"open fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.initialState .","title":"onInitialState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-props-changed/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onPropsChanged onPropsChanged \u00b6 open fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"On props changed"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-props-changed/#onpropschanged","text":"open fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"onPropsChanged"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-render/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onRender onRender \u00b6 open fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R Intercepts calls to StatefulWorkflow.render .","title":"On render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-render/#onrender","text":"open fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R Intercepts calls to StatefulWorkflow.render .","title":"onRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-session-started/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onSessionStarted onSessionStarted \u00b6 open fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit Called when the session is starting, before onInitialState . Parameters \u00b6 workflowScope - The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"On session started"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-session-started/#onsessionstarted","text":"open fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit Called when the session is starting, before onInitialState .","title":"onSessionStarted"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-session-started/#parameters","text":"workflowScope - The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-snapshot-state/","text":"workflow / com.squareup.workflow1 / SimpleLoggingWorkflowInterceptor / onSnapshotState onSnapshotState \u00b6 open fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ? Intercepts calls to StatefulWorkflow.snapshotState .","title":"On snapshot state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-simple-logging-workflow-interceptor/on-snapshot-state/#onsnapshotstate","text":"open fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ? Intercepts calls to StatefulWorkflow.snapshotState .","title":"onSnapshotState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/","text":"workflow / com.squareup.workflow1 / Sink Sink \u00b6 interface Sink<in T> Functions \u00b6 Name Summary send abstract fun send(value: T): Unit Extension Functions \u00b6 Name Summary contraMap Generates a new sink of type T2 . fun <T1, T2> Sink <T1>.contraMap(transform: (T2) -> T1): Sink <T2>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/#sink","text":"interface Sink<in T>","title":"Sink"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/#functions","text":"Name Summary send abstract fun send(value: T): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/#extension-functions","text":"Name Summary contraMap Generates a new sink of type T2 . fun <T1, T2> Sink <T1>.contraMap(transform: (T2) -> T1): Sink <T2>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/send/","text":"workflow / com.squareup.workflow1 / Sink / send send \u00b6 abstract fun send(value: T): Unit","title":"Send"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-sink/send/#send","text":"abstract fun send(value: T): Unit","title":"send"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/","text":"workflow / com.squareup.workflow1 / Snapshot Snapshot \u00b6 class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. Properties \u00b6 Name Summary bytes val bytes: ByteString Functions \u00b6 Name Summary equals Compares Snapshot s by comparing their bytes . fun equals(other: Any ?): Boolean hashCode Calculates hashcode using bytes . fun hashCode(): Int toString Returns a String describing the bytes of this Snapshot . fun toString(): String Companion Object Functions \u00b6 Name Summary of fun of(string: String ): Snapshot fun of(byteString: ByteString): Snapshot fun of(lazy: () -> ByteString): Snapshot fun of(integer: Int ): Snapshot write Create a snapshot by writing to a nice ergonomic BufferedSink . fun write(lazy: (BufferedSink) -> Unit ): Snapshot Extension Functions \u00b6 Name Summary toParcelable fun <T : Parcelable> Snapshot .toParcelable(): T?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#snapshot","text":"class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work.","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#properties","text":"Name Summary bytes val bytes: ByteString","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#functions","text":"Name Summary equals Compares Snapshot s by comparing their bytes . fun equals(other: Any ?): Boolean hashCode Calculates hashcode using bytes . fun hashCode(): Int toString Returns a String describing the bytes of this Snapshot . fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#companion-object-functions","text":"Name Summary of fun of(string: String ): Snapshot fun of(byteString: ByteString): Snapshot fun of(lazy: () -> ByteString): Snapshot fun of(integer: Int ): Snapshot write Create a snapshot by writing to a nice ergonomic BufferedSink . fun write(lazy: (BufferedSink) -> Unit ): Snapshot","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/#extension-functions","text":"Name Summary toParcelable fun <T : Parcelable> Snapshot .toParcelable(): T?","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/bytes/","text":"workflow / com.squareup.workflow1 / Snapshot / bytes bytes \u00b6 val bytes: ByteString","title":"Bytes"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/bytes/#bytes","text":"val bytes: ByteString","title":"bytes"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/equals/","text":"workflow / com.squareup.workflow1 / Snapshot / equals equals \u00b6 fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . This method forces serialization, calling it may be expensive.","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/equals/#equals","text":"fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . This method forces serialization, calling it may be expensive.","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/hash-code/","text":"workflow / com.squareup.workflow1 / Snapshot / hashCode hashCode \u00b6 fun hashCode(): Int Calculates hashcode using bytes . This method forces serialization, calling it may be expensive.","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/hash-code/#hashcode","text":"fun hashCode(): Int Calculates hashcode using bytes . This method forces serialization, calling it may be expensive.","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/of/","text":"workflow / com.squareup.workflow1 / Snapshot / of of \u00b6 @JvmStatic fun of(string: String ): Snapshot @JvmStatic fun of(byteString: ByteString): Snapshot @JvmStatic fun of(lazy: () -> ByteString): Snapshot @JvmStatic fun of(integer: Int ): Snapshot","title":"Of"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/of/#of","text":"@JvmStatic fun of(string: String ): Snapshot @JvmStatic fun of(byteString: ByteString): Snapshot @JvmStatic fun of(lazy: () -> ByteString): Snapshot @JvmStatic fun of(integer: Int ): Snapshot","title":"of"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/to-string/","text":"workflow / com.squareup.workflow1 / Snapshot / toString toString \u00b6 fun toString(): String Returns a String describing the bytes of this Snapshot . This method forces serialization, calling it may be expensive.","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/to-string/#tostring","text":"fun toString(): String Returns a String describing the bytes of this Snapshot . This method forces serialization, calling it may be expensive.","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/write/","text":"workflow / com.squareup.workflow1 / Snapshot / write write \u00b6 @JvmStatic fun write(lazy: (BufferedSink) -> Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"Write"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-snapshot/write/#write","text":"@JvmStatic fun write(lazy: (BufferedSink) -> Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"write"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/","text":"workflow / com.squareup.workflow1 / StatefulWorkflow StatefulWorkflow \u00b6 abstract class StatefulWorkflow<in PropsT, StateT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree. Avoid capturing stale state \u00b6 Workflows may not perform side effects in their render methods, but may perform side effects by running Worker s and getting events from RenderingT s via WorkflowAction s. A WorkflowAction defines how to update the StateT and what OutputT s to emit. Actions get access to the current workflow\u2019s state, and they must use that view of the state. If an action is defined inline, it is incorrect to capture, or close over, the StateT passed to render in the action. Workflows are executed synchronously, but external events may not be, so captured state may be stale when the action is invoked. Parameters \u00b6 PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn\u2019t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow Types \u00b6 Name Summary RenderContext inner class RenderContext<in PropsT, StateT, out OutputT, out RenderingT> : BaseRenderContext <PropsT, StateT, OutputT> Constructors \u00b6 Name Summary <init> A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatefulWorkflow() Functions \u00b6 Name Summary asStatefulWorkflow Satisfies the Workflow interface by returning this . fun asStatefulWorkflow(): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> initialState Called from RenderContext.renderChild when the state machine is first started, to get the initial state. abstract fun initialState(props: PropsT, snapshot: Snapshot ?): StateT onPropsChanged Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. open fun onPropsChanged(old: PropsT, new: PropsT, state: StateT): StateT render Called at least once\u2020 any time one of the following things happens: abstract fun render(renderProps: PropsT, renderState: StateT, context: RenderContext<PropsT, StateT, OutputT, RenderingT>): RenderingT snapshotState Called whenever the state changes to generate a new Snapshot of the state. abstract fun snapshotState(state: StateT): Snapshot ? Extension Properties \u00b6 Name Summary identifier The WorkflowIdentifier that identifies this Workflow . val Workflow <*, *, *>.identifier: WorkflowIdentifier Extension Functions \u00b6 Name Summary action Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> launchForTestingFromStartWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T launchForTestingFromStateWith Creates a WorkflowTestRuntime to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingFromStateWith(props: PropsT, initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <StateT, OutputT, RenderingT> StatefulWorkflow < Unit , StateT, OutputT, RenderingT>.launchForTestingFromStateWith(initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> Unit ): Unit launchForTestingWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingWith(props: PropsT, testParams: WorkflowTestParams <StateT> = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T mapRendering Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> testRender Create a RenderTester to unit test an individual render pass of this workflow. fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.testRender(props: PropsT, initialState: StateT): RenderTester <PropsT, StateT, OutputT, RenderingT> Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#statefulworkflow","text":"abstract class StatefulWorkflow<in PropsT, StateT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree.","title":"StatefulWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#avoid-capturing-stale-state","text":"Workflows may not perform side effects in their render methods, but may perform side effects by running Worker s and getting events from RenderingT s via WorkflowAction s. A WorkflowAction defines how to update the StateT and what OutputT s to emit. Actions get access to the current workflow\u2019s state, and they must use that view of the state. If an action is defined inline, it is incorrect to capture, or close over, the StateT passed to render in the action. Workflows are executed synchronously, but external events may not be, so captured state may be stale when the action is invoked.","title":"Avoid capturing stale state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn\u2019t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#types","text":"Name Summary RenderContext inner class RenderContext<in PropsT, StateT, out OutputT, out RenderingT> : BaseRenderContext <PropsT, StateT, OutputT>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#constructors","text":"Name Summary <init> A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatefulWorkflow()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#functions","text":"Name Summary asStatefulWorkflow Satisfies the Workflow interface by returning this . fun asStatefulWorkflow(): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> initialState Called from RenderContext.renderChild when the state machine is first started, to get the initial state. abstract fun initialState(props: PropsT, snapshot: Snapshot ?): StateT onPropsChanged Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. open fun onPropsChanged(old: PropsT, new: PropsT, state: StateT): StateT render Called at least once\u2020 any time one of the following things happens: abstract fun render(renderProps: PropsT, renderState: StateT, context: RenderContext<PropsT, StateT, OutputT, RenderingT>): RenderingT snapshotState Called whenever the state changes to generate a new Snapshot of the state. abstract fun snapshotState(state: StateT): Snapshot ?","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#extension-properties","text":"Name Summary identifier The WorkflowIdentifier that identifies this Workflow . val Workflow <*, *, *>.identifier: WorkflowIdentifier","title":"Extension Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/#extension-functions","text":"Name Summary action Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, StateT, OutputT>.() -> Unit ): WorkflowAction <PropsT, StateT, OutputT> launchForTestingFromStartWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T launchForTestingFromStateWith Creates a WorkflowTestRuntime to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingFromStateWith(props: PropsT, initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <StateT, OutputT, RenderingT> StatefulWorkflow < Unit , StateT, OutputT, RenderingT>.launchForTestingFromStateWith(initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> Unit ): Unit launchForTestingWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingWith(props: PropsT, testParams: WorkflowTestParams <StateT> = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T mapRendering Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> testRender Create a RenderTester to unit test an individual render pass of this workflow. fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.testRender(props: PropsT, initialState: StateT): RenderTester <PropsT, StateT, OutputT, RenderingT> Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-init-/","text":"workflow / com.squareup.workflow1 / StatefulWorkflow / <init> <init> \u00b6 StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree. Avoid capturing stale state \u00b6 Workflows may not perform side effects in their render methods, but may perform side effects by running Worker s and getting events from RenderingT s via WorkflowAction s. A WorkflowAction defines how to update the StateT and what OutputT s to emit. Actions get access to the current workflow\u2019s state, and they must use that view of the state. If an action is defined inline, it is incorrect to capture, or close over, the StateT passed to render in the action. Workflows are executed synchronously, but external events may not be, so captured state may be stale when the action is invoked. Parameters \u00b6 PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn\u2019t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-init-/#init","text":"StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-init-/#avoid-capturing-stale-state","text":"Workflows may not perform side effects in their render methods, but may perform side effects by running Worker s and getting events from RenderingT s via WorkflowAction s. A WorkflowAction defines how to update the StateT and what OutputT s to emit. Actions get access to the current workflow\u2019s state, and they must use that view of the state. If an action is defined inline, it is incorrect to capture, or close over, the StateT passed to render in the action. Workflows are executed synchronously, but external events may not be, so captured state may be stale when the action is invoked.","title":"Avoid capturing stale state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-init-/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn\u2019t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-render-context/","text":"workflow / com.squareup.workflow1 / StatefulWorkflow / RenderContext RenderContext \u00b6 inner class RenderContext<in PropsT, StateT, out OutputT, out RenderingT> : BaseRenderContext <@UnsafeVariance PropsT, StateT, @UnsafeVariance OutputT>","title":" render context"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/-render-context/#rendercontext","text":"inner class RenderContext<in PropsT, StateT, out OutputT, out RenderingT> : BaseRenderContext <@UnsafeVariance PropsT, StateT, @UnsafeVariance OutputT>","title":"RenderContext"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/as-stateful-workflow/","text":"workflow / com.squareup.workflow1 / StatefulWorkflow / asStatefulWorkflow asStatefulWorkflow \u00b6 fun asStatefulWorkflow(): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Satisfies the Workflow interface by returning this .","title":"As stateful workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/as-stateful-workflow/#asstatefulworkflow","text":"fun asStatefulWorkflow(): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Satisfies the Workflow interface by returning this .","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/initial-state/","text":"workflow / com.squareup.workflow1 / StatefulWorkflow / initialState initialState \u00b6 abstract fun initialState(props: PropsT, snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state. Parameters \u00b6 snapshot - If the workflow is being created fresh, OR the workflow is being restored from a null or empty Snapshot , snapshot will be null. A snapshot is considered \u201cempty\u201d if Snapshot.bytes returns an empty ByteString , probably because snapshotState returned null . If the workflow is being restored from a Snapshot , snapshot will be the last value returned from snapshotState , and implementations that return something other than null should create their initial state by parsing their snapshot.","title":"Initial state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/initial-state/#initialstate","text":"abstract fun initialState(props: PropsT, snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state.","title":"initialState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/initial-state/#parameters","text":"snapshot - If the workflow is being created fresh, OR the workflow is being restored from a null or empty Snapshot , snapshot will be null. A snapshot is considered \u201cempty\u201d if Snapshot.bytes returns an empty ByteString , probably because snapshotState returned null . If the workflow is being restored from a Snapshot , snapshot will be the last value returned from snapshotState , and implementations that return something other than null should create their initial state by parsing their snapshot.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/on-props-changed/","text":"workflow / com.squareup.workflow1 / StatefulWorkflow / onPropsChanged onPropsChanged \u00b6 open fun onPropsChanged(old: PropsT, new: PropsT, state: StateT): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. Default implementation does nothing.","title":"On props changed"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/on-props-changed/#onpropschanged","text":"open fun onPropsChanged(old: PropsT, new: PropsT, state: StateT): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. Default implementation does nothing.","title":"onPropsChanged"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/render/","text":"workflow / com.squareup.workflow1 / StatefulWorkflow / render render \u00b6 abstract fun render(renderProps: PropsT, renderState: StateT, context: RenderContext<PropsT, StateT, OutputT, RenderingT>): RenderingT Called at least once\u2020 any time one of the following things happens: This workflow\u2019s renderProps changes (via the parent passing a different one in). This workflow\u2019s renderState changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To nest the rendering of a child workflow in your own, pass the child and any required props to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context . \u2020 This method is guaranteed to be called *at least once for every state, but may be calledmultiple times. Allowing this method to be invoked multiple times makes the internals simpler.*","title":"Render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/render/#render","text":"abstract fun render(renderProps: PropsT, renderState: StateT, context: RenderContext<PropsT, StateT, OutputT, RenderingT>): RenderingT Called at least once\u2020 any time one of the following things happens: This workflow\u2019s renderProps changes (via the parent passing a different one in). This workflow\u2019s renderState changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To nest the rendering of a child workflow in your own, pass the child and any required props to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context . \u2020 This method is guaranteed to be called *at least once for every state, but may be calledmultiple times. Allowing this method to be invoked multiple times makes the internals simpler.*","title":"render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/snapshot-state/","text":"workflow / com.squareup.workflow1 / StatefulWorkflow / snapshotState snapshotState \u00b6 abstract fun snapshotState(state: StateT): Snapshot ? Called whenever the state changes to generate a new Snapshot of the state. Snapshots must be lazy. Serialization must not be done at the time this method is called, since the state will be snapshotted frequently but the serialized form may only be needed very rarely. If the workflow does not have any state, or should always be started from scratch, return null from this method. See Also initialState","title":"Snapshot state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateful-workflow/snapshot-state/#snapshotstate","text":"abstract fun snapshotState(state: StateT): Snapshot ? Called whenever the state changes to generate a new Snapshot of the state. Snapshots must be lazy. Serialization must not be done at the time this method is called, since the state will be snapshotted frequently but the serialized form may only be needed very rarely. If the workflow does not have any state, or should always be started from scratch, return null from this method. See Also initialState","title":"snapshotState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/","text":"workflow / com.squareup.workflow1 / StatelessWorkflow StatelessWorkflow \u00b6 abstract class StatelessWorkflow<in PropsT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> Minimal implementation of Workflow that maintains no state of its own. Parameters \u00b6 PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow Types \u00b6 Name Summary RenderContext inner class RenderContext<in PropsT, out OutputT, out RenderingT> : BaseRenderContext <PropsT, Nothing , OutputT> Constructors \u00b6 Name Summary <init> Minimal implementation of Workflow that maintains no state of its own. StatelessWorkflow() Functions \u00b6 Name Summary asStatefulWorkflow Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. fun asStatefulWorkflow(): StatefulWorkflow <PropsT, *, OutputT, RenderingT> render Called at least once any time one of the following things happens: abstract fun render(renderProps: PropsT, context: RenderContext<PropsT, OutputT, RenderingT>): RenderingT Extension Properties \u00b6 Name Summary identifier The WorkflowIdentifier that identifies this Workflow . val Workflow <*, *, *>.identifier: WorkflowIdentifier Extension Functions \u00b6 Name Summary action Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> launchForTestingFromStartWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T mapRendering Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> testRender Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#statelessworkflow","text":"abstract class StatelessWorkflow<in PropsT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> Minimal implementation of Workflow that maintains no state of its own.","title":"StatelessWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#types","text":"Name Summary RenderContext inner class RenderContext<in PropsT, out OutputT, out RenderingT> : BaseRenderContext <PropsT, Nothing , OutputT>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#constructors","text":"Name Summary <init> Minimal implementation of Workflow that maintains no state of its own. StatelessWorkflow()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#functions","text":"Name Summary asStatefulWorkflow Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. fun asStatefulWorkflow(): StatefulWorkflow <PropsT, *, OutputT, RenderingT> render Called at least once any time one of the following things happens: abstract fun render(renderProps: PropsT, context: RenderContext<PropsT, OutputT, RenderingT>): RenderingT","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#extension-properties","text":"Name Summary identifier The WorkflowIdentifier that identifies this Workflow . val Workflow <*, *, *>.identifier: WorkflowIdentifier","title":"Extension Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/#extension-functions","text":"Name Summary action Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: String = \"\", update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> fun <PropsT, OutputT, RenderingT> StatelessWorkflow <PropsT, OutputT, RenderingT>.action(name: () -> String , update: Updater<PropsT, *, OutputT>.() -> Unit ): WorkflowAction <PropsT, Nothing , OutputT> launchForTestingFromStartWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T mapRendering Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> testRender Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-init-/","text":"workflow / com.squareup.workflow1 / StatelessWorkflow / <init> <init> \u00b6 StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own. Parameters \u00b6 PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-init-/#init","text":"StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-init-/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-render-context/","text":"workflow / com.squareup.workflow1 / StatelessWorkflow / RenderContext RenderContext \u00b6 inner class RenderContext<in PropsT, out OutputT, out RenderingT> : BaseRenderContext <@UnsafeVariance PropsT, Nothing , @UnsafeVariance OutputT>","title":" render context"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/-render-context/#rendercontext","text":"inner class RenderContext<in PropsT, out OutputT, out RenderingT> : BaseRenderContext <@UnsafeVariance PropsT, Nothing , @UnsafeVariance OutputT>","title":"RenderContext"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/as-stateful-workflow/","text":"workflow / com.squareup.workflow1 / StatelessWorkflow / asStatefulWorkflow asStatefulWorkflow \u00b6 fun asStatefulWorkflow(): StatefulWorkflow <PropsT, *, OutputT, RenderingT> Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. This method is called a few times per instance, but we don\u2019t need to allocate a new StatefulWorkflow every time, so we store it in a private property.","title":"As stateful workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/as-stateful-workflow/#asstatefulworkflow","text":"fun asStatefulWorkflow(): StatefulWorkflow <PropsT, *, OutputT, RenderingT> Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. This method is called a few times per instance, but we don\u2019t need to allocate a new StatefulWorkflow every time, so we store it in a private property.","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/render/","text":"workflow / com.squareup.workflow1 / StatelessWorkflow / render render \u00b6 abstract fun render(renderProps: PropsT, context: RenderContext<PropsT, OutputT, RenderingT>): RenderingT Called at least once any time one of the following things happens: This workflow\u2019s renderProps change (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To get the rendering from a child workflow, pass the child and any required props to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context .","title":"Render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-stateless-workflow/render/#render","text":"abstract fun render(renderProps: PropsT, context: RenderContext<PropsT, OutputT, RenderingT>): RenderingT Called at least once any time one of the following things happens: This workflow\u2019s renderProps change (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To get the rendering from a child workflow, pass the child and any required props to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context .","title":"render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/","text":"workflow / com.squareup.workflow1 / TreeSnapshot TreeSnapshot \u00b6 class TreeSnapshot Aggregate of all the snapshots of a tree of workflows. Can be serialized with toByteString and deserialized with parse . For tests, you can get a TreeSnapshot from a RenderingAndSnapshot or by creating one for your root workflow only by calling forRootOnly . Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toByteString Writes this Snapshot and all its children into a ByteString . The snapshot can be restored with parse . fun toByteString(): ByteString Companion Object Functions \u00b6 Name Summary forRootOnly Returns a TreeSnapshot that only contains a Snapshot for the root workflow, and no child snapshots. fun forRootOnly(rootSnapshot: Snapshot ?): TreeSnapshot parse Parses a \u201croot\u201d snapshot and the list of child snapshots with associated WorkflowNodeId s from a ByteString returned by toByteString . fun parse(bytes: ByteString): TreeSnapshot","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/#treesnapshot","text":"class TreeSnapshot Aggregate of all the snapshots of a tree of workflows. Can be serialized with toByteString and deserialized with parse . For tests, you can get a TreeSnapshot from a RenderingAndSnapshot or by creating one for your root workflow only by calling forRootOnly .","title":"TreeSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toByteString Writes this Snapshot and all its children into a ByteString . The snapshot can be restored with parse . fun toByteString(): ByteString","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/#companion-object-functions","text":"Name Summary forRootOnly Returns a TreeSnapshot that only contains a Snapshot for the root workflow, and no child snapshots. fun forRootOnly(rootSnapshot: Snapshot ?): TreeSnapshot parse Parses a \u201croot\u201d snapshot and the list of child snapshots with associated WorkflowNodeId s from a ByteString returned by toByteString . fun parse(bytes: ByteString): TreeSnapshot","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/equals/","text":"workflow / com.squareup.workflow1 / TreeSnapshot / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/for-root-only/","text":"workflow / com.squareup.workflow1 / TreeSnapshot / forRootOnly forRootOnly \u00b6 fun forRootOnly(rootSnapshot: Snapshot ?): TreeSnapshot Returns a TreeSnapshot that only contains a Snapshot for the root workflow, and no child snapshots.","title":"For root only"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/for-root-only/#forrootonly","text":"fun forRootOnly(rootSnapshot: Snapshot ?): TreeSnapshot Returns a TreeSnapshot that only contains a Snapshot for the root workflow, and no child snapshots.","title":"forRootOnly"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/hash-code/","text":"workflow / com.squareup.workflow1 / TreeSnapshot / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/parse/","text":"workflow / com.squareup.workflow1 / TreeSnapshot / parse parse \u00b6 fun parse(bytes: ByteString): TreeSnapshot Parses a \u201croot\u201d snapshot and the list of child snapshots with associated WorkflowNodeId s from a ByteString returned by toByteString . Never returns an empty root snapshot: if the root snapshot is empty it will be null. Child snapshots, however, are always returned as-is. They must be recursively passed to this function to continue parsing the tree. Note that this method is mostly lazy. It will parse the list of child TreeSnapshot s, but will not recursively parse each of those.","title":"Parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/parse/#parse","text":"fun parse(bytes: ByteString): TreeSnapshot Parses a \u201croot\u201d snapshot and the list of child snapshots with associated WorkflowNodeId s from a ByteString returned by toByteString . Never returns an empty root snapshot: if the root snapshot is empty it will be null. Child snapshots, however, are always returned as-is. They must be recursively passed to this function to continue parsing the tree. Note that this method is mostly lazy. It will parse the list of child TreeSnapshot s, but will not recursively parse each of those.","title":"parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/to-byte-string/","text":"workflow / com.squareup.workflow1 / TreeSnapshot / toByteString toByteString \u00b6 fun toByteString(): ByteString Writes this Snapshot and all its children into a ByteString . The snapshot can be restored with parse . Any children snapshots for workflows whose WorkflowIdentifier s are unsnapshottable will not be serialized.","title":"To byte string"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-tree-snapshot/to-byte-string/#tobytestring","text":"fun toByteString(): ByteString Writes this Snapshot and all its children into a ByteString . The snapshot can be restored with parse . Any children snapshots for workflows whose WorkflowIdentifier s are unsnapshottable will not be serialized.","title":"toByteString"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/","text":"workflow / com.squareup.workflow1 / Worker Worker \u00b6 interface Worker<out OutputT> Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workers allow you to execute arbitrary, possibly asynchronous tasks in a declarative manner. To perform their tasks, workers return a Flow . Workers are effectively Flow s that can be compared to determine equivalence between render passes. A Workflow uses Workers to perform asynchronous work during the render pass by calling RenderContext.runningWorker . See the documentation on run for more information on the returned Flow is consumed and how to implement asynchronous work. See the documentation on doesSameWorkAs for more details on how and when workers are compared and the worker lifecycle. Example: Network request \u00b6 Let\u2019s say you have a network service with an API that returns a number, and you want to call that service from a Workflow . interface TimeService { suspend fun getTime(timezone: String): Long } The first step is to define a Worker that can call this service, and maybe an extension function on your service class: fun TimeService.getTimeWorker(timezone: String): Worker<Long> = TimeWorker(timezone, this) private class TimeWorker( val timezone: String, val service: TimeService ): Worker<Long> { override fun run(): Flow<Long> = flow { val time = service.getTime(timezone) emit(time) } } You also need to define how to determine if a previous Worker is already doing the same work. This will ensure that if the same request is made by the same Workflow in adjacent render passes, we\u2019ll keep the request alive from the first pass. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is TimeWorker && timezone == otherWorker.timezone Now you can request the time from your Workflow : class MyWorkflow(private val timeWorker: TimeWorker) { override fun render(\u2026): Foo { context.onWorkerOutput(timeWorker) { time -> emitOutput(\"The time is $time\") } } Alternatively, if the response is a unique type, unlikely to be shared by any other workers, you don\u2019t even need to create your own Worker class, you can use a builder, and the worker will automatically be distinguished by that response type: interface TimeService { fun getTime(timezone: String): Deferred<TimeResponse> } fun TimeService.getTimeWorker(timezone: String): Worker<TimeResponse> = Worker.from { getTime(timezone).await()) } See Also create from fromNullable Deferred.asWorker BroadcastChannel.asWorker Functions \u00b6 Name Summary doesSameWorkAs Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. open fun doesSameWorkAs(otherWorker: Worker <*>): Boolean run Returns a Flow to execute the work represented by this worker. abstract fun run(): Flow<OutputT> Companion Object Functions \u00b6 Name Summary create Shorthand for flow { block() }.asWorker() . fun <OutputT> create(block: suspend FlowCollector<OutputT>.() -> Unit ): Worker <OutputT> createSideEffect Creates a Worker that just performs some side effects and doesn\u2019t emit anything. Run the worker from your render method using RenderContext.runningWorker . fun createSideEffect(block: suspend () -> Unit ): Worker < Nothing > finished Returns a Worker that finishes immediately without emitting anything. fun <T> finished(): Worker <T> from Creates a Worker from a function that returns a single value. fun <OutputT> from(block: suspend () -> OutputT): Worker <OutputT> fromNullable Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. fun <OutputT> fromNullable(block: suspend () -> OutputT?): Worker <OutputT> timer Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. fun timer(delayMs: Long , key: String = \"\"): Worker < Unit > Extension Functions \u00b6 Name Summary test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R> Inheritors \u00b6 Name Summary LifecycleWorker Worker that performs some action when the worker is started and/or stopped. abstract class LifecycleWorker : Worker < Nothing > PublisherWorker An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . abstract class PublisherWorker<out OutputT : Any > : Worker <OutputT> WorkerSink Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. class WorkerSink<T> : Worker <T>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#worker","text":"interface Worker<out OutputT> Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workers allow you to execute arbitrary, possibly asynchronous tasks in a declarative manner. To perform their tasks, workers return a Flow . Workers are effectively Flow s that can be compared to determine equivalence between render passes. A Workflow uses Workers to perform asynchronous work during the render pass by calling RenderContext.runningWorker . See the documentation on run for more information on the returned Flow is consumed and how to implement asynchronous work. See the documentation on doesSameWorkAs for more details on how and when workers are compared and the worker lifecycle.","title":"Worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#example-network-request","text":"Let\u2019s say you have a network service with an API that returns a number, and you want to call that service from a Workflow . interface TimeService { suspend fun getTime(timezone: String): Long } The first step is to define a Worker that can call this service, and maybe an extension function on your service class: fun TimeService.getTimeWorker(timezone: String): Worker<Long> = TimeWorker(timezone, this) private class TimeWorker( val timezone: String, val service: TimeService ): Worker<Long> { override fun run(): Flow<Long> = flow { val time = service.getTime(timezone) emit(time) } } You also need to define how to determine if a previous Worker is already doing the same work. This will ensure that if the same request is made by the same Workflow in adjacent render passes, we\u2019ll keep the request alive from the first pass. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is TimeWorker && timezone == otherWorker.timezone Now you can request the time from your Workflow : class MyWorkflow(private val timeWorker: TimeWorker) { override fun render(\u2026): Foo { context.onWorkerOutput(timeWorker) { time -> emitOutput(\"The time is $time\") } } Alternatively, if the response is a unique type, unlikely to be shared by any other workers, you don\u2019t even need to create your own Worker class, you can use a builder, and the worker will automatically be distinguished by that response type: interface TimeService { fun getTime(timezone: String): Deferred<TimeResponse> } fun TimeService.getTimeWorker(timezone: String): Worker<TimeResponse> = Worker.from { getTime(timezone).await()) } See Also create from fromNullable Deferred.asWorker BroadcastChannel.asWorker","title":"Example: Network request"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#functions","text":"Name Summary doesSameWorkAs Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. open fun doesSameWorkAs(otherWorker: Worker <*>): Boolean run Returns a Flow to execute the work represented by this worker. abstract fun run(): Flow<OutputT>","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#companion-object-functions","text":"Name Summary create Shorthand for flow { block() }.asWorker() . fun <OutputT> create(block: suspend FlowCollector<OutputT>.() -> Unit ): Worker <OutputT> createSideEffect Creates a Worker that just performs some side effects and doesn\u2019t emit anything. Run the worker from your render method using RenderContext.runningWorker . fun createSideEffect(block: suspend () -> Unit ): Worker < Nothing > finished Returns a Worker that finishes immediately without emitting anything. fun <T> finished(): Worker <T> from Creates a Worker from a function that returns a single value. fun <OutputT> from(block: suspend () -> OutputT): Worker <OutputT> fromNullable Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. fun <OutputT> fromNullable(block: suspend () -> OutputT?): Worker <OutputT> timer Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. fun timer(delayMs: Long , key: String = \"\"): Worker < Unit >","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#extension-functions","text":"Name Summary test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/#inheritors","text":"Name Summary LifecycleWorker Worker that performs some action when the worker is started and/or stopped. abstract class LifecycleWorker : Worker < Nothing > PublisherWorker An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . abstract class PublisherWorker<out OutputT : Any > : Worker <OutputT> WorkerSink Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. class WorkerSink<T> : Worker <T>","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/create-side-effect/","text":"workflow / com.squareup.workflow1 / Worker / createSideEffect createSideEffect \u00b6 fun createSideEffect(block: suspend () -> Unit ): Worker < Nothing > Creates a Worker that just performs some side effects and doesn\u2019t emit anything. Run the worker from your render method using RenderContext.runningWorker . E.g.: fun logOnEntered(message: String) = Worker.createSideEffect() { println(\"Entered state: $message\") } Note that all workers created with this method are equivalent from the point of view of their [Worker.doesSameWorkAs] methods. A workflow that needs multiple simultaneous side effects can either bundle them all together into a single `createSideEffect` call, or can use the `key` parameter to [RenderContext.runningWorker] to prevent conflicts.","title":"Create side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/create-side-effect/#createsideeffect","text":"fun createSideEffect(block: suspend () -> Unit ): Worker < Nothing > Creates a Worker that just performs some side effects and doesn\u2019t emit anything. Run the worker from your render method using RenderContext.runningWorker . E.g.: fun logOnEntered(message: String) = Worker.createSideEffect() { println(\"Entered state: $message\") } Note that all workers created with this method are equivalent from the point of view of their [Worker.doesSameWorkAs] methods. A workflow that needs multiple simultaneous side effects can either bundle them all together into a single `createSideEffect` call, or can use the `key` parameter to [RenderContext.runningWorker] to prevent conflicts.","title":"createSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/create/","text":"workflow / com.squareup.workflow1 / Worker / create create \u00b6 inline fun <reified OutputT> create(noinline block: suspend FlowCollector<OutputT>.() -> Unit ): Worker <OutputT> Shorthand for flow { block() }.asWorker() . Note: If your worker just needs to perform side effects and doesn\u2019t need to emit anything, use createSideEffect instead (since Nothing can\u2019t be used as a reified type parameter).","title":"Create"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/create/#create","text":"inline fun <reified OutputT> create(noinline block: suspend FlowCollector<OutputT>.() -> Unit ): Worker <OutputT> Shorthand for flow { block() }.asWorker() . Note: If your worker just needs to perform side effects and doesn\u2019t need to emit anything, use createSideEffect instead (since Nothing can\u2019t be used as a reified type parameter).","title":"create"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/does-same-work-as/","text":"workflow / com.squareup.workflow1 / Worker / doesSameWorkAs doesSameWorkAs \u00b6 open fun doesSameWorkAs(otherWorker: Worker <*>): Boolean Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Workers are compared by their declared type. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Workers for which doesSameWorkAs returns false will also be restarted. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data. Most implementations of this method should compare constructor parameters. E.g: class SearchWorker(private val query: String): Worker<SearchResult> { // run omitted for example. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is SearchWorker && otherWorker.query == query }","title":"Does same work as"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/does-same-work-as/#doessameworkas","text":"open fun doesSameWorkAs(otherWorker: Worker <*>): Boolean Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Workers are compared by their declared type. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Workers for which doesSameWorkAs returns false will also be restarted. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data. Most implementations of this method should compare constructor parameters. E.g: class SearchWorker(private val query: String): Worker<SearchResult> { // run omitted for example. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is SearchWorker && otherWorker.query == query }","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/finished/","text":"workflow / com.squareup.workflow1 / Worker / finished finished \u00b6 fun <T> finished(): Worker <T> Returns a Worker that finishes immediately without emitting anything.","title":"Finished"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/finished/#finished","text":"fun <T> finished(): Worker <T> Returns a Worker that finishes immediately without emitting anything.","title":"finished"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/from-nullable/","text":"workflow / com.squareup.workflow1 / Worker / fromNullable fromNullable \u00b6 inline fun <reified OutputT> fromNullable(noinline block: suspend () -> OutputT?): Worker <OutputT> Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"From nullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/from-nullable/#fromnullable","text":"inline fun <reified OutputT> fromNullable(noinline block: suspend () -> OutputT?): Worker <OutputT> Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"fromNullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/from/","text":"workflow / com.squareup.workflow1 / Worker / from from \u00b6 inline fun <reified OutputT> from(noinline block: suspend () -> OutputT): Worker <OutputT> Creates a Worker from a function that returns a single value. Shorthand for flow { emit(block()) }.asWorker() . The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"From"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/from/#from","text":"inline fun <reified OutputT> from(noinline block: suspend () -> OutputT): Worker <OutputT> Creates a Worker from a function that returns a single value. Shorthand for flow { emit(block()) }.asWorker() . The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"from"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/run/","text":"workflow / com.squareup.workflow1 / Worker / run run \u00b6 abstract fun run(): Flow<OutputT> Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker<Nothing> ). Coroutine Context \u00b6 When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don\u2019t care which thread they\u2019re executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString ) and the key specified by the workflow running the worker. Exceptions \u00b6 If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Run"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/run/#run","text":"abstract fun run(): Flow<OutputT> Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker<Nothing> ).","title":"run"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/run/#coroutine-context","text":"When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don\u2019t care which thread they\u2019re executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString ) and the key specified by the workflow running the worker.","title":"Coroutine Context"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/run/#exceptions","text":"If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/timer/","text":"workflow / com.squareup.workflow1 / Worker / timer timer \u00b6 fun timer(delayMs: Long , key: String = \"\"): Worker < Unit > Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Workers returned by this function will be compared by key .","title":"Timer"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-worker/timer/#timer","text":"fun timer(delayMs: Long , key: String = \"\"): Worker < Unit > Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Workers returned by this function will be compared by key .","title":"timer"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/","text":"workflow / com.squareup.workflow1 / Workflow Workflow \u00b6 interface Workflow<in PropsT, out OutputT, out RenderingT> A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. The basic purpose of a Workflow is to take some input (in the form of PropsT ) and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagates down the tree, outputs and renderings propagate up the tree. Implementing Workflow \u00b6 The Workflow interface is useful as a facade for your API. You can publish an interface that extends Workflow , and keep the implementation (e.g. is your workflow state*ful* or state*less* a private implementation detail. You should almost never implement Workflow directly, however. There are two abstract classes that you should subclass instead: StatefulWorkflow and StatelessWorkflow . The differences between them are described below, but both type have a render method that you implement to generate renderings from your props and interact with the runtime (e.g. by changing state or emitting outputs). Stateful Workflows \u00b6 If your workflow needs to keep track of internal state, subclass StatefulWorkflow . It has an additional type parameter, StateT , requires you to specify how to create the initial state and how to snapshot /restore your state, and passes the current state to the StatefulWorkflow.render method. Stateless Workflows \u00b6 If your workflow does not have any state of its own and simply needs to delegate to other workflows (e.g. transforming props, outputs, or renderings), subclass StatelessWorkflow and implement its sole StatelessWorkflow.render method, or just pass a lambda to the stateless function. Interacting with events and other workflows \u00b6 All workflows are passed a RenderContext in their render methods. This context allows the workflow to interact with the outside world by doing things like listening for events, subscribing to streams of data, rendering child workflows, and performing cleanup when the workflow is about to be torn down by its parent. See the documentation on RenderContext for more information about what it can do. Things to avoid \u00b6 Mutable instance state \u00b6 Classes that implement Workflow should not contain mutable properties. Such properties are instance-specific state and can introduce buggy behavior. Instead, subclass StatefulWorkflow and move all your state to the workflow\u2019s StateT type. For example, setting a property will not cause your workflow to be re-rendered \u2013 the runtime has no way of knowing that some data it doesn\u2019t know about has changed. It can also break consumers of your workflows, who may be expecting to be able to re-use the same instance of your workflow type in different places in the workflow tree \u2013 this works if all the workflow\u2019s state is contained in its StateT , but not if the instance has its own properties. (Note that storing dependencies, which are effectivelystatic relative to the workflow instance, in properties is fine.) Render side effects \u00b6 Workflows\u2019 render methods must not perform side effects or read mutable state. They can contain logic, but the logic must be based on the PropsT , the StateT if present, and the renderings from other workflows. They must declare what work to perform (via Worker s), and what data to render (via RenderingT s and child workflows). For this reason, programming with workflows can be considered declarative-style programming. Parameters \u00b6 PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow StatelessWorkflow Functions \u00b6 Name Summary asStatefulWorkflow Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work. abstract fun asStatefulWorkflow(): StatefulWorkflow <PropsT, *, OutputT, RenderingT> Extension Properties \u00b6 Name Summary identifier The WorkflowIdentifier that identifies this Workflow . val Workflow <*, *, *>.identifier: WorkflowIdentifier Extension Functions \u00b6 Name Summary launchForTestingFromStartWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T mapRendering Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> testRender Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT> Companion Object Extension Functions \u00b6 Name Summary rendering Returns a workflow that does nothing but echo the given rendering . Handy for testing. fun <RenderingT> Workflow.Companion.rendering(rendering: RenderingT): Workflow < Unit , Nothing , RenderingT> stateful Returns a stateful Workflow implemented via the given functions. fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: (PropsT, Snapshot ?) -> StateT, render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, snapshot: (StateT) -> Snapshot ?, onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: (PropsT) -> StateT, render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given functions. fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: ( Snapshot ?) -> StateT, render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT, snapshot: (StateT) -> Snapshot ?): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given function. fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: StateT, render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> stateless Returns a stateless Workflow via the given render function. fun <PropsT, OutputT, RenderingT> Workflow.Companion.stateless(render: BaseRenderContext <PropsT, Nothing , OutputT>.(props: PropsT) -> RenderingT): Workflow <PropsT, OutputT, RenderingT> Inheritors \u00b6 Name Summary StatefulWorkflow A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. abstract class StatefulWorkflow<in PropsT, StateT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> StatelessWorkflow Minimal implementation of Workflow that maintains no state of its own. abstract class StatelessWorkflow<in PropsT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#workflow","text":"interface Workflow<in PropsT, out OutputT, out RenderingT> A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. The basic purpose of a Workflow is to take some input (in the form of PropsT ) and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it\u2019s delegated to (its \u201cchildren\u201d). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they\u2019re no longer needed. Props propagates down the tree, outputs and renderings propagate up the tree.","title":"Workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#implementing-workflow","text":"The Workflow interface is useful as a facade for your API. You can publish an interface that extends Workflow , and keep the implementation (e.g. is your workflow state*ful* or state*less* a private implementation detail. You should almost never implement Workflow directly, however. There are two abstract classes that you should subclass instead: StatefulWorkflow and StatelessWorkflow . The differences between them are described below, but both type have a render method that you implement to generate renderings from your props and interact with the runtime (e.g. by changing state or emitting outputs).","title":"Implementing Workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#stateful-workflows","text":"If your workflow needs to keep track of internal state, subclass StatefulWorkflow . It has an additional type parameter, StateT , requires you to specify how to create the initial state and how to snapshot /restore your state, and passes the current state to the StatefulWorkflow.render method.","title":"Stateful Workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#stateless-workflows","text":"If your workflow does not have any state of its own and simply needs to delegate to other workflows (e.g. transforming props, outputs, or renderings), subclass StatelessWorkflow and implement its sole StatelessWorkflow.render method, or just pass a lambda to the stateless function.","title":"Stateless Workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#interacting-with-events-and-other-workflows","text":"All workflows are passed a RenderContext in their render methods. This context allows the workflow to interact with the outside world by doing things like listening for events, subscribing to streams of data, rendering child workflows, and performing cleanup when the workflow is about to be torn down by its parent. See the documentation on RenderContext for more information about what it can do.","title":"Interacting with events and other workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#things-to-avoid","text":"","title":"Things to avoid"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#mutable-instance-state","text":"Classes that implement Workflow should not contain mutable properties. Such properties are instance-specific state and can introduce buggy behavior. Instead, subclass StatefulWorkflow and move all your state to the workflow\u2019s StateT type. For example, setting a property will not cause your workflow to be re-rendered \u2013 the runtime has no way of knowing that some data it doesn\u2019t know about has changed. It can also break consumers of your workflows, who may be expecting to be able to re-use the same instance of your workflow type in different places in the workflow tree \u2013 this works if all the workflow\u2019s state is contained in its StateT , but not if the instance has its own properties. (Note that storing dependencies, which are effectivelystatic relative to the workflow instance, in properties is fine.)","title":"Mutable instance state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#render-side-effects","text":"Workflows\u2019 render methods must not perform side effects or read mutable state. They can contain logic, but the logic must be based on the PropsT , the StateT if present, and the renderings from other workflows. They must declare what work to perform (via Worker s), and what data to render (via RenderingT s and child workflows). For this reason, programming with workflows can be considered declarative-style programming.","title":"Render side effects"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn\u2019t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents \u201cevents\u201d that this workflow can send to its parent. May be Nothing if the workflow doesn\u2019t need to emit anything. RenderingT - The value returned to this workflow\u2019s parent during composition . Typically represents a \u201cview\u201d of this workflow\u2019s props, current state, and children\u2019s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow StatelessWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#functions","text":"Name Summary asStatefulWorkflow Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work. abstract fun asStatefulWorkflow(): StatefulWorkflow <PropsT, *, OutputT, RenderingT>","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#extension-properties","text":"Name Summary identifier The WorkflowIdentifier that identifies this Workflow . val Workflow <*, *, *>.identifier: WorkflowIdentifier","title":"Extension Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#extension-functions","text":"Name Summary launchForTestingFromStartWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T mapRendering Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , fun <PropsT, OutputT, FromRenderingT, ToRenderingT> Workflow <PropsT, OutputT, FromRenderingT>.mapRendering(transform: (FromRenderingT) -> ToRenderingT): Workflow <PropsT, OutputT, ToRenderingT> testRender Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#companion-object-extension-functions","text":"Name Summary rendering Returns a workflow that does nothing but echo the given rendering . Handy for testing. fun <RenderingT> Workflow.Companion.rendering(rendering: RenderingT): Workflow < Unit , Nothing , RenderingT> stateful Returns a stateful Workflow implemented via the given functions. fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: (PropsT, Snapshot ?) -> StateT, render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, snapshot: (StateT) -> Snapshot ?, onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> fun <PropsT, StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: (PropsT) -> StateT, render: BaseRenderContext <PropsT, StateT, OutputT>.(props: PropsT, state: StateT) -> RenderingT, onPropsChanged: (old: PropsT, new: PropsT, state: StateT) -> StateT = { _, _, state -> state }): StatefulWorkflow <PropsT, StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given functions. fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: ( Snapshot ?) -> StateT, render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT, snapshot: (StateT) -> Snapshot ?): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> Returns a stateful Workflow , with no props, implemented via the given function. fun <StateT, OutputT, RenderingT> Workflow.Companion.stateful(initialState: StateT, render: BaseRenderContext < Unit , StateT, OutputT>.(state: StateT) -> RenderingT): StatefulWorkflow < Unit , StateT, OutputT, RenderingT> stateless Returns a stateless Workflow via the given render function. fun <PropsT, OutputT, RenderingT> Workflow.Companion.stateless(render: BaseRenderContext <PropsT, Nothing , OutputT>.(props: PropsT) -> RenderingT): Workflow <PropsT, OutputT, RenderingT>","title":"Companion Object Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/#inheritors","text":"Name Summary StatefulWorkflow A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. abstract class StatefulWorkflow<in PropsT, StateT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT> StatelessWorkflow Minimal implementation of Workflow that maintains no state of its own. abstract class StatelessWorkflow<in PropsT, out OutputT, out RenderingT> : Workflow <PropsT, OutputT, RenderingT>","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/as-stateful-workflow/","text":"workflow / com.squareup.workflow1 / Workflow / asStatefulWorkflow asStatefulWorkflow \u00b6 abstract fun asStatefulWorkflow(): StatefulWorkflow <PropsT, *, OutputT, RenderingT> Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"As stateful workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow/as-stateful-workflow/#asstatefulworkflow","text":"abstract fun asStatefulWorkflow(): StatefulWorkflow <PropsT, *, OutputT, RenderingT> Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/","text":"workflow / com.squareup.workflow1 / WorkflowAction WorkflowAction \u00b6 abstract class WorkflowAction<in PropsT, StateT, out OutputT> An atomic operation that updates the state of a Workflow , and also optionally emits an output. Types \u00b6 Name Summary Updater The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput . inner class Updater<in PropsT, StateT, out OutputT> Constructors \u00b6 Name Summary <init> An atomic operation that updates the state of a Workflow , and also optionally emits an output. WorkflowAction() Functions \u00b6 Name Summary apply Executes the logic for this action, including any side effects, updating state , and setting the OutputT to emit. abstract fun Updater<PropsT, StateT, OutputT>.apply(): Unit Companion Object Functions \u00b6 Name Summary noAction Returns a WorkflowAction that does nothing: no output will be emitted, and the state will not change. fun <PropsT, StateT, OutputT> noAction(): WorkflowAction <PropsT, StateT, OutputT> Extension Functions \u00b6 Name Summary applyTo Applies this WorkflowAction to state . fun <PropsT, StateT, OutputT> WorkflowAction <PropsT, StateT, OutputT>.applyTo(props: PropsT, state: StateT): Pair <StateT, WorkflowOutput <OutputT>?>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#workflowaction","text":"abstract class WorkflowAction<in PropsT, StateT, out OutputT> An atomic operation that updates the state of a Workflow , and also optionally emits an output.","title":"WorkflowAction"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#types","text":"Name Summary Updater The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput . inner class Updater<in PropsT, StateT, out OutputT>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#constructors","text":"Name Summary <init> An atomic operation that updates the state of a Workflow , and also optionally emits an output. WorkflowAction()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#functions","text":"Name Summary apply Executes the logic for this action, including any side effects, updating state , and setting the OutputT to emit. abstract fun Updater<PropsT, StateT, OutputT>.apply(): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#companion-object-functions","text":"Name Summary noAction Returns a WorkflowAction that does nothing: no output will be emitted, and the state will not change. fun <PropsT, StateT, OutputT> noAction(): WorkflowAction <PropsT, StateT, OutputT>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/#extension-functions","text":"Name Summary applyTo Applies this WorkflowAction to state . fun <PropsT, StateT, OutputT> WorkflowAction <PropsT, StateT, OutputT>.applyTo(props: PropsT, state: StateT): Pair <StateT, WorkflowOutput <OutputT>?>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-init-/","text":"workflow / com.squareup.workflow1 / WorkflowAction / <init> <init> \u00b6 WorkflowAction() An atomic operation that updates the state of a Workflow , and also optionally emits an output.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-init-/#init","text":"WorkflowAction() An atomic operation that updates the state of a Workflow , and also optionally emits an output.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/apply/","text":"workflow / com.squareup.workflow1 / WorkflowAction / apply apply \u00b6 abstract fun Updater<PropsT, StateT, OutputT>.apply(): Unit Executes the logic for this action, including any side effects, updating state , and setting the OutputT to emit.","title":"Apply"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/apply/#apply","text":"abstract fun Updater<PropsT, StateT, OutputT>.apply(): Unit Executes the logic for this action, including any side effects, updating state , and setting the OutputT to emit.","title":"apply"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/no-action/","text":"workflow / com.squareup.workflow1 / WorkflowAction / noAction noAction \u00b6 fun <PropsT, StateT, OutputT> noAction(): WorkflowAction <PropsT, StateT, OutputT> Returns a WorkflowAction that does nothing: no output will be emitted, and the state will not change. Use this to, for example, ignore the output of a child workflow or worker.","title":"No action"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/no-action/#noaction","text":"fun <PropsT, StateT, OutputT> noAction(): WorkflowAction <PropsT, StateT, OutputT> Returns a WorkflowAction that does nothing: no output will be emitted, and the state will not change. Use this to, for example, ignore the output of a child workflow or worker.","title":"noAction"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/","text":"workflow / com.squareup.workflow1 / WorkflowAction / Updater Updater \u00b6 inner class Updater<in PropsT, StateT, out OutputT> The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput . Parameters \u00b6 state - the state that the workflow should move to. Default is the current state. Constructors \u00b6 Name Summary <init> The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput . Updater(props: PropsT, state: StateT) Properties \u00b6 Name Summary props val props: PropsT state the state that the workflow should move to. Default is the current state. var state: StateT Functions \u00b6 Name Summary setOutput Sets the value the workflow will emit as output when this action is applied. If this method is not called, there will be no output. fun setOutput(output: OutputT): Unit","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#updater","text":"inner class Updater<in PropsT, StateT, out OutputT> The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput .","title":"Updater"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#parameters","text":"state - the state that the workflow should move to. Default is the current state.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#constructors","text":"Name Summary <init> The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput . Updater(props: PropsT, state: StateT)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#properties","text":"Name Summary props val props: PropsT state the state that the workflow should move to. Default is the current state. var state: StateT","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/#functions","text":"Name Summary setOutput Sets the value the workflow will emit as output when this action is applied. If this method is not called, there will be no output. fun setOutput(output: OutputT): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/-init-/","text":"workflow / com.squareup.workflow1 / WorkflowAction / Updater / <init> <init> \u00b6 Updater(props: @UnsafeVariance PropsT, state: StateT) The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput . Parameters \u00b6 state - the state that the workflow should move to. Default is the current state.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/-init-/#init","text":"Updater(props: @UnsafeVariance PropsT, state: StateT) The context for calls to WorkflowAction.apply . Allows the action to set the state , and to emit the setOutput .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/-init-/#parameters","text":"state - the state that the workflow should move to. Default is the current state.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/props/","text":"workflow / com.squareup.workflow1 / WorkflowAction / Updater / props props \u00b6 val props: @UnsafeVariance PropsT","title":"Props"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/props/#props","text":"val props: @UnsafeVariance PropsT","title":"props"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/set-output/","text":"workflow / com.squareup.workflow1 / WorkflowAction / Updater / setOutput setOutput \u00b6 fun setOutput(output: @UnsafeVariance OutputT): Unit Sets the value the workflow will emit as output when this action is applied. If this method is not called, there will be no output.","title":"Set output"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/set-output/#setoutput","text":"fun setOutput(output: @UnsafeVariance OutputT): Unit Sets the value the workflow will emit as output when this action is applied. If this method is not called, there will be no output.","title":"setOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/state/","text":"workflow / com.squareup.workflow1 / WorkflowAction / Updater / state state \u00b6 var state: StateT the state that the workflow should move to. Default is the current state.","title":"State"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-action/-updater/state/#state","text":"var state: StateT the state that the workflow should move to. Default is the current state.","title":"state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/","text":"workflow / com.squareup.workflow1 / WorkflowIdentifier WorkflowIdentifier \u00b6 @ExperimentalWorkflowApi class WorkflowIdentifier Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. A workflow\u2019s identity consists primarily of its concrete type (i.e. the class that implements the Workflow interface). Two workflows of the same concrete type are considered identical. However, if a workflow class implements ImpostorWorkflow , the identifier will also include that workflow\u2019s ImpostorWorkflow.realIdentifier . Instances of this class are equatable and hashable . Identifiers and snapshots \u00b6 Since workflows can be serialized , workflows\u2019 identifiers must also be serializable in order to match workflows back up with their snapshots when restoring. However, some WorkflowIdentifier s may represent workflows that cannot be snapshotted. When an identifier is not snapshottable, toByteStringOrNull will return null, and any identifiers that reference ImpostorWorkflow s whose ImpostorWorkflow.realIdentifier is not snapshottable will also not be snapshottable. Such identifiers are created with unsnapshottableIdentifier , but should not be used to wrap arbitrary workflows since those workflows may expect to be snapshotted. Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean getRealIdentifierType Returns either a KClass or KType representing the \u201creal\u201d type that this identifier identifies \u2013 i.e. which is not an ImpostorWorkflow . fun getRealIdentifierType(): KAnnotatedElement hashCode fun hashCode(): Int toByteStringOrNull If this identifier is snapshottable, returns the serialized form of the identifier. If it is not snapshottable, returns null. fun toByteStringOrNull(): ByteString? toString If this identifier identifies an ImpostorWorkflow , returns the result of that workflow\u2019s ImpostorWorkflow.describeRealIdentifier method, otherwise returns a description of this identifier including the name of its workflow type and any ImpostorWorkflow.realIdentifier s. fun toString(): String Companion Object Functions \u00b6 Name Summary parse Reads a WorkflowIdentifier from a ByteString as written by toByteStringOrNull . fun parse(bytes: ByteString): WorkflowIdentifier ?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/#workflowidentifier","text":"@ExperimentalWorkflowApi class WorkflowIdentifier Represents a Workflow \u2018s \u201cidentity\u201d and is used by the runtime to determine whether a workflow is the same as one that was rendered in a previous render pass, in which case its state should be re-used; or if it\u2019s a new workflow and needs to be started. A workflow\u2019s identity consists primarily of its concrete type (i.e. the class that implements the Workflow interface). Two workflows of the same concrete type are considered identical. However, if a workflow class implements ImpostorWorkflow , the identifier will also include that workflow\u2019s ImpostorWorkflow.realIdentifier . Instances of this class are equatable and hashable .","title":"WorkflowIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/#identifiers-and-snapshots","text":"Since workflows can be serialized , workflows\u2019 identifiers must also be serializable in order to match workflows back up with their snapshots when restoring. However, some WorkflowIdentifier s may represent workflows that cannot be snapshotted. When an identifier is not snapshottable, toByteStringOrNull will return null, and any identifiers that reference ImpostorWorkflow s whose ImpostorWorkflow.realIdentifier is not snapshottable will also not be snapshottable. Such identifiers are created with unsnapshottableIdentifier , but should not be used to wrap arbitrary workflows since those workflows may expect to be snapshotted.","title":"Identifiers and snapshots"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean getRealIdentifierType Returns either a KClass or KType representing the \u201creal\u201d type that this identifier identifies \u2013 i.e. which is not an ImpostorWorkflow . fun getRealIdentifierType(): KAnnotatedElement hashCode fun hashCode(): Int toByteStringOrNull If this identifier is snapshottable, returns the serialized form of the identifier. If it is not snapshottable, returns null. fun toByteStringOrNull(): ByteString? toString If this identifier identifies an ImpostorWorkflow , returns the result of that workflow\u2019s ImpostorWorkflow.describeRealIdentifier method, otherwise returns a description of this identifier including the name of its workflow type and any ImpostorWorkflow.realIdentifier s. fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/#companion-object-functions","text":"Name Summary parse Reads a WorkflowIdentifier from a ByteString as written by toByteStringOrNull . fun parse(bytes: ByteString): WorkflowIdentifier ?","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/equals/","text":"workflow / com.squareup.workflow1 / WorkflowIdentifier / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/get-real-identifier-type/","text":"workflow / com.squareup.workflow1 / WorkflowIdentifier / getRealIdentifierType getRealIdentifierType \u00b6 @TestOnly fun getRealIdentifierType(): KAnnotatedElement Returns either a KClass or KType representing the \u201creal\u201d type that this identifier identifies \u2013 i.e. which is not an ImpostorWorkflow .","title":"Get real identifier type"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/get-real-identifier-type/#getrealidentifiertype","text":"@TestOnly fun getRealIdentifierType(): KAnnotatedElement Returns either a KClass or KType representing the \u201creal\u201d type that this identifier identifies \u2013 i.e. which is not an ImpostorWorkflow .","title":"getRealIdentifierType"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/hash-code/","text":"workflow / com.squareup.workflow1 / WorkflowIdentifier / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/parse/","text":"workflow / com.squareup.workflow1 / WorkflowIdentifier / parse parse \u00b6 fun parse(bytes: ByteString): WorkflowIdentifier ? Reads a WorkflowIdentifier from a ByteString as written by toByteStringOrNull . Exceptions \u00b6 IllegalArgumentException - if the source does not contain a valid WorkflowIdentifier ClassNotFoundException - if one of the workflow types can\u2019t be found in the class loader","title":"Parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/parse/#parse","text":"fun parse(bytes: ByteString): WorkflowIdentifier ? Reads a WorkflowIdentifier from a ByteString as written by toByteStringOrNull .","title":"parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/parse/#exceptions","text":"IllegalArgumentException - if the source does not contain a valid WorkflowIdentifier ClassNotFoundException - if one of the workflow types can\u2019t be found in the class loader","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/to-byte-string-or-null/","text":"workflow / com.squareup.workflow1 / WorkflowIdentifier / toByteStringOrNull toByteStringOrNull \u00b6 fun toByteStringOrNull(): ByteString? If this identifier is snapshottable, returns the serialized form of the identifier. If it is not snapshottable, returns null.","title":"To byte string or null"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/to-byte-string-or-null/#tobytestringornull","text":"fun toByteStringOrNull(): ByteString? If this identifier is snapshottable, returns the serialized form of the identifier. If it is not snapshottable, returns null.","title":"toByteStringOrNull"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/to-string/","text":"workflow / com.squareup.workflow1 / WorkflowIdentifier / toString toString \u00b6 fun toString(): String If this identifier identifies an ImpostorWorkflow , returns the result of that workflow\u2019s ImpostorWorkflow.describeRealIdentifier method, otherwise returns a description of this identifier including the name of its workflow type and any ImpostorWorkflow.realIdentifier s.","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-identifier/to-string/#tostring","text":"fun toString(): String If this identifier identifies an ImpostorWorkflow , returns the result of that workflow\u2019s ImpostorWorkflow.describeRealIdentifier method, otherwise returns a description of this identifier including the name of its workflow type and any ImpostorWorkflow.realIdentifier s.","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor WorkflowInterceptor \u00b6 @ExperimentalWorkflowApi interface WorkflowInterceptor Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. This interface\u2019s methods mirror the methods of StatefulWorkflow . It also has one additional method, onSessionStarted , that is notified when a workflow is started. Each method returns the same thing as the corresponding method on StatefulWorkflow , and receives the same parameters as well as two extra parameters: proceed \u2013 A function that exactly mirrors the corresponding function on StatefulWorkflow , accepting the same parameters and returning the same thing. An interceptor can call this function to run the actual workflow, but it may also decide to not call it at all, or call it multiple times. session \u2013 A WorkflowSession object that can be queried for information about the workflow being intercepted. All methods have default no-op implementations. Workflow sessions \u00b6 A single workflow may be rendered by different parents at the same time, or the same parent at different, disjoint times. Each continuous sequence of renderings of a particular workflow type, with the same key passed to BaseRenderContext.renderChild , is called an \u201csession\u201d of that workflow. The workflow\u2019s StatefulWorkflow.initialState method will be called at the start of the session, and its state will be maintained by the runtime until the session is finished. Each session is identified by the WorkflowSession object passed into the corresponding method in a WorkflowInterceptor . In addition to the WorkflowIdentifier of the type of the workflow being rendered, this object also knows the key used to render the workflow and the WorkflowSession of the parent workflow that is rendering it. Each session is also assigned a numerical ID that uniquely identifies the session over the life of the entire runtime. This value will remain constant as long as the workflow\u2019s parent is rendering it, and then it will never be used again. If this workflow stops being rendered, and then starts again, the value will be different. Types \u00b6 Name Summary RenderContextInterceptor Provides hooks for intercepting calls to a BaseRenderContext , to be used from onRender . interface RenderContextInterceptor<P, S, O> WorkflowSession Information about the session of a workflow in the runtime that a WorkflowInterceptor method is intercepting. interface WorkflowSession Functions \u00b6 Name Summary onInitialState Intercepts calls to StatefulWorkflow.initialState . open fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S onPropsChanged Intercepts calls to StatefulWorkflow.onPropsChanged . open fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S onRender Intercepts calls to StatefulWorkflow.render . open fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R onSessionStarted Called when the session is starting, before onInitialState . open fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit onSnapshotState Intercepts calls to StatefulWorkflow.snapshotState . open fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ? Inheritors \u00b6 Name Summary NoopWorkflowInterceptor A WorkflowInterceptor that does not intercept anything. object NoopWorkflowInterceptor : WorkflowInterceptor RenderIdempotencyChecker Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. object RenderIdempotencyChecker : WorkflowInterceptor SimpleLoggingWorkflowInterceptor A WorkflowInterceptor that just prints all method calls using log . open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . class TracingWorkflowInterceptor : WorkflowInterceptor","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#workflowinterceptor","text":"@ExperimentalWorkflowApi interface WorkflowInterceptor Provides hooks into the workflow runtime that can be used to instrument or modify the behavior of workflows. This interface\u2019s methods mirror the methods of StatefulWorkflow . It also has one additional method, onSessionStarted , that is notified when a workflow is started. Each method returns the same thing as the corresponding method on StatefulWorkflow , and receives the same parameters as well as two extra parameters: proceed \u2013 A function that exactly mirrors the corresponding function on StatefulWorkflow , accepting the same parameters and returning the same thing. An interceptor can call this function to run the actual workflow, but it may also decide to not call it at all, or call it multiple times. session \u2013 A WorkflowSession object that can be queried for information about the workflow being intercepted. All methods have default no-op implementations.","title":"WorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#workflow-sessions","text":"A single workflow may be rendered by different parents at the same time, or the same parent at different, disjoint times. Each continuous sequence of renderings of a particular workflow type, with the same key passed to BaseRenderContext.renderChild , is called an \u201csession\u201d of that workflow. The workflow\u2019s StatefulWorkflow.initialState method will be called at the start of the session, and its state will be maintained by the runtime until the session is finished. Each session is identified by the WorkflowSession object passed into the corresponding method in a WorkflowInterceptor . In addition to the WorkflowIdentifier of the type of the workflow being rendered, this object also knows the key used to render the workflow and the WorkflowSession of the parent workflow that is rendering it. Each session is also assigned a numerical ID that uniquely identifies the session over the life of the entire runtime. This value will remain constant as long as the workflow\u2019s parent is rendering it, and then it will never be used again. If this workflow stops being rendered, and then starts again, the value will be different.","title":"Workflow sessions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#types","text":"Name Summary RenderContextInterceptor Provides hooks for intercepting calls to a BaseRenderContext , to be used from onRender . interface RenderContextInterceptor<P, S, O> WorkflowSession Information about the session of a workflow in the runtime that a WorkflowInterceptor method is intercepting. interface WorkflowSession","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#functions","text":"Name Summary onInitialState Intercepts calls to StatefulWorkflow.initialState . open fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S onPropsChanged Intercepts calls to StatefulWorkflow.onPropsChanged . open fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S onRender Intercepts calls to StatefulWorkflow.render . open fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R onSessionStarted Called when the session is starting, before onInitialState . open fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit onSnapshotState Intercepts calls to StatefulWorkflow.snapshotState . open fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ?","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/#inheritors","text":"Name Summary NoopWorkflowInterceptor A WorkflowInterceptor that does not intercept anything. object NoopWorkflowInterceptor : WorkflowInterceptor RenderIdempotencyChecker Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. object RenderIdempotencyChecker : WorkflowInterceptor SimpleLoggingWorkflowInterceptor A WorkflowInterceptor that just prints all method calls using log . open class SimpleLoggingWorkflowInterceptor : WorkflowInterceptor TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . class TracingWorkflowInterceptor : WorkflowInterceptor","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-initial-state/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / onInitialState onInitialState \u00b6 open fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.initialState .","title":"On initial state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-initial-state/#oninitialstate","text":"open fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.initialState .","title":"onInitialState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-props-changed/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / onPropsChanged onPropsChanged \u00b6 open fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"On props changed"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-props-changed/#onpropschanged","text":"open fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"onPropsChanged"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-render/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / onRender onRender \u00b6 open fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R Intercepts calls to StatefulWorkflow.render .","title":"On render"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-render/#onrender","text":"open fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R Intercepts calls to StatefulWorkflow.render .","title":"onRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-session-started/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / onSessionStarted onSessionStarted \u00b6 open fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit Called when the session is starting, before onInitialState . Parameters \u00b6 workflowScope - The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"On session started"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-session-started/#onsessionstarted","text":"open fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit Called when the session is starting, before onInitialState .","title":"onSessionStarted"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-session-started/#parameters","text":"workflowScope - The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-snapshot-state/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / onSnapshotState onSnapshotState \u00b6 open fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ? Intercepts calls to StatefulWorkflow.snapshotState .","title":"On snapshot state"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/on-snapshot-state/#onsnapshotstate","text":"open fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ? Intercepts calls to StatefulWorkflow.snapshotState .","title":"onSnapshotState"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / RenderContextInterceptor RenderContextInterceptor \u00b6 interface RenderContextInterceptor<P, S, O> Provides hooks for intercepting calls to a BaseRenderContext , to be used from onRender . For use by onRender methods that want to hook into action and side effect events. See documentation on methods for more information about the individual hooks: RenderContextInterceptor.onActionSent RenderContextInterceptor.onRunningSideEffect E.g.: override fun <P, S, O, R> onRender( renderProps: P, renderState: S, proceed: (P, S, RenderContextInterceptor<P, S, O>) -> R, session: WorkflowSession ): R = proceed(renderProps, renderState, object : RenderContextInterceptor<P, S, O> { override fun onActionSent( action: WorkflowAction<P, S, O>, proceed: (WorkflowAction<P, S, O>) -> Unit ) { log(\"Action sent: $action\") proceed(action) } override fun onRunningSideEffect( key: String, sideEffect: suspend () -> Unit, proceed: (key: String, sideEffect: suspend () -> Unit) -> Unit ) { proceed(key) { log(\"Side effect started: $key\") sideEffect() log(\"Side effect ended: $key\") } } }) Functions \u00b6 Name Summary onActionSent Intercepts calls to send on the BaseRenderContext.actionSink . open fun onActionSent(action: WorkflowAction <P, S, O>, proceed: ( WorkflowAction <P, S, O>) -> Unit ): Unit onRenderChild Intercepts calls to BaseRenderContext.renderChild , allowing the interceptor to wrap or replace the child Workflow, its childProps , key , and the handler function to be applied to the child\u2019s output. open fun <CP, CO, CR> onRenderChild(child: Workflow <CP, CO, CR>, childProps: CP, key: String , handler: (CO) -> WorkflowAction <P, S, O>, proceed: (child: Workflow <CP, CO, CR>, childProps: CP, key: String , handler: (CO) -> WorkflowAction <P, S, O>) -> CR): CR onRunningSideEffect Intercepts calls to BaseRenderContext.runningSideEffect , allowing the interceptor to wrap or replace the sideEffect and its key . This could be used to prevent a side effect from running, or to augment it with further effects. open fun onRunningSideEffect(key: String , sideEffect: suspend () -> Unit , proceed: (key: String , sideEffect: suspend () -> Unit ) -> Unit ): Unit","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/#rendercontextinterceptor","text":"interface RenderContextInterceptor<P, S, O> Provides hooks for intercepting calls to a BaseRenderContext , to be used from onRender . For use by onRender methods that want to hook into action and side effect events. See documentation on methods for more information about the individual hooks: RenderContextInterceptor.onActionSent RenderContextInterceptor.onRunningSideEffect E.g.: override fun <P, S, O, R> onRender( renderProps: P, renderState: S, proceed: (P, S, RenderContextInterceptor<P, S, O>) -> R, session: WorkflowSession ): R = proceed(renderProps, renderState, object : RenderContextInterceptor<P, S, O> { override fun onActionSent( action: WorkflowAction<P, S, O>, proceed: (WorkflowAction<P, S, O>) -> Unit ) { log(\"Action sent: $action\") proceed(action) } override fun onRunningSideEffect( key: String, sideEffect: suspend () -> Unit, proceed: (key: String, sideEffect: suspend () -> Unit) -> Unit ) { proceed(key) { log(\"Side effect started: $key\") sideEffect() log(\"Side effect ended: $key\") } } })","title":"RenderContextInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/#functions","text":"Name Summary onActionSent Intercepts calls to send on the BaseRenderContext.actionSink . open fun onActionSent(action: WorkflowAction <P, S, O>, proceed: ( WorkflowAction <P, S, O>) -> Unit ): Unit onRenderChild Intercepts calls to BaseRenderContext.renderChild , allowing the interceptor to wrap or replace the child Workflow, its childProps , key , and the handler function to be applied to the child\u2019s output. open fun <CP, CO, CR> onRenderChild(child: Workflow <CP, CO, CR>, childProps: CP, key: String , handler: (CO) -> WorkflowAction <P, S, O>, proceed: (child: Workflow <CP, CO, CR>, childProps: CP, key: String , handler: (CO) -> WorkflowAction <P, S, O>) -> CR): CR onRunningSideEffect Intercepts calls to BaseRenderContext.runningSideEffect , allowing the interceptor to wrap or replace the sideEffect and its key . This could be used to prevent a side effect from running, or to augment it with further effects. open fun onRunningSideEffect(key: String , sideEffect: suspend () -> Unit , proceed: (key: String , sideEffect: suspend () -> Unit ) -> Unit ): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-action-sent/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / RenderContextInterceptor / onActionSent onActionSent \u00b6 open fun onActionSent(action: WorkflowAction <P, S, O>, proceed: ( WorkflowAction <P, S, O>) -> Unit ): Unit Intercepts calls to send on the BaseRenderContext.actionSink . This method will be called from inside the actual Sink.send stack frame, so any stack traces captured from it will include the code that is actually making the send call.","title":"On action sent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-action-sent/#onactionsent","text":"open fun onActionSent(action: WorkflowAction <P, S, O>, proceed: ( WorkflowAction <P, S, O>) -> Unit ): Unit Intercepts calls to send on the BaseRenderContext.actionSink . This method will be called from inside the actual Sink.send stack frame, so any stack traces captured from it will include the code that is actually making the send call.","title":"onActionSent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-render-child/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / RenderContextInterceptor / onRenderChild onRenderChild \u00b6 open fun <CP, CO, CR> onRenderChild(child: Workflow <CP, CO, CR>, childProps: CP, key: String , handler: (CO) -> WorkflowAction <P, S, O>, proceed: (child: Workflow <CP, CO, CR>, childProps: CP, key: String , handler: (CO) -> WorkflowAction <P, S, O>) -> CR): CR Intercepts calls to BaseRenderContext.renderChild , allowing the interceptor to wrap or replace the child Workflow, its childProps , key , and the handler function to be applied to the child\u2019s output.","title":"On render child"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-render-child/#onrenderchild","text":"open fun <CP, CO, CR> onRenderChild(child: Workflow <CP, CO, CR>, childProps: CP, key: String , handler: (CO) -> WorkflowAction <P, S, O>, proceed: (child: Workflow <CP, CO, CR>, childProps: CP, key: String , handler: (CO) -> WorkflowAction <P, S, O>) -> CR): CR Intercepts calls to BaseRenderContext.renderChild , allowing the interceptor to wrap or replace the child Workflow, its childProps , key , and the handler function to be applied to the child\u2019s output.","title":"onRenderChild"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-running-side-effect/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / RenderContextInterceptor / onRunningSideEffect onRunningSideEffect \u00b6 open fun onRunningSideEffect(key: String , sideEffect: suspend () -> Unit , proceed: (key: String , sideEffect: suspend () -> Unit ) -> Unit ): Unit Intercepts calls to BaseRenderContext.runningSideEffect , allowing the interceptor to wrap or replace the sideEffect and its key . This could be used to prevent a side effect from running, or to augment it with further effects. The sideEffect function will perform the actual suspending side effect, and only return when the side effect is complete \u2013 this may be far in the future. This means the interceptor can be notified when the side effect ends by simply running code after sideEffect returns or throws. The interceptor may run sideEffect in a different CoroutineContext , e.g to change its dispatcher or name, but should take care to use the original Job , or otherwise ensure that the structured concurrency contract is not broken.","title":"On running side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-render-context-interceptor/on-running-side-effect/#onrunningsideeffect","text":"open fun onRunningSideEffect(key: String , sideEffect: suspend () -> Unit , proceed: (key: String , sideEffect: suspend () -> Unit ) -> Unit ): Unit Intercepts calls to BaseRenderContext.runningSideEffect , allowing the interceptor to wrap or replace the sideEffect and its key . This could be used to prevent a side effect from running, or to augment it with further effects. The sideEffect function will perform the actual suspending side effect, and only return when the side effect is complete \u2013 this may be far in the future. This means the interceptor can be notified when the side effect ends by simply running code after sideEffect returns or throws. The interceptor may run sideEffect in a different CoroutineContext , e.g to change its dispatcher or name, but should take care to use the original Job , or otherwise ensure that the structured concurrency contract is not broken.","title":"onRunningSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession WorkflowSession \u00b6 @ExperimentalWorkflowApi interface WorkflowSession Information about the session of a workflow in the runtime that a WorkflowInterceptor method is intercepting. Properties \u00b6 Name Summary identifier The WorkflowIdentifier that represents the type of this workflow. abstract val identifier: WorkflowIdentifier parent The parent WorkflowSession of this workflow, or null if this is the root workflow. abstract val parent: WorkflowSession? renderKey The string key argument that was passed to BaseRenderContext.renderChild to render this workflow. abstract val renderKey: String sessionId A unique value that identifies the currently-running session of this workflow in the runtime. See the documentation on WorkflowInterceptor for more information about what this value represents. abstract val sessionId: Long","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/#workflowsession","text":"@ExperimentalWorkflowApi interface WorkflowSession Information about the session of a workflow in the runtime that a WorkflowInterceptor method is intercepting.","title":"WorkflowSession"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/#properties","text":"Name Summary identifier The WorkflowIdentifier that represents the type of this workflow. abstract val identifier: WorkflowIdentifier parent The parent WorkflowSession of this workflow, or null if this is the root workflow. abstract val parent: WorkflowSession? renderKey The string key argument that was passed to BaseRenderContext.renderChild to render this workflow. abstract val renderKey: String sessionId A unique value that identifies the currently-running session of this workflow in the runtime. See the documentation on WorkflowInterceptor for more information about what this value represents. abstract val sessionId: Long","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/identifier/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession / identifier identifier \u00b6 abstract val identifier: WorkflowIdentifier The WorkflowIdentifier that represents the type of this workflow.","title":"Identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/identifier/#identifier","text":"abstract val identifier: WorkflowIdentifier The WorkflowIdentifier that represents the type of this workflow.","title":"identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/parent/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession / parent parent \u00b6 abstract val parent: WorkflowSession? The parent WorkflowSession of this workflow, or null if this is the root workflow.","title":"Parent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/parent/#parent","text":"abstract val parent: WorkflowSession? The parent WorkflowSession of this workflow, or null if this is the root workflow.","title":"parent"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/render-key/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession / renderKey renderKey \u00b6 abstract val renderKey: String The string key argument that was passed to BaseRenderContext.renderChild to render this workflow.","title":"Render key"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/render-key/#renderkey","text":"abstract val renderKey: String The string key argument that was passed to BaseRenderContext.renderChild to render this workflow.","title":"renderKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/session-id/","text":"workflow / com.squareup.workflow1 / WorkflowInterceptor / WorkflowSession / sessionId sessionId \u00b6 abstract val sessionId: Long A unique value that identifies the currently-running session of this workflow in the runtime. See the documentation on WorkflowInterceptor for more information about what this value represents.","title":"Session id"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-interceptor/-workflow-session/session-id/#sessionid","text":"abstract val sessionId: Long A unique value that identifies the currently-running session of this workflow in the runtime. See the documentation on WorkflowInterceptor for more information about what this value represents.","title":"sessionId"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/","text":"workflow / com.squareup.workflow1 / WorkflowOutput WorkflowOutput \u00b6 class WorkflowOutput<out OutputT> Wrapper around a potentially-nullable OutputT value. Constructors \u00b6 Name Summary <init> Wrapper around a potentially-nullable OutputT value. WorkflowOutput(value: OutputT) Properties \u00b6 Name Summary value val value: OutputT Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/#workflowoutput","text":"class WorkflowOutput<out OutputT> Wrapper around a potentially-nullable OutputT value.","title":"WorkflowOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/#constructors","text":"Name Summary <init> Wrapper around a potentially-nullable OutputT value. WorkflowOutput(value: OutputT)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/#properties","text":"Name Summary value val value: OutputT","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/-init-/","text":"workflow / com.squareup.workflow1 / WorkflowOutput / <init> <init> \u00b6 WorkflowOutput(value: OutputT) Wrapper around a potentially-nullable OutputT value.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/-init-/#init","text":"WorkflowOutput(value: OutputT) Wrapper around a potentially-nullable OutputT value.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/equals/","text":"workflow / com.squareup.workflow1 / WorkflowOutput / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/hash-code/","text":"workflow / com.squareup.workflow1 / WorkflowOutput / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/to-string/","text":"workflow / com.squareup.workflow1 / WorkflowOutput / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/value/","text":"workflow / com.squareup.workflow1 / WorkflowOutput / value value \u00b6 val value: OutputT","title":"Value"},{"location":"kotlin/api/workflow/com.squareup.workflow1/-workflow-output/value/#value","text":"val value: OutputT","title":"value"},{"location":"kotlin/api/workflow/com.squareup.workflow1/kotlin.reflect.-k-class/","text":"workflow / com.squareup.workflow1 / kotlin.reflect.KClass Extensions for kotlin.reflect.KClass \u00b6 Name Summary workflowIdentifier The WorkflowIdentifier that identifies the workflow this KClass represents. val KClass <out Workflow <*, *, *>>.workflowIdentifier: WorkflowIdentifier","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/kotlin.reflect.-k-class/#extensions-for-kotlinreflectkclass","text":"Name Summary workflowIdentifier The WorkflowIdentifier that identifies the workflow this KClass represents. val KClass <out Workflow <*, *, *>>.workflowIdentifier: WorkflowIdentifier","title":"Extensions for kotlin.reflect.KClass"},{"location":"kotlin/api/workflow/com.squareup.workflow1/kotlin.reflect.-k-class/workflow-identifier/","text":"workflow / com.squareup.workflow1 / kotlin.reflect.KClass / workflowIdentifier workflowIdentifier \u00b6 @ExperimentalWorkflowApi val KClass <out Workflow <*, *, *>>.workflowIdentifier: WorkflowIdentifier The WorkflowIdentifier that identifies the workflow this KClass represents. This workflow must not be an ImpostorWorkflow , or this property will throw an IllegalArgumentException . To create an identifier from the class of an ImpostorWorkflow , use the impostorWorkflowIdentifier function.","title":"Workflow identifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/kotlin.reflect.-k-class/workflow-identifier/#workflowidentifier","text":"@ExperimentalWorkflowApi val KClass <out Workflow <*, *, *>>.workflowIdentifier: WorkflowIdentifier The WorkflowIdentifier that identifies the workflow this KClass represents. This workflow must not be an ImpostorWorkflow , or this property will throw an IllegalArgumentException . To create an identifier from the class of an ImpostorWorkflow , use the impostorWorkflowIdentifier function.","title":"workflowIdentifier"},{"location":"kotlin/api/workflow/com.squareup.workflow1/kotlinx.coroutines.flow.-flow/","text":"workflow / com.squareup.workflow1 / kotlinx.coroutines.flow.Flow Extensions for kotlinx.coroutines.flow.Flow \u00b6 Name Summary asWorker Returns a Worker that will, when performed, emit whatever this Flow receives. fun <OutputT> Flow<OutputT>.asWorker(): Worker <OutputT>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/kotlinx.coroutines.flow.-flow/#extensions-for-kotlinxcoroutinesflowflow","text":"Name Summary asWorker Returns a Worker that will, when performed, emit whatever this Flow receives. fun <OutputT> Flow<OutputT>.asWorker(): Worker <OutputT>","title":"Extensions for kotlinx.coroutines.flow.Flow"},{"location":"kotlin/api/workflow/com.squareup.workflow1/kotlinx.coroutines.flow.-flow/as-worker/","text":"workflow / com.squareup.workflow1 / kotlinx.coroutines.flow.Flow / asWorker asWorker \u00b6 fun <reified OutputT> Flow<OutputT>.asWorker(): Worker <OutputT> Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"As worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/kotlinx.coroutines.flow.-flow/as-worker/#asworker","text":"fun <reified OutputT> Flow<OutputT>.asWorker(): Worker <OutputT> Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"asWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink Extensions for okio.BufferedSink \u00b6 Name Summary writeBooleanAsInt fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink writeByteStringWithLength fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink writeEnumByOrdinal fun <T : Enum <T>> BufferedSink.writeEnumByOrdinal(enumVal: T): BufferedSink writeFloat fun BufferedSink.writeFloat(float: Float ): BufferedSink writeList fun <T> BufferedSink.writeList(values: List <T>, writer: BufferedSink.(T) -> Unit ): BufferedSink writeNullable fun <T : Any > BufferedSink.writeNullable(obj: T?, writer: BufferedSink.(T) -> Unit ): BufferedSink writeOptionalEnumByOrdinal fun <T : Enum <T>> BufferedSink.writeOptionalEnumByOrdinal(enumVal: T?): BufferedSink writeOptionalUtf8WithLength fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink writeUtf8WithLength fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/#extensions-for-okiobufferedsink","text":"Name Summary writeBooleanAsInt fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink writeByteStringWithLength fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink writeEnumByOrdinal fun <T : Enum <T>> BufferedSink.writeEnumByOrdinal(enumVal: T): BufferedSink writeFloat fun BufferedSink.writeFloat(float: Float ): BufferedSink writeList fun <T> BufferedSink.writeList(values: List <T>, writer: BufferedSink.(T) -> Unit ): BufferedSink writeNullable fun <T : Any > BufferedSink.writeNullable(obj: T?, writer: BufferedSink.(T) -> Unit ): BufferedSink writeOptionalEnumByOrdinal fun <T : Enum <T>> BufferedSink.writeOptionalEnumByOrdinal(enumVal: T?): BufferedSink writeOptionalUtf8WithLength fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink writeUtf8WithLength fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"Extensions for okio.BufferedSink"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-boolean-as-int/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink / writeBooleanAsInt writeBooleanAsInt \u00b6 fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink","title":"Write boolean as int"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-boolean-as-int/#writebooleanasint","text":"fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink","title":"writeBooleanAsInt"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-byte-string-with-length/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink / writeByteStringWithLength writeByteStringWithLength \u00b6 fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink","title":"Write byte string with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-byte-string-with-length/#writebytestringwithlength","text":"fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink","title":"writeByteStringWithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-enum-by-ordinal/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink / writeEnumByOrdinal writeEnumByOrdinal \u00b6 fun <T : Enum <T>> BufferedSink.writeEnumByOrdinal(enumVal: T): BufferedSink","title":"Write enum by ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-enum-by-ordinal/#writeenumbyordinal","text":"fun <T : Enum <T>> BufferedSink.writeEnumByOrdinal(enumVal: T): BufferedSink","title":"writeEnumByOrdinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-float/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink / writeFloat writeFloat \u00b6 fun BufferedSink.writeFloat(float: Float ): BufferedSink","title":"Write float"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-float/#writefloat","text":"fun BufferedSink.writeFloat(float: Float ): BufferedSink","title":"writeFloat"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-list/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink / writeList writeList \u00b6 inline fun <T> BufferedSink.writeList(values: List <T>, writer: BufferedSink.(T) -> Unit ): BufferedSink","title":"Write list"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-list/#writelist","text":"inline fun <T> BufferedSink.writeList(values: List <T>, writer: BufferedSink.(T) -> Unit ): BufferedSink","title":"writeList"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-nullable/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink / writeNullable writeNullable \u00b6 fun <T : Any > BufferedSink.writeNullable(obj: T?, writer: BufferedSink.(T) -> Unit ): BufferedSink","title":"Write nullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-nullable/#writenullable","text":"fun <T : Any > BufferedSink.writeNullable(obj: T?, writer: BufferedSink.(T) -> Unit ): BufferedSink","title":"writeNullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-optional-enum-by-ordinal/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink / writeOptionalEnumByOrdinal writeOptionalEnumByOrdinal \u00b6 fun <T : Enum <T>> BufferedSink.writeOptionalEnumByOrdinal(enumVal: T?): BufferedSink","title":"Write optional enum by ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-optional-enum-by-ordinal/#writeoptionalenumbyordinal","text":"fun <T : Enum <T>> BufferedSink.writeOptionalEnumByOrdinal(enumVal: T?): BufferedSink","title":"writeOptionalEnumByOrdinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-optional-utf8-with-length/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink / writeOptionalUtf8WithLength writeOptionalUtf8WithLength \u00b6 fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink","title":"Write optional utf8 with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-optional-utf8-with-length/#writeoptionalutf8withlength","text":"fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink","title":"writeOptionalUtf8WithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-utf8-with-length/","text":"workflow / com.squareup.workflow1 / okio.BufferedSink / writeUtf8WithLength writeUtf8WithLength \u00b6 fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"Write utf8 with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-sink/write-utf8-with-length/#writeutf8withlength","text":"fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"writeUtf8WithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource Extensions for okio.BufferedSource \u00b6 Name Summary readBooleanFromInt fun BufferedSource.readBooleanFromInt(): Boolean readByteStringWithLength fun BufferedSource.readByteStringWithLength(): ByteString readEnumByOrdinal fun <T : Enum <T>> BufferedSource.readEnumByOrdinal(): T readFloat fun BufferedSource.readFloat(): Float readList fun <T> BufferedSource.readList(reader: BufferedSource.() -> T): List <T> readNullable fun <T : Any > BufferedSource.readNullable(reader: BufferedSource.() -> T): T? readOptionalEnumByOrdinal fun <T : Enum <T>> BufferedSource.readOptionalEnumByOrdinal(): T? readOptionalUtf8WithLength fun BufferedSource.readOptionalUtf8WithLength(): String ? readUtf8WithLength fun BufferedSource.readUtf8WithLength(): String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/#extensions-for-okiobufferedsource","text":"Name Summary readBooleanFromInt fun BufferedSource.readBooleanFromInt(): Boolean readByteStringWithLength fun BufferedSource.readByteStringWithLength(): ByteString readEnumByOrdinal fun <T : Enum <T>> BufferedSource.readEnumByOrdinal(): T readFloat fun BufferedSource.readFloat(): Float readList fun <T> BufferedSource.readList(reader: BufferedSource.() -> T): List <T> readNullable fun <T : Any > BufferedSource.readNullable(reader: BufferedSource.() -> T): T? readOptionalEnumByOrdinal fun <T : Enum <T>> BufferedSource.readOptionalEnumByOrdinal(): T? readOptionalUtf8WithLength fun BufferedSource.readOptionalUtf8WithLength(): String ? readUtf8WithLength fun BufferedSource.readUtf8WithLength(): String","title":"Extensions for okio.BufferedSource"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-boolean-from-int/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource / readBooleanFromInt readBooleanFromInt \u00b6 fun BufferedSource.readBooleanFromInt(): Boolean","title":"Read boolean from int"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-boolean-from-int/#readbooleanfromint","text":"fun BufferedSource.readBooleanFromInt(): Boolean","title":"readBooleanFromInt"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-byte-string-with-length/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource / readByteStringWithLength readByteStringWithLength \u00b6 fun BufferedSource.readByteStringWithLength(): ByteString","title":"Read byte string with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-byte-string-with-length/#readbytestringwithlength","text":"fun BufferedSource.readByteStringWithLength(): ByteString","title":"readByteStringWithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-enum-by-ordinal/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource / readEnumByOrdinal readEnumByOrdinal \u00b6 fun <reified T : Enum <T>> BufferedSource.readEnumByOrdinal(): T","title":"Read enum by ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-enum-by-ordinal/#readenumbyordinal","text":"fun <reified T : Enum <T>> BufferedSource.readEnumByOrdinal(): T","title":"readEnumByOrdinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-float/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource / readFloat readFloat \u00b6 fun BufferedSource.readFloat(): Float","title":"Read float"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-float/#readfloat","text":"fun BufferedSource.readFloat(): Float","title":"readFloat"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-list/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource / readList readList \u00b6 inline fun <T> BufferedSource.readList(reader: BufferedSource.() -> T): List <T>","title":"Read list"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-list/#readlist","text":"inline fun <T> BufferedSource.readList(reader: BufferedSource.() -> T): List <T>","title":"readList"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-nullable/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource / readNullable readNullable \u00b6 fun <T : Any > BufferedSource.readNullable(reader: BufferedSource.() -> T): T?","title":"Read nullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-nullable/#readnullable","text":"fun <T : Any > BufferedSource.readNullable(reader: BufferedSource.() -> T): T?","title":"readNullable"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-optional-enum-by-ordinal/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource / readOptionalEnumByOrdinal readOptionalEnumByOrdinal \u00b6 fun <reified T : Enum <T>> BufferedSource.readOptionalEnumByOrdinal(): T?","title":"Read optional enum by ordinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-optional-enum-by-ordinal/#readoptionalenumbyordinal","text":"fun <reified T : Enum <T>> BufferedSource.readOptionalEnumByOrdinal(): T?","title":"readOptionalEnumByOrdinal"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-optional-utf8-with-length/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource / readOptionalUtf8WithLength readOptionalUtf8WithLength \u00b6 fun BufferedSource.readOptionalUtf8WithLength(): String ?","title":"Read optional utf8 with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-optional-utf8-with-length/#readoptionalutf8withlength","text":"fun BufferedSource.readOptionalUtf8WithLength(): String ?","title":"readOptionalUtf8WithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-utf8-with-length/","text":"workflow / com.squareup.workflow1 / okio.BufferedSource / readUtf8WithLength readUtf8WithLength \u00b6 fun BufferedSource.readUtf8WithLength(): String","title":"Read utf8 with length"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-buffered-source/read-utf8-with-length/#readutf8withlength","text":"fun BufferedSource.readUtf8WithLength(): String","title":"readUtf8WithLength"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-byte-string/","text":"workflow / com.squareup.workflow1 / okio.ByteString Extensions for okio.ByteString \u00b6 Name Summary parse Runs block with a BufferedSource that will read from this ByteString . fun <T> ByteString.parse(block: (BufferedSource) -> T): T","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-byte-string/#extensions-for-okiobytestring","text":"Name Summary parse Runs block with a BufferedSource that will read from this ByteString . fun <T> ByteString.parse(block: (BufferedSource) -> T): T","title":"Extensions for okio.ByteString"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-byte-string/parse/","text":"workflow / com.squareup.workflow1 / okio.ByteString / parse parse \u00b6 inline fun <T> ByteString.parse(block: (BufferedSource) -> T): T Runs block with a BufferedSource that will read from this ByteString . Lets you do stuff like: myBlob.parse { MyValueObject( name = it.readUtf8WithLength(), age = it.readInt() ) }","title":"Parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1/okio.-byte-string/parse/#parse","text":"inline fun <T> ByteString.parse(block: (BufferedSource) -> T): T Runs block with a BufferedSource that will read from this ByteString . Lets you do stuff like: myBlob.parse { MyValueObject( name = it.readUtf8WithLength(), age = it.readInt() ) }","title":"parse"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/","text":"workflow / com.squareup.workflow1.diagnostic.tracing Package com.squareup.workflow1.diagnostic.tracing \u00b6 Types \u00b6 Name Summary MemoryStats Reports free/available memory. interface MemoryStats RuntimeMemoryStats A MemoryStats that reports memory stats using this Runtime instance. object RuntimeMemoryStats : MemoryStats TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . class TracingWorkflowInterceptor : WorkflowInterceptor Functions \u00b6 Name Summary TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . fun TracingWorkflowInterceptor(file: File , name: String = \"\"): TracingWorkflowInterceptor fun TracingWorkflowInterceptor(name: String = \"\", memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) -> TraceEncoder ): TracingWorkflowInterceptor","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/#package-comsquareupworkflow1diagnostictracing","text":"","title":"Package com.squareup.workflow1.diagnostic.tracing"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/#types","text":"Name Summary MemoryStats Reports free/available memory. interface MemoryStats RuntimeMemoryStats A MemoryStats that reports memory stats using this Runtime instance. object RuntimeMemoryStats : MemoryStats TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . class TracingWorkflowInterceptor : WorkflowInterceptor","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/#functions","text":"Name Summary TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . fun TracingWorkflowInterceptor(file: File , name: String = \"\"): TracingWorkflowInterceptor fun TracingWorkflowInterceptor(name: String = \"\", memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) -> TraceEncoder ): TracingWorkflowInterceptor","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor TracingWorkflowInterceptor \u00b6 fun TracingWorkflowInterceptor(file: File , name: String = \"\"): TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Parameters \u00b6 file - The File to write the trace to. name - If non-empty, will be used to set the \u201cprocess name\u201d in the trace file. If empty, the workflow type is used for the process name. fun TracingWorkflowInterceptor(name: String = \"\", memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) -> TraceEncoder ): TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Parameters \u00b6 name - If non-empty, will be used to set the \u201cprocess name\u201d in the trace file. If empty, the workflow type is used for the process name. encoderProvider - A function that returns a TraceEncoder that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in.","title":" tracing workflow interceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#tracingworkflowinterceptor","text":"fun TracingWorkflowInterceptor(file: File , name: String = \"\"): TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"TracingWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#parameters","text":"file - The File to write the trace to. name - If non-empty, will be used to set the \u201cprocess name\u201d in the trace file. If empty, the workflow type is used for the process name. fun TracingWorkflowInterceptor(name: String = \"\", memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) -> TraceEncoder ): TracingWorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#parameters_1","text":"name - If non-empty, will be used to set the \u201cprocess name\u201d in the trace file. If empty, the workflow type is used for the process name. encoderProvider - A function that returns a TraceEncoder that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / MemoryStats MemoryStats \u00b6 interface MemoryStats Reports free/available memory. See Also RuntimeMemoryStats Functions \u00b6 Name Summary freeMemory abstract fun freeMemory(): Long totalMemory abstract fun totalMemory(): Long Inheritors \u00b6 Name Summary RuntimeMemoryStats A MemoryStats that reports memory stats using this Runtime instance. object RuntimeMemoryStats : MemoryStats","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/#memorystats","text":"interface MemoryStats Reports free/available memory. See Also RuntimeMemoryStats","title":"MemoryStats"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/#functions","text":"Name Summary freeMemory abstract fun freeMemory(): Long totalMemory abstract fun totalMemory(): Long","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/#inheritors","text":"Name Summary RuntimeMemoryStats A MemoryStats that reports memory stats using this Runtime instance. object RuntimeMemoryStats : MemoryStats","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/free-memory/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / MemoryStats / freeMemory freeMemory \u00b6 abstract fun freeMemory(): Long","title":"Free memory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/free-memory/#freememory","text":"abstract fun freeMemory(): Long","title":"freeMemory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/total-memory/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / MemoryStats / totalMemory totalMemory \u00b6 abstract fun totalMemory(): Long","title":"Total memory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-memory-stats/total-memory/#totalmemory","text":"abstract fun totalMemory(): Long","title":"totalMemory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / RuntimeMemoryStats RuntimeMemoryStats \u00b6 object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance. Functions \u00b6 Name Summary freeMemory fun freeMemory(): Long totalMemory fun totalMemory(): Long","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/#runtimememorystats","text":"object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance.","title":"RuntimeMemoryStats"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/#functions","text":"Name Summary freeMemory fun freeMemory(): Long totalMemory fun totalMemory(): Long","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/free-memory/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / RuntimeMemoryStats / freeMemory freeMemory \u00b6 fun freeMemory(): Long","title":"Free memory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/free-memory/#freememory","text":"fun freeMemory(): Long","title":"freeMemory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/total-memory/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / RuntimeMemoryStats / totalMemory totalMemory \u00b6 fun totalMemory(): Long","title":"Total memory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-runtime-memory-stats/total-memory/#totalmemory","text":"fun totalMemory(): Long","title":"totalMemory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor TracingWorkflowInterceptor \u00b6 class TracingWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Constructors \u00b6 Name Summary <init> A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . TracingWorkflowInterceptor(memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) -> TraceLogger ) Functions \u00b6 Name Summary onInitialState Intercepts calls to StatefulWorkflow.initialState . fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S onPropsChanged Intercepts calls to StatefulWorkflow.onPropsChanged . fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S onRender Intercepts calls to StatefulWorkflow.render . fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R onSessionStarted Called when the session is starting, before onInitialState . fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit onSnapshotState Intercepts calls to StatefulWorkflow.snapshotState . fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#tracingworkflowinterceptor","text":"class TracingWorkflowInterceptor : WorkflowInterceptor A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"TracingWorkflowInterceptor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#constructors","text":"Name Summary <init> A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . TracingWorkflowInterceptor(memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) -> TraceLogger )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/#functions","text":"Name Summary onInitialState Intercepts calls to StatefulWorkflow.initialState . fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S onPropsChanged Intercepts calls to StatefulWorkflow.onPropsChanged . fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S onRender Intercepts calls to StatefulWorkflow.render . fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R onSessionStarted Called when the session is starting, before onInitialState . fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit onSnapshotState Intercepts calls to StatefulWorkflow.snapshotState . fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ?","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/-init-/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / <init> <init> \u00b6 TracingWorkflowInterceptor(memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) -> TraceLogger ) A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Parameters \u00b6 loggerProvider - A function that returns a TraceLogger that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in, as well as a description of the type of the workflow.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/-init-/#init","text":"TracingWorkflowInterceptor(memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) -> TraceLogger ) A WorkflowInterceptor that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/-init-/#parameters","text":"loggerProvider - A function that returns a TraceLogger that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in, as well as a description of the type of the workflow.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-initial-state/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onInitialState onInitialState \u00b6 fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.initialState .","title":"On initial state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-initial-state/#oninitialstate","text":"fun <P, S> onInitialState(props: P, snapshot: Snapshot ?, proceed: (P, Snapshot ?) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.initialState .","title":"onInitialState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-props-changed/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onPropsChanged onPropsChanged \u00b6 fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"On props changed"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-props-changed/#onpropschanged","text":"fun <P, S> onPropsChanged(old: P, new: P, state: S, proceed: (P, P, S) -> S, session: WorkflowSession): S Intercepts calls to StatefulWorkflow.onPropsChanged .","title":"onPropsChanged"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-render/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onRender onRender \u00b6 fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R Intercepts calls to StatefulWorkflow.render .","title":"On render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-render/#onrender","text":"fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R Intercepts calls to StatefulWorkflow.render .","title":"onRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-session-started/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onSessionStarted onSessionStarted \u00b6 fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit Called when the session is starting, before onInitialState . Parameters \u00b6 workflowScope - The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"On session started"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-session-started/#onsessionstarted","text":"fun onSessionStarted(workflowScope: CoroutineScope, session: WorkflowSession): Unit Called when the session is starting, before onInitialState .","title":"onSessionStarted"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-session-started/#parameters","text":"workflowScope - The CoroutineScope that will be used for any side effects the workflow runs, as well as the parent for any workflows it renders.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-snapshot-state/","text":"workflow / com.squareup.workflow1.diagnostic.tracing / TracingWorkflowInterceptor / onSnapshotState onSnapshotState \u00b6 fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ? Intercepts calls to StatefulWorkflow.snapshotState .","title":"On snapshot state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.diagnostic.tracing/-tracing-workflow-interceptor/on-snapshot-state/#onsnapshotstate","text":"fun <S> onSnapshotState(state: S, proceed: (S) -> Snapshot ?, session: WorkflowSession): Snapshot ? Intercepts calls to StatefulWorkflow.snapshotState .","title":"onSnapshotState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/","text":"workflow / com.squareup.workflow1.rx2 Package com.squareup.workflow1.rx2 \u00b6 Types \u00b6 Name Summary PublisherWorker An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . abstract class PublisherWorker<out OutputT : Any > : Worker <OutputT> Extensions for External Classes \u00b6 Name Summary io.reactivex.Completable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single org.reactivestreams.Publisher","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/#package-comsquareupworkflow1rx2","text":"","title":"Package com.squareup.workflow1.rx2"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/#types","text":"Name Summary PublisherWorker An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . abstract class PublisherWorker<out OutputT : Any > : Worker <OutputT>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/#extensions-for-external-classes","text":"Name Summary io.reactivex.Completable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single org.reactivestreams.Publisher","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/","text":"workflow / com.squareup.workflow1.rx2 / PublisherWorker PublisherWorker \u00b6 abstract class PublisherWorker<out OutputT : Any > : Worker <OutputT> An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . If you\u2019re using RxJava, Flowable is a Publisher . Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher . Constructors \u00b6 Name Summary <init> An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . PublisherWorker() Functions \u00b6 Name Summary run Returns a Flow to execute the work represented by this worker. fun run(): Flow<OutputT> runPublisher Returns a Flowable to execute the work represented by this worker. abstract fun runPublisher(): Publisher<out OutputT> Extension Functions \u00b6 Name Summary test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/#publisherworker","text":"abstract class PublisherWorker<out OutputT : Any > : Worker <OutputT> An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . If you\u2019re using RxJava, Flowable is a Publisher . Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher .","title":"PublisherWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/#constructors","text":"Name Summary <init> An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . PublisherWorker()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/#functions","text":"Name Summary run Returns a Flow to execute the work represented by this worker. fun run(): Flow<OutputT> runPublisher Returns a Flowable to execute the work represented by this worker. abstract fun runPublisher(): Publisher<out OutputT>","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/#extension-functions","text":"Name Summary test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/-init-/","text":"workflow / com.squareup.workflow1.rx2 / PublisherWorker / <init> <init> \u00b6 PublisherWorker() An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . If you\u2019re using RxJava, Flowable is a Publisher . Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher .","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/-init-/#init","text":"PublisherWorker() An convenience implementation of Worker that is expressed in terms of Reactive Streams\u2019 Publisher instead of Flow . If you\u2019re using RxJava, Flowable is a Publisher . Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run-publisher/","text":"workflow / com.squareup.workflow1.rx2 / PublisherWorker / runPublisher runPublisher \u00b6 abstract fun runPublisher(): Publisher<out OutputT> Returns a Flowable to execute the work represented by this worker. If you have an io.reactivex.Observable instead, just call toFlowable to convert it. The Flowable is subscribed to in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the subscription will be disposed .","title":"Run publisher"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run-publisher/#runpublisher","text":"abstract fun runPublisher(): Publisher<out OutputT> Returns a Flowable to execute the work represented by this worker. If you have an io.reactivex.Observable instead, just call toFlowable to convert it. The Flowable is subscribed to in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the subscription will be disposed .","title":"runPublisher"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run/","text":"workflow / com.squareup.workflow1.rx2 / PublisherWorker / run run \u00b6 fun run(): Flow<OutputT> Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker<Nothing> ). Coroutine Context \u00b6 When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don\u2019t care which thread they\u2019re executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString ) and the key specified by the workflow running the worker. Exceptions \u00b6 If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Run"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run/#run","text":"fun run(): Flow<OutputT> Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker<Nothing> ).","title":"run"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run/#coroutine-context","text":"When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don\u2019t care which thread they\u2019re executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString ) and the key specified by the workflow running the worker.","title":"Coroutine Context"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/-publisher-worker/run/#exceptions","text":"If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-completable/","text":"workflow / com.squareup.workflow1.rx2 / io.reactivex.Completable Extensions for io.reactivex.Completable \u00b6 Name Summary asWorker Creates a Worker from this Completable . fun Completable.asWorker(): Worker < Nothing >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-completable/#extensions-for-ioreactivexcompletable","text":"Name Summary asWorker Creates a Worker from this Completable . fun Completable.asWorker(): Worker < Nothing >","title":"Extensions for io.reactivex.Completable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-completable/as-worker/","text":"workflow / com.squareup.workflow1.rx2 / io.reactivex.Completable / asWorker asWorker \u00b6 fun Completable.asWorker(): Worker < Nothing > Creates a Worker from this Completable . The Completable will be subscribed to when the Worker is started, and disposed when it is cancelled. The key is required for this operator because there is no type information available to distinguish workers.","title":"As worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-completable/as-worker/#asworker","text":"fun Completable.asWorker(): Worker < Nothing > Creates a Worker from this Completable . The Completable will be subscribed to when the Worker is started, and disposed when it is cancelled. The key is required for this operator because there is no type information available to distinguish workers.","title":"asWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-maybe/","text":"workflow / com.squareup.workflow1.rx2 / io.reactivex.Maybe Extensions for io.reactivex.Maybe \u00b6 Name Summary asWorker Creates a Worker from this Maybe . fun <T : Any > Maybe<out T?>.asWorker(): Worker <T>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-maybe/#extensions-for-ioreactivexmaybe","text":"Name Summary asWorker Creates a Worker from this Maybe . fun <T : Any > Maybe<out T?>.asWorker(): Worker <T>","title":"Extensions for io.reactivex.Maybe"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-maybe/as-worker/","text":"workflow / com.squareup.workflow1.rx2 / io.reactivex.Maybe / asWorker asWorker \u00b6 fun <reified T : Any > Maybe<out T?>.asWorker(): Worker <T> Creates a Worker from this Maybe . The Maybe will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-maybe/as-worker/#asworker","text":"fun <reified T : Any > Maybe<out T?>.asWorker(): Worker <T> Creates a Worker from this Maybe . The Maybe will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-observable/","text":"workflow / com.squareup.workflow1.rx2 / io.reactivex.Observable Extensions for io.reactivex.Observable \u00b6 Name Summary asWorker Creates a Worker from this Observable . fun <T : Any > Observable<out T?>.asWorker(): Worker <T>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-observable/#extensions-for-ioreactivexobservable","text":"Name Summary asWorker Creates a Worker from this Observable . fun <T : Any > Observable<out T?>.asWorker(): Worker <T>","title":"Extensions for io.reactivex.Observable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-observable/as-worker/","text":"workflow / com.squareup.workflow1.rx2 / io.reactivex.Observable / asWorker asWorker \u00b6 fun <reified T : Any > Observable<out T?>.asWorker(): Worker <T> Creates a Worker from this Observable . The Observable will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-observable/as-worker/#asworker","text":"fun <reified T : Any > Observable<out T?>.asWorker(): Worker <T> Creates a Worker from this Observable . The Observable will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-single/","text":"workflow / com.squareup.workflow1.rx2 / io.reactivex.Single Extensions for io.reactivex.Single \u00b6 Name Summary asWorker Creates a Worker from this Single . fun <T : Any > Single<out T?>.asWorker(): Worker <T>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-single/#extensions-for-ioreactivexsingle","text":"Name Summary asWorker Creates a Worker from this Single . fun <T : Any > Single<out T?>.asWorker(): Worker <T>","title":"Extensions for io.reactivex.Single"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-single/as-worker/","text":"workflow / com.squareup.workflow1.rx2 / io.reactivex.Single / asWorker asWorker \u00b6 fun <reified T : Any > Single<out T?>.asWorker(): Worker <T> Creates a Worker from this Single . The Single will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/io.reactivex.-single/as-worker/#asworker","text":"fun <reified T : Any > Single<out T?>.asWorker(): Worker <T> Creates a Worker from this Single . The Single will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/org.reactivestreams.-publisher/","text":"workflow / com.squareup.workflow1.rx2 / org.reactivestreams.Publisher Extensions for org.reactivestreams.Publisher \u00b6 Name Summary asWorker Creates a Worker from this Publisher ( Flowable is a Publisher ). fun <T : Any > Publisher<out T?>.asWorker(): Worker <T>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/org.reactivestreams.-publisher/#extensions-for-orgreactivestreamspublisher","text":"Name Summary asWorker Creates a Worker from this Publisher ( Flowable is a Publisher ). fun <T : Any > Publisher<out T?>.asWorker(): Worker <T>","title":"Extensions for org.reactivestreams.Publisher"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/org.reactivestreams.-publisher/as-worker/","text":"workflow / com.squareup.workflow1.rx2 / org.reactivestreams.Publisher / asWorker asWorker \u00b6 fun <reified T : Any > Publisher<out T?>.asWorker(): Worker <T> Creates a Worker from this Publisher ( Flowable is a Publisher ). The Publisher will be subscribed to when the Worker is started, and cancelled when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.rx2/org.reactivestreams.-publisher/as-worker/#asworker","text":"fun <reified T : Any > Publisher<out T?>.asWorker(): Worker <T> Creates a Worker from this Publisher ( Flowable is a Publisher ). The Publisher will be subscribed to when the Worker is started, and cancelled when it is cancelled. RxJava doesn\u2019t allow nulls, but it can\u2019t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/","text":"workflow / com.squareup.workflow1.testing Package com.squareup.workflow1.testing \u00b6 Types \u00b6 Name Summary RenderIdempotencyChecker Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. object RenderIdempotencyChecker : WorkflowInterceptor RenderTester The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . abstract class RenderTester<PropsT, StateT, OutputT, RenderingT> RenderTestResult Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action. interface RenderTestResult<PropsT, StateT, OutputT> WorkerSink Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. class WorkerSink<T> : Worker <T> WorkerTester interface WorkerTester<T> WorkflowTestParams Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . class WorkflowTestParams<out StateT> WorkflowTestRuntime Runs a Workflow and provides access to its renderings , outputs , and snapshots . class WorkflowTestRuntime<PropsT, OutputT, RenderingT> Functions \u00b6 Name Summary expectSideEffect Specifies that this render pass is expected to run a particular side effect. fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectSideEffect(key: String ): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorker Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. If a worker is ran that matches the type of expected , but the actual worker\u2019s doesSameWorkAs returns false, then an AssertionError will be thrown. If you need to perform custom assertions, use the overload of this method that takes an assertWhen parameter. fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(expected: WorkerT, key: String = \"\", output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker with the given workerClass . The worker\u2019s output type is not taken into consideration. fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerClass: KClass <out WorkerT>, key: String = \"\", assertWorker: (WorkerT) -> Unit = {}, output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker whose KType matches workerType . fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorkerOutputting Specifies that this render pass is expected to run a Worker with the given outputType . fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkerOutputting(outputType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorkflow Specifies that this render pass is expected to render a particular child workflow. fun <ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> fun <ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, output: WorkflowOutput <ChildOutputT>?, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> fun <ChildPropsT, ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(workflowType: KClass <out Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>>, rendering: ChildRenderingT, key: String = \"\", assertProps: (props: ChildPropsT) -> Unit = {}, output: WorkflowOutput <ChildOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> launchForTestingFromStartWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T launchForTestingFromStateWith Creates a WorkflowTestRuntime to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingFromStateWith(props: PropsT, initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <StateT, OutputT, RenderingT> StatefulWorkflow < Unit , StateT, OutputT, RenderingT>.launchForTestingFromStateWith(initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> Unit ): Unit launchForTestingWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingWith(props: PropsT, testParams: WorkflowTestParams <StateT> = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit testRender Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT> Create a RenderTester to unit test an individual render pass of this workflow. fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.testRender(props: PropsT, initialState: StateT): RenderTester <PropsT, StateT, OutputT, RenderingT> WorkerSink fun <T> WorkerSink(name: String ): WorkerSink <T>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/#package-comsquareupworkflow1testing","text":"","title":"Package com.squareup.workflow1.testing"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/#types","text":"Name Summary RenderIdempotencyChecker Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. object RenderIdempotencyChecker : WorkflowInterceptor RenderTester The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . abstract class RenderTester<PropsT, StateT, OutputT, RenderingT> RenderTestResult Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action. interface RenderTestResult<PropsT, StateT, OutputT> WorkerSink Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. class WorkerSink<T> : Worker <T> WorkerTester interface WorkerTester<T> WorkflowTestParams Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . class WorkflowTestParams<out StateT> WorkflowTestRuntime Runs a Workflow and provides access to its renderings , outputs , and snapshots . class WorkflowTestRuntime<PropsT, OutputT, RenderingT>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/#functions","text":"Name Summary expectSideEffect Specifies that this render pass is expected to run a particular side effect. fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectSideEffect(key: String ): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorker Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. If a worker is ran that matches the type of expected , but the actual worker\u2019s doesSameWorkAs returns false, then an AssertionError will be thrown. If you need to perform custom assertions, use the overload of this method that takes an assertWhen parameter. fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(expected: WorkerT, key: String = \"\", output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker with the given workerClass . The worker\u2019s output type is not taken into consideration. fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerClass: KClass <out WorkerT>, key: String = \"\", assertWorker: (WorkerT) -> Unit = {}, output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker whose KType matches workerType . fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorkerOutputting Specifies that this render pass is expected to run a Worker with the given outputType . fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkerOutputting(outputType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorkflow Specifies that this render pass is expected to render a particular child workflow. fun <ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> fun <ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, output: WorkflowOutput <ChildOutputT>?, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> fun <ChildPropsT, ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(workflowType: KClass <out Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>>, rendering: ChildRenderingT, key: String = \"\", assertProps: (props: ChildPropsT) -> Unit = {}, output: WorkflowOutput <ChildOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> launchForTestingFromStartWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T launchForTestingFromStateWith Creates a WorkflowTestRuntime to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingFromStateWith(props: PropsT, initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T fun <StateT, OutputT, RenderingT> StatefulWorkflow < Unit , StateT, OutputT, RenderingT>.launchForTestingFromStateWith(initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> Unit ): Unit launchForTestingWith Creates a WorkflowTestRuntime to run this workflow for unit testing. fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingWith(props: PropsT, testParams: WorkflowTestParams <StateT> = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit testRender Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT> Create a RenderTester to unit test an individual render pass of this workflow. fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.testRender(props: PropsT, initialState: StateT): RenderTester <PropsT, StateT, OutputT, RenderingT> WorkerSink fun <T> WorkerSink(name: String ): WorkerSink <T>","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/","text":"workflow / com.squareup.workflow1.testing / WorkerSink WorkerSink \u00b6 fun <reified T> WorkerSink(name: String ): WorkerSink <T>","title":" worker sink"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#workersink","text":"fun <reified T> WorkerSink(name: String ): WorkerSink <T>","title":"WorkerSink"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-side-effect/","text":"workflow / com.squareup.workflow1.testing / expectSideEffect expectSideEffect \u00b6 fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectSideEffect(key: String ): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a particular side effect. Parameters \u00b6 key - The key passed to runningSideEffect when rendering this workflow.","title":"Expect side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-side-effect/#expectsideeffect","text":"fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectSideEffect(key: String ): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a particular side effect.","title":"expectSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-side-effect/#parameters","text":"key - The key passed to runningSideEffect when rendering this workflow.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker-outputting/","text":"workflow / com.squareup.workflow1.testing / expectWorkerOutputting expectWorkerOutputting \u00b6 inline fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkerOutputting(outputType: KType , key: String = \"\", crossinline assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker with the given outputType . Parameters \u00b6 outputType - the KType of the Worker \u2018s OutputT type parameter. key - The key passed to runningWorker when rendering this workflow. output - If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages.","title":"Expect worker outputting"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker-outputting/#expectworkeroutputting","text":"inline fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkerOutputting(outputType: KType , key: String = \"\", crossinline assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker with the given outputType .","title":"expectWorkerOutputting"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker-outputting/#parameters","text":"outputType - the KType of the Worker \u2018s OutputT type parameter. key - The key passed to runningWorker when rendering this workflow. output - If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/","text":"workflow / com.squareup.workflow1.testing / expectWorker expectWorker \u00b6 fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, reified WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(expected: WorkerT, key: String = \"\", output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. If a worker is ran that matches the type of expected , but the actual worker\u2019s doesSameWorkAs returns false, then an AssertionError will be thrown. If you need to perform custom assertions, use the overload of this method that takes an assertWhen parameter. Parameters \u00b6 expected - Worker passed to the actual worker\u2019s doesSameWorkAs method to assert the worker matches. key - The key passed to runningWorker when rendering this workflow. output - If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages. inline fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerClass: KClass <out WorkerT>, key: String = \"\", crossinline assertWorker: (WorkerT) -> Unit = {}, output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker with the given workerClass . The worker\u2019s output type is not taken into consideration. Parameters \u00b6 workerClass - The KClass of the worker that is expected to be run. key - The key passed to runningWorker when rendering this workflow. assertWorker - A function that will be passed the actual worker that matches this expectation and can perform custom assertions on the worker instance. output - If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages. fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker whose KType matches workerType . Parameters \u00b6 workerType - The KType of the Worker that is expected to be run. This will be compared against the concrete type of the worker that is passed to runningWorker , but may be a supertype of that type. E.g. an expected worker type of typeOf<Worker<Collection<CharSequence>>>() will match a worker that has the type SomeConcreteWorker<List<String>> . key - The key passed to runningWorker when rendering this workflow. assertWorker - A function that will be passed the actual worker that matches this expectation and can perform custom assertions on the worker instance. output - If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages.","title":"Expect worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/#expectworker","text":"fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, reified WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(expected: WorkerT, key: String = \"\", output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. If a worker is ran that matches the type of expected , but the actual worker\u2019s doesSameWorkAs returns false, then an AssertionError will be thrown. If you need to perform custom assertions, use the overload of this method that takes an assertWhen parameter.","title":"expectWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/#parameters","text":"expected - Worker passed to the actual worker\u2019s doesSameWorkAs method to assert the worker matches. key - The key passed to runningWorker when rendering this workflow. output - If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages. inline fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerClass: KClass <out WorkerT>, key: String = \"\", crossinline assertWorker: (WorkerT) -> Unit = {}, output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker with the given workerClass . The worker\u2019s output type is not taken into consideration.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/#parameters_1","text":"workerClass - The KClass of the worker that is expected to be run. key - The key passed to runningWorker when rendering this workflow. assertWorker - A function that will be passed the actual worker that matches this expectation and can perform custom assertions on the worker instance. output - If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages. fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker whose KType matches workerType .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-worker/#parameters_2","text":"workerType - The KType of the Worker that is expected to be run. This will be compared against the concrete type of the worker that is passed to runningWorker , but may be a supertype of that type. E.g. an expected worker type of typeOf<Worker<Collection<CharSequence>>>() will match a worker that has the type SomeConcreteWorker<List<String>> . key - The key passed to runningWorker when rendering this workflow. assertWorker - A function that will be passed the actual worker that matches this expectation and can perform custom assertions on the worker instance. output - If non-null, WorkflowOutput.value will be emitted when this worker is ran. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/","text":"workflow / com.squareup.workflow1.testing / expectWorkflow expectWorkflow \u00b6 @ExperimentalWorkflowApi inline fun <ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, key: String = \"\", description: String = \"\", noinline assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> @ExperimentalWorkflowApi fun <ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, output: WorkflowOutput <ChildOutputT>?, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it. Expecting impostor workflows \u00b6 If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild( childWorkflow.mapRendering { \u2026 } .mapOutput { \u2026 } ) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026) Parameters \u00b6 identifier - The WorkflowIdentifier of the expected workflow. May identify any supertype of the actual rendered workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering - The rendering to return from renderChild when this workflow is rendered. key - The key passed to renderChild when rendering this workflow. assertProps - A function that performs assertions on the props passed to renderChild . output - If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages. inline fun <ChildPropsT, ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(workflowType: KClass <out Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>>, rendering: ChildRenderingT, key: String = \"\", crossinline assertProps: (props: ChildPropsT) -> Unit = {}, output: WorkflowOutput <ChildOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it. Expecting impostor workflows \u00b6 If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild(childWorkflow.mapRendering { \u2026 }) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026) Parameters \u00b6 workflowType - The KClass of the expected workflow. May also be any of the supertypes of the expected workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering - The rendering to return from renderChild when this workflow is rendered. key - The key passed to renderChild when rendering this workflow. assertProps - A function that performs assertions on the props passed to renderChild . output - If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages.","title":"Expect workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#expectworkflow","text":"@ExperimentalWorkflowApi inline fun <ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, key: String = \"\", description: String = \"\", noinline assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> @ExperimentalWorkflowApi fun <ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, output: WorkflowOutput <ChildOutputT>?, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it.","title":"expectWorkflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#expecting-impostor-workflows","text":"If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild( childWorkflow.mapRendering { \u2026 } .mapOutput { \u2026 } ) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026)","title":"Expecting impostor workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#parameters","text":"identifier - The WorkflowIdentifier of the expected workflow. May identify any supertype of the actual rendered workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering - The rendering to return from renderChild when this workflow is rendered. key - The key passed to renderChild when rendering this workflow. assertProps - A function that performs assertions on the props passed to renderChild . output - If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages. inline fun <ChildPropsT, ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(workflowType: KClass <out Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>>, rendering: ChildRenderingT, key: String = \"\", crossinline assertProps: (props: ChildPropsT) -> Unit = {}, output: WorkflowOutput <ChildOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to render a particular child workflow. Workflow identifiers are compared taking the type hierarchy into account. When a workflow is rendered, it will match any expectation that specifies the type of that workflow, or any of its supertypes. This means that if you have a workflow that is split into an interface and a concrete class, your render tests can pass the class of the interface to this method instead of the actual class that implements it.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#expecting-impostor-workflows_1","text":"If the workflow-under-test renders an ImpostorWorkflow , the match will not be performed using the impostor type, but rather the real identifier of the impostor\u2019s WorkflowIdentifier . This will be the last identifier in the chain of impostor workflows\u2019 realIdentifier s. A workflow that is wrapped multiple times by various operators will be matched on the upstream workflow, so for example the following expectation would succeed: val workflow = Workflow.stateless<\u2026> { renderChild(childWorkflow.mapRendering { \u2026 }) } workflow.testRender(\u2026) .expectWorkflow(childWorkflow::class, \u2026)","title":"Expecting impostor workflows"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/expect-workflow/#parameters_1","text":"workflowType - The KClass of the expected workflow. May also be any of the supertypes of the expected workflow, e.g. if the workflow type is an interface and the workflow-under-test injects a fake. rendering - The rendering to return from renderChild when this workflow is rendered. key - The key passed to renderChild when rendering this workflow. assertProps - A function that performs assertions on the props passed to renderChild . output - If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . description - Optional string that will be used to describe this expectation in error messages.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-from-start-with/","text":"workflow / com.squareup.workflow1.testing / launchForTestingFromStartWith launchForTestingFromStartWith \u00b6 @TestOnly fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T @TestOnly fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T Creates a WorkflowTestRuntime to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"Launch for testing from start with"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-from-start-with/#launchfortestingfromstartwith","text":"@TestOnly fun <T, PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.launchForTestingFromStartWith(props: PropsT, testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T @TestOnly fun <T, OutputT, RenderingT> Workflow < Unit , OutputT, RenderingT>.launchForTestingFromStartWith(testParams: WorkflowTestParams < Nothing > = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> T): T Creates a WorkflowTestRuntime to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"launchForTestingFromStartWith"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-from-state-with/","text":"workflow / com.squareup.workflow1.testing / launchForTestingFromStateWith launchForTestingFromStateWith \u00b6 @TestOnly fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingFromStateWith(props: PropsT, initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T @TestOnly fun <StateT, OutputT, RenderingT> StatefulWorkflow < Unit , StateT, OutputT, RenderingT>.launchForTestingFromStateWith(initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> Unit ): Unit Creates a WorkflowTestRuntime to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . All workflow-related coroutines are cancelled when the block exits.","title":"Launch for testing from state with"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-from-state-with/#launchfortestingfromstatewith","text":"@TestOnly fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingFromStateWith(props: PropsT, initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T @TestOnly fun <StateT, OutputT, RenderingT> StatefulWorkflow < Unit , StateT, OutputT, RenderingT>.launchForTestingFromStateWith(initialState: StateT, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime < Unit , OutputT, RenderingT>.() -> Unit ): Unit Creates a WorkflowTestRuntime to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . All workflow-related coroutines are cancelled when the block exits.","title":"launchForTestingFromStateWith"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-with/","text":"workflow / com.squareup.workflow1.testing / launchForTestingWith launchForTestingWith \u00b6 @TestOnly fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingWith(props: PropsT, testParams: WorkflowTestParams <StateT> = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T Creates a WorkflowTestRuntime to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"Launch for testing with"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/launch-for-testing-with/#launchfortestingwith","text":"@TestOnly fun <T, PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.launchForTestingWith(props: PropsT, testParams: WorkflowTestParams <StateT> = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTestRuntime <PropsT, OutputT, RenderingT>.() -> T): T Creates a WorkflowTestRuntime to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"launchForTestingWith"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/test-render/","text":"workflow / com.squareup.workflow1.testing / testRender testRender \u00b6 fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT> Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . See RenderTester for usage documentation. fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.testRender(props: PropsT, initialState: StateT): RenderTester <PropsT, StateT, OutputT, RenderingT> Create a RenderTester to unit test an individual render pass of this workflow. See RenderTester for usage documentation.","title":"Test render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/test-render/#testrender","text":"fun <PropsT, OutputT, RenderingT> Workflow <PropsT, OutputT, RenderingT>.testRender(props: PropsT): RenderTester <PropsT, *, OutputT, RenderingT> Create a RenderTester to unit test an individual render pass of this workflow, using the workflow\u2019s initial state . See RenderTester for usage documentation. fun <PropsT, StateT, OutputT, RenderingT> StatefulWorkflow <PropsT, StateT, OutputT, RenderingT>.testRender(props: PropsT, initialState: StateT): RenderTester <PropsT, StateT, OutputT, RenderingT> Create a RenderTester to unit test an individual render pass of this workflow. See RenderTester for usage documentation.","title":"testRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/test/","text":"workflow / com.squareup.workflow1.testing / test test \u00b6 fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Test"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/test/#test","text":"fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"test"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/","text":"workflow / com.squareup.workflow1.testing / RenderIdempotencyChecker RenderIdempotencyChecker \u00b6 object RenderIdempotencyChecker : WorkflowInterceptor Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. The first render pass is the real one, the second one is a no-op and child workflow renderings will be played back, in order, to their renderChild calls. Functions \u00b6 Name Summary onRender Intercepts calls to StatefulWorkflow.render . fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/#renderidempotencychecker","text":"object RenderIdempotencyChecker : WorkflowInterceptor Intercepts the render pass of the root workflow and runs it twice to ensure that well-written unit tests catch side effects being incorrectly performed directly in the render method. The first render pass is the real one, the second one is a no-op and child workflow renderings will be played back, in order, to their renderChild calls.","title":"RenderIdempotencyChecker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/#functions","text":"Name Summary onRender Intercepts calls to StatefulWorkflow.render . fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/on-render/","text":"workflow / com.squareup.workflow1.testing / RenderIdempotencyChecker / onRender onRender \u00b6 fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R Intercepts calls to StatefulWorkflow.render .","title":"On render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-idempotency-checker/on-render/#onrender","text":"fun <P, S, O, R> onRender(renderProps: P, renderState: S, context: BaseRenderContext <P, S, O>, proceed: (P, S, RenderContextInterceptor<P, S, O>?) -> R, session: WorkflowSession): R Intercepts calls to StatefulWorkflow.render .","title":"onRender"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/","text":"workflow / com.squareup.workflow1.testing / RenderTestResult RenderTestResult \u00b6 interface RenderTestResult<PropsT, StateT, OutputT> Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action. See Also verifyAction verifyActionResult Functions \u00b6 Name Summary verifyAction Asserts that the render pass handled either a workflow/worker output or a rendering event, and passes the resulting WorkflowAction to block for asserting. abstract fun verifyAction(block: ( WorkflowAction <PropsT, StateT, OutputT>) -> Unit ): Unit verifyActionResult Asserts that the render pass handled either a workflow/worker output or a rendering event, \u201cexecutes\u201d the action with the state passed to testRender , then invokes block with the resulting state and output values. abstract fun verifyActionResult(block: (newState: StateT, output: WorkflowOutput <OutputT>?) -> Unit ): Unit","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/#rendertestresult","text":"interface RenderTestResult<PropsT, StateT, OutputT> Result of a RenderTester.render call that can be used to verify that a WorkflowAction was processed and perform assertions on that action. See Also verifyAction verifyActionResult","title":"RenderTestResult"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/#functions","text":"Name Summary verifyAction Asserts that the render pass handled either a workflow/worker output or a rendering event, and passes the resulting WorkflowAction to block for asserting. abstract fun verifyAction(block: ( WorkflowAction <PropsT, StateT, OutputT>) -> Unit ): Unit verifyActionResult Asserts that the render pass handled either a workflow/worker output or a rendering event, \u201cexecutes\u201d the action with the state passed to testRender , then invokes block with the resulting state and output values. abstract fun verifyActionResult(block: (newState: StateT, output: WorkflowOutput <OutputT>?) -> Unit ): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/verify-action-result/","text":"workflow / com.squareup.workflow1.testing / RenderTestResult / verifyActionResult verifyActionResult \u00b6 abstract fun verifyActionResult(block: (newState: StateT, output: WorkflowOutput <OutputT>?) -> Unit ): Unit Asserts that the render pass handled either a workflow/worker output or a rendering event, \u201cexecutes\u201d the action with the state passed to testRender , then invokes block with the resulting state and output values. If the workflow didn\u2019t process any actions, newState will be the initial state and output will be null. Note that by using this method, you\u2019re also testing the implementation of your action. This can be useful if your actions are anonymous. If they are a sealed class or enum, use verifyAction instead and write separate unit tests for your action implementations.","title":"Verify action result"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/verify-action-result/#verifyactionresult","text":"abstract fun verifyActionResult(block: (newState: StateT, output: WorkflowOutput <OutputT>?) -> Unit ): Unit Asserts that the render pass handled either a workflow/worker output or a rendering event, \u201cexecutes\u201d the action with the state passed to testRender , then invokes block with the resulting state and output values. If the workflow didn\u2019t process any actions, newState will be the initial state and output will be null. Note that by using this method, you\u2019re also testing the implementation of your action. This can be useful if your actions are anonymous. If they are a sealed class or enum, use verifyAction instead and write separate unit tests for your action implementations.","title":"verifyActionResult"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/verify-action/","text":"workflow / com.squareup.workflow1.testing / RenderTestResult / verifyAction verifyAction \u00b6 abstract fun verifyAction(block: ( WorkflowAction <PropsT, StateT, OutputT>) -> Unit ): Unit Asserts that the render pass handled either a workflow/worker output or a rendering event, and passes the resulting WorkflowAction to block for asserting. If the workflow didn\u2019t process any actions, block will be passed WorkflowAction.noAction . This is useful if your actions are a sealed class or enum. If you need to test an anonymous action, use verifyActionResult .","title":"Verify action"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-test-result/verify-action/#verifyaction","text":"abstract fun verifyAction(block: ( WorkflowAction <PropsT, StateT, OutputT>) -> Unit ): Unit Asserts that the render pass handled either a workflow/worker output or a rendering event, and passes the resulting WorkflowAction to block for asserting. If the workflow didn\u2019t process any actions, block will be passed WorkflowAction.noAction . This is useful if your actions are a sealed class or enum. If you need to test an anonymous action, use verifyActionResult .","title":"verifyAction"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/","text":"workflow / com.squareup.workflow1.testing / RenderTester RenderTester \u00b6 abstract class RenderTester<PropsT, StateT, OutputT, RenderingT> The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . All workflows that are rendered/ran by this workflow must be specified. Workers are optionally specified. Specified workers must run. Unexpected workers on a render pass do not cause a test failure. It is an error if more than one workflow or worker specifies an output. It is a test failure if any workflows or workers that were expected were not ran. It is a test failure if the workflow tried to run any workflows that were not expected. It is a test failure if no workflow or workflow emitted an output, no rendering event was invoked, and any of the action verification methods on RenderTestResult is called. Examples \u00b6 Worker output \u00b6 The following example tests a render pass that runs one worker, SubmitLoginWorker , which is configured to have \u201cemitted\u201d an output, and one workflow, ChildWorkflow , which expects a props containing \u201c test@foo.com \u201d and returning a ChildRendering as its rendering. It checks that the rendering properties are expected and that the output handler for the SubmitLoginWorker returned the CompleteLogin action. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\", output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> assertThat(rendering.text).isEqualTo(\"foo\") } .verifyAction { action -> assertThat(action).isEqualTo(Action.CompleteLogin(success = true)) } Rendering event \u00b6 This is similar to the example above, but will test an event sent to the rendering instead. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\" ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> rendering.onCancelClicked() assertThat(rendering.text).isEqualTo(\"foo\") } .verifyAction { action -> assertThat(action).isEqualTo(Action.CancelLogin) } Verify action result \u00b6 This test verifies the action result instead of the action itself. This technique is useful if the WorkflowAction is anonymous or inline. val currentState = \u2026 val previousState = \u2026 workflow .testRender( props = MyProps(\u2026), initialState = currentState ) .render { rendering -> rendering.onCancelClicked() } .verifyActionResult { newState, output -> // Check that the workflow navigated back correctly. assertThat(newState).isEqualTo(previousState) // Check that the workflow didn't emit any output from the button click. assertThat(output).isNull() } Too many outputs \u00b6 This is an example of what not to do \u2013 this test will error out because a worker is emitting and output and a rendering event is sent. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\", output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> // This will throw and fail the test because the SubmitLoginWorker is also configured to emit // an output. rendering.onCancelClicked() Types \u00b6 Name Summary ChildWorkflowMatch sealed class ChildWorkflowMatch RenderChildInvocation Describes a call to RenderContext.renderChild . class RenderChildInvocation Constructors \u00b6 Name Summary <init> The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . RenderTester() Functions \u00b6 Name Summary expectSideEffect Specifies that this render pass is expected to run a side effect with a key that satisfies matcher . This expectation is strict, and will fail if multiple side effects match. abstract fun expectSideEffect(description: String , exactMatch: Boolean = true, matcher: (key: String ) -> Boolean ): RenderTester <PropsT, StateT, OutputT, RenderingT> render Execute the workflow\u2019s render method and run block to perform assertions on and send events to the resulting rendering. abstract fun render(block: (rendering: RenderingT) -> Unit = {}): RenderTestResult <PropsT, StateT, OutputT> Extension Functions \u00b6 Name Summary expectSideEffect Specifies that this render pass is expected to run a particular side effect. fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectSideEffect(key: String ): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorker Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. If a worker is ran that matches the type of expected , but the actual worker\u2019s doesSameWorkAs returns false, then an AssertionError will be thrown. If you need to perform custom assertions, use the overload of this method that takes an assertWhen parameter. fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(expected: WorkerT, key: String = \"\", output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker with the given workerClass . The worker\u2019s output type is not taken into consideration. fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerClass: KClass <out WorkerT>, key: String = \"\", assertWorker: (WorkerT) -> Unit = {}, output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker whose KType matches workerType . fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorkerOutputting Specifies that this render pass is expected to run a Worker with the given outputType . fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkerOutputting(outputType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorkflow Specifies that this render pass is expected to render a particular child workflow. fun <ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> fun <ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, output: WorkflowOutput <ChildOutputT>?, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> fun <ChildPropsT, ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(workflowType: KClass <out Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>>, rendering: ChildRenderingT, key: String = \"\", assertProps: (props: ChildPropsT) -> Unit = {}, output: WorkflowOutput <ChildOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#rendertester","text":"abstract class RenderTester<PropsT, StateT, OutputT, RenderingT> The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . All workflows that are rendered/ran by this workflow must be specified. Workers are optionally specified. Specified workers must run. Unexpected workers on a render pass do not cause a test failure. It is an error if more than one workflow or worker specifies an output. It is a test failure if any workflows or workers that were expected were not ran. It is a test failure if the workflow tried to run any workflows that were not expected. It is a test failure if no workflow or workflow emitted an output, no rendering event was invoked, and any of the action verification methods on RenderTestResult is called.","title":"RenderTester"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#examples","text":"","title":"Examples"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#worker-output","text":"The following example tests a render pass that runs one worker, SubmitLoginWorker , which is configured to have \u201cemitted\u201d an output, and one workflow, ChildWorkflow , which expects a props containing \u201c test@foo.com \u201d and returning a ChildRendering as its rendering. It checks that the rendering properties are expected and that the output handler for the SubmitLoginWorker returned the CompleteLogin action. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\", output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> assertThat(rendering.text).isEqualTo(\"foo\") } .verifyAction { action -> assertThat(action).isEqualTo(Action.CompleteLogin(success = true)) }","title":"Worker output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#rendering-event","text":"This is similar to the example above, but will test an event sent to the rendering instead. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\" ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> rendering.onCancelClicked() assertThat(rendering.text).isEqualTo(\"foo\") } .verifyAction { action -> assertThat(action).isEqualTo(Action.CancelLogin) }","title":"Rendering event"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#verify-action-result","text":"This test verifies the action result instead of the action itself. This technique is useful if the WorkflowAction is anonymous or inline. val currentState = \u2026 val previousState = \u2026 workflow .testRender( props = MyProps(\u2026), initialState = currentState ) .render { rendering -> rendering.onCancelClicked() } .verifyActionResult { newState, output -> // Check that the workflow navigated back correctly. assertThat(newState).isEqualTo(previousState) // Check that the workflow didn't emit any output from the button click. assertThat(output).isNull() }","title":"Verify action result"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#too-many-outputs","text":"This is an example of what not to do \u2013 this test will error out because a worker is emitting and output and a rendering event is sent. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\", output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> // This will throw and fail the test because the SubmitLoginWorker is also configured to emit // an output. rendering.onCancelClicked()","title":"Too many outputs"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#types","text":"Name Summary ChildWorkflowMatch sealed class ChildWorkflowMatch RenderChildInvocation Describes a call to RenderContext.renderChild . class RenderChildInvocation","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#constructors","text":"Name Summary <init> The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . RenderTester()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#functions","text":"Name Summary expectSideEffect Specifies that this render pass is expected to run a side effect with a key that satisfies matcher . This expectation is strict, and will fail if multiple side effects match. abstract fun expectSideEffect(description: String , exactMatch: Boolean = true, matcher: (key: String ) -> Boolean ): RenderTester <PropsT, StateT, OutputT, RenderingT> render Execute the workflow\u2019s render method and run block to perform assertions on and send events to the resulting rendering. abstract fun render(block: (rendering: RenderingT) -> Unit = {}): RenderTestResult <PropsT, StateT, OutputT>","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/#extension-functions","text":"Name Summary expectSideEffect Specifies that this render pass is expected to run a particular side effect. fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectSideEffect(key: String ): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorker Specifies that this render pass is expected to run a Worker that has the same type of the given worker and for which the actual worker\u2019s doesSameWorkAs method returns true. If a worker is ran that matches the type of expected , but the actual worker\u2019s doesSameWorkAs returns false, then an AssertionError will be thrown. If you need to perform custom assertions, use the overload of this method that takes an assertWhen parameter. fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(expected: WorkerT, key: String = \"\", output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker with the given workerClass . The worker\u2019s output type is not taken into consideration. fun <PropsT, StateT, OutputT, RenderingT, WorkerOutputT, WorkerT : Worker <WorkerOutputT>> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerClass: KClass <out WorkerT>, key: String = \"\", assertWorker: (WorkerT) -> Unit = {}, output: WorkflowOutput <WorkerOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a Worker whose KType matches workerType . fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorker(workerType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorkerOutputting Specifies that this render pass is expected to run a Worker with the given outputType . fun <PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkerOutputting(outputType: KType , key: String = \"\", assertWorker: ( Worker <*>) -> Unit = {}, output: WorkflowOutput <*>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT> expectWorkflow Specifies that this render pass is expected to render a particular child workflow. fun <ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> fun <ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(identifier: WorkflowIdentifier , rendering: ChildRenderingT, output: WorkflowOutput <ChildOutputT>?, key: String = \"\", description: String = \"\", assertProps: (props: Any ?) -> Unit = {}): RenderTester <PropsT, StateT, OutputT, RenderingT> fun <ChildPropsT, ChildOutputT, ChildRenderingT, PropsT, StateT, OutputT, RenderingT> RenderTester <PropsT, StateT, OutputT, RenderingT>.expectWorkflow(workflowType: KClass <out Workflow <ChildPropsT, ChildOutputT, ChildRenderingT>>, rendering: ChildRenderingT, key: String = \"\", assertProps: (props: ChildPropsT) -> Unit = {}, output: WorkflowOutput <ChildOutputT>? = null, description: String = \"\"): RenderTester <PropsT, StateT, OutputT, RenderingT>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-init-/","text":"workflow / com.squareup.workflow1.testing / RenderTester / <init> <init> \u00b6 RenderTester() The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . All workflows that are rendered/ran by this workflow must be specified. Workers are optionally specified. Specified workers must run. Unexpected workers on a render pass do not cause a test failure. It is an error if more than one workflow or worker specifies an output. It is a test failure if any workflows or workers that were expected were not ran. It is a test failure if the workflow tried to run any workflows that were not expected. It is a test failure if no workflow or workflow emitted an output, no rendering event was invoked, and any of the action verification methods on RenderTestResult is called. Examples \u00b6 Worker output \u00b6 The following example tests a render pass that runs one worker, SubmitLoginWorker , which is configured to have \u201cemitted\u201d an output, and one workflow, ChildWorkflow , which expects a props containing \u201c test@foo.com \u201d and returning a ChildRendering as its rendering. It checks that the rendering properties are expected and that the output handler for the SubmitLoginWorker returned the CompleteLogin action. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\", output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> assertThat(rendering.text).isEqualTo(\"foo\") } .verifyAction { action -> assertThat(action).isEqualTo(Action.CompleteLogin(success = true)) } Rendering event \u00b6 This is similar to the example above, but will test an event sent to the rendering instead. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\" ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> rendering.onCancelClicked() assertThat(rendering.text).isEqualTo(\"foo\") } .verifyAction { action -> assertThat(action).isEqualTo(Action.CancelLogin) } Verify action result \u00b6 This test verifies the action result instead of the action itself. This technique is useful if the WorkflowAction is anonymous or inline. val currentState = \u2026 val previousState = \u2026 workflow .testRender( props = MyProps(\u2026), initialState = currentState ) .render { rendering -> rendering.onCancelClicked() } .verifyActionResult { newState, output -> // Check that the workflow navigated back correctly. assertThat(newState).isEqualTo(previousState) // Check that the workflow didn't emit any output from the button click. assertThat(output).isNull() } Too many outputs \u00b6 This is an example of what not to do \u2013 this test will error out because a worker is emitting and output and a rendering event is sent. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\", output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> // This will throw and fail the test because the SubmitLoginWorker is also configured to emit // an output. rendering.onCancelClicked()","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-init-/#init","text":"RenderTester() The props must be specified, the initial state may be specified, and then all child workflows and workers that are expected to run, and any outputs from them, must be specified with expectWorkflow and expectWorker calls. Then call render and perform any assertions on the rendering. An event may also be sent to the rendering if no workflows or workers emitted an output. Lastly, the RenderTestResult returned by render may be used to assert on the WorkflowAction s processed to handle events or outputs by calling verifyAction or verifyActionResult . All workflows that are rendered/ran by this workflow must be specified. Workers are optionally specified. Specified workers must run. Unexpected workers on a render pass do not cause a test failure. It is an error if more than one workflow or worker specifies an output. It is a test failure if any workflows or workers that were expected were not ran. It is a test failure if the workflow tried to run any workflows that were not expected. It is a test failure if no workflow or workflow emitted an output, no rendering event was invoked, and any of the action verification methods on RenderTestResult is called.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-init-/#examples","text":"","title":"Examples"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-init-/#worker-output","text":"The following example tests a render pass that runs one worker, SubmitLoginWorker , which is configured to have \u201cemitted\u201d an output, and one workflow, ChildWorkflow , which expects a props containing \u201c test@foo.com \u201d and returning a ChildRendering as its rendering. It checks that the rendering properties are expected and that the output handler for the SubmitLoginWorker returned the CompleteLogin action. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\", output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> assertThat(rendering.text).isEqualTo(\"foo\") } .verifyAction { action -> assertThat(action).isEqualTo(Action.CompleteLogin(success = true)) }","title":"Worker output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-init-/#rendering-event","text":"This is similar to the example above, but will test an event sent to the rendering instead. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\" ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> rendering.onCancelClicked() assertThat(rendering.text).isEqualTo(\"foo\") } .verifyAction { action -> assertThat(action).isEqualTo(Action.CancelLogin) }","title":"Rendering event"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-init-/#verify-action-result","text":"This test verifies the action result instead of the action itself. This technique is useful if the WorkflowAction is anonymous or inline. val currentState = \u2026 val previousState = \u2026 workflow .testRender( props = MyProps(\u2026), initialState = currentState ) .render { rendering -> rendering.onCancelClicked() } .verifyActionResult { newState, output -> // Check that the workflow navigated back correctly. assertThat(newState).isEqualTo(previousState) // Check that the workflow didn't emit any output from the button click. assertThat(output).isNull() }","title":"Verify action result"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-init-/#too-many-outputs","text":"This is an example of what not to do \u2013 this test will error out because a worker is emitting and output and a rendering event is sent. workflow .testRender( props = MyProps(\u2026), initialState = MyState(\u2026) ) .expectWorker( matchesWhen = { it is SubmitLoginWorker }, key = \"signin\", output = WorkflowOutput(LoginResponse(success = true)) ) .expectWorkflow( workflowType = ChildWorkflow::class, key = \"child\", assertProps = { assertThat(it.email).isEqualTo(\"test@foo.com\") }, rendering = ChildRendering(\"message\") ) .render { rendering -> // This will throw and fail the test because the SubmitLoginWorker is also configured to emit // an output. rendering.onCancelClicked()","title":"Too many outputs"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/expect-side-effect/","text":"workflow / com.squareup.workflow1.testing / RenderTester / expectSideEffect expectSideEffect \u00b6 abstract fun expectSideEffect(description: String , exactMatch: Boolean = true, matcher: (key: String ) -> Boolean ): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a side effect with a key that satisfies matcher . This expectation is strict, and will fail if multiple side effects match. Parameters \u00b6 description - String that will be used to describe this expectation in error messages. The description is required since no human-readable description can be derived from the predicate alone. exactMatch - If true, then the test will fail if any other matching expectations are also exact matches, and the expectation will only be allowed to match a single side effect. If false, the match will only be used if no other expectations return exclusive matches (in which case the first match will be used), and the expectation may match multiple side effects. matcher - A function that is passed the key value from runningSideEffect and return true if this key is expected.","title":"Expect side effect"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/expect-side-effect/#expectsideeffect","text":"abstract fun expectSideEffect(description: String , exactMatch: Boolean = true, matcher: (key: String ) -> Boolean ): RenderTester <PropsT, StateT, OutputT, RenderingT> Specifies that this render pass is expected to run a side effect with a key that satisfies matcher . This expectation is strict, and will fail if multiple side effects match.","title":"expectSideEffect"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/expect-side-effect/#parameters","text":"description - String that will be used to describe this expectation in error messages. The description is required since no human-readable description can be derived from the predicate alone. exactMatch - If true, then the test will fail if any other matching expectations are also exact matches, and the expectation will only be allowed to match a single side effect. If false, the match will only be used if no other expectations return exclusive matches (in which case the first match will be used), and the expectation may match multiple side effects. matcher - A function that is passed the key value from runningSideEffect and return true if this key is expected.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/render/","text":"workflow / com.squareup.workflow1.testing / RenderTester / render render \u00b6 abstract fun render(block: (rendering: RenderingT) -> Unit = {}): RenderTestResult <PropsT, StateT, OutputT> Execute the workflow\u2019s render method and run block to perform assertions on and send events to the resulting rendering. All workflows rendered/ran by the workflow must be specified before calling this method. Workers are optionally specified. Parameters \u00b6 block - Passed the result of the render pass to perform assertions on. If no child workflow or worker was configured to emit an output, may also invoke one of the rendering\u2019s event handlers. It is an error to invoke an event handler if a child emitted an output. Return A RenderTestResult that can be used to verify the WorkflowAction that was used to handle a workflow or worker output or a rendering event.","title":"Render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/render/#render","text":"abstract fun render(block: (rendering: RenderingT) -> Unit = {}): RenderTestResult <PropsT, StateT, OutputT> Execute the workflow\u2019s render method and run block to perform assertions on and send events to the resulting rendering. All workflows rendered/ran by the workflow must be specified before calling this method. Workers are optionally specified.","title":"render"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/render/#parameters","text":"block - Passed the result of the render pass to perform assertions on. If no child workflow or worker was configured to emit an output, may also invoke one of the rendering\u2019s event handlers. It is an error to invoke an event handler if a child emitted an output. Return A RenderTestResult that can be used to verify the WorkflowAction that was used to handle a workflow or worker output or a rendering event.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/","text":"workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch ChildWorkflowMatch \u00b6 sealed class ChildWorkflowMatch Types \u00b6 Name Summary Matched Indicates that the workflow matches the predicate. class Matched : ChildWorkflowMatch NotMatched Indicates that the child workflow did not match the predicate and must match a different expectation. The test will fail if all expectations return this value. object NotMatched : ChildWorkflowMatch","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/#childworkflowmatch","text":"sealed class ChildWorkflowMatch","title":"ChildWorkflowMatch"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/#types","text":"Name Summary Matched Indicates that the workflow matches the predicate. class Matched : ChildWorkflowMatch NotMatched Indicates that the child workflow did not match the predicate and must match a different expectation. The test will fail if all expectations return this value. object NotMatched : ChildWorkflowMatch","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-not-matched/","text":"workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / NotMatched NotMatched \u00b6 object NotMatched : ChildWorkflowMatch Indicates that the child workflow did not match the predicate and must match a different expectation. The test will fail if all expectations return this value.","title":" not matched"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-not-matched/#notmatched","text":"object NotMatched : ChildWorkflowMatch Indicates that the child workflow did not match the predicate and must match a different expectation. The test will fail if all expectations return this value.","title":"NotMatched"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/","text":"workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / Matched Matched \u00b6 class Matched : ChildWorkflowMatch Indicates that the workflow matches the predicate. Parameters \u00b6 childRendering - The value to return as the child\u2019s rendering. output - If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . Constructors \u00b6 Name Summary <init> Indicates that the workflow matches the predicate. Matched(childRendering: Any ?, output: WorkflowOutput < Any ?>? = null) Properties \u00b6 Name Summary childRendering The value to return as the child\u2019s rendering. val childRendering: Any ? output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . val output: WorkflowOutput < Any ?>?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/#matched","text":"class Matched : ChildWorkflowMatch Indicates that the workflow matches the predicate.","title":"Matched"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/#parameters","text":"childRendering - The value to return as the child\u2019s rendering. output - If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/#constructors","text":"Name Summary <init> Indicates that the workflow matches the predicate. Matched(childRendering: Any ?, output: WorkflowOutput < Any ?>? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/#properties","text":"Name Summary childRendering The value to return as the child\u2019s rendering. val childRendering: Any ? output If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult . val output: WorkflowOutput < Any ?>?","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/-init-/","text":"workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / Matched / <init> <init> \u00b6 Matched(childRendering: Any ?, output: WorkflowOutput < Any ?>? = null) Indicates that the workflow matches the predicate. Parameters \u00b6 childRendering - The value to return as the child\u2019s rendering. output - If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/-init-/#init","text":"Matched(childRendering: Any ?, output: WorkflowOutput < Any ?>? = null) Indicates that the workflow matches the predicate.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/-init-/#parameters","text":"childRendering - The value to return as the child\u2019s rendering. output - If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/child-rendering/","text":"workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / Matched / childRendering childRendering \u00b6 val childRendering: Any ? The value to return as the child\u2019s rendering.","title":"Child rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/child-rendering/#childrendering","text":"val childRendering: Any ? The value to return as the child\u2019s rendering.","title":"childRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/output/","text":"workflow / com.squareup.workflow1.testing / RenderTester / ChildWorkflowMatch / Matched / output output \u00b6 val output: WorkflowOutput < Any ?>? If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":"Output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-child-workflow-match/-matched/output/#output","text":"val output: WorkflowOutput < Any ?>? If non-null, WorkflowOutput.value will be \u201cemitted\u201d when this workflow is rendered. The WorkflowAction used to handle this output can be verified using methods on RenderTestResult .","title":"output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/","text":"workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation RenderChildInvocation \u00b6 class RenderChildInvocation Describes a call to RenderContext.renderChild . Output and rendering types \u00b6 The testing library will attempt to determine the output and rendering types by using reflection to determine the type arguments that the concrete workflow class passes to the Workflow interface. This is subject to the limitations of Kotlin\u2019s reflection. Notably, there is a compiler bug ( KT-17103 ) that prevents reflecting on these types when the workflow is an anonymous class that was created by an inline function with reified types, such as Workflow.stateful and Workflow.stateless . Parameters \u00b6 workflow - The child workflow that is being rendered. props - The props value passed to renderChild . outputType - The KType of the workflow\u2019s OutputT . renderingType - The KType of the workflow\u2019s RenderingT . renderKey - The string key passed to renderChild . Constructors \u00b6 Name Summary <init> Describes a call to RenderContext.renderChild . RenderChildInvocation(workflow: Workflow <*, *, *>, props: Any ?, outputType: KTypeProjection , renderingType: KTypeProjection , renderKey: String ) Properties \u00b6 Name Summary outputType The KType of the workflow\u2019s OutputT . val outputType: KTypeProjection props The props value passed to renderChild . val props: Any ? renderingType The KType of the workflow\u2019s RenderingT . val renderingType: KTypeProjection renderKey The string key passed to renderChild . val renderKey: String workflow The child workflow that is being rendered. val workflow: Workflow <*, *, *>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#renderchildinvocation","text":"class RenderChildInvocation Describes a call to RenderContext.renderChild .","title":"RenderChildInvocation"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#output-and-rendering-types","text":"The testing library will attempt to determine the output and rendering types by using reflection to determine the type arguments that the concrete workflow class passes to the Workflow interface. This is subject to the limitations of Kotlin\u2019s reflection. Notably, there is a compiler bug ( KT-17103 ) that prevents reflecting on these types when the workflow is an anonymous class that was created by an inline function with reified types, such as Workflow.stateful and Workflow.stateless .","title":"Output and rendering types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#parameters","text":"workflow - The child workflow that is being rendered. props - The props value passed to renderChild . outputType - The KType of the workflow\u2019s OutputT . renderingType - The KType of the workflow\u2019s RenderingT . renderKey - The string key passed to renderChild .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#constructors","text":"Name Summary <init> Describes a call to RenderContext.renderChild . RenderChildInvocation(workflow: Workflow <*, *, *>, props: Any ?, outputType: KTypeProjection , renderingType: KTypeProjection , renderKey: String )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/#properties","text":"Name Summary outputType The KType of the workflow\u2019s OutputT . val outputType: KTypeProjection props The props value passed to renderChild . val props: Any ? renderingType The KType of the workflow\u2019s RenderingT . val renderingType: KTypeProjection renderKey The string key passed to renderChild . val renderKey: String workflow The child workflow that is being rendered. val workflow: Workflow <*, *, *>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/-init-/","text":"workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / <init> <init> \u00b6 RenderChildInvocation(workflow: Workflow <*, *, *>, props: Any ?, outputType: KTypeProjection , renderingType: KTypeProjection , renderKey: String ) Describes a call to RenderContext.renderChild . Output and rendering types \u00b6 The testing library will attempt to determine the output and rendering types by using reflection to determine the type arguments that the concrete workflow class passes to the Workflow interface. This is subject to the limitations of Kotlin\u2019s reflection. Notably, there is a compiler bug ( KT-17103 ) that prevents reflecting on these types when the workflow is an anonymous class that was created by an inline function with reified types, such as Workflow.stateful and Workflow.stateless . Parameters \u00b6 workflow - The child workflow that is being rendered. props - The props value passed to renderChild . outputType - The KType of the workflow\u2019s OutputT . renderingType - The KType of the workflow\u2019s RenderingT . renderKey - The string key passed to renderChild .","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/-init-/#init","text":"RenderChildInvocation(workflow: Workflow <*, *, *>, props: Any ?, outputType: KTypeProjection , renderingType: KTypeProjection , renderKey: String ) Describes a call to RenderContext.renderChild .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/-init-/#output-and-rendering-types","text":"The testing library will attempt to determine the output and rendering types by using reflection to determine the type arguments that the concrete workflow class passes to the Workflow interface. This is subject to the limitations of Kotlin\u2019s reflection. Notably, there is a compiler bug ( KT-17103 ) that prevents reflecting on these types when the workflow is an anonymous class that was created by an inline function with reified types, such as Workflow.stateful and Workflow.stateless .","title":"Output and rendering types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/-init-/#parameters","text":"workflow - The child workflow that is being rendered. props - The props value passed to renderChild . outputType - The KType of the workflow\u2019s OutputT . renderingType - The KType of the workflow\u2019s RenderingT . renderKey - The string key passed to renderChild .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/output-type/","text":"workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / outputType outputType \u00b6 val outputType: KTypeProjection The KType of the workflow\u2019s OutputT .","title":"Output type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/output-type/#outputtype","text":"val outputType: KTypeProjection The KType of the workflow\u2019s OutputT .","title":"outputType"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/props/","text":"workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / props props \u00b6 val props: Any ? The props value passed to renderChild .","title":"Props"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/props/#props","text":"val props: Any ? The props value passed to renderChild .","title":"props"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/render-key/","text":"workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / renderKey renderKey \u00b6 val renderKey: String The string key passed to renderChild .","title":"Render key"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/render-key/#renderkey","text":"val renderKey: String The string key passed to renderChild .","title":"renderKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/rendering-type/","text":"workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / renderingType renderingType \u00b6 val renderingType: KTypeProjection The KType of the workflow\u2019s RenderingT .","title":"Rendering type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/rendering-type/#renderingtype","text":"val renderingType: KTypeProjection The KType of the workflow\u2019s RenderingT .","title":"renderingType"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/workflow/","text":"workflow / com.squareup.workflow1.testing / RenderTester / RenderChildInvocation / workflow workflow \u00b6 val workflow: Workflow <*, *, *> The child workflow that is being rendered.","title":"Workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-render-tester/-render-child-invocation/workflow/#workflow","text":"val workflow: Workflow <*, *, *> The child workflow that is being rendered.","title":"workflow"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/","text":"workflow / com.squareup.workflow1.testing / WorkerSink WorkerSink \u00b6 class WorkerSink<T> : Worker <T> Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name . These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently. Parameters \u00b6 name - String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information. Constructors \u00b6 Name Summary <init> Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. WorkerSink(name: String , type: KClass <*>) Functions \u00b6 Name Summary doesSameWorkAs Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. fun doesSameWorkAs(otherWorker: Worker <*>): Boolean run Returns a Flow to execute the work represented by this worker. fun run(): Flow<T> send fun send(value: T): Unit toString fun toString(): String Extension Functions \u00b6 Name Summary test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#workersink","text":"class WorkerSink<T> : Worker <T> Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name . These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently.","title":"WorkerSink"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#parameters","text":"name - String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#constructors","text":"Name Summary <init> Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. WorkerSink(name: String , type: KClass <*>)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#functions","text":"Name Summary doesSameWorkAs Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. fun doesSameWorkAs(otherWorker: Worker <*>): Boolean run Returns a Flow to execute the work represented by this worker. fun run(): Flow<T> send fun send(value: T): Unit toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/#extension-functions","text":"Name Summary test Test a Worker by defining assertions on its output within block . fun <T> Worker <T>.test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester <T>.() -> Unit ): Unit transform Returns a Worker that transforms this Worker \u2018s Flow by calling transform . fun <T, R> Worker <T>.transform(transform: (Flow<T>) -> Flow<R>): Worker <R>","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/-init-/","text":"workflow / com.squareup.workflow1.testing / WorkerSink / <init> <init> \u00b6 WorkerSink(name: String , type: KClass <*>) Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name . These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently. Parameters \u00b6 name - String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/-init-/#init","text":"WorkerSink(name: String , type: KClass <*>) Implementation of Worker for integration tests (using launchForTestingFromStartWith or launchForTestingFromStateWith ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name . These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/-init-/#parameters","text":"name - String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/does-same-work-as/","text":"workflow / com.squareup.workflow1.testing / WorkerSink / doesSameWorkAs doesSameWorkAs \u00b6 fun doesSameWorkAs(otherWorker: Worker <*>): Boolean Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Workers are compared by their declared type. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Workers for which doesSameWorkAs returns false will also be restarted. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data. Most implementations of this method should compare constructor parameters. E.g: class SearchWorker(private val query: String): Worker<SearchResult> { // run omitted for example. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is SearchWorker && otherWorker.query == query }","title":"Does same work as"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/does-same-work-as/#doessameworkas","text":"fun doesSameWorkAs(otherWorker: Worker <*>): Boolean Override this method to define equivalence between Worker s. The default implementation returns true if this worker\u2019s class is the same as otherWorker \u2018s class. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Workers are compared by their declared type. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Workers for which doesSameWorkAs returns false will also be restarted. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data. Most implementations of this method should compare constructor parameters. E.g: class SearchWorker(private val query: String): Worker<SearchResult> { // run omitted for example. override fun doesSameWorkAs(otherWorker: Worker<*>): Boolean = otherWorker is SearchWorker && otherWorker.query == query }","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/run/","text":"workflow / com.squareup.workflow1.testing / WorkerSink / run run \u00b6 fun run(): Flow<T> Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker<Nothing> ). Coroutine Context \u00b6 When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don\u2019t care which thread they\u2019re executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString ) and the key specified by the workflow running the worker. Exceptions \u00b6 If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Run"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/run/#run","text":"fun run(): Flow<T> Returns a Flow to execute the work represented by this worker. Flow is \u201ca cold asynchronous data stream that sequentially emits values and completes normally or with an exception\u201d, although it may not emit any values. It is common to use workers to perform some side effect that should only be executed when a state is entered \u2013 in this case, the worker never emits anything (and will have type Worker<Nothing> ).","title":"run"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/run/#coroutine-context","text":"When a worker is started, a coroutine is launched to collect the flow. When the worker is torn down, the coroutine is cancelled. This coroutine is launched in the same scope as the workflow runtime, with a few changes: The dispatcher is always set to Unconfined to minimize overhead for workers that don\u2019t care which thread they\u2019re executed on (e.g. logging side effects, workers that wrap third-party reactive libraries, etc.). If your work cares which thread it runs on, use withContext or flowOn to specify a dispatcher. A CoroutineName that describes the Worker instance (via toString ) and the key specified by the workflow running the worker.","title":"Coroutine Context"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/run/#exceptions","text":"If a worker needs to report an error to the workflow running it, it must not throw it as an exception \u2013 any exceptions thrown by a worker\u2019s Flow will cancel the entire workflow runtime. Instead, the worker\u2019s OutputT type should be capable of expressing errors itself, and the worker\u2019s logic should wrap any relevant exceptions into an output value (e.g. using the catch operator). While this might seem restrictive, this design decision keeps the RenderContext.runningWorker API simpler, since it does not need to handle exceptions itself. It also discourages the code smell of relying on exceptions to handle control flow.","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/send/","text":"workflow / com.squareup.workflow1.testing / WorkerSink / send send \u00b6 fun send(value: T): Unit","title":"Send"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/send/#send","text":"fun send(value: T): Unit","title":"send"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/to-string/","text":"workflow / com.squareup.workflow1.testing / WorkerSink / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-sink/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/","text":"workflow / com.squareup.workflow1.testing / WorkerTester WorkerTester \u00b6 interface WorkerTester<T> Functions \u00b6 Name Summary assertFinished Suspends until the worker emits an output or finishes. abstract suspend fun assertFinished(): Unit assertNoOutput Throws an AssertionError if an output has been emitted since the last call to nextOutput . abstract fun assertNoOutput(): Unit assertNotFinished Throws an AssertionError immediately if the worker is finished. abstract fun assertNotFinished(): Unit cancelWorker Cancels the worker and suspends until it\u2019s finished cancelling (joined). abstract suspend fun cancelWorker(): Unit getException Suspends until the worker throws an exception, then returns it. abstract suspend fun getException(): Throwable nextOutput Suspends until the worker emits its next value, then returns it. abstract suspend fun nextOutput(): T","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/#workertester","text":"interface WorkerTester<T>","title":"WorkerTester"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/#functions","text":"Name Summary assertFinished Suspends until the worker emits an output or finishes. abstract suspend fun assertFinished(): Unit assertNoOutput Throws an AssertionError if an output has been emitted since the last call to nextOutput . abstract fun assertNoOutput(): Unit assertNotFinished Throws an AssertionError immediately if the worker is finished. abstract fun assertNotFinished(): Unit cancelWorker Cancels the worker and suspends until it\u2019s finished cancelling (joined). abstract suspend fun cancelWorker(): Unit getException Suspends until the worker throws an exception, then returns it. abstract suspend fun getException(): Throwable nextOutput Suspends until the worker emits its next value, then returns it. abstract suspend fun nextOutput(): T","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-finished/","text":"workflow / com.squareup.workflow1.testing / WorkerTester / assertFinished assertFinished \u00b6 abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. Throws an AssertionError if an output was emitted.","title":"Assert finished"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-finished/#assertfinished","text":"abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. Throws an AssertionError if an output was emitted.","title":"assertFinished"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-no-output/","text":"workflow / com.squareup.workflow1.testing / WorkerTester / assertNoOutput assertNoOutput \u00b6 abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput .","title":"Assert no output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-no-output/#assertnooutput","text":"abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput .","title":"assertNoOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-not-finished/","text":"workflow / com.squareup.workflow1.testing / WorkerTester / assertNotFinished assertNotFinished \u00b6 abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished.","title":"Assert not finished"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/assert-not-finished/#assertnotfinished","text":"abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished.","title":"assertNotFinished"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/cancel-worker/","text":"workflow / com.squareup.workflow1.testing / WorkerTester / cancelWorker cancelWorker \u00b6 abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it\u2019s finished cancelling (joined).","title":"Cancel worker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/cancel-worker/#cancelworker","text":"abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it\u2019s finished cancelling (joined).","title":"cancelWorker"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/get-exception/","text":"workflow / com.squareup.workflow1.testing / WorkerTester / getException getException \u00b6 abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it.","title":"Get exception"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/get-exception/#getexception","text":"abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it.","title":"getException"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/next-output/","text":"workflow / com.squareup.workflow1.testing / WorkerTester / nextOutput nextOutput \u00b6 abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"Next output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-worker-tester/next-output/#nextoutput","text":"abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"nextOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams WorkflowTestParams \u00b6 @TestOnly class WorkflowTestParams<out StateT> Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . Parameters \u00b6 startFrom - How to start the workflow \u2013 see StartMode . checkRenderIdempotence - If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false. Types \u00b6 Name Summary StartMode Defines how to start the workflow for tests. sealed class StartMode<out StateT> Constructors \u00b6 Name Summary <init> Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . WorkflowTestParams(startFrom: StartMode<StateT> = StartFresh, checkRenderIdempotence: Boolean = true) Properties \u00b6 Name Summary checkRenderIdempotence If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false. val checkRenderIdempotence: Boolean startFrom How to start the workflow \u2013 see StartMode . val startFrom: StartMode<StateT>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#workflowtestparams","text":"@TestOnly class WorkflowTestParams<out StateT> Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test .","title":"WorkflowTestParams"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#parameters","text":"startFrom - How to start the workflow \u2013 see StartMode . checkRenderIdempotence - If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#types","text":"Name Summary StartMode Defines how to start the workflow for tests. sealed class StartMode<out StateT>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#constructors","text":"Name Summary <init> Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . WorkflowTestParams(startFrom: StartMode<StateT> = StartFresh, checkRenderIdempotence: Boolean = true)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/#properties","text":"Name Summary checkRenderIdempotence If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false. val checkRenderIdempotence: Boolean startFrom How to start the workflow \u2013 see StartMode . val startFrom: StartMode<StateT>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-init-/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / <init> <init> \u00b6 WorkflowTestParams(startFrom: StartMode<StateT> = StartFresh, checkRenderIdempotence: Boolean = true) Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . Parameters \u00b6 startFrom - How to start the workflow \u2013 see StartMode . checkRenderIdempotence - If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-init-/#init","text":"WorkflowTestParams(startFrom: StartMode<StateT> = StartFresh, checkRenderIdempotence: Boolean = true) Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-init-/#parameters","text":"startFrom - How to start the workflow \u2013 see StartMode . checkRenderIdempotence - If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/check-render-idempotence/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / checkRenderIdempotence checkRenderIdempotence \u00b6 val checkRenderIdempotence: Boolean If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Check render idempotence"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/check-render-idempotence/#checkrenderidempotence","text":"val checkRenderIdempotence: Boolean If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don\u2019t want to have to deal with the extra passes, you can temporarily set it to false.","title":"checkRenderIdempotence"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/start-from/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / startFrom startFrom \u00b6 val startFrom: StartMode<StateT> How to start the workflow \u2013 see StartMode .","title":"Start from"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/start-from/#startfrom","text":"val startFrom: StartMode<StateT> How to start the workflow \u2013 see StartMode .","title":"startFrom"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode StartMode \u00b6 sealed class StartMode<out StateT> Defines how to start the workflow for tests. See the documentation on individual cases for more information: StartFresh StartFromWorkflowSnapshot StartFromCompleteSnapshot StartFromState Types \u00b6 Name Summary StartFresh Starts the workflow from its initial state (as specified by initial state ), with a null snapshot. object StartFresh : StartMode< Nothing > StartFromCompleteSnapshot Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. class StartFromCompleteSnapshot : StartMode< Nothing > StartFromState Starts the workflow from an exact state. Only applies to StatefulWorkflow s. class StartFromState<StateT> : StartMode<StateT> StartFromWorkflowSnapshot Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. class StartFromWorkflowSnapshot : StartMode< Nothing >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/#startmode","text":"sealed class StartMode<out StateT> Defines how to start the workflow for tests. See the documentation on individual cases for more information: StartFresh StartFromWorkflowSnapshot StartFromCompleteSnapshot StartFromState","title":"StartMode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/#types","text":"Name Summary StartFresh Starts the workflow from its initial state (as specified by initial state ), with a null snapshot. object StartFresh : StartMode< Nothing > StartFromCompleteSnapshot Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. class StartFromCompleteSnapshot : StartMode< Nothing > StartFromState Starts the workflow from an exact state. Only applies to StatefulWorkflow s. class StartFromState<StateT> : StartMode<StateT> StartFromWorkflowSnapshot Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. class StartFromWorkflowSnapshot : StartMode< Nothing >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-fresh/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFresh StartFresh \u00b6 object StartFresh : StartMode< Nothing > Starts the workflow from its initial state (as specified by initial state ), with a null snapshot.","title":" start fresh"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-fresh/#startfresh","text":"object StartFresh : StartMode< Nothing > Starts the workflow from its initial state (as specified by initial state ), with a null snapshot.","title":"StartFresh"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromCompleteSnapshot StartFromCompleteSnapshot \u00b6 class StartFromCompleteSnapshot : StartMode< Nothing > Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow. Parameters \u00b6 snapshot - A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot . Constructors \u00b6 Name Summary <init> Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. StartFromCompleteSnapshot(snapshot: TreeSnapshot ) Properties \u00b6 Name Summary snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot . val snapshot: TreeSnapshot","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#startfromcompletesnapshot","text":"class StartFromCompleteSnapshot : StartMode< Nothing > Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow.","title":"StartFromCompleteSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#parameters","text":"snapshot - A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#constructors","text":"Name Summary <init> Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. StartFromCompleteSnapshot(snapshot: TreeSnapshot )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#properties","text":"Name Summary snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot . val snapshot: TreeSnapshot","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/-init-/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromCompleteSnapshot / <init> <init> \u00b6 StartFromCompleteSnapshot(snapshot: TreeSnapshot ) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow. Parameters \u00b6 snapshot - A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/-init-/#init","text":"StartFromCompleteSnapshot(snapshot: TreeSnapshot ) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/-init-/#parameters","text":"snapshot - A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/snapshot/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromCompleteSnapshot / snapshot snapshot \u00b6 val snapshot: TreeSnapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/snapshot/#snapshot","text":"val snapshot: TreeSnapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromState StartFromState \u00b6 class StartFromState<StateT> : StartMode<StateT> Starts the workflow from an exact state. Only applies to StatefulWorkflow s. Constructors \u00b6 Name Summary <init> Starts the workflow from an exact state. Only applies to StatefulWorkflow s. StartFromState(state: StateT) Properties \u00b6 Name Summary state val state: StateT","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/#startfromstate","text":"class StartFromState<StateT> : StartMode<StateT> Starts the workflow from an exact state. Only applies to StatefulWorkflow s.","title":"StartFromState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/#constructors","text":"Name Summary <init> Starts the workflow from an exact state. Only applies to StatefulWorkflow s. StartFromState(state: StateT)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/#properties","text":"Name Summary state val state: StateT","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/-init-/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromState / <init> <init> \u00b6 StartFromState(state: StateT) Starts the workflow from an exact state. Only applies to StatefulWorkflow s.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/-init-/#init","text":"StartFromState(state: StateT) Starts the workflow from an exact state. Only applies to StatefulWorkflow s.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/state/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromState / state state \u00b6 val state: StateT","title":"State"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-state/state/#state","text":"val state: StateT","title":"state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromWorkflowSnapshot StartFromWorkflowSnapshot \u00b6 class StartFromWorkflowSnapshot : StartMode< Nothing > Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime. Parameters \u00b6 snapshot - A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot . Constructors \u00b6 Name Summary <init> Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. StartFromWorkflowSnapshot(snapshot: Snapshot ) Properties \u00b6 Name Summary snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot . val snapshot: Snapshot","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#startfromworkflowsnapshot","text":"class StartFromWorkflowSnapshot : StartMode< Nothing > Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime.","title":"StartFromWorkflowSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#parameters","text":"snapshot - A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#constructors","text":"Name Summary <init> Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. StartFromWorkflowSnapshot(snapshot: Snapshot )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#properties","text":"Name Summary snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot . val snapshot: Snapshot","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/-init-/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromWorkflowSnapshot / <init> <init> \u00b6 StartFromWorkflowSnapshot(snapshot: Snapshot ) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime. Parameters \u00b6 snapshot - A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/-init-/#init","text":"StartFromWorkflowSnapshot(snapshot: Snapshot ) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/-init-/#parameters","text":"snapshot - A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/snapshot/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestParams / StartMode / StartFromWorkflowSnapshot / snapshot snapshot \u00b6 val snapshot: Snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/snapshot/#snapshot","text":"val snapshot: Snapshot A Snapshot that can be directly parsed by a workflow\u2019s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestRuntime WorkflowTestRuntime \u00b6 class WorkflowTestRuntime<PropsT, OutputT, RenderingT> Runs a Workflow and provides access to its renderings , outputs , and snapshots . For each of renderings, outputs, and snapshots, this class gives you a few ways to access information about them: awaitNextRendering , awaitNextOutput , awaitNextSnapshot Block until something becomes available, and then return it. hasRendering , hasOutput , hasSnapshot Return true if the previous methods won\u2019t block. sendProps Send a new PropsT to the root workflow. Properties \u00b6 Name Summary hasOutput True if the workflow has emitted a new output that is ready to be consumed. val hasOutput: Boolean hasRendering True if the workflow has emitted a new rendering that is ready to be consumed. val hasRendering: Boolean hasSnapshot True if the workflow has emitted a new snapshot that is ready to be consumed. val hasSnapshot: Boolean Functions \u00b6 Name Summary awaitNextOutput Blocks until the workflow emits an output, then returns it. fun awaitNextOutput(timeoutMs: Long ? = null): OutputT awaitNextRendering Blocks until the workflow emits a rendering, then returns it. fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT awaitNextSnapshot Blocks until the workflow emits a snapshot, then returns it. fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): TreeSnapshot sendProps Sends input to the workflow. fun sendProps(input: PropsT): Unit Companion Object Properties \u00b6 Name Summary DEFAULT_TIMEOUT_MS const val DEFAULT_TIMEOUT_MS: Long","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/#workflowtestruntime","text":"class WorkflowTestRuntime<PropsT, OutputT, RenderingT> Runs a Workflow and provides access to its renderings , outputs , and snapshots . For each of renderings, outputs, and snapshots, this class gives you a few ways to access information about them: awaitNextRendering , awaitNextOutput , awaitNextSnapshot Block until something becomes available, and then return it. hasRendering , hasOutput , hasSnapshot Return true if the previous methods won\u2019t block. sendProps Send a new PropsT to the root workflow.","title":"WorkflowTestRuntime"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/#properties","text":"Name Summary hasOutput True if the workflow has emitted a new output that is ready to be consumed. val hasOutput: Boolean hasRendering True if the workflow has emitted a new rendering that is ready to be consumed. val hasRendering: Boolean hasSnapshot True if the workflow has emitted a new snapshot that is ready to be consumed. val hasSnapshot: Boolean","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/#functions","text":"Name Summary awaitNextOutput Blocks until the workflow emits an output, then returns it. fun awaitNextOutput(timeoutMs: Long ? = null): OutputT awaitNextRendering Blocks until the workflow emits a rendering, then returns it. fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT awaitNextSnapshot Blocks until the workflow emits a snapshot, then returns it. fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): TreeSnapshot sendProps Sends input to the workflow. fun sendProps(input: PropsT): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/#companion-object-properties","text":"Name Summary DEFAULT_TIMEOUT_MS const val DEFAULT_TIMEOUT_MS: Long","title":"Companion Object Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/-d-e-f-a-u-l-t_-t-i-m-e-o-u-t_-m-s/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / DEFAULT_TIMEOUT_MS DEFAULT_TIMEOUT_MS \u00b6 const val DEFAULT_TIMEOUT_MS: Long","title":" d e f a u l t  t i m e o u t  m s"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/-d-e-f-a-u-l-t_-t-i-m-e-o-u-t_-m-s/#default_timeout_ms","text":"const val DEFAULT_TIMEOUT_MS: Long","title":"DEFAULT_TIMEOUT_MS"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-output/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / awaitNextOutput awaitNextOutput \u00b6 fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it. Parameters \u00b6 timeoutMs - The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Await next output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-output/#awaitnextoutput","text":"fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it.","title":"awaitNextOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-output/#parameters","text":"timeoutMs - The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-rendering/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / awaitNextRendering awaitNextRendering \u00b6 fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it. Parameters \u00b6 timeoutMs - The maximum amount of time to wait for a rendering to be emitted. If null, WorkflowTestRuntime.DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple renderings, all but the most recent one will be dropped.","title":"Await next rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-rendering/#awaitnextrendering","text":"fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it.","title":"awaitNextRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-rendering/#parameters","text":"timeoutMs - The maximum amount of time to wait for a rendering to be emitted. If null, WorkflowTestRuntime.DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple renderings, all but the most recent one will be dropped.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-snapshot/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / awaitNextSnapshot awaitNextSnapshot \u00b6 fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): TreeSnapshot Blocks until the workflow emits a snapshot, then returns it. The returned snapshot will be the snapshot only of the root workflow. It will be null if snapshotState returned an empty Snapshot . Parameters \u00b6 timeoutMs - The maximum amount of time to wait for a snapshot to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple snapshots, all but the most recent one will be dropped.","title":"Await next snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-snapshot/#awaitnextsnapshot","text":"fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): TreeSnapshot Blocks until the workflow emits a snapshot, then returns it. The returned snapshot will be the snapshot only of the root workflow. It will be null if snapshotState returned an empty Snapshot .","title":"awaitNextSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/await-next-snapshot/#parameters","text":"timeoutMs - The maximum amount of time to wait for a snapshot to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple snapshots, all but the most recent one will be dropped.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-output/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / hasOutput hasOutput \u00b6 val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed.","title":"Has output"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-output/#hasoutput","text":"val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed.","title":"hasOutput"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-rendering/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / hasRendering hasRendering \u00b6 val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed.","title":"Has rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-rendering/#hasrendering","text":"val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed.","title":"hasRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-snapshot/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / hasSnapshot hasSnapshot \u00b6 val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"Has snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/has-snapshot/#hassnapshot","text":"val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"hasSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/send-props/","text":"workflow / com.squareup.workflow1.testing / WorkflowTestRuntime / sendProps sendProps \u00b6 fun sendProps(input: PropsT): Unit Sends input to the workflow.","title":"Send props"},{"location":"kotlin/api/workflow/com.squareup.workflow1.testing/-workflow-test-runtime/send-props/#sendprops","text":"fun sendProps(input: PropsT): Unit Sends input to the workflow.","title":"sendProps"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/","text":"workflow / com.squareup.workflow1.ui Package com.squareup.workflow1.ui \u00b6 Types \u00b6 Name Summary AndroidViewRendering Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. interface AndroidViewRendering<V : AndroidViewRendering <V>> BackPressHandler A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. typealias BackPressHandler = () -> Unit BuilderViewFactory A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) class BuilderViewFactory<RenderingT : Any > : ViewFactory <RenderingT> Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. interface Compatible DecorativeViewFactory A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. class DecorativeViewFactory<OuterT : Any , InnerT : Any > : ViewFactory <OuterT> LayoutRunner interface LayoutRunner<RenderingT : Any > Named Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. data class Named<W : Any > : Compatible NamedViewFactory ViewFactory that allows views to display instances of Named . Delegates to the factory for Named.wrapped . object NamedViewFactory : ViewFactory < Named <*>> ShowRenderingTag * View tag that holds the function to make the view show instances of [RenderingT](-show-rendering-tag/index.md#RenderingT), and the [current rendering](-show-rendering-tag/showing.md). data class ShowRenderingTag [ Any ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html) >` ViewBindingInflater typealias ViewBindingInflater<BindingT> = (LayoutInflater, ViewGroup?, Boolean ) -> BindingT ViewEnvironment Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing. class ViewEnvironment ViewEnvironmentKey Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. abstract class ViewEnvironmentKey<T : Any > ViewFactory Factory for View instances that can show renderings of type RenderingT . interface ViewFactory<in RenderingT : Any > ViewRegistry The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. This is the engine behind AndroidViewRendering , WorkflowViewStub and ViewFactory . Most apps can ignore ViewRegistry as an implementation detail, by using AndroidViewRendering to tie their rendering classes to view code. interface ViewRegistry ViewShowRendering Function attached to a view created by ViewFactory , to allow it to respond to View.showRendering . typealias ViewShowRendering<RenderingT> = (RenderingT, ViewEnvironment ) -> Unit WorkflowLayout A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. class WorkflowLayout : FrameLayout WorkflowViewStub A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . class WorkflowViewStub : View Annotations \u00b6 Name Summary WorkflowUiExperimentalApi Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. annotation class WorkflowUiExperimentalApi Extensions for External Classes \u00b6 Name Summary android.content.Context android.os.Parcelable android.view.View android.widget.EditText okio.ByteString Functions \u00b6 Name Summary <no name provided> A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderViewFactory if you want to build views from code rather than layouts.) fun <no name provided>(): Unit buildView It is usually more convenient to use WorkflowViewStub than to call this method directly. fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , container: ViewGroup): View compatible Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . fun compatible(me: Any , you: Any ): Boolean plus operator fun ViewRegistry .plus(binding: ViewFactory <*>): ViewRegistry operator fun ViewRegistry .plus(other: ViewRegistry ): ViewRegistry renderWorkflowIn An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that takes no input (that is, has PropsT set to Unit ). fun <OutputT, RenderingT> renderWorkflowIn(workflow: Workflow < Unit , OutputT, RenderingT>, scope: CoroutineScope, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that requires one input value ( prop ) to run. fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, prop: PropsT, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that requires input ( props ) to run. fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, props: StateFlow<PropsT>, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> toParcelable fun <T : Parcelable> Snapshot .toParcelable(): T? ViewRegistry fun ViewRegistry(vararg bindings: ViewFactory <*>): ViewRegistry Returns a ViewRegistry that merges all the given registries . fun ViewRegistry(vararg registries: ViewRegistry ): ViewRegistry Returns a ViewRegistry that contains no bindings. fun ViewRegistry(): ViewRegistry","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/#package-comsquareupworkflow1ui","text":"","title":"Package com.squareup.workflow1.ui"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/#types","text":"Name Summary AndroidViewRendering Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. interface AndroidViewRendering<V : AndroidViewRendering <V>> BackPressHandler A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. typealias BackPressHandler = () -> Unit BuilderViewFactory A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) class BuilderViewFactory<RenderingT : Any > : ViewFactory <RenderingT> Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. interface Compatible DecorativeViewFactory A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. class DecorativeViewFactory<OuterT : Any , InnerT : Any > : ViewFactory <OuterT> LayoutRunner interface LayoutRunner<RenderingT : Any > Named Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. data class Named<W : Any > : Compatible NamedViewFactory ViewFactory that allows views to display instances of Named . Delegates to the factory for Named.wrapped . object NamedViewFactory : ViewFactory < Named <*>> ShowRenderingTag * View tag that holds the function to make the view show instances of [RenderingT](-show-rendering-tag/index.md#RenderingT), and the [current rendering](-show-rendering-tag/showing.md). data class ShowRenderingTag [ Any ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html) >` ViewBindingInflater typealias ViewBindingInflater<BindingT> = (LayoutInflater, ViewGroup?, Boolean ) -> BindingT ViewEnvironment Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing. class ViewEnvironment ViewEnvironmentKey Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. abstract class ViewEnvironmentKey<T : Any > ViewFactory Factory for View instances that can show renderings of type RenderingT . interface ViewFactory<in RenderingT : Any > ViewRegistry The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. This is the engine behind AndroidViewRendering , WorkflowViewStub and ViewFactory . Most apps can ignore ViewRegistry as an implementation detail, by using AndroidViewRendering to tie their rendering classes to view code. interface ViewRegistry ViewShowRendering Function attached to a view created by ViewFactory , to allow it to respond to View.showRendering . typealias ViewShowRendering<RenderingT> = (RenderingT, ViewEnvironment ) -> Unit WorkflowLayout A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. class WorkflowLayout : FrameLayout WorkflowViewStub A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . class WorkflowViewStub : View","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/#annotations","text":"Name Summary WorkflowUiExperimentalApi Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. annotation class WorkflowUiExperimentalApi","title":"Annotations"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/#extensions-for-external-classes","text":"Name Summary android.content.Context android.os.Parcelable android.view.View android.widget.EditText okio.ByteString","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/#functions","text":"Name Summary <no name provided> A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderViewFactory if you want to build views from code rather than layouts.) fun <no name provided>(): Unit buildView It is usually more convenient to use WorkflowViewStub than to call this method directly. fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , container: ViewGroup): View compatible Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . fun compatible(me: Any , you: Any ): Boolean plus operator fun ViewRegistry .plus(binding: ViewFactory <*>): ViewRegistry operator fun ViewRegistry .plus(other: ViewRegistry ): ViewRegistry renderWorkflowIn An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that takes no input (that is, has PropsT set to Unit ). fun <OutputT, RenderingT> renderWorkflowIn(workflow: Workflow < Unit , OutputT, RenderingT>, scope: CoroutineScope, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that requires one input value ( prop ) to run. fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, prop: PropsT, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that requires input ( props ) to run. fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, props: StateFlow<PropsT>, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> toParcelable fun <T : Parcelable> Snapshot .toParcelable(): T? ViewRegistry fun ViewRegistry(vararg bindings: ViewFactory <*>): ViewRegistry Returns a ViewRegistry that merges all the given registries . fun ViewRegistry(vararg registries: ViewRegistry ): ViewRegistry Returns a ViewRegistry that contains no bindings. fun ViewRegistry(): ViewRegistry","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-back-press-handler/","text":"workflow / com.squareup.workflow1.ui / BackPressHandler BackPressHandler \u00b6 @WorkflowUiExperimentalApi typealias BackPressHandler = () -> Unit A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window.","title":" back press handler"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-back-press-handler/#backpresshandler","text":"@WorkflowUiExperimentalApi typealias BackPressHandler = () -> Unit A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window.","title":"BackPressHandler"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named-view-factory/","text":"workflow / com.squareup.workflow1.ui / NamedViewFactory NamedViewFactory \u00b6 @WorkflowUiExperimentalApi object NamedViewFactory : ViewFactory < Named <*>> ViewFactory that allows views to display instances of Named . Delegates to the factory for Named.wrapped .","title":" named view factory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named-view-factory/#namedviewfactory","text":"@WorkflowUiExperimentalApi object NamedViewFactory : ViewFactory < Named <*>> ViewFactory that allows views to display instances of Named . Delegates to the factory for Named.wrapped .","title":"NamedViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-no%20name%20provided-/","text":"workflow / com.squareup.workflow1.ui / <no name provided> <no name provided> \u00b6 @WorkflowUiExperimentalApi fun <no name provided>(): Unit A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderViewFactory if you want to build views from code rather than layouts.) If you\u2019re using AndroidX ViewBinding you likely won\u2019t need to implement this interface at all. For details, see the three overloads of LayoutRunner.bind .","title":" no name provided "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-no%20name%20provided-/#no-name-provided","text":"@WorkflowUiExperimentalApi fun <no name provided>(): Unit A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderViewFactory if you want to build views from code rather than layouts.) If you\u2019re using AndroidX ViewBinding you likely won\u2019t need to implement this interface at all. For details, see the three overloads of LayoutRunner.bind .","title":"&lt;no name provided&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-binding-inflater/","text":"workflow / com.squareup.workflow1.ui / ViewBindingInflater ViewBindingInflater \u00b6 @WorkflowUiExperimentalApi typealias ViewBindingInflater<BindingT> = (LayoutInflater, ViewGroup?, Boolean ) -> BindingT","title":" view binding inflater"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-binding-inflater/#viewbindinginflater","text":"@WorkflowUiExperimentalApi typealias ViewBindingInflater<BindingT> = (LayoutInflater, ViewGroup?, Boolean ) -> BindingT","title":"ViewBindingInflater"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/","text":"workflow / com.squareup.workflow1.ui / ViewRegistry ViewRegistry \u00b6 @WorkflowUiExperimentalApi fun ViewRegistry(vararg bindings: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi fun ViewRegistry(vararg registries: ViewRegistry ): ViewRegistry Returns a ViewRegistry that merges all the given registries . @WorkflowUiExperimentalApi fun ViewRegistry(): ViewRegistry Returns a ViewRegistry that contains no bindings. Exists as a separate overload from the other two functions to disambiguate between them.","title":" view registry"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#viewregistry","text":"@WorkflowUiExperimentalApi fun ViewRegistry(vararg bindings: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi fun ViewRegistry(vararg registries: ViewRegistry ): ViewRegistry Returns a ViewRegistry that merges all the given registries . @WorkflowUiExperimentalApi fun ViewRegistry(): ViewRegistry Returns a ViewRegistry that contains no bindings. Exists as a separate overload from the other two functions to disambiguate between them.","title":"ViewRegistry"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-show-rendering/","text":"workflow / com.squareup.workflow1.ui / ViewShowRendering ViewShowRendering \u00b6 @WorkflowUiExperimentalApi typealias ViewShowRendering<RenderingT> = (@UnsafeVariance RenderingT, ViewEnvironment ) -> Unit Function attached to a view created by ViewFactory , to allow it to respond to View.showRendering .","title":" view show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-show-rendering/#viewshowrendering","text":"@WorkflowUiExperimentalApi typealias ViewShowRendering<RenderingT> = (@UnsafeVariance RenderingT, ViewEnvironment ) -> Unit Function attached to a view created by ViewFactory , to allow it to respond to View.showRendering .","title":"ViewShowRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/build-view/","text":"workflow / com.squareup.workflow1.ui / buildView buildView \u00b6 @WorkflowUiExperimentalApi fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View It is usually more convenient to use WorkflowViewStub than to call this method directly. Creates a View to display initialRendering , which can be updated via calls to View.showRendering . Prefers entries found via ViewRegistry.getFactoryFor . If that returns null, falls back to the factory provided by the rendering\u2019s implementation of AndroidViewRendering.viewFactory , if there is one. Exceptions \u00b6 IllegalArgumentException - if no factory can be find for type RenderingT IllegalStateException - if the matching ViewFactory fails to call View.bindShowRendering when constructing the view @WorkflowUiExperimentalApi fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , container: ViewGroup): View It is usually more convenient to use WorkflowViewStub than to call this method directly. Creates a View to display initialRendering , which can be updated via calls to View.showRendering . Exceptions \u00b6 IllegalArgumentException - if no binding can be find for type RenderingT IllegalStateException - if the matching ViewFactory fails to call View.bindShowRendering when constructing the view","title":"Build view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/build-view/#buildview","text":"@WorkflowUiExperimentalApi fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View It is usually more convenient to use WorkflowViewStub than to call this method directly. Creates a View to display initialRendering , which can be updated via calls to View.showRendering . Prefers entries found via ViewRegistry.getFactoryFor . If that returns null, falls back to the factory provided by the rendering\u2019s implementation of AndroidViewRendering.viewFactory , if there is one.","title":"buildView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/build-view/#exceptions","text":"IllegalArgumentException - if no factory can be find for type RenderingT IllegalStateException - if the matching ViewFactory fails to call View.bindShowRendering when constructing the view @WorkflowUiExperimentalApi fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , container: ViewGroup): View It is usually more convenient to use WorkflowViewStub than to call this method directly. Creates a View to display initialRendering , which can be updated via calls to View.showRendering .","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/build-view/#exceptions_1","text":"IllegalArgumentException - if no binding can be find for type RenderingT IllegalStateException - if the matching ViewFactory fails to call View.bindShowRendering when constructing the view","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/compatible/","text":"workflow / com.squareup.workflow1.ui / compatible compatible \u00b6 @WorkflowUiExperimentalApi fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . A convenient way to take control over the matching behavior of objects that don\u2019t implement Compatible is to wrap them with Named .","title":"Compatible"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/compatible/#compatible","text":"@WorkflowUiExperimentalApi fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . A convenient way to take control over the matching behavior of objects that don\u2019t implement Compatible is to wrap them with Named .","title":"compatible"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/plus/","text":"workflow / com.squareup.workflow1.ui / plus plus \u00b6 @WorkflowUiExperimentalApi operator fun ViewRegistry .plus(binding: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi operator fun ViewRegistry .plus(other: ViewRegistry ): ViewRegistry","title":"Plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/plus/#plus","text":"@WorkflowUiExperimentalApi operator fun ViewRegistry .plus(binding: ViewFactory <*>): ViewRegistry @WorkflowUiExperimentalApi operator fun ViewRegistry .plus(other: ViewRegistry ): ViewRegistry","title":"plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/","text":"workflow / com.squareup.workflow1.ui / renderWorkflowIn renderWorkflowIn \u00b6 @WorkflowUiExperimentalApi fun <OutputT, RenderingT> renderWorkflowIn(workflow: Workflow < Unit , OutputT, RenderingT>, scope: CoroutineScope, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that takes no input (that is, has PropsT set to Unit ). @OptIn(WorkflowUiExperimentalApi::class) class HelloWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloViewModel by viewModels() setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } } class HelloViewModel(savedState: SavedStateHandle) : ViewModel() { @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloWorkflow, scope = this.viewModelScope, savedStateHandle = savedState ) } Parameters \u00b6 workflow - The root workflow to render. scope - The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. savedStateHandle - Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors - An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to- length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput - A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel , for example. Return A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering. @WorkflowUiExperimentalApi fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, prop: PropsT, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that requires one input value ( prop ) to run. @OptIn(WorkflowUiExperimentalApi::class) class HelloNameWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloNameViewModel by viewModels() setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } } class HelloNameViewModel(savedState: SavedStateHandle) : ViewModel() { @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloNameWorkflow, scope = this.viewModelScope, savedStateHandle = savedState, prop = \"Your name here!\" ) } Parameters \u00b6 workflow - The root workflow to render. scope - The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. prop - Specifies the sole PropsT value to use to render the root workflow. To allow updates, use the renderWorkflowIn overload with a props: StateFlow <PropsT> argument instead of this one. savedStateHandle - Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors - An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to- length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput - A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel , for example. Return A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering. @WorkflowUiExperimentalApi fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, props: StateFlow<PropsT>, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that requires input ( props ) to run. For example, for a workflow that uses android.content.Intent as its PropsT type, you could do something like this: @OptIn(WorkflowUiExperimentalApi::class) class HelloIntentsWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloIntentsViewModel by viewModels() model.intents.value = intent setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } override fun onNewIntent(intent: Intent) { super.onNewIntent(intent) val model: HelloIntentsViewModel by viewModels() model.intents.value = intent } } class HelloIntentsViewModel(savedState: SavedStateHandle) : ViewModel() { val intents = MutableStateFlow(Intent()) @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloWorkflow, scope = this.viewModelScope, savedStateHandle = savedState, props = intents ) } Parameters \u00b6 workflow - The root workflow to render. scope - The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. props - Specifies the initial PropsT to use to render the root workflow, and will cause a re-render when new props are emitted. If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. To only pass a single props value, simply create a MutableStateFlow with the value. savedStateHandle - Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors - An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to- length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput - A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel , for example. Return A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering.","title":"Render workflow in"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#renderworkflowin","text":"@WorkflowUiExperimentalApi fun <OutputT, RenderingT> renderWorkflowIn(workflow: Workflow < Unit , OutputT, RenderingT>, scope: CoroutineScope, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that takes no input (that is, has PropsT set to Unit ). @OptIn(WorkflowUiExperimentalApi::class) class HelloWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloViewModel by viewModels() setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } } class HelloViewModel(savedState: SavedStateHandle) : ViewModel() { @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloWorkflow, scope = this.viewModelScope, savedStateHandle = savedState ) }","title":"renderWorkflowIn"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#parameters","text":"workflow - The root workflow to render. scope - The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. savedStateHandle - Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors - An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to- length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput - A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel , for example. Return A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering. @WorkflowUiExperimentalApi fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, prop: PropsT, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that requires one input value ( prop ) to run. @OptIn(WorkflowUiExperimentalApi::class) class HelloNameWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloNameViewModel by viewModels() setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } } class HelloNameViewModel(savedState: SavedStateHandle) : ViewModel() { @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloNameWorkflow, scope = this.viewModelScope, savedStateHandle = savedState, prop = \"Your name here!\" ) }","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#parameters_1","text":"workflow - The root workflow to render. scope - The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. prop - Specifies the sole PropsT value to use to render the root workflow. To allow updates, use the renderWorkflowIn overload with a props: StateFlow <PropsT> argument instead of this one. savedStateHandle - Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors - An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to- length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput - A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel , for example. Return A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering. @WorkflowUiExperimentalApi fun <PropsT, OutputT, RenderingT> renderWorkflowIn(workflow: Workflow <PropsT, OutputT, RenderingT>, scope: CoroutineScope, props: StateFlow<PropsT>, savedStateHandle: SavedStateHandle? = null, interceptors: List < WorkflowInterceptor > = emptyList(), onOutput: suspend (OutputT) -> Unit = {}): StateFlow<RenderingT> An Android ViewModel -friendly wrapper for com.squareup.workflow1.renderWorkflowIn , for use with a workflow that requires input ( props ) to run. For example, for a workflow that uses android.content.Intent as its PropsT type, you could do something like this: @OptIn(WorkflowUiExperimentalApi::class) class HelloIntentsWorkflowActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val model: HelloIntentsViewModel by viewModels() model.intents.value = intent setContentView( WorkflowLayout(this).apply { start(model.renderings) } ) } override fun onNewIntent(intent: Intent) { super.onNewIntent(intent) val model: HelloIntentsViewModel by viewModels() model.intents.value = intent } } class HelloIntentsViewModel(savedState: SavedStateHandle) : ViewModel() { val intents = MutableStateFlow(Intent()) @OptIn(WorkflowUiExperimentalApi::class) val renderings: StateFlow<HelloRendering> = renderWorkflowIn( workflow = HelloWorkflow, scope = this.viewModelScope, savedStateHandle = savedState, props = intents ) }","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/render-workflow-in/#parameters_2","text":"workflow - The root workflow to render. scope - The CoroutineScope in which to launch the workflow runtime, typically from the androidx ViewModel.viewModelScope extension. Any exceptions thrown in any workflows, after the initial render pass, will be handled by this scope, and cancelling this scope will cancel the workflow runtime and any running workers. Note that any dispatcher in this scope will not be used to execute the very first render pass. props - Specifies the initial PropsT to use to render the root workflow, and will cause a re-render when new props are emitted. If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. To only pass a single props value, simply create a MutableStateFlow with the value. savedStateHandle - Used to restore workflow state in a new process. Typically this is the savedState: SavedStateHandle constructor parameter of an androidx ViewModel . interceptors - An optional list of WorkflowInterceptor s that will wrap every workflow rendered by the runtime. Interceptors will be invoked in 0-to- length order: the interceptor at index 0 will process the workflow first, then the interceptor at index 1, etc. onOutput - A function that will be called whenever the root workflow emits an OutputT . This is a suspend function, and is invoked synchronously within the runtime: if it suspends, the workflow runtime will effectively be paused until it returns. This means that it will propagate backpressure if used to forward outputs to a Flow or Channel , for example. Return A StateFlow of RenderingT s that will emit any time the root workflow creates a new rendering.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/to-parcelable/","text":"workflow / com.squareup.workflow1.ui / toParcelable toParcelable \u00b6 fun <reified T : Parcelable> Snapshot .toParcelable(): T? Return a Parcelable previously wrapped with toSnapshot , or null if the receiver is empty.","title":"To parcelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/to-parcelable/#toparcelable","text":"fun <reified T : Parcelable> Snapshot .toParcelable(): T? Return a Parcelable previously wrapped with toSnapshot , or null if the receiver is empty.","title":"toParcelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/","text":"workflow / com.squareup.workflow1.ui / AndroidViewRendering AndroidViewRendering \u00b6 @WorkflowUiExperimentalApi interface AndroidViewRendering<V : AndroidViewRendering <V>> Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. You will rarely, if ever, write a ViewFactory yourself. Instead use LayoutRunner.bind to work with XML layout resources, or BuilderViewFactory to create views from code. See LayoutRunner for more details. @OptIn(WorkflowUiExperimentalApi::class) data class HelloView( val message: String, val onClick: () -> Unit ) : AndroidViewRendering<HelloView> { override val viewFactory: ViewFactory<HelloView> = LayoutRunner.bind(HelloGoodbyeLayoutBinding::inflate) { r, _ -> helloMessage.text = r.message helloMessage.setOnClickListener { r.onClick() } } } This is the simplest way to bridge the gap between your workflows and the UI, but using it requires your workflows code to reside in Android modules, instead of pure Kotlin. If this is a problem, or you need more flexibility for any other reason, you can use ViewRegistry to bind your renderings to ViewFactory implementations at runtime. Properties \u00b6 Name Summary viewFactory Used to build instances of android.view.View as needed to display renderings of this type. abstract val viewFactory: ViewFactory <V>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/#androidviewrendering","text":"@WorkflowUiExperimentalApi interface AndroidViewRendering<V : AndroidViewRendering <V>> Interface implemented by a rendering class to allow it to drive an Android UI via an appropriate ViewFactory implementation. You will rarely, if ever, write a ViewFactory yourself. Instead use LayoutRunner.bind to work with XML layout resources, or BuilderViewFactory to create views from code. See LayoutRunner for more details. @OptIn(WorkflowUiExperimentalApi::class) data class HelloView( val message: String, val onClick: () -> Unit ) : AndroidViewRendering<HelloView> { override val viewFactory: ViewFactory<HelloView> = LayoutRunner.bind(HelloGoodbyeLayoutBinding::inflate) { r, _ -> helloMessage.text = r.message helloMessage.setOnClickListener { r.onClick() } } } This is the simplest way to bridge the gap between your workflows and the UI, but using it requires your workflows code to reside in Android modules, instead of pure Kotlin. If this is a problem, or you need more flexibility for any other reason, you can use ViewRegistry to bind your renderings to ViewFactory implementations at runtime.","title":"AndroidViewRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/#properties","text":"Name Summary viewFactory Used to build instances of android.view.View as needed to display renderings of this type. abstract val viewFactory: ViewFactory <V>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/view-factory/","text":"workflow / com.squareup.workflow1.ui / AndroidViewRendering / viewFactory viewFactory \u00b6 abstract val viewFactory: ViewFactory <V> Used to build instances of android.view.View as needed to display renderings of this type.","title":"View factory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-android-view-rendering/view-factory/#viewfactory","text":"abstract val viewFactory: ViewFactory <V> Used to build instances of android.view.View as needed to display renderings of this type.","title":"viewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/","text":"workflow / com.squareup.workflow1.ui / BuilderViewFactory BuilderViewFactory \u00b6 @WorkflowUiExperimentalApi class BuilderViewFactory<RenderingT : Any > : ViewFactory <RenderingT> A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) data class MyView(): AndroidViewRendering<MyView> { val viewFactory = BuilderBinding( type = MyScreen::class, viewConstructor = { initialRendering, _, context, _ -> MyFrame(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } private class MyFrame(context: Context) : FrameLayout(context, attributeSet) { private fun update(rendering: MyView) { ... } } Constructors \u00b6 Name Summary <init> A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) BuilderViewFactory(type: KClass <RenderingT>, viewConstructor: (initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?) -> View) Properties \u00b6 Name Summary type val type: KClass <RenderingT> Functions \u00b6 Name Summary buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . fun buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?): View","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/#builderviewfactory","text":"@WorkflowUiExperimentalApi class BuilderViewFactory<RenderingT : Any > : ViewFactory <RenderingT> A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) data class MyView(): AndroidViewRendering<MyView> { val viewFactory = BuilderBinding( type = MyScreen::class, viewConstructor = { initialRendering, _, context, _ -> MyFrame(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } private class MyFrame(context: Context) : FrameLayout(context, attributeSet) { private fun update(rendering: MyView) { ... } }","title":"BuilderViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/#constructors","text":"Name Summary <init> A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) BuilderViewFactory(type: KClass <RenderingT>, viewConstructor: (initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?) -> View)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/#properties","text":"Name Summary type val type: KClass <RenderingT>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/#functions","text":"Name Summary buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . fun buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?): View","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/-init-/","text":"workflow / com.squareup.workflow1.ui / BuilderViewFactory / <init> <init> \u00b6 BuilderViewFactory(type: KClass <RenderingT>, viewConstructor: (initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?) -> View) A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) data class MyView(): AndroidViewRendering<MyView> { val viewFactory = BuilderBinding( type = MyScreen::class, viewConstructor = { initialRendering, _, context, _ -> MyFrame(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } private class MyFrame(context: Context) : FrameLayout(context, attributeSet) { private fun update(rendering: MyView) { ... } }","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/-init-/#init","text":"BuilderViewFactory(type: KClass <RenderingT>, viewConstructor: (initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?) -> View) A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) data class MyView(): AndroidViewRendering<MyView> { val viewFactory = BuilderBinding( type = MyScreen::class, viewConstructor = { initialRendering, _, context, _ -> MyFrame(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } private class MyFrame(context: Context) : FrameLayout(context, attributeSet) { private fun update(rendering: MyView) { ... } }","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/build-view/","text":"workflow / com.squareup.workflow1.ui / BuilderViewFactory / buildView buildView \u00b6 fun buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/build-view/#buildview","text":"fun buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/type/","text":"workflow / com.squareup.workflow1.ui / BuilderViewFactory / type type \u00b6 val type: KClass <RenderingT>","title":"Type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-builder-view-factory/type/#type","text":"val type: KClass <RenderingT>","title":"type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/","text":"workflow / com.squareup.workflow1.ui / Compatible Compatible \u00b6 @WorkflowUiExperimentalApi interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. Renderings that don\u2019t implement this interface directly can be distinguished by wrapping them with Named . Properties \u00b6 Name Summary compatibilityKey Instances of the same type are compatible iff they have the same compatibilityKey . abstract val compatibilityKey: String Inheritors \u00b6 Name Summary Named Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. data class Named<W : Any > : Compatible","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/#compatible","text":"@WorkflowUiExperimentalApi interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. Renderings that don\u2019t implement this interface directly can be distinguished by wrapping them with Named .","title":"Compatible"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/#properties","text":"Name Summary compatibilityKey Instances of the same type are compatible iff they have the same compatibilityKey . abstract val compatibilityKey: String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/#inheritors","text":"Name Summary Named Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. data class Named<W : Any > : Compatible","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/compatibility-key/","text":"workflow / com.squareup.workflow1.ui / Compatible / compatibilityKey compatibilityKey \u00b6 abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Compatibility key"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-compatible/compatibility-key/#compatibilitykey","text":"abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"compatibilityKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/","text":"workflow / com.squareup.workflow1.ui / DecorativeViewFactory DecorativeViewFactory \u00b6 @WorkflowUiExperimentalApi class DecorativeViewFactory<OuterT : Any , InnerT : Any > : ViewFactory <OuterT> A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. Examples \u00b6 To make one rendering type an \u201calias\u201d for another \u2013 that is, to use the same ViewFactory to display it \u2013 provide nothing but a single-arg mapping function: class OriginalRendering(val data: String) class AliasRendering(val similarData: String) object DecorativeViewFactory : ViewFactory<AliasRendering> by DecorativeViewFactory( type = AliasRendering::class, map = { alias -> OriginalRendering(alias.similarData) } ) To make a decorator type that adds information to the ViewEnvironment : class NeutronFlowPolarity(val reversed) { companion object : ViewEnvironmentKey<NeutronFlowPolarity>(NeutronFlowPolarity::class) { override val default: NeutronFlowPolarity = NeutronFlowPolarity(reversed = false) } } class NeutronFlowPolarityOverride<W>( val wrapped: W, val polarity: NeutronFlowPolarity ) object NeutronFlowPolarityViewFactory : ViewFactory<NeutronFlowPolarityOverride<*>> by DecorativeViewFactory( type = NeutronFlowPolarityOverride::class, map = { override, env -> Pair(override.wrapped, env + (NeutronFlowPolarity to override.polarity)) } ) To make a decorator type that customizes View initialization: class WithTutorialTips<W>(val wrapped: W) object WithTutorialTipsViewFactory : ViewFactory<WithTutorialTips<*>> by DecorativeViewFactory( type = WithTutorialTips::class, map = { withTips -> withTips.wrapped }, initView = { _, view -> TutorialTipRunner.run(view) } ) To make a decorator type that adds pre- or post-processing to View updates: class BackButtonScreen<W : Any>( val wrapped: W, val override: Boolean = false, val onBackPressed: (() -> Unit)? = null ) object BackButtonViewFactory : ViewFactory<BackButtonScreen<*>> by DecorativeViewFactory( type = BackButtonScreen::class, map = { outer -> outer.wrapped }, doShowRendering = { view, innerShowRendering, outerRendering, viewEnvironment -> if (!outerRendering.override) { // Place our handler before invoking innerShowRendering, so that // its later calls to view.backPressedHandler will take precedence // over ours. view.backPressedHandler = outerRendering.onBackPressed } innerShowRendering.invoke(outerRendering.wrapped, viewEnvironment) if (outerRendering.override) { // Place our handler after invoking innerShowRendering, so that ours wins. view.backPressedHandler = outerRendering.onBackPressed } }) Parameters \u00b6 map - called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed. initView - called after the ViewFactory for InnerT has created a View . Defaults to a no-op. Note that the ViewEnvironment is accessible via View.environment . doShowRendering - called to apply the ViewShowRendering function for InnerT , allowing pre- and post-processing. Default implementation simply applies map and makes the function call. Constructors \u00b6 Name Summary <init> Convenience constructor for cases requiring no changes to the ViewEnvironment . DecorativeViewFactory(type: KClass <OuterT>, map: (OuterT) -> InnerT, initView: (OuterT, View) -> Unit = { _, _ -> }, doShowRendering: (view: View, ViewShowRendering <InnerT>, outerRendering: OuterT, env: ViewEnvironment ) -> Unit ` = { _, innerShowRendering, outerRendering, viewEnvironment -> innerShowRendering(map(outerRendering), viewEnvironment) }) <br>A [ViewFactory](../-view-factory/index.md) for [OuterT](index.md#OuterT) that delegates view construction responsibilities to the factory registered for [InnerT](index.md#InnerT). Makes it convenient for [OuterT](index.md#OuterT) to wrap instances of [InnerT](index.md#InnerT) to add information or behavior, without requiring wasteful wrapping in the view system. DecorativeViewFactory(type: [ KClass ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html) , map: (OuterT, [ ViewEnvironment ](../-view-environment/index.md) ) -> [ Pair ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-pair/index.html) [ ViewEnvironment ](../-view-environment/index.md) >, initView: (OuterT, View) -> [ Unit ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) = { _, _ -> }, doShowRendering: (view: View, [ ViewShowRendering ](../-view-show-rendering.md) , outerRendering: OuterT, env: [ ViewEnvironment ](../-view-environment/index.md) ) -> [ Unit ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) = { _, innerShowRendering, outerRendering, viewEnvironment -> val (innerRendering, processedEnv) = map(outerRendering, viewEnvironment) innerShowRendering(innerRendering, processedEnv) })` Properties \u00b6 Name Summary type val type: KClass <OuterT> Functions \u00b6 Name Summary buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . fun buildView(initialRendering: OuterT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?): View","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#decorativeviewfactory","text":"@WorkflowUiExperimentalApi class DecorativeViewFactory<OuterT : Any , InnerT : Any > : ViewFactory <OuterT> A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system.","title":"DecorativeViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#examples","text":"To make one rendering type an \u201calias\u201d for another \u2013 that is, to use the same ViewFactory to display it \u2013 provide nothing but a single-arg mapping function: class OriginalRendering(val data: String) class AliasRendering(val similarData: String) object DecorativeViewFactory : ViewFactory<AliasRendering> by DecorativeViewFactory( type = AliasRendering::class, map = { alias -> OriginalRendering(alias.similarData) } ) To make a decorator type that adds information to the ViewEnvironment : class NeutronFlowPolarity(val reversed) { companion object : ViewEnvironmentKey<NeutronFlowPolarity>(NeutronFlowPolarity::class) { override val default: NeutronFlowPolarity = NeutronFlowPolarity(reversed = false) } } class NeutronFlowPolarityOverride<W>( val wrapped: W, val polarity: NeutronFlowPolarity ) object NeutronFlowPolarityViewFactory : ViewFactory<NeutronFlowPolarityOverride<*>> by DecorativeViewFactory( type = NeutronFlowPolarityOverride::class, map = { override, env -> Pair(override.wrapped, env + (NeutronFlowPolarity to override.polarity)) } ) To make a decorator type that customizes View initialization: class WithTutorialTips<W>(val wrapped: W) object WithTutorialTipsViewFactory : ViewFactory<WithTutorialTips<*>> by DecorativeViewFactory( type = WithTutorialTips::class, map = { withTips -> withTips.wrapped }, initView = { _, view -> TutorialTipRunner.run(view) } ) To make a decorator type that adds pre- or post-processing to View updates: class BackButtonScreen<W : Any>( val wrapped: W, val override: Boolean = false, val onBackPressed: (() -> Unit)? = null ) object BackButtonViewFactory : ViewFactory<BackButtonScreen<*>> by DecorativeViewFactory( type = BackButtonScreen::class, map = { outer -> outer.wrapped }, doShowRendering = { view, innerShowRendering, outerRendering, viewEnvironment -> if (!outerRendering.override) { // Place our handler before invoking innerShowRendering, so that // its later calls to view.backPressedHandler will take precedence // over ours. view.backPressedHandler = outerRendering.onBackPressed } innerShowRendering.invoke(outerRendering.wrapped, viewEnvironment) if (outerRendering.override) { // Place our handler after invoking innerShowRendering, so that ours wins. view.backPressedHandler = outerRendering.onBackPressed } })","title":"Examples"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#parameters","text":"map - called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed. initView - called after the ViewFactory for InnerT has created a View . Defaults to a no-op. Note that the ViewEnvironment is accessible via View.environment . doShowRendering - called to apply the ViewShowRendering function for InnerT , allowing pre- and post-processing. Default implementation simply applies map and makes the function call.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#constructors","text":"Name Summary <init> Convenience constructor for cases requiring no changes to the ViewEnvironment . DecorativeViewFactory(type: KClass <OuterT>, map: (OuterT) -> InnerT, initView: (OuterT, View) -> Unit = { _, _ -> }, doShowRendering: (view: View, ViewShowRendering <InnerT>, outerRendering: OuterT, env: ViewEnvironment ) -> Unit ` = { _, innerShowRendering, outerRendering, viewEnvironment -> innerShowRendering(map(outerRendering), viewEnvironment) }) <br>A [ViewFactory](../-view-factory/index.md) for [OuterT](index.md#OuterT) that delegates view construction responsibilities to the factory registered for [InnerT](index.md#InnerT). Makes it convenient for [OuterT](index.md#OuterT) to wrap instances of [InnerT](index.md#InnerT) to add information or behavior, without requiring wasteful wrapping in the view system. DecorativeViewFactory(type: [ KClass ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html) , map: (OuterT, [ ViewEnvironment ](../-view-environment/index.md) ) -> [ Pair ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-pair/index.html) [ ViewEnvironment ](../-view-environment/index.md) >, initView: (OuterT, View) -> [ Unit ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) = { _, _ -> }, doShowRendering: (view: View, [ ViewShowRendering ](../-view-show-rendering.md) , outerRendering: OuterT, env: [ ViewEnvironment ](../-view-environment/index.md) ) -> [ Unit ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) = { _, innerShowRendering, outerRendering, viewEnvironment -> val (innerRendering, processedEnv) = map(outerRendering, viewEnvironment) innerShowRendering(innerRendering, processedEnv) })`","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#properties","text":"Name Summary type val type: KClass <OuterT>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/#functions","text":"Name Summary buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . fun buildView(initialRendering: OuterT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?): View","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/-init-/","text":"workflow / com.squareup.workflow1.ui / DecorativeViewFactory / <init> <init> \u00b6 DecorativeViewFactory(type: KClass <OuterT>, map: (OuterT) -> InnerT, initView: (OuterT, View) -> Unit = { _, _ -> }, doShowRendering: (view: View, ViewShowRendering <InnerT>, outerRendering: OuterT, env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> innerShowRendering(map(outerRendering), viewEnvironment) }) Convenience constructor for cases requiring no changes to the ViewEnvironment . DecorativeViewFactory(type: KClass <OuterT>, map: (OuterT, ViewEnvironment ) -> Pair <InnerT, ViewEnvironment >, initView: (OuterT, View) -> Unit = { _, _ -> }, doShowRendering: (view: View, ViewShowRendering <InnerT>, outerRendering: OuterT, env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> val (innerRendering, processedEnv) = map(outerRendering, viewEnvironment) innerShowRendering(innerRendering, processedEnv) }) A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. Examples \u00b6 To make one rendering type an \u201calias\u201d for another \u2013 that is, to use the same ViewFactory to display it \u2013 provide nothing but a single-arg mapping function: class OriginalRendering(val data: String) class AliasRendering(val similarData: String) object DecorativeViewFactory : ViewFactory<AliasRendering> by DecorativeViewFactory( type = AliasRendering::class, map = { alias -> OriginalRendering(alias.similarData) } ) To make a decorator type that adds information to the ViewEnvironment : class NeutronFlowPolarity(val reversed) { companion object : ViewEnvironmentKey<NeutronFlowPolarity>(NeutronFlowPolarity::class) { override val default: NeutronFlowPolarity = NeutronFlowPolarity(reversed = false) } } class NeutronFlowPolarityOverride<W>( val wrapped: W, val polarity: NeutronFlowPolarity ) object NeutronFlowPolarityViewFactory : ViewFactory<NeutronFlowPolarityOverride<*>> by DecorativeViewFactory( type = NeutronFlowPolarityOverride::class, map = { override, env -> Pair(override.wrapped, env + (NeutronFlowPolarity to override.polarity)) } ) To make a decorator type that customizes View initialization: class WithTutorialTips<W>(val wrapped: W) object WithTutorialTipsViewFactory : ViewFactory<WithTutorialTips<*>> by DecorativeViewFactory( type = WithTutorialTips::class, map = { withTips -> withTips.wrapped }, initView = { _, view -> TutorialTipRunner.run(view) } ) To make a decorator type that adds pre- or post-processing to View updates: class BackButtonScreen<W : Any>( val wrapped: W, val override: Boolean = false, val onBackPressed: (() -> Unit)? = null ) object BackButtonViewFactory : ViewFactory<BackButtonScreen<*>> by DecorativeViewFactory( type = BackButtonScreen::class, map = { outer -> outer.wrapped }, doShowRendering = { view, innerShowRendering, outerRendering, viewEnvironment -> if (!outerRendering.override) { // Place our handler before invoking innerShowRendering, so that // its later calls to view.backPressedHandler will take precedence // over ours. view.backPressedHandler = outerRendering.onBackPressed } innerShowRendering.invoke(outerRendering.wrapped, viewEnvironment) if (outerRendering.override) { // Place our handler after invoking innerShowRendering, so that ours wins. view.backPressedHandler = outerRendering.onBackPressed } }) Parameters \u00b6 map - called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed. initView - called after the ViewFactory for InnerT has created a View . Defaults to a no-op. Note that the ViewEnvironment is accessible via View.environment . doShowRendering - called to apply the ViewShowRendering function for InnerT , allowing pre- and post-processing. Default implementation simply applies map and makes the function call.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/-init-/#init","text":"DecorativeViewFactory(type: KClass <OuterT>, map: (OuterT) -> InnerT, initView: (OuterT, View) -> Unit = { _, _ -> }, doShowRendering: (view: View, ViewShowRendering <InnerT>, outerRendering: OuterT, env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> innerShowRendering(map(outerRendering), viewEnvironment) }) Convenience constructor for cases requiring no changes to the ViewEnvironment . DecorativeViewFactory(type: KClass <OuterT>, map: (OuterT, ViewEnvironment ) -> Pair <InnerT, ViewEnvironment >, initView: (OuterT, View) -> Unit = { _, _ -> }, doShowRendering: (view: View, ViewShowRendering <InnerT>, outerRendering: OuterT, env: ViewEnvironment ) -> Unit = { _, innerShowRendering, outerRendering, viewEnvironment -> val (innerRendering, processedEnv) = map(outerRendering, viewEnvironment) innerShowRendering(innerRendering, processedEnv) }) A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/-init-/#examples","text":"To make one rendering type an \u201calias\u201d for another \u2013 that is, to use the same ViewFactory to display it \u2013 provide nothing but a single-arg mapping function: class OriginalRendering(val data: String) class AliasRendering(val similarData: String) object DecorativeViewFactory : ViewFactory<AliasRendering> by DecorativeViewFactory( type = AliasRendering::class, map = { alias -> OriginalRendering(alias.similarData) } ) To make a decorator type that adds information to the ViewEnvironment : class NeutronFlowPolarity(val reversed) { companion object : ViewEnvironmentKey<NeutronFlowPolarity>(NeutronFlowPolarity::class) { override val default: NeutronFlowPolarity = NeutronFlowPolarity(reversed = false) } } class NeutronFlowPolarityOverride<W>( val wrapped: W, val polarity: NeutronFlowPolarity ) object NeutronFlowPolarityViewFactory : ViewFactory<NeutronFlowPolarityOverride<*>> by DecorativeViewFactory( type = NeutronFlowPolarityOverride::class, map = { override, env -> Pair(override.wrapped, env + (NeutronFlowPolarity to override.polarity)) } ) To make a decorator type that customizes View initialization: class WithTutorialTips<W>(val wrapped: W) object WithTutorialTipsViewFactory : ViewFactory<WithTutorialTips<*>> by DecorativeViewFactory( type = WithTutorialTips::class, map = { withTips -> withTips.wrapped }, initView = { _, view -> TutorialTipRunner.run(view) } ) To make a decorator type that adds pre- or post-processing to View updates: class BackButtonScreen<W : Any>( val wrapped: W, val override: Boolean = false, val onBackPressed: (() -> Unit)? = null ) object BackButtonViewFactory : ViewFactory<BackButtonScreen<*>> by DecorativeViewFactory( type = BackButtonScreen::class, map = { outer -> outer.wrapped }, doShowRendering = { view, innerShowRendering, outerRendering, viewEnvironment -> if (!outerRendering.override) { // Place our handler before invoking innerShowRendering, so that // its later calls to view.backPressedHandler will take precedence // over ours. view.backPressedHandler = outerRendering.onBackPressed } innerShowRendering.invoke(outerRendering.wrapped, viewEnvironment) if (outerRendering.override) { // Place our handler after invoking innerShowRendering, so that ours wins. view.backPressedHandler = outerRendering.onBackPressed } })","title":"Examples"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/-init-/#parameters","text":"map - called to convert instances of OuterT to InnerT , and to allow ViewEnvironment to be transformed. initView - called after the ViewFactory for InnerT has created a View . Defaults to a no-op. Note that the ViewEnvironment is accessible via View.environment . doShowRendering - called to apply the ViewShowRendering function for InnerT , allowing pre- and post-processing. Default implementation simply applies map and makes the function call.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/build-view/","text":"workflow / com.squareup.workflow1.ui / DecorativeViewFactory / buildView buildView \u00b6 fun buildView(initialRendering: OuterT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/build-view/#buildview","text":"fun buildView(initialRendering: OuterT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/type/","text":"workflow / com.squareup.workflow1.ui / DecorativeViewFactory / type type \u00b6 val type: KClass <OuterT>","title":"Type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-decorative-view-factory/type/#type","text":"val type: KClass <OuterT>","title":"type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/","text":"workflow / com.squareup.workflow1.ui / LayoutRunner LayoutRunner \u00b6 interface LayoutRunner<RenderingT : Any > Functions \u00b6 Name Summary showRendering abstract fun showRendering(rendering: RenderingT, viewEnvironment: ViewEnvironment ): Unit Companion Object Functions \u00b6 Name Summary bind Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a lambda . fun <BindingT : ViewBinding, RenderingT : Any > bind(bindingInflater: ViewBindingInflater <BindingT>, showRendering: BindingT.(RenderingT, ViewEnvironment ) -> Unit ): ViewFactory <RenderingT> Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a LayoutRunner created by constructor . Handy if you need to perform some set up before showRendering is called. fun <BindingT : ViewBinding, RenderingT : Any > bind(bindingInflater: ViewBindingInflater <BindingT>, constructor: (BindingT) -> LayoutRunner <RenderingT>): ViewFactory <RenderingT> Creates a ViewFactory that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . Avoids any use of AndroidX ViewBinding . fun <RenderingT : Any > bind(layoutId: Int , constructor: (View) -> LayoutRunner <RenderingT>): ViewFactory <RenderingT> bindNoRunner Creates a ViewFactory that inflates layoutId to \u201cshow\u201d renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views, e.g. when prototyping. fun <RenderingT : Any > bindNoRunner(layoutId: Int ): ViewFactory <RenderingT>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/#layoutrunner","text":"interface LayoutRunner<RenderingT : Any >","title":"LayoutRunner"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/#functions","text":"Name Summary showRendering abstract fun showRendering(rendering: RenderingT, viewEnvironment: ViewEnvironment ): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/#companion-object-functions","text":"Name Summary bind Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a lambda . fun <BindingT : ViewBinding, RenderingT : Any > bind(bindingInflater: ViewBindingInflater <BindingT>, showRendering: BindingT.(RenderingT, ViewEnvironment ) -> Unit ): ViewFactory <RenderingT> Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a LayoutRunner created by constructor . Handy if you need to perform some set up before showRendering is called. fun <BindingT : ViewBinding, RenderingT : Any > bind(bindingInflater: ViewBindingInflater <BindingT>, constructor: (BindingT) -> LayoutRunner <RenderingT>): ViewFactory <RenderingT> Creates a ViewFactory that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . Avoids any use of AndroidX ViewBinding . fun <RenderingT : Any > bind(layoutId: Int , constructor: (View) -> LayoutRunner <RenderingT>): ViewFactory <RenderingT> bindNoRunner Creates a ViewFactory that inflates layoutId to \u201cshow\u201d renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views, e.g. when prototyping. fun <RenderingT : Any > bindNoRunner(layoutId: Int ): ViewFactory <RenderingT>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/bind-no-runner/","text":"workflow / com.squareup.workflow1.ui / LayoutRunner / bindNoRunner bindNoRunner \u00b6 fun <reified RenderingT : Any > bindNoRunner(@LayoutRes layoutId: Int ): ViewFactory <RenderingT> Creates a ViewFactory that inflates layoutId to \u201cshow\u201d renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views, e.g. when prototyping.","title":"Bind no runner"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/bind-no-runner/#bindnorunner","text":"fun <reified RenderingT : Any > bindNoRunner(@LayoutRes layoutId: Int ): ViewFactory <RenderingT> Creates a ViewFactory that inflates layoutId to \u201cshow\u201d renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views, e.g. when prototyping.","title":"bindNoRunner"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/bind/","text":"workflow / com.squareup.workflow1.ui / LayoutRunner / bind bind \u00b6 inline fun <BindingT : ViewBinding, reified RenderingT : Any > bind(noinline bindingInflater: ViewBindingInflater <BindingT>, crossinline showRendering: BindingT.(RenderingT, ViewEnvironment ) -> Unit ): ViewFactory <RenderingT> Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a lambda . val HelloBinding: ViewFactory<Rendering> = LayoutRunner.bind(HelloGoodbyeLayoutBinding::inflate) { rendering, viewEnvironment -> helloMessage.text = rendering.message helloMessage.setOnClickListener { rendering.onClick(Unit) } } If you need to initialize your view before showRendering is called, implement LayoutRunner and create a binding using the bind variant that accepts a (ViewBinding) -> LayoutRunner function, below. inline fun <BindingT : ViewBinding, reified RenderingT : Any > bind(noinline bindingInflater: ViewBindingInflater <BindingT>, noinline constructor: (BindingT) -> LayoutRunner <RenderingT>): ViewFactory <RenderingT> Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a LayoutRunner created by constructor . Handy if you need to perform some set up before showRendering is called. class HelloLayoutRunner( private val binding: HelloGoodbyeLayoutBinding ) : LayoutRunner { override fun showRendering(rendering: Rendering) { binding.messageView.text = rendering.message binding.messageView.setOnClickListener { rendering.onClick(Unit) } } companion object : ViewFactory<Rendering> by bind( HelloGoodbyeLayoutBinding::inflate, ::HelloLayoutRunner ) } If the view doesn\u2019t need to be initialized before showRendering is called, use the variant above which just takes a lambda. inline fun <reified RenderingT : Any > bind(@LayoutRes layoutId: Int , noinline constructor: (View) -> LayoutRunner <RenderingT>): ViewFactory <RenderingT> Creates a ViewFactory that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . Avoids any use of AndroidX ViewBinding .","title":"Bind"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/bind/#bind","text":"inline fun <BindingT : ViewBinding, reified RenderingT : Any > bind(noinline bindingInflater: ViewBindingInflater <BindingT>, crossinline showRendering: BindingT.(RenderingT, ViewEnvironment ) -> Unit ): ViewFactory <RenderingT> Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a lambda . val HelloBinding: ViewFactory<Rendering> = LayoutRunner.bind(HelloGoodbyeLayoutBinding::inflate) { rendering, viewEnvironment -> helloMessage.text = rendering.message helloMessage.setOnClickListener { rendering.onClick(Unit) } } If you need to initialize your view before showRendering is called, implement LayoutRunner and create a binding using the bind variant that accepts a (ViewBinding) -> LayoutRunner function, below. inline fun <BindingT : ViewBinding, reified RenderingT : Any > bind(noinline bindingInflater: ViewBindingInflater <BindingT>, noinline constructor: (BindingT) -> LayoutRunner <RenderingT>): ViewFactory <RenderingT> Creates a ViewFactory that inflates a ViewBinding ( BindingT ) to show renderings of type RenderingT , using a LayoutRunner created by constructor . Handy if you need to perform some set up before showRendering is called. class HelloLayoutRunner( private val binding: HelloGoodbyeLayoutBinding ) : LayoutRunner { override fun showRendering(rendering: Rendering) { binding.messageView.text = rendering.message binding.messageView.setOnClickListener { rendering.onClick(Unit) } } companion object : ViewFactory<Rendering> by bind( HelloGoodbyeLayoutBinding::inflate, ::HelloLayoutRunner ) } If the view doesn\u2019t need to be initialized before showRendering is called, use the variant above which just takes a lambda. inline fun <reified RenderingT : Any > bind(@LayoutRes layoutId: Int , noinline constructor: (View) -> LayoutRunner <RenderingT>): ViewFactory <RenderingT> Creates a ViewFactory that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . Avoids any use of AndroidX ViewBinding .","title":"bind"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/show-rendering/","text":"workflow / com.squareup.workflow1.ui / LayoutRunner / showRendering showRendering \u00b6 abstract fun showRendering(rendering: RenderingT, viewEnvironment: ViewEnvironment ): Unit","title":"Show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-layout-runner/show-rendering/#showrendering","text":"abstract fun showRendering(rendering: RenderingT, viewEnvironment: ViewEnvironment ): Unit","title":"showRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/","text":"workflow / com.squareup.workflow1.ui / Named Named \u00b6 @WorkflowUiExperimentalApi data class Named<W : Any > : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Constructors \u00b6 Name Summary <init> Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Named(wrapped: W, name: String ) Properties \u00b6 Name Summary compatibilityKey Instances of the same type are compatible iff they have the same compatibilityKey . val compatibilityKey: String name val name: String wrapped val wrapped: W Functions \u00b6 Name Summary toString fun toString(): String Companion Object Functions \u00b6 Name Summary keyFor Calculates the Named.compatibilityKey for a given value and name . fun keyFor(value: Any , name: String = \"\"): String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#named","text":"@WorkflowUiExperimentalApi data class Named<W : Any > : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Named"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#constructors","text":"Name Summary <init> Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Named(wrapped: W, name: String )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#properties","text":"Name Summary compatibilityKey Instances of the same type are compatible iff they have the same compatibilityKey . val compatibilityKey: String name val name: String wrapped val wrapped: W","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/#companion-object-functions","text":"Name Summary keyFor Calculates the Named.compatibilityKey for a given value and name . fun keyFor(value: Any , name: String = \"\"): String","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/-init-/","text":"workflow / com.squareup.workflow1.ui / Named / <init> <init> \u00b6 Named(wrapped: W, name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/-init-/#init","text":"Named(wrapped: W, name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/compatibility-key/","text":"workflow / com.squareup.workflow1.ui / Named / compatibilityKey compatibilityKey \u00b6 val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Compatibility key"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/compatibility-key/#compatibilitykey","text":"val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"compatibilityKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/key-for/","text":"workflow / com.squareup.workflow1.ui / Named / keyFor keyFor \u00b6 fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"Key for"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/key-for/#keyfor","text":"fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"keyFor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/name/","text":"workflow / com.squareup.workflow1.ui / Named / name name \u00b6 val name: String","title":"Name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/to-string/","text":"workflow / com.squareup.workflow1.ui / Named / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/wrapped/","text":"workflow / com.squareup.workflow1.ui / Named / wrapped wrapped \u00b6 val wrapped: W","title":"Wrapped"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-named/wrapped/#wrapped","text":"val wrapped: W","title":"wrapped"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/","text":"workflow / com.squareup.workflow1.ui / ShowRenderingTag ShowRenderingTag \u00b6 @WorkflowUiExperimentalApi data class ShowRenderingTag<out RenderingT : Any > ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . Parameters \u00b6 showing - the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering. Constructors \u00b6 Name Summary <init> * View tag that holds the function to make the view show instances of [RenderingT](index.md#RenderingT), and the [current rendering](showing.md). ShowRenderingTag(showing: RenderingT, environment: [ ViewEnvironment ](../-view-environment/index.md) , showRendering: [ ViewShowRendering ](../-view-show-rendering.md) )` Properties \u00b6 Name Summary environment val environment: ViewEnvironment showing the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering. val showing: RenderingT showRendering val showRendering: ViewShowRendering <RenderingT>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/#showrenderingtag","text":"@WorkflowUiExperimentalApi data class ShowRenderingTag<out RenderingT : Any > ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering .","title":"ShowRenderingTag"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/#parameters","text":"showing - the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/#constructors","text":"Name Summary <init> * View tag that holds the function to make the view show instances of [RenderingT](index.md#RenderingT), and the [current rendering](showing.md). ShowRenderingTag(showing: RenderingT, environment: [ ViewEnvironment ](../-view-environment/index.md) , showRendering: [ ViewShowRendering ](../-view-show-rendering.md) )`","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/#properties","text":"Name Summary environment val environment: ViewEnvironment showing the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering. val showing: RenderingT showRendering val showRendering: ViewShowRendering <RenderingT>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/-init-/","text":"workflow / com.squareup.workflow1.ui / ShowRenderingTag / <init> <init> \u00b6 ShowRenderingTag(showing: RenderingT, environment: ViewEnvironment , showRendering: ViewShowRendering <RenderingT>) ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . Parameters \u00b6 showing - the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/-init-/#init","text":"ShowRenderingTag(showing: RenderingT, environment: ViewEnvironment , showRendering: ViewShowRendering <RenderingT>) ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/-init-/#parameters","text":"showing - the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/environment/","text":"workflow / com.squareup.workflow1.ui / ShowRenderingTag / environment environment \u00b6 val environment: ViewEnvironment","title":"Environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/environment/#environment","text":"val environment: ViewEnvironment","title":"environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/show-rendering/","text":"workflow / com.squareup.workflow1.ui / ShowRenderingTag / showRendering showRendering \u00b6 val showRendering: ViewShowRendering <RenderingT>","title":"Show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/show-rendering/#showrendering","text":"val showRendering: ViewShowRendering <RenderingT>","title":"showRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/showing/","text":"workflow / com.squareup.workflow1.ui / ShowRenderingTag / showing showing \u00b6 val showing: RenderingT the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Showing"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-show-rendering-tag/showing/#showing","text":"val showing: RenderingT the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"showing"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironment ViewEnvironment \u00b6 @WorkflowUiExperimentalApi class ViewEnvironment Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing. Constructors \u00b6 Name Summary <init> Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing. ViewEnvironment(map: Map < ViewEnvironmentKey <*>, Any > = emptyMap()) Properties \u00b6 Name Summary map val map: Map < ViewEnvironmentKey <*>, Any > Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean get operator fun <T : Any > get(key: ViewEnvironmentKey <T>): T hashCode fun hashCode(): Int plus operator fun <T : Any > plus(pair: Pair < ViewEnvironmentKey <T>, T>): ViewEnvironment operator fun plus(other: ViewEnvironment ): ViewEnvironment toString fun toString(): String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/#viewenvironment","text":"@WorkflowUiExperimentalApi class ViewEnvironment Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing.","title":"ViewEnvironment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/#constructors","text":"Name Summary <init> Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing. ViewEnvironment(map: Map < ViewEnvironmentKey <*>, Any > = emptyMap())","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/#properties","text":"Name Summary map val map: Map < ViewEnvironmentKey <*>, Any >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean get operator fun <T : Any > get(key: ViewEnvironmentKey <T>): T hashCode fun hashCode(): Int plus operator fun <T : Any > plus(pair: Pair < ViewEnvironmentKey <T>, T>): ViewEnvironment operator fun plus(other: ViewEnvironment ): ViewEnvironment toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/-init-/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironment / <init> <init> \u00b6 ViewEnvironment(map: Map < ViewEnvironmentKey <*>, Any > = emptyMap()) Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/-init-/#init","text":"ViewEnvironment(map: Map < ViewEnvironmentKey <*>, Any > = emptyMap()) Immutable, append-only map of values that a parent view can pass down to its children via View.showRendering et al. Allows container views to give descendants information about the context in which they\u2019re drawing.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/equals/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironment / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/get/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironment / get get \u00b6 operator fun <T : Any > get(key: ViewEnvironmentKey <T>): T","title":"Get"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/get/#get","text":"operator fun <T : Any > get(key: ViewEnvironmentKey <T>): T","title":"get"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/hash-code/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironment / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/map/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironment / map map \u00b6 val map: Map < ViewEnvironmentKey <*>, Any >","title":"Map"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/map/#map","text":"val map: Map < ViewEnvironmentKey <*>, Any >","title":"map"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/plus/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironment / plus plus \u00b6 operator fun <T : Any > plus(pair: Pair < ViewEnvironmentKey <T>, T>): ViewEnvironment operator fun plus(other: ViewEnvironment ): ViewEnvironment","title":"Plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/plus/#plus","text":"operator fun <T : Any > plus(pair: Pair < ViewEnvironmentKey <T>, T>): ViewEnvironment operator fun plus(other: ViewEnvironment ): ViewEnvironment","title":"plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/to-string/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironment / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironmentKey ViewEnvironmentKey \u00b6 @WorkflowUiExperimentalApi abstract class ViewEnvironmentKey<T : Any > Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. Constructors \u00b6 Name Summary <init> Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. ViewEnvironmentKey(type: KClass <T>) Properties \u00b6 Name Summary default abstract val default: T Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString open fun toString(): String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/#viewenvironmentkey","text":"@WorkflowUiExperimentalApi abstract class ViewEnvironmentKey<T : Any > Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value.","title":"ViewEnvironmentKey"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/#constructors","text":"Name Summary <init> Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value. ViewEnvironmentKey(type: KClass <T>)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/#properties","text":"Name Summary default abstract val default: T","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString open fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/-init-/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / <init> <init> \u00b6 ViewEnvironmentKey(type: KClass <T>) Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/-init-/#init","text":"ViewEnvironmentKey(type: KClass <T>) Defines a value that can be provided by a ViewEnvironment map, specifying its type and default value.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/default/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / default default \u00b6 abstract val default: T","title":"Default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/default/#default","text":"abstract val default: T","title":"default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/equals/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/hash-code/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/to-string/","text":"workflow / com.squareup.workflow1.ui / ViewEnvironmentKey / toString toString \u00b6 open fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-environment-key/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/","text":"workflow / com.squareup.workflow1.ui / ViewFactory ViewFactory \u00b6 @WorkflowUiExperimentalApi interface ViewFactory<in RenderingT : Any > Factory for View instances that can show renderings of type RenderingT . Two concrete ViewFactory implementations are provided: The various bind methods on LayoutRunner allow easy use of Android XML layout resources and AndroidX ViewBinding . BuilderViewFactory allows views to be built from code. It\u2019s simplest to have your rendering classes implement AndroidViewRendering to associate them with appropriate an appropriate ViewFactory . For more flexibility, and to avoid coupling your workflow directly to the Android runtime, see ViewRegistry . Properties \u00b6 Name Summary type abstract val type: KClass <in RenderingT> Functions \u00b6 Name Summary buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . abstract fun buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View Inheritors \u00b6 Name Summary BuilderViewFactory A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) class BuilderViewFactory<RenderingT : Any > : ViewFactory <RenderingT> DecorativeViewFactory A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. class DecorativeViewFactory<OuterT : Any , InnerT : Any > : ViewFactory <OuterT> NamedViewFactory ViewFactory that allows views to display instances of Named . Delegates to the factory for Named.wrapped . object NamedViewFactory : ViewFactory < Named <*>>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/#viewfactory","text":"@WorkflowUiExperimentalApi interface ViewFactory<in RenderingT : Any > Factory for View instances that can show renderings of type RenderingT . Two concrete ViewFactory implementations are provided: The various bind methods on LayoutRunner allow easy use of Android XML layout resources and AndroidX ViewBinding . BuilderViewFactory allows views to be built from code. It\u2019s simplest to have your rendering classes implement AndroidViewRendering to associate them with appropriate an appropriate ViewFactory . For more flexibility, and to avoid coupling your workflow directly to the Android runtime, see ViewRegistry .","title":"ViewFactory"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/#properties","text":"Name Summary type abstract val type: KClass <in RenderingT>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/#functions","text":"Name Summary buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . abstract fun buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/#inheritors","text":"Name Summary BuilderViewFactory A ViewFactory that creates View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) class BuilderViewFactory<RenderingT : Any > : ViewFactory <RenderingT> DecorativeViewFactory A ViewFactory for OuterT that delegates view construction responsibilities to the factory registered for InnerT . Makes it convenient for OuterT to wrap instances of InnerT to add information or behavior, without requiring wasteful wrapping in the view system. class DecorativeViewFactory<OuterT : Any , InnerT : Any > : ViewFactory <OuterT> NamedViewFactory ViewFactory that allows views to display instances of Named . Delegates to the factory for Named.wrapped . object NamedViewFactory : ViewFactory < Named <*>>","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/build-view/","text":"workflow / com.squareup.workflow1.ui / ViewFactory / buildView buildView \u00b6 abstract fun buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/build-view/#buildview","text":"abstract fun buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/type/","text":"workflow / com.squareup.workflow1.ui / ViewFactory / type type \u00b6 abstract val type: KClass <in RenderingT>","title":"Type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-factory/type/#type","text":"abstract val type: KClass <in RenderingT>","title":"type"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/","text":"workflow / com.squareup.workflow1.ui / ViewRegistry ViewRegistry \u00b6 @WorkflowUiExperimentalApi interface ViewRegistry The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. This is the engine behind AndroidViewRendering , WorkflowViewStub and ViewFactory . Most apps can ignore ViewRegistry as an implementation detail, by using AndroidViewRendering to tie their rendering classes to view code. To avoid that coupling between workflow code and the Android runtime, registries can be loaded with ViewFactory instances at runtime, and provided as an optional parameter to WorkflowLayout.start . For example: val AuthViewFactories = ViewRegistry( AuthorizingLayoutRunner, LoginLayoutRunner, SecondFactorLayoutRunner ) val TicTacToeViewFactories = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) val ApplicationViewFactories = ViewRegistry(ApplicationLayoutRunner) + AuthViewFactories + TicTacToeViewFactories override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentWorkflow( registry = viewRegistry, configure = { WorkflowRunner.Config(rootWorkflow) } ) } In the above example, it is assumed that the companion object s of the various decoupled LayoutRunner classes honor a convention of implementing ViewFactory , in aid of this kind of assembly. class GamePlayLayoutRunner(view: View) : LayoutRunner<GameRendering> { // ... companion object : ViewFactory<GameRendering> by LayoutRunner.bind( R.layout.game_layout, ::GameLayoutRunner ) } Types \u00b6 Name Summary Companion companion object Companion : ViewEnvironmentKey < ViewRegistry > Properties \u00b6 Name Summary keys The set of unique keys which this registry can derive from the renderings passed to buildView and for which it knows how to create views. abstract val keys: Set < KClass <*>> Functions \u00b6 Name Summary getFactoryFor This method is not for general use, use WorkflowViewStub instead. abstract fun <RenderingT : Any > getFactoryFor(renderingType: KClass <out RenderingT>): ViewFactory <RenderingT>? Companion Object Properties \u00b6 Name Summary default val default: ViewRegistry Extension Functions \u00b6 Name Summary buildView It is usually more convenient to use WorkflowViewStub than to call this method directly. fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , container: ViewGroup): View plus operator fun ViewRegistry .plus(binding: ViewFactory <*>): ViewRegistry operator fun ViewRegistry .plus(other: ViewRegistry ): ViewRegistry","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#viewregistry","text":"@WorkflowUiExperimentalApi interface ViewRegistry The ViewEnvironment service that can be used to display the stream of renderings from a workflow tree as View instances. This is the engine behind AndroidViewRendering , WorkflowViewStub and ViewFactory . Most apps can ignore ViewRegistry as an implementation detail, by using AndroidViewRendering to tie their rendering classes to view code. To avoid that coupling between workflow code and the Android runtime, registries can be loaded with ViewFactory instances at runtime, and provided as an optional parameter to WorkflowLayout.start . For example: val AuthViewFactories = ViewRegistry( AuthorizingLayoutRunner, LoginLayoutRunner, SecondFactorLayoutRunner ) val TicTacToeViewFactories = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) val ApplicationViewFactories = ViewRegistry(ApplicationLayoutRunner) + AuthViewFactories + TicTacToeViewFactories override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentWorkflow( registry = viewRegistry, configure = { WorkflowRunner.Config(rootWorkflow) } ) } In the above example, it is assumed that the companion object s of the various decoupled LayoutRunner classes honor a convention of implementing ViewFactory , in aid of this kind of assembly. class GamePlayLayoutRunner(view: View) : LayoutRunner<GameRendering> { // ... companion object : ViewFactory<GameRendering> by LayoutRunner.bind( R.layout.game_layout, ::GameLayoutRunner ) }","title":"ViewRegistry"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#types","text":"Name Summary Companion companion object Companion : ViewEnvironmentKey < ViewRegistry >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#properties","text":"Name Summary keys The set of unique keys which this registry can derive from the renderings passed to buildView and for which it knows how to create views. abstract val keys: Set < KClass <*>>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#functions","text":"Name Summary getFactoryFor This method is not for general use, use WorkflowViewStub instead. abstract fun <RenderingT : Any > getFactoryFor(renderingType: KClass <out RenderingT>): ViewFactory <RenderingT>?","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#companion-object-properties","text":"Name Summary default val default: ViewRegistry","title":"Companion Object Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/#extension-functions","text":"Name Summary buildView It is usually more convenient to use WorkflowViewStub than to call this method directly. fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , contextForNewView: Context, container: ViewGroup? = null): View fun <RenderingT : Any > ViewRegistry .buildView(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , container: ViewGroup): View plus operator fun ViewRegistry .plus(binding: ViewFactory <*>): ViewRegistry operator fun ViewRegistry .plus(other: ViewRegistry ): ViewRegistry","title":"Extension Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/default/","text":"workflow / com.squareup.workflow1.ui / ViewRegistry / default default \u00b6 val default: ViewRegistry","title":"Default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/default/#default","text":"val default: ViewRegistry","title":"default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/get-factory-for/","text":"workflow / com.squareup.workflow1.ui / ViewRegistry / getFactoryFor getFactoryFor \u00b6 abstract fun <RenderingT : Any > getFactoryFor(renderingType: KClass <out RenderingT>): ViewFactory <RenderingT>? This method is not for general use, use WorkflowViewStub instead. Returns the ViewFactory that was registered for the given renderingType , or null if none was found.","title":"Get factory for"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/get-factory-for/#getfactoryfor","text":"abstract fun <RenderingT : Any > getFactoryFor(renderingType: KClass <out RenderingT>): ViewFactory <RenderingT>? This method is not for general use, use WorkflowViewStub instead. Returns the ViewFactory that was registered for the given renderingType , or null if none was found.","title":"getFactoryFor"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/keys/","text":"workflow / com.squareup.workflow1.ui / ViewRegistry / keys keys \u00b6 abstract val keys: Set < KClass <*>> The set of unique keys which this registry can derive from the renderings passed to buildView and for which it knows how to create views. Used to ensure that duplicate bindings are never registered.","title":"Keys"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/keys/#keys","text":"abstract val keys: Set < KClass <*>> The set of unique keys which this registry can derive from the renderings passed to buildView and for which it knows how to create views. Used to ensure that duplicate bindings are never registered.","title":"keys"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/","text":"workflow / com.squareup.workflow1.ui / ViewRegistry / Companion Companion \u00b6 companion object Companion : ViewEnvironmentKey < ViewRegistry > Companion Object Properties \u00b6 Name Summary default val default: ViewRegistry","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/#companion","text":"companion object Companion : ViewEnvironmentKey < ViewRegistry >","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/#companion-object-properties","text":"Name Summary default val default: ViewRegistry","title":"Companion Object Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/default/","text":"workflow / com.squareup.workflow1.ui / ViewRegistry / Companion / default default \u00b6 val default: ViewRegistry","title":"Default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-view-registry/-companion/default/#default","text":"val default: ViewRegistry","title":"default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/","text":"workflow / com.squareup.workflow1.ui / WorkflowLayout WorkflowLayout \u00b6 @WorkflowUiExperimentalApi class WorkflowLayout : FrameLayout A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. id defaults to R.id.workflow_layout , as a convenience to ensure that view persistence will work without requiring authors to be immersed in Android arcana. See com.squareup.workflow1.ui.renderWorkflowIn for typical use with a com.squareup.workflow1.Workflow . Constructors \u00b6 Name Summary <init> A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. WorkflowLayout(context: Context, attributeSet: AttributeSet? = null) Functions \u00b6 Name Summary onRestoreInstanceState fun onRestoreInstanceState(state: Parcelable?): Unit onSaveInstanceState fun onSaveInstanceState(): Parcelable start Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. fun start(renderings: Flow< Any >, registry: ViewRegistry ): Unit Subscribes to renderings , and uses the ViewRegistry in the given environment to build a new view each time a new type of rendering is received, making that view the only child of this one. fun start(renderings: Flow< Any >, environment: ViewEnvironment = ViewEnvironment()): Unit","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/#workflowlayout","text":"@WorkflowUiExperimentalApi class WorkflowLayout : FrameLayout A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. id defaults to R.id.workflow_layout , as a convenience to ensure that view persistence will work without requiring authors to be immersed in Android arcana. See com.squareup.workflow1.ui.renderWorkflowIn for typical use with a com.squareup.workflow1.Workflow .","title":"WorkflowLayout"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/#constructors","text":"Name Summary <init> A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. WorkflowLayout(context: Context, attributeSet: AttributeSet? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/#functions","text":"Name Summary onRestoreInstanceState fun onRestoreInstanceState(state: Parcelable?): Unit onSaveInstanceState fun onSaveInstanceState(): Parcelable start Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. fun start(renderings: Flow< Any >, registry: ViewRegistry ): Unit Subscribes to renderings , and uses the ViewRegistry in the given environment to build a new view each time a new type of rendering is received, making that view the only child of this one. fun start(renderings: Flow< Any >, environment: ViewEnvironment = ViewEnvironment()): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/-init-/","text":"workflow / com.squareup.workflow1.ui / WorkflowLayout / <init> <init> \u00b6 WorkflowLayout(context: Context, attributeSet: AttributeSet? = null) A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. id defaults to R.id.workflow_layout , as a convenience to ensure that view persistence will work without requiring authors to be immersed in Android arcana. See com.squareup.workflow1.ui.renderWorkflowIn for typical use with a com.squareup.workflow1.Workflow .","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/-init-/#init","text":"WorkflowLayout(context: Context, attributeSet: AttributeSet? = null) A view that can be driven by a stream of renderings (and an optional ViewRegistry ) passed to its start method. id defaults to R.id.workflow_layout , as a convenience to ensure that view persistence will work without requiring authors to be immersed in Android arcana. See com.squareup.workflow1.ui.renderWorkflowIn for typical use with a com.squareup.workflow1.Workflow .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/on-restore-instance-state/","text":"workflow / com.squareup.workflow1.ui / WorkflowLayout / onRestoreInstanceState onRestoreInstanceState \u00b6 protected fun onRestoreInstanceState(state: Parcelable?): Unit","title":"On restore instance state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/on-restore-instance-state/#onrestoreinstancestate","text":"protected fun onRestoreInstanceState(state: Parcelable?): Unit","title":"onRestoreInstanceState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/on-save-instance-state/","text":"workflow / com.squareup.workflow1.ui / WorkflowLayout / onSaveInstanceState onSaveInstanceState \u00b6 protected fun onSaveInstanceState(): Parcelable","title":"On save instance state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/on-save-instance-state/#onsaveinstancestate","text":"protected fun onSaveInstanceState(): Parcelable","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/start/","text":"workflow / com.squareup.workflow1.ui / WorkflowLayout / start start \u00b6 fun start(renderings: Flow< Any >, registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. fun start(renderings: Flow< Any >, environment: ViewEnvironment = ViewEnvironment()): Unit Subscribes to renderings , and uses the ViewRegistry in the given environment to build a new view each time a new type of rendering is received, making that view the only child of this one.","title":"Start"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-layout/start/#start","text":"fun start(renderings: Flow< Any >, registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. fun start(renderings: Flow< Any >, environment: ViewEnvironment = ViewEnvironment()): Unit Subscribes to renderings , and uses the ViewRegistry in the given environment to build a new view each time a new type of rendering is received, making that view the only child of this one.","title":"start"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/","text":"workflow / com.squareup.workflow1.ui / WorkflowUiExperimentalApi WorkflowUiExperimentalApi \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.FUNCTION, AnnotationTarget.TYPEALIAS]) annotation class WorkflowUiExperimentalApi Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. Constructors \u00b6 Name Summary <init> Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. WorkflowUiExperimentalApi()","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/#workflowuiexperimentalapi","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.FUNCTION, AnnotationTarget.TYPEALIAS]) annotation class WorkflowUiExperimentalApi Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"WorkflowUiExperimentalApi"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/#constructors","text":"Name Summary <init> Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you. WorkflowUiExperimentalApi()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/-init-/","text":"workflow / com.squareup.workflow1.ui / WorkflowUiExperimentalApi / <init> <init> \u00b6 WorkflowUiExperimentalApi() Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-ui-experimental-api/-init-/#init","text":"WorkflowUiExperimentalApi() Marks Workflow user interface APIs which are still in flux. Annotated code SHOULD NOT be used in library code or app code that you are not prepared to update when changing even minor workflow versions. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub WorkflowViewStub \u00b6 @WorkflowUiExperimentalApi class WorkflowViewStub : View A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . Usage \u00b6 In the XML layout for a container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" \u2026> <com.squareup.workflow1.WorkflowViewStub android:id=\"@+id/child_stub\" app:inflatedId=\"@+id/child\" /> \u2026 Then in your LayoutRunner , pull the view out with findViewById like any other view and update it in your LayoutRunner.showRendering method: class YourLayoutRunner(view: View) { private val childStub = view.findViewById<WorkflowViewStub>(R.id.child_stub) // Totally optional, since this view is also accessible as [childStub.actual]. // Note that R.id.child was set in XML via the square:inflatedId parameter. private val child: View by lazy { view.findViewById<View>(R.id.child) } override fun showRendering( rendering: YourRendering, viewEnvironment: ViewEnvironment ) { childStub.update(rendering.childRendering, viewEnvironment) } } NB : If you\u2019re using a stub in a RelativeLayout or ConstraintLayout , relationships should be tied to the stub\u2019s app:inflatedId , not its android:id . Use updatesVisibility and setBackground for more control of how update effects the visibility and backgrounds of created views. Use replaceOldViewInParent to customize replacing actual with a new view, e.g. for animated transitions. Constructors \u00b6 Name Summary <init> A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . WorkflowViewStub(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) Properties \u00b6 Name Summary actual On-demand access to the view created by the last call to update , or this WorkflowViewStub instance if none has yet been made. var actual: View inflatedId The id to be assigned to new views created by update . If the inflated id is View.NO_ID (its default value), new views keep their original ids. var inflatedId: Int replaceOldViewInParent Function called from update to replace this stub, or the current actual , with a new view. Can be updated to provide custom transition effects. var replaceOldViewInParent: (ViewGroup, View) -> Unit updatesVisibility If true, the visibility of views created by update will be copied from that of actual . Bear in mind that the initial value of actual is this stub. var updatesVisibility: Boolean Functions \u00b6 Name Summary getVisibility Returns the visibility of actual . (Bear in mind that the initial value of actual is this stub.) fun getVisibility(): Int setBackground Sets the background of this stub as usual, and also that of actual if the given background is not null. Any new views created by update will be assigned this background, again if it is not null. fun setBackground(background: Drawable?): Unit setId fun setId(id: Int ): Unit setVisibility Sets the visibility of actual . If updatesVisibility is true, the visibility of new views created by update will copied from actual . (Bear in mind that the initial value of actual is this stub.) fun setVisibility(visibility: Int ): Unit update Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can\u2019t handle rendering , a new view is put in its place. fun update(rendering: Any , viewEnvironment: ViewEnvironment ): View","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#workflowviewstub","text":"@WorkflowUiExperimentalApi class WorkflowViewStub : View A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"WorkflowViewStub"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#usage","text":"In the XML layout for a container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" \u2026> <com.squareup.workflow1.WorkflowViewStub android:id=\"@+id/child_stub\" app:inflatedId=\"@+id/child\" /> \u2026 Then in your LayoutRunner , pull the view out with findViewById like any other view and update it in your LayoutRunner.showRendering method: class YourLayoutRunner(view: View) { private val childStub = view.findViewById<WorkflowViewStub>(R.id.child_stub) // Totally optional, since this view is also accessible as [childStub.actual]. // Note that R.id.child was set in XML via the square:inflatedId parameter. private val child: View by lazy { view.findViewById<View>(R.id.child) } override fun showRendering( rendering: YourRendering, viewEnvironment: ViewEnvironment ) { childStub.update(rendering.childRendering, viewEnvironment) } } NB : If you\u2019re using a stub in a RelativeLayout or ConstraintLayout , relationships should be tied to the stub\u2019s app:inflatedId , not its android:id . Use updatesVisibility and setBackground for more control of how update effects the visibility and backgrounds of created views. Use replaceOldViewInParent to customize replacing actual with a new view, e.g. for animated transitions.","title":"Usage"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#constructors","text":"Name Summary <init> A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . WorkflowViewStub(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#properties","text":"Name Summary actual On-demand access to the view created by the last call to update , or this WorkflowViewStub instance if none has yet been made. var actual: View inflatedId The id to be assigned to new views created by update . If the inflated id is View.NO_ID (its default value), new views keep their original ids. var inflatedId: Int replaceOldViewInParent Function called from update to replace this stub, or the current actual , with a new view. Can be updated to provide custom transition effects. var replaceOldViewInParent: (ViewGroup, View) -> Unit updatesVisibility If true, the visibility of views created by update will be copied from that of actual . Bear in mind that the initial value of actual is this stub. var updatesVisibility: Boolean","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/#functions","text":"Name Summary getVisibility Returns the visibility of actual . (Bear in mind that the initial value of actual is this stub.) fun getVisibility(): Int setBackground Sets the background of this stub as usual, and also that of actual if the given background is not null. Any new views created by update will be assigned this background, again if it is not null. fun setBackground(background: Drawable?): Unit setId fun setId(id: Int ): Unit setVisibility Sets the visibility of actual . If updatesVisibility is true, the visibility of new views created by update will copied from actual . (Bear in mind that the initial value of actual is this stub.) fun setVisibility(visibility: Int ): Unit update Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can\u2019t handle rendering , a new view is put in its place. fun update(rendering: Any , viewEnvironment: ViewEnvironment ): View","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/-init-/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / <init> <init> \u00b6 WorkflowViewStub(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . Usage \u00b6 In the XML layout for a container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" \u2026> <com.squareup.workflow1.WorkflowViewStub android:id=\"@+id/child_stub\" app:inflatedId=\"@+id/child\" /> \u2026 Then in your LayoutRunner , pull the view out with findViewById like any other view and update it in your LayoutRunner.showRendering method: class YourLayoutRunner(view: View) { private val childStub = view.findViewById<WorkflowViewStub>(R.id.child_stub) // Totally optional, since this view is also accessible as [childStub.actual]. // Note that R.id.child was set in XML via the square:inflatedId parameter. private val child: View by lazy { view.findViewById<View>(R.id.child) } override fun showRendering( rendering: YourRendering, viewEnvironment: ViewEnvironment ) { childStub.update(rendering.childRendering, viewEnvironment) } } NB : If you\u2019re using a stub in a RelativeLayout or ConstraintLayout , relationships should be tied to the stub\u2019s app:inflatedId , not its android:id . Use updatesVisibility and setBackground for more control of how update effects the visibility and backgrounds of created views. Use replaceOldViewInParent to customize replacing actual with a new view, e.g. for animated transitions.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/-init-/#init","text":"WorkflowViewStub(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/-init-/#usage","text":"In the XML layout for a container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" \u2026> <com.squareup.workflow1.WorkflowViewStub android:id=\"@+id/child_stub\" app:inflatedId=\"@+id/child\" /> \u2026 Then in your LayoutRunner , pull the view out with findViewById like any other view and update it in your LayoutRunner.showRendering method: class YourLayoutRunner(view: View) { private val childStub = view.findViewById<WorkflowViewStub>(R.id.child_stub) // Totally optional, since this view is also accessible as [childStub.actual]. // Note that R.id.child was set in XML via the square:inflatedId parameter. private val child: View by lazy { view.findViewById<View>(R.id.child) } override fun showRendering( rendering: YourRendering, viewEnvironment: ViewEnvironment ) { childStub.update(rendering.childRendering, viewEnvironment) } } NB : If you\u2019re using a stub in a RelativeLayout or ConstraintLayout , relationships should be tied to the stub\u2019s app:inflatedId , not its android:id . Use updatesVisibility and setBackground for more control of how update effects the visibility and backgrounds of created views. Use replaceOldViewInParent to customize replacing actual with a new view, e.g. for animated transitions.","title":"Usage"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/actual/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / actual actual \u00b6 var actual: View On-demand access to the view created by the last call to update , or this WorkflowViewStub instance if none has yet been made.","title":"Actual"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/actual/#actual","text":"var actual: View On-demand access to the view created by the last call to update , or this WorkflowViewStub instance if none has yet been made.","title":"actual"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/get-visibility/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / getVisibility getVisibility \u00b6 fun getVisibility(): Int Returns the visibility of actual . (Bear in mind that the initial value of actual is this stub.)","title":"Get visibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/get-visibility/#getvisibility","text":"fun getVisibility(): Int Returns the visibility of actual . (Bear in mind that the initial value of actual is this stub.)","title":"getVisibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/inflated-id/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / inflatedId inflatedId \u00b6 var inflatedId: Int The id to be assigned to new views created by update . If the inflated id is View.NO_ID (its default value), new views keep their original ids.","title":"Inflated id"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/inflated-id/#inflatedid","text":"var inflatedId: Int The id to be assigned to new views created by update . If the inflated id is View.NO_ID (its default value), new views keep their original ids.","title":"inflatedId"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/replace-old-view-in-parent/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / replaceOldViewInParent replaceOldViewInParent \u00b6 var replaceOldViewInParent: (ViewGroup, View) -> Unit Function called from update to replace this stub, or the current actual , with a new view. Can be updated to provide custom transition effects. Note that this method is responsible for copying the layoutParams from the stub to the new view. Also note that in a WorkflowViewStub that has never been updated, actual is the stub itself.","title":"Replace old view in parent"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/replace-old-view-in-parent/#replaceoldviewinparent","text":"var replaceOldViewInParent: (ViewGroup, View) -> Unit Function called from update to replace this stub, or the current actual , with a new view. Can be updated to provide custom transition effects. Note that this method is responsible for copying the layoutParams from the stub to the new view. Also note that in a WorkflowViewStub that has never been updated, actual is the stub itself.","title":"replaceOldViewInParent"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-background/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / setBackground setBackground \u00b6 fun setBackground(background: Drawable?): Unit Sets the background of this stub as usual, and also that of actual if the given background is not null. Any new views created by update will be assigned this background, again if it is not null.","title":"Set background"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-background/#setbackground","text":"fun setBackground(background: Drawable?): Unit Sets the background of this stub as usual, and also that of actual if the given background is not null. Any new views created by update will be assigned this background, again if it is not null.","title":"setBackground"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-id/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / setId setId \u00b6 fun setId(@IdRes id: Int ): Unit","title":"Set id"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-id/#setid","text":"fun setId(@IdRes id: Int ): Unit","title":"setId"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-visibility/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / setVisibility setVisibility \u00b6 fun setVisibility(visibility: Int ): Unit Sets the visibility of actual . If updatesVisibility is true, the visibility of new views created by update will copied from actual . (Bear in mind that the initial value of actual is this stub.)","title":"Set visibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/set-visibility/#setvisibility","text":"fun setVisibility(visibility: Int ): Unit Sets the visibility of actual . If updatesVisibility is true, the visibility of new views created by update will copied from actual . (Bear in mind that the initial value of actual is this stub.)","title":"setVisibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/update/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / update update \u00b6 fun update(rendering: Any , viewEnvironment: ViewEnvironment ): View Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can\u2019t handle rendering , a new view is put in its place. The id of any view created by this method will be set to to inflatedId , unless that value is View.NO_ID . The background of any view created by this method will be copied from getBackground , if that value is non-null. If updatesVisibility is true, the visibility of any view created by this method will be copied from actual . (Bear in mind that the initial value of actual is this stub.) Exceptions \u00b6 IllegalArgumentException - if no binding can be find for the type of rendering IllegalStateException - if the matching ViewFactory fails to call View.bindShowRendering when constructing the view Return the view that showed rendering","title":"Update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/update/#update","text":"fun update(rendering: Any , viewEnvironment: ViewEnvironment ): View Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can\u2019t handle rendering , a new view is put in its place. The id of any view created by this method will be set to to inflatedId , unless that value is View.NO_ID . The background of any view created by this method will be copied from getBackground , if that value is non-null. If updatesVisibility is true, the visibility of any view created by this method will be copied from actual . (Bear in mind that the initial value of actual is this stub.)","title":"update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/update/#exceptions","text":"IllegalArgumentException - if no binding can be find for the type of rendering IllegalStateException - if the matching ViewFactory fails to call View.bindShowRendering when constructing the view Return the view that showed rendering","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/updates-visibility/","text":"workflow / com.squareup.workflow1.ui / WorkflowViewStub / updatesVisibility updatesVisibility \u00b6 var updatesVisibility: Boolean If true, the visibility of views created by update will be copied from that of actual . Bear in mind that the initial value of actual is this stub.","title":"Updates visibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/-workflow-view-stub/updates-visibility/#updatesvisibility","text":"var updatesVisibility: Boolean If true, the visibility of views created by update will be copied from that of actual . Bear in mind that the initial value of actual is this stub.","title":"updatesVisibility"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.content.-context/","text":"workflow / com.squareup.workflow1.ui / android.content.Context Extensions for android.content.Context \u00b6 Name Summary onBackPressedDispatcherOwnerOrNull tailrec fun Context.onBackPressedDispatcherOwnerOrNull(): OnBackPressedDispatcherOwner?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.content.-context/#extensions-for-androidcontentcontext","text":"Name Summary onBackPressedDispatcherOwnerOrNull tailrec fun Context.onBackPressedDispatcherOwnerOrNull(): OnBackPressedDispatcherOwner?","title":"Extensions for android.content.Context"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.content.-context/on-back-pressed-dispatcher-owner-or-null/","text":"workflow / com.squareup.workflow1.ui / android.content.Context / onBackPressedDispatcherOwnerOrNull onBackPressedDispatcherOwnerOrNull \u00b6 @WorkflowUiExperimentalApi tailrec fun Context.onBackPressedDispatcherOwnerOrNull(): OnBackPressedDispatcherOwner?","title":"On back pressed dispatcher owner or null"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.content.-context/on-back-pressed-dispatcher-owner-or-null/#onbackpresseddispatcherownerornull","text":"@WorkflowUiExperimentalApi tailrec fun Context.onBackPressedDispatcherOwnerOrNull(): OnBackPressedDispatcherOwner?","title":"onBackPressedDispatcherOwnerOrNull"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.os.-parcelable/","text":"workflow / com.squareup.workflow1.ui / android.os.Parcelable Extensions for android.os.Parcelable \u00b6 Name Summary toSnapshot Wraps receiver in a Snapshot suitable for use with com.squareup.workflow1.StatefulWorkflow . Intended to allow use of @Parcelize . fun Parcelable.toSnapshot(): Snapshot","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.os.-parcelable/#extensions-for-androidosparcelable","text":"Name Summary toSnapshot Wraps receiver in a Snapshot suitable for use with com.squareup.workflow1.StatefulWorkflow . Intended to allow use of @Parcelize . fun Parcelable.toSnapshot(): Snapshot","title":"Extensions for android.os.Parcelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.os.-parcelable/to-snapshot/","text":"workflow / com.squareup.workflow1.ui / android.os.Parcelable / toSnapshot toSnapshot \u00b6 fun Parcelable.toSnapshot(): Snapshot Wraps receiver in a Snapshot suitable for use with com.squareup.workflow1.StatefulWorkflow . Intended to allow use of @Parcelize . Read the Parcelable back with toParcelable .","title":"To snapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.os.-parcelable/to-snapshot/#tosnapshot","text":"fun Parcelable.toSnapshot(): Snapshot Wraps receiver in a Snapshot suitable for use with com.squareup.workflow1.StatefulWorkflow . Intended to allow use of @Parcelize . Read the Parcelable back with toParcelable .","title":"toSnapshot"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/","text":"workflow / com.squareup.workflow1.ui / android.view.View Extensions for android.view.View \u00b6 Name Summary backPressedHandler A function to be called if the device back button is pressed while this view is attached to a window. var View.backPressedHandler: BackPressHandler ? bindShowRendering It is usually more convenient to use WorkflowViewStub than to call this method directly. fun <RenderingT : Any > View.bindShowRendering(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , showRendering: ViewShowRendering <RenderingT>): Unit canShowRendering It is usually more convenient to use WorkflowViewStub than to call this method directly. fun View.canShowRendering(rendering: Any ): Boolean environment Returns the most recent ViewEnvironment that apply to this view, or null if bindShowRendering has never been called. val View.environment: ViewEnvironment ? getRendering Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. fun <RenderingT : Any > View.getRendering(): RenderingT? getShowRendering Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. fun <RenderingT : Any > View.getShowRendering(): ViewShowRendering <RenderingT>? showRendering It is usually more convenient to use WorkflowViewStub than to call this method directly. fun <RenderingT : Any > View.showRendering(rendering: RenderingT, viewEnvironment: ViewEnvironment ): Unit","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/#extensions-for-androidviewview","text":"Name Summary backPressedHandler A function to be called if the device back button is pressed while this view is attached to a window. var View.backPressedHandler: BackPressHandler ? bindShowRendering It is usually more convenient to use WorkflowViewStub than to call this method directly. fun <RenderingT : Any > View.bindShowRendering(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , showRendering: ViewShowRendering <RenderingT>): Unit canShowRendering It is usually more convenient to use WorkflowViewStub than to call this method directly. fun View.canShowRendering(rendering: Any ): Boolean environment Returns the most recent ViewEnvironment that apply to this view, or null if bindShowRendering has never been called. val View.environment: ViewEnvironment ? getRendering Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. fun <RenderingT : Any > View.getRendering(): RenderingT? getShowRendering Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. fun <RenderingT : Any > View.getShowRendering(): ViewShowRendering <RenderingT>? showRendering It is usually more convenient to use WorkflowViewStub than to call this method directly. fun <RenderingT : Any > View.showRendering(rendering: RenderingT, viewEnvironment: ViewEnvironment ): Unit","title":"Extensions for android.view.View"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/back-pressed-handler/","text":"workflow / com.squareup.workflow1.ui / android.view.View / backPressedHandler backPressedHandler \u00b6 @WorkflowUiExperimentalApi var View.backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. Implemented via a OnBackPressedCallback , making this a last-registered-first-served mechanism.","title":"Back pressed handler"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/back-pressed-handler/#backpressedhandler","text":"@WorkflowUiExperimentalApi var View.backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. Implemented via a OnBackPressedCallback , making this a last-registered-first-served mechanism.","title":"backPressedHandler"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/bind-show-rendering/","text":"workflow / com.squareup.workflow1.ui / android.view.View / bindShowRendering bindShowRendering \u00b6 @WorkflowUiExperimentalApi fun <RenderingT : Any > View.bindShowRendering(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , showRendering: ViewShowRendering <RenderingT>): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Immediately invokes showRendering to display initialRendering . Intended for use by implementations of ViewFactory.buildView .","title":"Bind show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/bind-show-rendering/#bindshowrendering","text":"@WorkflowUiExperimentalApi fun <RenderingT : Any > View.bindShowRendering(initialRendering: RenderingT, initialViewEnvironment: ViewEnvironment , showRendering: ViewShowRendering <RenderingT>): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Immediately invokes showRendering to display initialRendering . Intended for use by implementations of ViewFactory.buildView .","title":"bindShowRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/can-show-rendering/","text":"workflow / com.squareup.workflow1.ui / android.view.View / canShowRendering canShowRendering \u00b6 @WorkflowUiExperimentalApi fun View.canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. True if this view is able to show rendering . Returns false if bindShowRendering has not been called, so it is always safe to call this method. Otherwise returns the compatibility of the initial rendering and the new one.","title":"Can show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/can-show-rendering/#canshowrendering","text":"@WorkflowUiExperimentalApi fun View.canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. True if this view is able to show rendering . Returns false if bindShowRendering has not been called, so it is always safe to call this method. Otherwise returns the compatibility of the initial rendering and the new one.","title":"canShowRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/environment/","text":"workflow / com.squareup.workflow1.ui / android.view.View / environment environment \u00b6 @WorkflowUiExperimentalApi val View.environment: ViewEnvironment ? Returns the most recent ViewEnvironment that apply to this view, or null if bindShowRendering has never been called.","title":"Environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/environment/#environment","text":"@WorkflowUiExperimentalApi val View.environment: ViewEnvironment ? Returns the most recent ViewEnvironment that apply to this view, or null if bindShowRendering has never been called.","title":"environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/get-rendering/","text":"workflow / com.squareup.workflow1.ui / android.view.View / getRendering getRendering \u00b6 @WorkflowUiExperimentalApi fun <RenderingT : Any > View.getRendering(): RenderingT? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called.","title":"Get rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/get-rendering/#getrendering","text":"@WorkflowUiExperimentalApi fun <RenderingT : Any > View.getRendering(): RenderingT? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called.","title":"getRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/get-show-rendering/","text":"workflow / com.squareup.workflow1.ui / android.view.View / getShowRendering getShowRendering \u00b6 @WorkflowUiExperimentalApi fun <RenderingT : Any > View.getShowRendering(): ViewShowRendering <RenderingT>? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called.","title":"Get show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/get-show-rendering/#getshowrendering","text":"@WorkflowUiExperimentalApi fun <RenderingT : Any > View.getShowRendering(): ViewShowRendering <RenderingT>? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called.","title":"getShowRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/show-rendering/","text":"workflow / com.squareup.workflow1.ui / android.view.View / showRendering showRendering \u00b6 @WorkflowUiExperimentalApi fun <RenderingT : Any > View.showRendering(rendering: RenderingT, viewEnvironment: ViewEnvironment ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. Sets the workflow rendering associated with this view, and displays it by invoking the ViewShowRendering function previously set by bindShowRendering . Exceptions \u00b6 IllegalStateException - if bindShowRendering has not been called.","title":"Show rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/show-rendering/#showrendering","text":"@WorkflowUiExperimentalApi fun <RenderingT : Any > View.showRendering(rendering: RenderingT, viewEnvironment: ViewEnvironment ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. Sets the workflow rendering associated with this view, and displays it by invoking the ViewShowRendering function previously set by bindShowRendering .","title":"showRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.view.-view/show-rendering/#exceptions","text":"IllegalStateException - if bindShowRendering has not been called.","title":"Exceptions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.widget.-edit-text/","text":"workflow / com.squareup.workflow1.ui / android.widget.EditText Extensions for android.widget.EditText \u00b6 Name Summary setTextChangedListener Helper for setting a simple function as a callback to be invoked whenever an EditText text value changes. Simpler than manually invoking EditText.removeTextChangedListener and EditText.addTextChangedListener and implementing a whole TextWatcher manually. fun EditText.setTextChangedListener(listener: (( CharSequence ) -> Unit )?): Unit updateText Helper for setting the text value of an EditText without disrupting the IME connection, or firing change listeners registered via setTextChangedListener if the new text is actually different than the old text. fun EditText.updateText(text: CharSequence ): Unit","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.widget.-edit-text/#extensions-for-androidwidgetedittext","text":"Name Summary setTextChangedListener Helper for setting a simple function as a callback to be invoked whenever an EditText text value changes. Simpler than manually invoking EditText.removeTextChangedListener and EditText.addTextChangedListener and implementing a whole TextWatcher manually. fun EditText.setTextChangedListener(listener: (( CharSequence ) -> Unit )?): Unit updateText Helper for setting the text value of an EditText without disrupting the IME connection, or firing change listeners registered via setTextChangedListener if the new text is actually different than the old text. fun EditText.updateText(text: CharSequence ): Unit","title":"Extensions for android.widget.EditText"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.widget.-edit-text/set-text-changed-listener/","text":"workflow / com.squareup.workflow1.ui / android.widget.EditText / setTextChangedListener setTextChangedListener \u00b6 @WorkflowUiExperimentalApi fun EditText.setTextChangedListener(listener: (( CharSequence ) -> Unit )?): Unit Helper for setting a simple function as a callback to be invoked whenever an EditText text value changes. Simpler than manually invoking EditText.removeTextChangedListener and EditText.addTextChangedListener and implementing a whole TextWatcher manually. If listener is not null, it will be invoked any time the text changes either due to the OS/user (e.g. IME connection, soft keyboard, etc.), or programmatically (i.e. setText ), except by calls to updateText , which will not fire this listener. It will also not fire if the text is technically changed, but to the same value (e.g. setText(\"foo\"); setText(\"foo\") will only fire the listener at most once). Intended to be used by LayoutRunner s for updating EditText s from workflow renderings.","title":"Set text changed listener"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.widget.-edit-text/set-text-changed-listener/#settextchangedlistener","text":"@WorkflowUiExperimentalApi fun EditText.setTextChangedListener(listener: (( CharSequence ) -> Unit )?): Unit Helper for setting a simple function as a callback to be invoked whenever an EditText text value changes. Simpler than manually invoking EditText.removeTextChangedListener and EditText.addTextChangedListener and implementing a whole TextWatcher manually. If listener is not null, it will be invoked any time the text changes either due to the OS/user (e.g. IME connection, soft keyboard, etc.), or programmatically (i.e. setText ), except by calls to updateText , which will not fire this listener. It will also not fire if the text is technically changed, but to the same value (e.g. setText(\"foo\"); setText(\"foo\") will only fire the listener at most once). Intended to be used by LayoutRunner s for updating EditText s from workflow renderings.","title":"setTextChangedListener"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.widget.-edit-text/update-text/","text":"workflow / com.squareup.workflow1.ui / android.widget.EditText / updateText updateText \u00b6 @WorkflowUiExperimentalApi fun EditText.updateText(text: CharSequence ): Unit Helper for setting the text value of an EditText without disrupting the IME connection, or firing change listeners registered via setTextChangedListener if the new text is actually different than the old text. If text contains a selection, then the selection of this EditText is updated to it. Intended to be used by LayoutRunner s for updating EditText s from workflow renderings.","title":"Update text"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/android.widget.-edit-text/update-text/#updatetext","text":"@WorkflowUiExperimentalApi fun EditText.updateText(text: CharSequence ): Unit Helper for setting the text value of an EditText without disrupting the IME connection, or firing change listeners registered via setTextChangedListener if the new text is actually different than the old text. If text contains a selection, then the selection of this EditText is updated to it. Intended to be used by LayoutRunner s for updating EditText s from workflow renderings.","title":"updateText"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/okio.-byte-string/","text":"workflow / com.squareup.workflow1.ui / okio.ByteString Extensions for okio.ByteString \u00b6 Name Summary toParcelable fun <T : Parcelable> ByteString.toParcelable(): T","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/okio.-byte-string/#extensions-for-okiobytestring","text":"Name Summary toParcelable fun <T : Parcelable> ByteString.toParcelable(): T","title":"Extensions for okio.ByteString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/okio.-byte-string/to-parcelable/","text":"workflow / com.squareup.workflow1.ui / okio.ByteString / toParcelable toParcelable \u00b6 fun <reified T : Parcelable> ByteString.toParcelable(): T","title":"To parcelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui/okio.-byte-string/to-parcelable/#toparcelable","text":"fun <reified T : Parcelable> ByteString.toParcelable(): T","title":"toParcelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/","text":"workflow / com.squareup.workflow1.ui.backstack Package com.squareup.workflow1.ui.backstack \u00b6 Types \u00b6 Name Summary BackStackConfig Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not . enum class BackStackConfig BackStackContainer A container view that can display a stream of BackStackScreen instances. open class BackStackContainer : FrameLayout BackStackScreen Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. class BackStackScreen<StackedT : Any > ViewStateCache Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets. class ViewStateCache : Parcelable Extensions for External Classes \u00b6 Name Summary kotlin.collections.List","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/#package-comsquareupworkflow1uibackstack","text":"","title":"Package com.squareup.workflow1.ui.backstack"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/#types","text":"Name Summary BackStackConfig Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not . enum class BackStackConfig BackStackContainer A container view that can display a stream of BackStackScreen instances. open class BackStackContainer : FrameLayout BackStackScreen Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. class BackStackScreen<StackedT : Any > ViewStateCache Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets. class ViewStateCache : Parcelable","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/#extensions-for-external-classes","text":"Name Summary kotlin.collections.List","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackConfig BackStackConfig \u00b6 @WorkflowUiExperimentalApi enum class BackStackConfig Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not . Types \u00b6 Name Summary Companion companion object Companion : ViewEnvironmentKey < BackStackConfig > Enum Values \u00b6 Name Summary None There is no BackStackContainer above here. First This rendering is the first frame in a BackStackScreen . Useful as a hint to disable \u201cgo back\u201d behavior, or replace it with \u201cgo up\u201d behavior. Other This rendering is in a BackStackScreen but is not the first frame. Useful as a hint to enable \u201cgo back\u201d behavior. Companion Object Properties \u00b6 Name Summary default val default: BackStackConfig","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/#backstackconfig","text":"@WorkflowUiExperimentalApi enum class BackStackConfig Informs views whether they\u2019re children of a BackStackContainer , and if so whether they\u2019re the first frame or not .","title":"BackStackConfig"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/#types","text":"Name Summary Companion companion object Companion : ViewEnvironmentKey < BackStackConfig >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/#enum-values","text":"Name Summary None There is no BackStackContainer above here. First This rendering is the first frame in a BackStackScreen . Useful as a hint to disable \u201cgo back\u201d behavior, or replace it with \u201cgo up\u201d behavior. Other This rendering is in a BackStackScreen but is not the first frame. Useful as a hint to enable \u201cgo back\u201d behavior.","title":"Enum Values"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/#companion-object-properties","text":"Name Summary default val default: BackStackConfig","title":"Companion Object Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-first/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / First First \u00b6 First This rendering is the first frame in a BackStackScreen . Useful as a hint to disable \u201cgo back\u201d behavior, or replace it with \u201cgo up\u201d behavior.","title":" first"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-first/#first","text":"First This rendering is the first frame in a BackStackScreen . Useful as a hint to disable \u201cgo back\u201d behavior, or replace it with \u201cgo up\u201d behavior.","title":"First"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-none/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / None None \u00b6 None There is no BackStackContainer above here.","title":" none"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-none/#none","text":"None There is no BackStackContainer above here.","title":"None"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-other/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / Other Other \u00b6 Other This rendering is in a BackStackScreen but is not the first frame. Useful as a hint to enable \u201cgo back\u201d behavior.","title":" other"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-other/#other","text":"Other This rendering is in a BackStackScreen but is not the first frame. Useful as a hint to enable \u201cgo back\u201d behavior.","title":"Other"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/default/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / default default \u00b6 val default: BackStackConfig","title":"Default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/default/#default","text":"val default: BackStackConfig","title":"default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / Companion Companion \u00b6 companion object Companion : ViewEnvironmentKey < BackStackConfig > Companion Object Properties \u00b6 Name Summary default val default: BackStackConfig","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/#companion","text":"companion object Companion : ViewEnvironmentKey < BackStackConfig >","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/#companion-object-properties","text":"Name Summary default val default: BackStackConfig","title":"Companion Object Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/default/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackConfig / Companion / default default \u00b6 val default: BackStackConfig","title":"Default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-config/-companion/default/#default","text":"val default: BackStackConfig","title":"default"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackContainer BackStackContainer \u00b6 @WorkflowUiExperimentalApi open class BackStackContainer : FrameLayout A container view that can display a stream of BackStackScreen instances. Types \u00b6 Name Summary Companion companion object Companion : ViewFactory < BackStackScreen <*>> Constructors \u00b6 Name Summary <init> A container view that can display a stream of BackStackScreen instances. BackStackContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) Functions \u00b6 Name Summary onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable performTransition Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named <BackStackScreen<*>> . open fun performTransition(oldViewMaybe: View?, newView: View, popped: Boolean ): Unit update fun update(newRendering: BackStackScreen <*>, newViewEnvironment: ViewEnvironment ): Unit","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/#backstackcontainer","text":"@WorkflowUiExperimentalApi open class BackStackContainer : FrameLayout A container view that can display a stream of BackStackScreen instances.","title":"BackStackContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/#types","text":"Name Summary Companion companion object Companion : ViewFactory < BackStackScreen <*>>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/#constructors","text":"Name Summary <init> A container view that can display a stream of BackStackScreen instances. BackStackContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/#functions","text":"Name Summary onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable performTransition Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named <BackStackScreen<*>> . open fun performTransition(oldViewMaybe: View?, newView: View, popped: Boolean ): Unit update fun update(newRendering: BackStackScreen <*>, newViewEnvironment: ViewEnvironment ): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-companion/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackContainer / Companion Companion \u00b6 companion object Companion : ViewFactory < BackStackScreen <*>>","title":" companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-companion/#companion","text":"companion object Companion : ViewFactory < BackStackScreen <*>>","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-init-/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackContainer / <init> <init> \u00b6 BackStackContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) A container view that can display a stream of BackStackScreen instances.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/-init-/#init","text":"BackStackContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) A container view that can display a stream of BackStackScreen instances.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/on-restore-instance-state/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackContainer / onRestoreInstanceState onRestoreInstanceState \u00b6 protected open fun onRestoreInstanceState(state: Parcelable): Unit","title":"On restore instance state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/on-restore-instance-state/#onrestoreinstancestate","text":"protected open fun onRestoreInstanceState(state: Parcelable): Unit","title":"onRestoreInstanceState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/on-save-instance-state/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackContainer / onSaveInstanceState onSaveInstanceState \u00b6 protected open fun onSaveInstanceState(): Parcelable","title":"On save instance state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/on-save-instance-state/#onsaveinstancestate","text":"protected open fun onSaveInstanceState(): Parcelable","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/perform-transition/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackContainer / performTransition performTransition \u00b6 protected open fun performTransition(oldViewMaybe: View?, newView: View, popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named <BackStackScreen<*>> . Parameters \u00b6 oldViewMaybe - the outgoing view, or null if this is the initial rendering. newView - the view that should replace oldViewMaybe (if it exists), and become this view\u2019s only child popped - true if we should give the appearance of popping \u201cback\u201d to a previous rendering, false if a new rendering is being \u201cpushed\u201d. Should be ignored if oldViewMaybe is null.","title":"Perform transition"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/perform-transition/#performtransition","text":"protected open fun performTransition(oldViewMaybe: View?, newView: View, popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named <BackStackScreen<*>> .","title":"performTransition"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/perform-transition/#parameters","text":"oldViewMaybe - the outgoing view, or null if this is the initial rendering. newView - the view that should replace oldViewMaybe (if it exists), and become this view\u2019s only child popped - true if we should give the appearance of popping \u201cback\u201d to a previous rendering, false if a new rendering is being \u201cpushed\u201d. Should be ignored if oldViewMaybe is null.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/update/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackContainer / update update \u00b6 protected fun update(newRendering: BackStackScreen <*>, newViewEnvironment: ViewEnvironment ): Unit","title":"Update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-container/update/#update","text":"protected fun update(newRendering: BackStackScreen <*>, newViewEnvironment: ViewEnvironment ): Unit","title":"update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen BackStackScreen \u00b6 @WorkflowUiExperimentalApi class BackStackScreen<StackedT : Any > Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty. Parameters \u00b6 bottom - the bottom-most entry in the stack rest - the rest of the stack, empty by default Constructors \u00b6 Name Summary <init> Creates a screen with elements listed from the bottom to the top. BackStackScreen(bottom: StackedT, vararg rest: StackedT) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. BackStackScreen(bottom: StackedT, rest: List <StackedT>) Properties \u00b6 Name Summary backStack Screens to which we may return. val backStack: List <StackedT> frames val frames: List <StackedT> top The active screen. val top: StackedT Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean get operator fun get(index: Int ): StackedT hashCode fun hashCode(): Int map fun <R : Any > map(transform: (StackedT) -> R): BackStackScreen <R> mapIndexed fun <R : Any > mapIndexed(transform: (index: Int , StackedT) -> R): BackStackScreen <R> plus operator fun plus(other: BackStackScreen <StackedT>?): BackStackScreen <StackedT> toString fun toString(): String","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#backstackscreen","text":"@WorkflowUiExperimentalApi class BackStackScreen<StackedT : Any > Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty.","title":"BackStackScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#parameters","text":"bottom - the bottom-most entry in the stack rest - the rest of the stack, empty by default","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#constructors","text":"Name Summary <init> Creates a screen with elements listed from the bottom to the top. BackStackScreen(bottom: StackedT, vararg rest: StackedT) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. BackStackScreen(bottom: StackedT, rest: List <StackedT>)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#properties","text":"Name Summary backStack Screens to which we may return. val backStack: List <StackedT> frames val frames: List <StackedT> top The active screen. val top: StackedT","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean get operator fun get(index: Int ): StackedT hashCode fun hashCode(): Int map fun <R : Any > map(transform: (StackedT) -> R): BackStackScreen <R> mapIndexed fun <R : Any > mapIndexed(transform: (index: Int , StackedT) -> R): BackStackScreen <R> plus operator fun plus(other: BackStackScreen <StackedT>?): BackStackScreen <StackedT> toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/-init-/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / <init> <init> \u00b6 BackStackScreen(bottom: StackedT, vararg rest: StackedT) Creates a screen with elements listed from the bottom to the top. BackStackScreen(bottom: StackedT, rest: List <StackedT>) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty. Parameters \u00b6 bottom - the bottom-most entry in the stack rest - the rest of the stack, empty by default","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/-init-/#init","text":"BackStackScreen(bottom: StackedT, vararg rest: StackedT) Creates a screen with elements listed from the bottom to the top. BackStackScreen(bottom: StackedT, rest: List <StackedT>) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/-init-/#parameters","text":"bottom - the bottom-most entry in the stack rest - the rest of the stack, empty by default","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/back-stack/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / backStack backStack \u00b6 val backStack: List <StackedT> Screens to which we may return.","title":"Back stack"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/back-stack/#backstack","text":"val backStack: List <StackedT> Screens to which we may return.","title":"backStack"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/equals/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/frames/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / frames frames \u00b6 val frames: List <StackedT>","title":"Frames"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/frames/#frames","text":"val frames: List <StackedT>","title":"frames"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/get/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / get get \u00b6 operator fun get(index: Int ): StackedT","title":"Get"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/get/#get","text":"operator fun get(index: Int ): StackedT","title":"get"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/hash-code/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/map-indexed/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / mapIndexed mapIndexed \u00b6 fun <R : Any > mapIndexed(transform: (index: Int , StackedT) -> R): BackStackScreen <R>","title":"Map indexed"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/map-indexed/#mapindexed","text":"fun <R : Any > mapIndexed(transform: (index: Int , StackedT) -> R): BackStackScreen <R>","title":"mapIndexed"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/map/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / map map \u00b6 fun <R : Any > map(transform: (StackedT) -> R): BackStackScreen <R>","title":"Map"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/map/#map","text":"fun <R : Any > map(transform: (StackedT) -> R): BackStackScreen <R>","title":"map"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/plus/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / plus plus \u00b6 operator fun plus(other: BackStackScreen <StackedT>?): BackStackScreen <StackedT>","title":"Plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/plus/#plus","text":"operator fun plus(other: BackStackScreen <StackedT>?): BackStackScreen <StackedT>","title":"plus"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/to-string/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/top/","text":"workflow / com.squareup.workflow1.ui.backstack / BackStackScreen / top top \u00b6 val top: StackedT The active screen.","title":"Top"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-back-stack-screen/top/#top","text":"val top: StackedT The active screen.","title":"top"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache ViewStateCache \u00b6 @WorkflowUiExperimentalApi class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets. This class implements Parcelable so that it can be preserved from a container view\u2019s own View.saveHierarchyState method. A simple container can return SavedState from that method rather than creating its own persistence class. Types \u00b6 Name Summary CREATOR companion object CREATOR : Creator< ViewStateCache > SavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. class SavedState : BaseSavedState Constructors \u00b6 Name Summary <init> ViewStateCache() Functions \u00b6 Name Summary describeContents fun describeContents(): Int prune To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped. fun prune(retaining: Collection < Named <*>>): Unit restore Replaces the state of the receiver with that of from . Typical usage is to call this from a container view\u2019s View.onRestoreInstanceState . fun restore(from: ViewStateCache ): Unit update fun update(retainedRenderings: Collection < Named <*>>, oldViewMaybe: View?, newView: View): Unit writeToParcel fun writeToParcel(parcel: Parcel, flags: Int ): Unit Companion Object Functions \u00b6 Name Summary createFromParcel fun createFromParcel(parcel: Parcel): ViewStateCache newArray fun newArray(size: Int ): Array < ViewStateCache ?>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/#viewstatecache","text":"@WorkflowUiExperimentalApi class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time \u2013 think back stacks or tab sets. This class implements Parcelable so that it can be preserved from a container view\u2019s own View.saveHierarchyState method. A simple container can return SavedState from that method rather than creating its own persistence class.","title":"ViewStateCache"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/#types","text":"Name Summary CREATOR companion object CREATOR : Creator< ViewStateCache > SavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. class SavedState : BaseSavedState","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/#constructors","text":"Name Summary <init> ViewStateCache()","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/#functions","text":"Name Summary describeContents fun describeContents(): Int prune To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped. fun prune(retaining: Collection < Named <*>>): Unit restore Replaces the state of the receiver with that of from . Typical usage is to call this from a container view\u2019s View.onRestoreInstanceState . fun restore(from: ViewStateCache ): Unit update fun update(retainedRenderings: Collection < Named <*>>, oldViewMaybe: View?, newView: View): Unit writeToParcel fun writeToParcel(parcel: Parcel, flags: Int ): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(parcel: Parcel): ViewStateCache newArray fun newArray(size: Int ): Array < ViewStateCache ?>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-init-/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / <init> <init> \u00b6 ViewStateCache()","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-init-/#init","text":"ViewStateCache()","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/create-from-parcel/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / createFromParcel createFromParcel \u00b6 fun createFromParcel(parcel: Parcel): ViewStateCache","title":"Create from parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/create-from-parcel/#createfromparcel","text":"fun createFromParcel(parcel: Parcel): ViewStateCache","title":"createFromParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/describe-contents/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / describeContents describeContents \u00b6 fun describeContents(): Int","title":"Describe contents"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/describe-contents/#describecontents","text":"fun describeContents(): Int","title":"describeContents"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/new-array/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / newArray newArray \u00b6 fun newArray(size: Int ): Array < ViewStateCache ?>","title":"New array"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/new-array/#newarray","text":"fun newArray(size: Int ): Array < ViewStateCache ?>","title":"newArray"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/prune/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / prune prune \u00b6 fun prune(retaining: Collection < Named <*>>): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped.","title":"Prune"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/prune/#prune","text":"fun prune(retaining: Collection < Named <*>>): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped.","title":"prune"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/restore/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / restore restore \u00b6 fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view\u2019s View.onRestoreInstanceState .","title":"Restore"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/restore/#restore","text":"fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view\u2019s View.onRestoreInstanceState .","title":"restore"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/update/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / update update \u00b6 fun update(retainedRenderings: Collection < Named <*>>, oldViewMaybe: View?, newView: View): Unit Parameters \u00b6 retainedRenderings - the renderings to be considered hidden after this update. Any associated view state will be retained in the cache, possibly to be restored to newView on a succeeding call to his method. Any other cached view state will be dropped. oldViewMaybe - the view that is being removed, if any, which is expected to be showing a Named rendering. If that rendering is compatible with a member of retainedRenderings , its state will be saved . newView - the view that is about to be displayed, which must be showing a Named rendering. If compatible view state is found in the cache, it is restored . Return true if newView has been restored.","title":"Update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/update/#update","text":"fun update(retainedRenderings: Collection < Named <*>>, oldViewMaybe: View?, newView: View): Unit","title":"update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/update/#parameters","text":"retainedRenderings - the renderings to be considered hidden after this update. Any associated view state will be retained in the cache, possibly to be restored to newView on a succeeding call to his method. Any other cached view state will be dropped. oldViewMaybe - the view that is being removed, if any, which is expected to be showing a Named rendering. If that rendering is compatible with a member of retainedRenderings , its state will be saved . newView - the view that is about to be displayed, which must be showing a Named rendering. If compatible view state is found in the cache, it is restored . Return true if newView has been restored.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/write-to-parcel/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / writeToParcel writeToParcel \u00b6 fun writeToParcel(parcel: Parcel, flags: Int ): Unit","title":"Write to parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/write-to-parcel/#writetoparcel","text":"fun writeToParcel(parcel: Parcel, flags: Int ): Unit","title":"writeToParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / CREATOR CREATOR \u00b6 companion object CREATOR : Creator< ViewStateCache > Companion Object Functions \u00b6 Name Summary createFromParcel fun createFromParcel(parcel: Parcel): ViewStateCache newArray fun newArray(size: Int ): Array < ViewStateCache ?>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/#creator","text":"companion object CREATOR : Creator< ViewStateCache >","title":"CREATOR"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(parcel: Parcel): ViewStateCache newArray fun newArray(size: Int ): Array < ViewStateCache ?>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/create-from-parcel/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / CREATOR / createFromParcel createFromParcel \u00b6 fun createFromParcel(parcel: Parcel): ViewStateCache","title":"Create from parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/create-from-parcel/#createfromparcel","text":"fun createFromParcel(parcel: Parcel): ViewStateCache","title":"createFromParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/new-array/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / CREATOR / newArray newArray \u00b6 fun newArray(size: Int ): Array < ViewStateCache ?>","title":"New array"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/new-array/#newarray","text":"fun newArray(size: Int ): Array < ViewStateCache ?>","title":"newArray"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState SavedState \u00b6 class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. More interesting containers should create their own subclass of BaseSavedState rather than trying to extend this one. Types \u00b6 Name Summary CREATOR companion object CREATOR : Creator<SavedState> Constructors \u00b6 Name Summary <init> SavedState(superState: Parcelable?, viewStateCache: ViewStateCache ) SavedState(source: Parcel) Properties \u00b6 Name Summary viewStateCache val viewStateCache: ViewStateCache Functions \u00b6 Name Summary writeToParcel fun writeToParcel(out: Parcel, flags: Int ): Unit Companion Object Functions \u00b6 Name Summary createFromParcel fun createFromParcel(source: Parcel): SavedState newArray fun newArray(size: Int ): Array <SavedState?>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#savedstate","text":"class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. More interesting containers should create their own subclass of BaseSavedState rather than trying to extend this one.","title":"SavedState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#types","text":"Name Summary CREATOR companion object CREATOR : Creator<SavedState>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#constructors","text":"Name Summary <init> SavedState(superState: Parcelable?, viewStateCache: ViewStateCache ) SavedState(source: Parcel)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#properties","text":"Name Summary viewStateCache val viewStateCache: ViewStateCache","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#functions","text":"Name Summary writeToParcel fun writeToParcel(out: Parcel, flags: Int ): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(source: Parcel): SavedState newArray fun newArray(size: Int ): Array <SavedState?>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-init-/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / <init> <init> \u00b6 SavedState(superState: Parcelable?, viewStateCache: ViewStateCache ) SavedState(source: Parcel)","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-init-/#init","text":"SavedState(superState: Parcelable?, viewStateCache: ViewStateCache ) SavedState(source: Parcel)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/create-from-parcel/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / createFromParcel createFromParcel \u00b6 fun createFromParcel(source: Parcel): SavedState","title":"Create from parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/create-from-parcel/#createfromparcel","text":"fun createFromParcel(source: Parcel): SavedState","title":"createFromParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/new-array/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / newArray newArray \u00b6 fun newArray(size: Int ): Array <SavedState?>","title":"New array"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/new-array/#newarray","text":"fun newArray(size: Int ): Array <SavedState?>","title":"newArray"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/view-state-cache/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / viewStateCache viewStateCache \u00b6 val viewStateCache: ViewStateCache","title":"View state cache"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/view-state-cache/#viewstatecache","text":"val viewStateCache: ViewStateCache","title":"viewStateCache"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/write-to-parcel/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / writeToParcel writeToParcel \u00b6 fun writeToParcel(out: Parcel, flags: Int ): Unit","title":"Write to parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/write-to-parcel/#writetoparcel","text":"fun writeToParcel(out: Parcel, flags: Int ): Unit","title":"writeToParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / CREATOR CREATOR \u00b6 companion object CREATOR : Creator<SavedState> Companion Object Functions \u00b6 Name Summary createFromParcel fun createFromParcel(source: Parcel): SavedState newArray fun newArray(size: Int ): Array <SavedState?>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/#creator","text":"companion object CREATOR : Creator<SavedState>","title":"CREATOR"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(source: Parcel): SavedState newArray fun newArray(size: Int ): Array <SavedState?>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/create-from-parcel/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / CREATOR / createFromParcel createFromParcel \u00b6 fun createFromParcel(source: Parcel): SavedState","title":"Create from parcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/create-from-parcel/#createfromparcel","text":"fun createFromParcel(source: Parcel): SavedState","title":"createFromParcel"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/new-array/","text":"workflow / com.squareup.workflow1.ui.backstack / ViewStateCache / SavedState / CREATOR / newArray newArray \u00b6 fun newArray(size: Int ): Array <SavedState?>","title":"New array"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/new-array/#newarray","text":"fun newArray(size: Int ): Array <SavedState?>","title":"newArray"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/kotlin.collections.-list/","text":"workflow / com.squareup.workflow1.ui.backstack / kotlin.collections.List Extensions for kotlin.collections.List \u00b6 Name Summary toBackStackScreen fun <T : Any > List <T>.toBackStackScreen(): BackStackScreen <T> toBackStackScreenOrNull fun <T : Any > List <T>.toBackStackScreenOrNull(): BackStackScreen <T>?","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/kotlin.collections.-list/#extensions-for-kotlincollectionslist","text":"Name Summary toBackStackScreen fun <T : Any > List <T>.toBackStackScreen(): BackStackScreen <T> toBackStackScreenOrNull fun <T : Any > List <T>.toBackStackScreenOrNull(): BackStackScreen <T>?","title":"Extensions for kotlin.collections.List"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/kotlin.collections.-list/to-back-stack-screen-or-null/","text":"workflow / com.squareup.workflow1.ui.backstack / kotlin.collections.List / toBackStackScreenOrNull toBackStackScreenOrNull \u00b6 @WorkflowUiExperimentalApi fun <T : Any > List <T>.toBackStackScreenOrNull(): BackStackScreen <T>?","title":"To back stack screen or null"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/kotlin.collections.-list/to-back-stack-screen-or-null/#tobackstackscreenornull","text":"@WorkflowUiExperimentalApi fun <T : Any > List <T>.toBackStackScreenOrNull(): BackStackScreen <T>?","title":"toBackStackScreenOrNull"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/kotlin.collections.-list/to-back-stack-screen/","text":"workflow / com.squareup.workflow1.ui.backstack / kotlin.collections.List / toBackStackScreen toBackStackScreen \u00b6 @WorkflowUiExperimentalApi fun <T : Any > List <T>.toBackStackScreen(): BackStackScreen <T>","title":"To back stack screen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.backstack/kotlin.collections.-list/to-back-stack-screen/#tobackstackscreen","text":"@WorkflowUiExperimentalApi fun <T : Any > List <T>.toBackStackScreen(): BackStackScreen <T>","title":"toBackStackScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/","text":"workflow / com.squareup.workflow1.ui.modal Package com.squareup.workflow1.ui.modal \u00b6 Types \u00b6 Name Summary AlertContainer Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s. class AlertContainer : ModalContainer < AlertScreen > AlertContainerScreen May show a stack of AlertScreen over a beneathModals . data class AlertContainerScreen<B : Any > : HasModals <B, AlertScreen > AlertScreen Models a typical \u201cYou sure about that?\u201d alert box. data class AlertScreen HasModals Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . interface HasModals<out B : Any , out M : Any > ModalContainer Base class for containers that show HasModals.modals in Dialog windows. abstract class ModalContainer<ModalRenderingT : Any > : FrameLayout ModalViewContainer Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . open class ModalViewContainer : ModalContainer < Any >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/#package-comsquareupworkflow1uimodal","text":"","title":"Package com.squareup.workflow1.ui.modal"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/#types","text":"Name Summary AlertContainer Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s. class AlertContainer : ModalContainer < AlertScreen > AlertContainerScreen May show a stack of AlertScreen over a beneathModals . data class AlertContainerScreen<B : Any > : HasModals <B, AlertScreen > AlertScreen Models a typical \u201cYou sure about that?\u201d alert box. data class AlertScreen HasModals Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . interface HasModals<out B : Any , out M : Any > ModalContainer Base class for containers that show HasModals.modals in Dialog windows. abstract class ModalContainer<ModalRenderingT : Any > : FrameLayout ModalViewContainer Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . open class ModalViewContainer : ModalContainer < Any >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainer AlertContainer \u00b6 @WorkflowUiExperimentalApi class AlertContainer : ModalContainer < AlertScreen > Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s. Types \u00b6 Name Summary Companion companion object Companion : ViewFactory < AlertContainerScreen <*>> Constructors \u00b6 Name Summary <init> Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s. AlertContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0, dialogThemeResId: Int = 0) Functions \u00b6 Name Summary buildDialog Called to create (but not show) a Dialog to render initialModalRendering . fun buildDialog(initialModalRendering: AlertScreen , initialViewEnvironment: ViewEnvironment ): DialogRef< AlertScreen > updateDialog fun updateDialog(dialogRef: DialogRef< AlertScreen >): Unit Companion Object Functions \u00b6 Name Summary customThemeBinding Creates a ViewFactory to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. fun customThemeBinding(dialogThemeResId: Int = 0): ViewFactory < AlertContainerScreen <*>>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/#alertcontainer","text":"@WorkflowUiExperimentalApi class AlertContainer : ModalContainer < AlertScreen > Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s.","title":"AlertContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/#types","text":"Name Summary Companion companion object Companion : ViewFactory < AlertContainerScreen <*>>","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/#constructors","text":"Name Summary <init> Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s. AlertContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0, dialogThemeResId: Int = 0)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/#functions","text":"Name Summary buildDialog Called to create (but not show) a Dialog to render initialModalRendering . fun buildDialog(initialModalRendering: AlertScreen , initialViewEnvironment: ViewEnvironment ): DialogRef< AlertScreen > updateDialog fun updateDialog(dialogRef: DialogRef< AlertScreen >): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/#companion-object-functions","text":"Name Summary customThemeBinding Creates a ViewFactory to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. fun customThemeBinding(dialogThemeResId: Int = 0): ViewFactory < AlertContainerScreen <*>>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-init-/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainer / <init> <init> \u00b6 AlertContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0, @StyleRes dialogThemeResId: Int = 0) Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-init-/#init","text":"AlertContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0, @StyleRes dialogThemeResId: Int = 0) Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/build-dialog/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainer / buildDialog buildDialog \u00b6 protected fun buildDialog(initialModalRendering: AlertScreen , initialViewEnvironment: ViewEnvironment ): DialogRef< AlertScreen > Called to create (but not show) a Dialog to render initialModalRendering .","title":"Build dialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/build-dialog/#builddialog","text":"protected fun buildDialog(initialModalRendering: AlertScreen , initialViewEnvironment: ViewEnvironment ): DialogRef< AlertScreen > Called to create (but not show) a Dialog to render initialModalRendering .","title":"buildDialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/custom-theme-binding/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainer / customThemeBinding customThemeBinding \u00b6 fun customThemeBinding(@StyleRes dialogThemeResId: Int = 0): ViewFactory < AlertContainerScreen <*>> Creates a ViewFactory to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. Parameters \u00b6 dialogThemeResId - the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context \u2018s default alert dialog theme.","title":"Custom theme binding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/custom-theme-binding/#customthemebinding","text":"fun customThemeBinding(@StyleRes dialogThemeResId: Int = 0): ViewFactory < AlertContainerScreen <*>> Creates a ViewFactory to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s.","title":"customThemeBinding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/custom-theme-binding/#parameters","text":"dialogThemeResId - the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context \u2018s default alert dialog theme.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/update-dialog/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainer / updateDialog updateDialog \u00b6 protected fun updateDialog(dialogRef: DialogRef< AlertScreen >): Unit","title":"Update dialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/update-dialog/#updatedialog","text":"protected fun updateDialog(dialogRef: DialogRef< AlertScreen >): Unit","title":"updateDialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainer / Companion Companion \u00b6 companion object Companion : ViewFactory < AlertContainerScreen <*>> Companion Object Functions \u00b6 Name Summary customThemeBinding Creates a ViewFactory to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. fun customThemeBinding(dialogThemeResId: Int = 0): ViewFactory < AlertContainerScreen <*>>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/#companion","text":"companion object Companion : ViewFactory < AlertContainerScreen <*>>","title":"Companion"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/#companion-object-functions","text":"Name Summary customThemeBinding Creates a ViewFactory to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. fun customThemeBinding(dialogThemeResId: Int = 0): ViewFactory < AlertContainerScreen <*>>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/custom-theme-binding/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainer / Companion / customThemeBinding customThemeBinding \u00b6 fun customThemeBinding(@StyleRes dialogThemeResId: Int = 0): ViewFactory < AlertContainerScreen <*>> Creates a ViewFactory to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. Parameters \u00b6 dialogThemeResId - the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context \u2018s default alert dialog theme.","title":"Custom theme binding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/custom-theme-binding/#customthemebinding","text":"fun customThemeBinding(@StyleRes dialogThemeResId: Int = 0): ViewFactory < AlertContainerScreen <*>> Creates a ViewFactory to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s.","title":"customThemeBinding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container/-companion/custom-theme-binding/#parameters","text":"dialogThemeResId - the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context \u2018s default alert dialog theme.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainerScreen AlertContainerScreen \u00b6 @WorkflowUiExperimentalApi data class AlertContainerScreen<B : Any > : HasModals <B, AlertScreen > May show a stack of AlertScreen over a beneathModals . Parameters \u00b6 B - the type of beneathModals Constructors \u00b6 Name Summary <init> AlertContainerScreen(baseScreen: B, alert: AlertScreen ) AlertContainerScreen(baseScreen: B, vararg alerts: AlertScreen ) May show a stack of AlertScreen over a beneathModals . AlertContainerScreen(beneathModals: B, modals: List < AlertScreen > = emptyList()) Properties \u00b6 Name Summary beneathModals val beneathModals: B modals val modals: List < AlertScreen >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/#alertcontainerscreen","text":"@WorkflowUiExperimentalApi data class AlertContainerScreen<B : Any > : HasModals <B, AlertScreen > May show a stack of AlertScreen over a beneathModals .","title":"AlertContainerScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/#parameters","text":"B - the type of beneathModals","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/#constructors","text":"Name Summary <init> AlertContainerScreen(baseScreen: B, alert: AlertScreen ) AlertContainerScreen(baseScreen: B, vararg alerts: AlertScreen ) May show a stack of AlertScreen over a beneathModals . AlertContainerScreen(beneathModals: B, modals: List < AlertScreen > = emptyList())","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/#properties","text":"Name Summary beneathModals val beneathModals: B modals val modals: List < AlertScreen >","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/-init-/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainerScreen / <init> <init> \u00b6 AlertContainerScreen(baseScreen: B, alert: AlertScreen ) AlertContainerScreen(baseScreen: B, vararg alerts: AlertScreen )``AlertContainerScreen(beneathModals: B, modals: List < AlertScreen > = emptyList()) May show a stack of AlertScreen over a beneathModals . Parameters \u00b6 B - the type of beneathModals","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/-init-/#init","text":"AlertContainerScreen(baseScreen: B, alert: AlertScreen ) AlertContainerScreen(baseScreen: B, vararg alerts: AlertScreen )``AlertContainerScreen(beneathModals: B, modals: List < AlertScreen > = emptyList()) May show a stack of AlertScreen over a beneathModals .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/-init-/#parameters","text":"B - the type of beneathModals","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/beneath-modals/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainerScreen / beneathModals beneathModals \u00b6 val beneathModals: B","title":"Beneath modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/beneath-modals/#beneathmodals","text":"val beneathModals: B","title":"beneathModals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/modals/","text":"workflow / com.squareup.workflow1.ui.modal / AlertContainerScreen / modals modals \u00b6 val modals: List < AlertScreen >","title":"Modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-container-screen/modals/#modals","text":"val modals: List < AlertScreen >","title":"modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen AlertScreen \u00b6 @WorkflowUiExperimentalApi data class AlertScreen Models a typical \u201cYou sure about that?\u201d alert box. Types \u00b6 Name Summary Button enum class Button Event sealed class Event Constructors \u00b6 Name Summary <init> Models a typical \u201cYou sure about that?\u201d alert box. AlertScreen(buttons: Map <Button, String > = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: (Event) -> Unit ) Properties \u00b6 Name Summary buttons val buttons: Map <Button, String > cancelable val cancelable: Boolean message val message: String onEvent val onEvent: (Event) -> Unit title val title: String Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#alertscreen","text":"@WorkflowUiExperimentalApi data class AlertScreen Models a typical \u201cYou sure about that?\u201d alert box.","title":"AlertScreen"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#types","text":"Name Summary Button enum class Button Event sealed class Event","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#constructors","text":"Name Summary <init> Models a typical \u201cYou sure about that?\u201d alert box. AlertScreen(buttons: Map <Button, String > = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: (Event) -> Unit )","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#properties","text":"Name Summary buttons val buttons: Map <Button, String > cancelable val cancelable: Boolean message val message: String onEvent val onEvent: (Event) -> Unit title val title: String","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-init-/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / <init> <init> \u00b6 AlertScreen(buttons: Map <Button, String > = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: (Event) -> Unit ) Models a typical \u201cYou sure about that?\u201d alert box.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-init-/#init","text":"AlertScreen(buttons: Map <Button, String > = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: (Event) -> Unit ) Models a typical \u201cYou sure about that?\u201d alert box.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/buttons/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / buttons buttons \u00b6 val buttons: Map <Button, String >","title":"Buttons"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/buttons/#buttons","text":"val buttons: Map <Button, String >","title":"buttons"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/cancelable/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / cancelable cancelable \u00b6 val cancelable: Boolean","title":"Cancelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/cancelable/#cancelable","text":"val cancelable: Boolean","title":"cancelable"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/equals/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/hash-code/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/message/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / message message \u00b6 val message: String","title":"Message"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/message/#message","text":"val message: String","title":"message"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/on-event/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / onEvent onEvent \u00b6 val onEvent: (Event) -> Unit","title":"On event"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/on-event/#onevent","text":"val onEvent: (Event) -> Unit","title":"onEvent"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/title/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / title title \u00b6 val title: String","title":"Title"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/title/#title","text":"val title: String","title":"title"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button Button \u00b6 enum class Button Enum Values \u00b6 Name Summary POSITIVE NEGATIVE NEUTRAL","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/#button","text":"enum class Button","title":"Button"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/#enum-values","text":"Name Summary POSITIVE NEGATIVE NEUTRAL","title":"Enum Values"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-g-a-t-i-v-e/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / NEGATIVE NEGATIVE \u00b6 NEGATIVE","title":" n e g a t i v e"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-g-a-t-i-v-e/#negative","text":"NEGATIVE","title":"NEGATIVE"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-u-t-r-a-l/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / NEUTRAL NEUTRAL \u00b6 NEUTRAL","title":" n e u t r a l"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-n-e-u-t-r-a-l/#neutral","text":"NEUTRAL","title":"NEUTRAL"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-p-o-s-i-t-i-v-e/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / Button / POSITIVE POSITIVE \u00b6 POSITIVE","title":" p o s i t i v e"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-button/-p-o-s-i-t-i-v-e/#positive","text":"POSITIVE","title":"POSITIVE"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event Event \u00b6 sealed class Event Types \u00b6 Name Summary ButtonClicked data class ButtonClicked : Event Canceled object Canceled : Event","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/#event","text":"sealed class Event","title":"Event"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/#types","text":"Name Summary ButtonClicked data class ButtonClicked : Event Canceled object Canceled : Event","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-canceled/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event / Canceled Canceled \u00b6 object Canceled : Event","title":" canceled"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-canceled/#canceled","text":"object Canceled : Event","title":"Canceled"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event / ButtonClicked ButtonClicked \u00b6 data class ButtonClicked : Event Constructors \u00b6 Name Summary <init> ButtonClicked(button: Button) Properties \u00b6 Name Summary button val button: Button","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/#buttonclicked","text":"data class ButtonClicked : Event","title":"ButtonClicked"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/#constructors","text":"Name Summary <init> ButtonClicked(button: Button)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/#properties","text":"Name Summary button val button: Button","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/-init-/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event / ButtonClicked / <init> <init> \u00b6 ButtonClicked(button: Button)","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/-init-/#init","text":"ButtonClicked(button: Button)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/button/","text":"workflow / com.squareup.workflow1.ui.modal / AlertScreen / Event / ButtonClicked / button button \u00b6 val button: Button","title":"Button"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-alert-screen/-event/-button-clicked/button/#button","text":"val button: Button","title":"button"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/","text":"workflow / com.squareup.workflow1.ui.modal / HasModals HasModals \u00b6 @WorkflowUiExperimentalApi interface HasModals<out B : Any , out M : Any > Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui:core-android module. Properties \u00b6 Name Summary beneathModals abstract val beneathModals: B modals abstract val modals: List <M> Inheritors \u00b6 Name Summary AlertContainerScreen May show a stack of AlertScreen over a beneathModals . data class AlertContainerScreen<B : Any > : HasModals <B, AlertScreen >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/#hasmodals","text":"@WorkflowUiExperimentalApi interface HasModals<out B : Any , out M : Any > Interface implemented by screen classes that represent a stack of zero or more modal screens above a base screen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui:core-android module.","title":"HasModals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/#properties","text":"Name Summary beneathModals abstract val beneathModals: B modals abstract val modals: List <M>","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/#inheritors","text":"Name Summary AlertContainerScreen May show a stack of AlertScreen over a beneathModals . data class AlertContainerScreen<B : Any > : HasModals <B, AlertScreen >","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/beneath-modals/","text":"workflow / com.squareup.workflow1.ui.modal / HasModals / beneathModals beneathModals \u00b6 abstract val beneathModals: B","title":"Beneath modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/beneath-modals/#beneathmodals","text":"abstract val beneathModals: B","title":"beneathModals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/modals/","text":"workflow / com.squareup.workflow1.ui.modal / HasModals / modals modals \u00b6 abstract val modals: List <M>","title":"Modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-has-modals/modals/#modals","text":"abstract val modals: List <M>","title":"modals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer ModalContainer \u00b6 @WorkflowUiExperimentalApi abstract class ModalContainer<ModalRenderingT : Any > : FrameLayout Base class for containers that show HasModals.modals in Dialog windows. Parameters \u00b6 ModalRenderingT - the type of the nested renderings to be shown in a dialog window. Types \u00b6 Name Summary DialogRef data class DialogRef<ModalRenderingT : Any > Constructors \u00b6 Name Summary <init> Base class for containers that show HasModals.modals in Dialog windows. ModalContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) Functions \u00b6 Name Summary buildDialog Called to create (but not show) a Dialog to render initialModalRendering . abstract fun buildDialog(initialModalRendering: ModalRenderingT, initialViewEnvironment: ViewEnvironment ): DialogRef<ModalRenderingT> onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable update fun update(newScreen: HasModals <*, ModalRenderingT>, viewEnvironment: ViewEnvironment ): Unit updateDialog abstract fun updateDialog(dialogRef: DialogRef<ModalRenderingT>): Unit Inheritors \u00b6 Name Summary AlertContainer Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s. class AlertContainer : ModalContainer < AlertScreen > ModalViewContainer Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . open class ModalViewContainer : ModalContainer < Any >","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#modalcontainer","text":"@WorkflowUiExperimentalApi abstract class ModalContainer<ModalRenderingT : Any > : FrameLayout Base class for containers that show HasModals.modals in Dialog windows.","title":"ModalContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#parameters","text":"ModalRenderingT - the type of the nested renderings to be shown in a dialog window.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#types","text":"Name Summary DialogRef data class DialogRef<ModalRenderingT : Any >","title":"Types"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#constructors","text":"Name Summary <init> Base class for containers that show HasModals.modals in Dialog windows. ModalContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#functions","text":"Name Summary buildDialog Called to create (but not show) a Dialog to render initialModalRendering . abstract fun buildDialog(initialModalRendering: ModalRenderingT, initialViewEnvironment: ViewEnvironment ): DialogRef<ModalRenderingT> onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable update fun update(newScreen: HasModals <*, ModalRenderingT>, viewEnvironment: ViewEnvironment ): Unit updateDialog abstract fun updateDialog(dialogRef: DialogRef<ModalRenderingT>): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/#inheritors","text":"Name Summary AlertContainer Renders the AlertScreen s of an AlertContainerScreen as AlertDialog s. class AlertContainer : ModalContainer < AlertScreen > ModalViewContainer Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . open class ModalViewContainer : ModalContainer < Any >","title":"Inheritors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-init-/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / <init> <init> \u00b6 ModalContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) Base class for containers that show HasModals.modals in Dialog windows. Parameters \u00b6 ModalRenderingT - the type of the nested renderings to be shown in a dialog window.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-init-/#init","text":"ModalContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) Base class for containers that show HasModals.modals in Dialog windows.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-init-/#parameters","text":"ModalRenderingT - the type of the nested renderings to be shown in a dialog window.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/build-dialog/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / buildDialog buildDialog \u00b6 protected abstract fun buildDialog(initialModalRendering: ModalRenderingT, initialViewEnvironment: ViewEnvironment ): DialogRef<ModalRenderingT> Called to create (but not show) a Dialog to render initialModalRendering .","title":"Build dialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/build-dialog/#builddialog","text":"protected abstract fun buildDialog(initialModalRendering: ModalRenderingT, initialViewEnvironment: ViewEnvironment ): DialogRef<ModalRenderingT> Called to create (but not show) a Dialog to render initialModalRendering .","title":"buildDialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/on-restore-instance-state/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / onRestoreInstanceState onRestoreInstanceState \u00b6 protected open fun onRestoreInstanceState(state: Parcelable): Unit","title":"On restore instance state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/on-restore-instance-state/#onrestoreinstancestate","text":"protected open fun onRestoreInstanceState(state: Parcelable): Unit","title":"onRestoreInstanceState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/on-save-instance-state/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / onSaveInstanceState onSaveInstanceState \u00b6 protected open fun onSaveInstanceState(): Parcelable","title":"On save instance state"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/on-save-instance-state/#onsaveinstancestate","text":"protected open fun onSaveInstanceState(): Parcelable","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/update-dialog/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / updateDialog updateDialog \u00b6 protected abstract fun updateDialog(dialogRef: DialogRef<ModalRenderingT>): Unit","title":"Update dialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/update-dialog/#updatedialog","text":"protected abstract fun updateDialog(dialogRef: DialogRef<ModalRenderingT>): Unit","title":"updateDialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/update/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / update update \u00b6 protected fun update(newScreen: HasModals <*, ModalRenderingT>, viewEnvironment: ViewEnvironment ): Unit","title":"Update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/update/#update","text":"protected fun update(newScreen: HasModals <*, ModalRenderingT>, viewEnvironment: ViewEnvironment ): Unit","title":"update"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / DialogRef DialogRef \u00b6 @WorkflowUiExperimentalApi protected data class DialogRef<ModalRenderingT : Any > Parameters \u00b6 extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality. Constructors \u00b6 Name Summary <init> DialogRef(modalRendering: ModalRenderingT, viewEnvironment: ViewEnvironment , dialog: Dialog, extra: Any ? = null) Properties \u00b6 Name Summary dialog val dialog: Dialog extra optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality. val extra: Any ? modalRendering val modalRendering: ModalRenderingT viewEnvironment val viewEnvironment: ViewEnvironment Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/#dialogref","text":"@WorkflowUiExperimentalApi protected data class DialogRef<ModalRenderingT : Any >","title":"DialogRef"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/#parameters","text":"extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/#constructors","text":"Name Summary <init> DialogRef(modalRendering: ModalRenderingT, viewEnvironment: ViewEnvironment , dialog: Dialog, extra: Any ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/#properties","text":"Name Summary dialog val dialog: Dialog extra optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality. val extra: Any ? modalRendering val modalRendering: ModalRenderingT viewEnvironment val viewEnvironment: ViewEnvironment","title":"Properties"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/-init-/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / DialogRef / <init> <init> \u00b6 DialogRef(modalRendering: ModalRenderingT, viewEnvironment: ViewEnvironment , dialog: Dialog, extra: Any ? = null) Parameters \u00b6 extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/-init-/#init","text":"DialogRef(modalRendering: ModalRenderingT, viewEnvironment: ViewEnvironment , dialog: Dialog, extra: Any ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/-init-/#parameters","text":"extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/dialog/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / DialogRef / dialog dialog \u00b6 val dialog: Dialog","title":"Dialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/dialog/#dialog","text":"val dialog: Dialog","title":"dialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/equals/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / DialogRef / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/extra/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / DialogRef / extra extra \u00b6 val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"Extra"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/extra/#extra","text":"val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"extra"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/hash-code/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / DialogRef / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/modal-rendering/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / DialogRef / modalRendering modalRendering \u00b6 val modalRendering: ModalRenderingT","title":"Modal rendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/modal-rendering/#modalrendering","text":"val modalRendering: ModalRenderingT","title":"modalRendering"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/view-environment/","text":"workflow / com.squareup.workflow1.ui.modal / ModalContainer / DialogRef / viewEnvironment viewEnvironment \u00b6 val viewEnvironment: ViewEnvironment","title":"View environment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-container/-dialog-ref/view-environment/#viewenvironment","text":"val viewEnvironment: ViewEnvironment","title":"viewEnvironment"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/","text":"workflow / com.squareup.workflow1.ui.modal / ModalViewContainer ModalViewContainer \u00b6 @WorkflowUiExperimentalApi open class ModalViewContainer : ModalContainer < Any > Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . Use binding to assign particular rendering types to be shown this way. Constructors \u00b6 Name Summary <init> Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . ModalViewContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) Functions \u00b6 Name Summary buildDialog Called to create (but not show) a Dialog to render initialModalRendering . fun buildDialog(initialModalRendering: Any , initialViewEnvironment: ViewEnvironment ): DialogRef< Any > buildDialogForView Called from buildDialog . Builds (but does not show) the Dialog to display a view built via ViewRegistry . open fun buildDialogForView(view: View): Dialog updateDialog open fun updateDialog(dialogRef: DialogRef< Any >): Unit Companion Object Functions \u00b6 Name Summary binding Creates a ViewFactory for modal container screens of type H . fun <H : HasModals <*, *>> binding(id: Int = View.NO_ID): ViewFactory <H>","title":"Index"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/#modalviewcontainer","text":"@WorkflowUiExperimentalApi open class ModalViewContainer : ModalContainer < Any > Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . Use binding to assign particular rendering types to be shown this way.","title":"ModalViewContainer"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/#constructors","text":"Name Summary <init> Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . ModalViewContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0)","title":"Constructors"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/#functions","text":"Name Summary buildDialog Called to create (but not show) a Dialog to render initialModalRendering . fun buildDialog(initialModalRendering: Any , initialViewEnvironment: ViewEnvironment ): DialogRef< Any > buildDialogForView Called from buildDialog . Builds (but does not show) the Dialog to display a view built via ViewRegistry . open fun buildDialogForView(view: View): Dialog updateDialog open fun updateDialog(dialogRef: DialogRef< Any >): Unit","title":"Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/#companion-object-functions","text":"Name Summary binding Creates a ViewFactory for modal container screens of type H . fun <H : HasModals <*, *>> binding(id: Int = View.NO_ID): ViewFactory <H>","title":"Companion Object Functions"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-init-/","text":"workflow / com.squareup.workflow1.ui.modal / ModalViewContainer / <init> <init> \u00b6 ModalViewContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . Use binding to assign particular rendering types to be shown this way.","title":" init "},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/-init-/#init","text":"ModalViewContainer(context: Context, attributeSet: AttributeSet? = null, defStyle: Int = 0, defStyleRes: Int = 0) Container that shows HasModals.modals as arbitrary views in a Dialog window. Provides compatibility with View.backPressedHandler . Use binding to assign particular rendering types to be shown this way.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/binding/","text":"workflow / com.squareup.workflow1.ui.modal / ModalViewContainer / binding binding \u00b6 fun <reified H : HasModals <*, *>> binding(@IdRes id: Int = View.NO_ID): ViewFactory <H> Creates a ViewFactory for modal container screens of type H . Each view created for HasModals.modals will be shown in a Dialog whose window is set to size itself to WRAP_CONTENT (see android.view.Window.setLayout ). Parameters \u00b6 id - a unique identifier for containers of this type, allowing them to participate view persistence","title":"Binding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/binding/#binding","text":"fun <reified H : HasModals <*, *>> binding(@IdRes id: Int = View.NO_ID): ViewFactory <H> Creates a ViewFactory for modal container screens of type H . Each view created for HasModals.modals will be shown in a Dialog whose window is set to size itself to WRAP_CONTENT (see android.view.Window.setLayout ).","title":"binding"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/binding/#parameters","text":"id - a unique identifier for containers of this type, allowing them to participate view persistence","title":"Parameters"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/build-dialog-for-view/","text":"workflow / com.squareup.workflow1.ui.modal / ModalViewContainer / buildDialogForView buildDialogForView \u00b6 open fun buildDialogForView(view: View): Dialog Called from buildDialog . Builds (but does not show) the Dialog to display a view built via ViewRegistry . Subclasses may override completely to build their own kind of Dialog , there is no need to call super .","title":"Build dialog for view"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/build-dialog-for-view/#builddialogforview","text":"open fun buildDialogForView(view: View): Dialog Called from buildDialog . Builds (but does not show) the Dialog to display a view built via ViewRegistry . Subclasses may override completely to build their own kind of Dialog , there is no need to call super .","title":"buildDialogForView"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/build-dialog/","text":"workflow / com.squareup.workflow1.ui.modal / ModalViewContainer / buildDialog buildDialog \u00b6 protected fun buildDialog(initialModalRendering: Any , initialViewEnvironment: ViewEnvironment ): DialogRef< Any > Called to create (but not show) a Dialog to render initialModalRendering .","title":"Build dialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/build-dialog/#builddialog","text":"protected fun buildDialog(initialModalRendering: Any , initialViewEnvironment: ViewEnvironment ): DialogRef< Any > Called to create (but not show) a Dialog to render initialModalRendering .","title":"buildDialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/update-dialog/","text":"workflow / com.squareup.workflow1.ui.modal / ModalViewContainer / updateDialog updateDialog \u00b6 protected open fun updateDialog(dialogRef: DialogRef< Any >): Unit","title":"Update dialog"},{"location":"kotlin/api/workflow/com.squareup.workflow1.ui.modal/-modal-view-container/update-dialog/#updatedialog","text":"protected open fun updateDialog(dialogRef: DialogRef< Any >): Unit","title":"updateDialog"},{"location":"sequence_diagrams/","text":"These are the source files used to generate the sequence diagrams via WebSequenceDiagrams .","title":"Index"},{"location":"swift/api/Workflow/","text":"Reference Documentation \u00b6 Protocols \u00b6 AnyWorkflowConvertible Workflow WorkflowAction WorkflowDebugger Structs \u00b6 AnyWorkflow AnyWorkflowAction Sink WorkflowHierarchyDebugSnapshot WorkflowHierarchyDebugSnapshot.Child WorkflowUpdateDebugInfo Classes \u00b6 Lifetime RenderContext WorkflowHost Enums \u00b6 WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source Extensions \u00b6 AnyWorkflow AnyWorkflowAction AnyWorkflowConvertible RenderContext Workflow WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source This file was generated by SourceDocs on 2021-03-10 00:31:32 +0000","title":"Workflow "},{"location":"swift/api/Workflow/#reference-documentation","text":"","title":"Reference Documentation"},{"location":"swift/api/Workflow/#protocols","text":"AnyWorkflowConvertible Workflow WorkflowAction WorkflowDebugger","title":"Protocols"},{"location":"swift/api/Workflow/#structs","text":"AnyWorkflow AnyWorkflowAction Sink WorkflowHierarchyDebugSnapshot WorkflowHierarchyDebugSnapshot.Child WorkflowUpdateDebugInfo","title":"Structs"},{"location":"swift/api/Workflow/#classes","text":"Lifetime RenderContext WorkflowHost","title":"Classes"},{"location":"swift/api/Workflow/#enums","text":"WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source","title":"Enums"},{"location":"swift/api/Workflow/#extensions","text":"AnyWorkflow AnyWorkflowAction AnyWorkflowConvertible RenderContext Workflow WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source This file was generated by SourceDocs on 2021-03-10 00:31:32 +0000","title":"Extensions"},{"location":"swift/api/Workflow/classes/Lifetime/","text":"CLASS Lifetime \u00b6 public final class Lifetime Represents the lifetime of an object. Once ended, the onEnded closure is called. Properties \u00b6 hasEnded \u00b6 public private ( set ) var hasEnded : Bool = false Methods \u00b6 onEnded(_:) \u00b6 public func onEnded ( _ action : @ escaping () -> Void ) Hook to clean-up after end of lifetime . deinit \u00b6 deinit","title":"Lifetime"},{"location":"swift/api/Workflow/classes/Lifetime/#lifetime","text":"public final class Lifetime Represents the lifetime of an object. Once ended, the onEnded closure is called.","title":"Lifetime"},{"location":"swift/api/Workflow/classes/Lifetime/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/classes/Lifetime/#hasended","text":"public private ( set ) var hasEnded : Bool = false","title":"hasEnded"},{"location":"swift/api/Workflow/classes/Lifetime/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/classes/Lifetime/#onended_","text":"public func onEnded ( _ action : @ escaping () -> Void ) Hook to clean-up after end of lifetime .","title":"onEnded(_:)"},{"location":"swift/api/Workflow/classes/Lifetime/#deinit","text":"deinit","title":"deinit"},{"location":"swift/api/Workflow/classes/RenderContext/","text":"CLASS RenderContext \u00b6 public class RenderContext < WorkflowType : Workflow >: RenderContextType RenderContext is the composition point for the workflow tree. During a render pass, a workflow may want to defer to a child workflow to render some portion of its content. For example, a workflow that renders to a split-screen view model might delegate to child A for the left side, and child B for the right side view models. Nesting allows for a fractal tree that is constructed out of many small parts. If a parent wants to delegate to a child workflow, it must first create an instance of that workflow. This can be thought of as the model of the child workflow. It does not contain any active state, it simply contains the data necessary to create or update a workflow node. The parent then calls render(workflow:outputMap:) with two values: - The child workflow. - A closure that transforms the child\u2019s output events into the parent\u2019s Event type so that the parent can respond to events generated by the child. If the parent had previously rendered a child of the same type, the existing child workflow node is updated. If the parent had not rendered a child of the same type in the previous render pass, a new child workflow node is generated. The infrastructure then performs a render pass on the child to obtain its Rendering value, which is then returned to the caller. Methods \u00b6 makeSink(of:) \u00b6 public func makeSink < Action >( of actionType : Action . Type ) -> Sink < Action > where Action : WorkflowAction , Action . WorkflowType == WorkflowType runSideEffect(key:action:) \u00b6 public func runSideEffect ( key : AnyHashable , action : ( Lifetime ) -> Void ) Execute a side-effect action. Note that it is a programmer error to run two side-effects with the same key during the same render pass. action will be executed the first time a side-effect is run with a given key . runSideEffect calls with a given key on subsequent renders are ignored. If after a render pass, a side-effect with a key that was previously used is not used, it\u2019s lifetime ends and the Lifetime object\u2019s onEnded closure will be called. Parameters: key: represents the block of work that needs to be executed. action: a block of work that will be executed. Parameters \u00b6 Name Description key represents the block of work that needs to be executed. action a block of work that will be executed.","title":"RenderContext"},{"location":"swift/api/Workflow/classes/RenderContext/#rendercontext","text":"public class RenderContext < WorkflowType : Workflow >: RenderContextType RenderContext is the composition point for the workflow tree. During a render pass, a workflow may want to defer to a child workflow to render some portion of its content. For example, a workflow that renders to a split-screen view model might delegate to child A for the left side, and child B for the right side view models. Nesting allows for a fractal tree that is constructed out of many small parts. If a parent wants to delegate to a child workflow, it must first create an instance of that workflow. This can be thought of as the model of the child workflow. It does not contain any active state, it simply contains the data necessary to create or update a workflow node. The parent then calls render(workflow:outputMap:) with two values: - The child workflow. - A closure that transforms the child\u2019s output events into the parent\u2019s Event type so that the parent can respond to events generated by the child. If the parent had previously rendered a child of the same type, the existing child workflow node is updated. If the parent had not rendered a child of the same type in the previous render pass, a new child workflow node is generated. The infrastructure then performs a render pass on the child to obtain its Rendering value, which is then returned to the caller.","title":"RenderContext"},{"location":"swift/api/Workflow/classes/RenderContext/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/classes/RenderContext/#makesinkof","text":"public func makeSink < Action >( of actionType : Action . Type ) -> Sink < Action > where Action : WorkflowAction , Action . WorkflowType == WorkflowType","title":"makeSink(of:)"},{"location":"swift/api/Workflow/classes/RenderContext/#runsideeffectkeyaction","text":"public func runSideEffect ( key : AnyHashable , action : ( Lifetime ) -> Void ) Execute a side-effect action. Note that it is a programmer error to run two side-effects with the same key during the same render pass. action will be executed the first time a side-effect is run with a given key . runSideEffect calls with a given key on subsequent renders are ignored. If after a render pass, a side-effect with a key that was previously used is not used, it\u2019s lifetime ends and the Lifetime object\u2019s onEnded closure will be called. Parameters: key: represents the block of work that needs to be executed. action: a block of work that will be executed.","title":"runSideEffect(key:action:)"},{"location":"swift/api/Workflow/classes/RenderContext/#parameters","text":"Name Description key represents the block of work that needs to be executed. action a block of work that will be executed.","title":"Parameters"},{"location":"swift/api/Workflow/classes/WorkflowHost/","text":"CLASS WorkflowHost \u00b6 public final class WorkflowHost < WorkflowType : Workflow > Manages an active workflow hierarchy. Properties \u00b6 rendering \u00b6 public let rendering : Property < WorkflowType . Rendering > Represents the Rendering produced by the root workflow in the hierarchy. New Rendering values are produced as state transitions occur within the hierarchy. output \u00b6 public var output : Signal < WorkflowType . Output , Never > A signal containing output events emitted by the root workflow in the hierarchy. Methods \u00b6 init(workflow:debugger:) \u00b6 public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) Initializes a new host with the given workflow at the root. Parameter workflow: The root workflow in the hierarchy Parameter debugger: An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur. Parameters \u00b6 Name Description workflow The root workflow in the hierarchy debugger An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur. update(workflow:) \u00b6 public func update ( workflow : WorkflowType ) Update the input for the workflow. Will cause a render pass.","title":"WorkflowHost"},{"location":"swift/api/Workflow/classes/WorkflowHost/#workflowhost","text":"public final class WorkflowHost < WorkflowType : Workflow > Manages an active workflow hierarchy.","title":"WorkflowHost"},{"location":"swift/api/Workflow/classes/WorkflowHost/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/classes/WorkflowHost/#rendering","text":"public let rendering : Property < WorkflowType . Rendering > Represents the Rendering produced by the root workflow in the hierarchy. New Rendering values are produced as state transitions occur within the hierarchy.","title":"rendering"},{"location":"swift/api/Workflow/classes/WorkflowHost/#output","text":"public var output : Signal < WorkflowType . Output , Never > A signal containing output events emitted by the root workflow in the hierarchy.","title":"output"},{"location":"swift/api/Workflow/classes/WorkflowHost/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/classes/WorkflowHost/#initworkflowdebugger","text":"public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) Initializes a new host with the given workflow at the root. Parameter workflow: The root workflow in the hierarchy Parameter debugger: An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur.","title":"init(workflow:debugger:)"},{"location":"swift/api/Workflow/classes/WorkflowHost/#parameters","text":"Name Description workflow The root workflow in the hierarchy debugger An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur.","title":"Parameters"},{"location":"swift/api/Workflow/classes/WorkflowHost/#updateworkflow","text":"public func update ( workflow : WorkflowType ) Update the input for the workflow. Will cause a render pass.","title":"update(workflow:)"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/","text":"ENUM WorkflowUpdateDebugInfo.Kind \u00b6 public indirect enum Kind : Equatable Cases \u00b6 didUpdate(source:) \u00b6 case didUpdate ( source : Source ) childDidUpdate(_:) \u00b6 case childDidUpdate ( WorkflowUpdateDebugInfo )","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/#workflowupdatedebuginfokind","text":"public indirect enum Kind : Equatable","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/#cases","text":"","title":"Cases"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/#didupdatesource","text":"case didUpdate ( source : Source )","title":"didUpdate(source:)"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Kind/#childdidupdate_","text":"case childDidUpdate ( WorkflowUpdateDebugInfo )","title":"childDidUpdate(_:)"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/","text":"ENUM WorkflowUpdateDebugInfo.Source \u00b6 public indirect enum Source : Equatable Cases \u00b6 external \u00b6 case external worker \u00b6 case worker sideEffect \u00b6 case sideEffect subtree(_:) \u00b6 case subtree ( WorkflowUpdateDebugInfo )","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#workflowupdatedebuginfosource","text":"public indirect enum Source : Equatable","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#cases","text":"","title":"Cases"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#external","text":"case external","title":"external"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#worker","text":"case worker","title":"worker"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#sideeffect","text":"case sideEffect","title":"sideEffect"},{"location":"swift/api/Workflow/enums/WorkflowUpdateDebugInfo.Source/#subtree_","text":"case subtree ( WorkflowUpdateDebugInfo )","title":"subtree(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/","text":"EXTENSION AnyWorkflow \u00b6 extension AnyWorkflow : AnyWorkflowConvertible Methods \u00b6 asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Rendering , Output > mapOutput(_:) \u00b6 public func mapOutput < NewOutput >( _ transform : @ escaping ( Output ) -> NewOutput ) -> AnyWorkflow < Rendering , NewOutput > Returns a new AnyWorkflow whose Output type has been transformed into the given type. Parameter transform: An escaping closure that maps the original output type into the new output type. Returns: A type erased workflow with the new output type (the rendering type remains unchanged). Parameters \u00b6 Name Description transform An escaping closure that maps the original output type into the new output type. mapRendering(_:) \u00b6 public func mapRendering < NewRendering >( _ transform : @ escaping ( Rendering ) -> NewRendering ) -> AnyWorkflow < NewRendering , Output > Returns a new AnyWorkflow whose Rendering type has been transformed into the given type. Parameter transform: An escaping closure that maps the original rendering type into the new rendering type. Returns: A type erased workflow with the new rendering type (the output type remains unchanged). Parameters \u00b6 Name Description transform An escaping closure that maps the original rendering type into the new rendering type.","title":"AnyWorkflow"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#anyworkflow","text":"extension AnyWorkflow : AnyWorkflowConvertible","title":"AnyWorkflow"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Rendering , Output >","title":"asAnyWorkflow()"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#mapoutput_","text":"public func mapOutput < NewOutput >( _ transform : @ escaping ( Output ) -> NewOutput ) -> AnyWorkflow < Rendering , NewOutput > Returns a new AnyWorkflow whose Output type has been transformed into the given type. Parameter transform: An escaping closure that maps the original output type into the new output type. Returns: A type erased workflow with the new output type (the rendering type remains unchanged).","title":"mapOutput(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#parameters","text":"Name Description transform An escaping closure that maps the original output type into the new output type.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#maprendering_","text":"public func mapRendering < NewRendering >( _ transform : @ escaping ( Rendering ) -> NewRendering ) -> AnyWorkflow < NewRendering , Output > Returns a new AnyWorkflow whose Rendering type has been transformed into the given type. Parameter transform: An escaping closure that maps the original rendering type into the new rendering type. Returns: A type erased workflow with the new rendering type (the output type remains unchanged).","title":"mapRendering(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#parameters_1","text":"Name Description transform An escaping closure that maps the original rendering type into the new rendering type.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/","text":"EXTENSION AnyWorkflowAction \u00b6 extension AnyWorkflowAction Methods \u00b6 init(sendingOutput:) \u00b6 public init ( sendingOutput output : WorkflowType . Output ) Creates a type-erased workflow action that simply sends the given output event. Parameter output: The output event to send when this action is applied. Parameters \u00b6 Name Description output The output event to send when this action is applied.","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#anyworkflowaction","text":"extension AnyWorkflowAction","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#initsendingoutput","text":"public init ( sendingOutput output : WorkflowType . Output ) Creates a type-erased workflow action that simply sends the given output event. Parameter output: The output event to send when this action is applied.","title":"init(sendingOutput:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#parameters","text":"Name Description output The output event to send when this action is applied.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/","text":"EXTENSION AnyWorkflowConvertible \u00b6 extension AnyWorkflowConvertible Methods \u00b6 mapOutput(_:) \u00b6 public func mapOutput < NewOutput >( _ transform : @ escaping ( Output ) -> NewOutput ) -> AnyWorkflow < Rendering , NewOutput > mapRendering(_:) \u00b6 public func mapRendering < NewRendering >( _ transform : @ escaping ( Rendering ) -> NewRendering ) -> AnyWorkflow < NewRendering , Output > rendered(in:key:) \u00b6 public func rendered < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) -> Rendering where Output : WorkflowAction , Output . WorkflowType == Parent Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow. Parameters \u00b6 Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow. rendered(in:key:outputMap:) \u00b6 public func rendered < Parent , Action >( in context : RenderContext < Parent >, key : String = \"\" , outputMap : @ escaping ( Output ) -> Action ) -> Rendering where Action : WorkflowAction , Action . WorkflowType == Parent rendered(in:key:) \u00b6 public func rendered < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) -> Rendering where Output == AnyWorkflowAction < Parent > rendered(in:key:) \u00b6 public func rendered < T >( in context : RenderContext < T >, key : String = \"\" ) -> Rendering Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow. Parameters \u00b6 Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow. running(in:key:outputMap:) \u00b6 public func running < Parent , Action >( in context : RenderContext < Parent >, key : String = \"\" , outputMap : @ escaping ( Output ) -> Action ) where Action : WorkflowAction , Action . WorkflowType == Parent running(in:key:) \u00b6 public func running < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) where Parent : Workflow , Output . WorkflowType == Parent onOutput(_:) \u00b6 public func onOutput < Parent >( _ apply : @ escaping (( inout Parent . State , Output ) -> Parent . Output ?)) -> AnyWorkflow < Rendering , AnyWorkflowAction < Parent > > Process an Output Parameter apply: On Output , mutate State as necessary and return new Output (or nil ). Parameters \u00b6 Name Description apply On Output , mutate State as necessary and return new Output (or nil ). ignoringOutput() \u00b6 public func ignoringOutput () -> AnyWorkflow < Rendering , Never > Wraps this workflow in a workflow that ignores all outputs. Returns: An AnyWorkflow with the same rendering and no output.","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#anyworkflowconvertible","text":"extension AnyWorkflowConvertible","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#mapoutput_","text":"public func mapOutput < NewOutput >( _ transform : @ escaping ( Output ) -> NewOutput ) -> AnyWorkflow < Rendering , NewOutput >","title":"mapOutput(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#maprendering_","text":"public func mapRendering < NewRendering >( _ transform : @ escaping ( Rendering ) -> NewRendering ) -> AnyWorkflow < NewRendering , Output >","title":"mapRendering(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedinkey","text":"public func rendered < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) -> Rendering where Output : WorkflowAction , Output . WorkflowType == Parent Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow.","title":"rendered(in:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#parameters","text":"Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedinkeyoutputmap","text":"public func rendered < Parent , Action >( in context : RenderContext < Parent >, key : String = \"\" , outputMap : @ escaping ( Output ) -> Action ) -> Rendering where Action : WorkflowAction , Action . WorkflowType == Parent","title":"rendered(in:key:outputMap:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedinkey_1","text":"public func rendered < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) -> Rendering where Output == AnyWorkflowAction < Parent >","title":"rendered(in:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedinkey_2","text":"public func rendered < T >( in context : RenderContext < T >, key : String = \"\" ) -> Rendering Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow.","title":"rendered(in:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#parameters_1","text":"Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#runninginkeyoutputmap","text":"public func running < Parent , Action >( in context : RenderContext < Parent >, key : String = \"\" , outputMap : @ escaping ( Output ) -> Action ) where Action : WorkflowAction , Action . WorkflowType == Parent","title":"running(in:key:outputMap:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#runninginkey","text":"public func running < Parent >( in context : RenderContext < Parent >, key : String = \"\" ) where Parent : Workflow , Output . WorkflowType == Parent","title":"running(in:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#onoutput_","text":"public func onOutput < Parent >( _ apply : @ escaping (( inout Parent . State , Output ) -> Parent . Output ?)) -> AnyWorkflow < Rendering , AnyWorkflowAction < Parent > > Process an Output Parameter apply: On Output , mutate State as necessary and return new Output (or nil ).","title":"onOutput(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#parameters_2","text":"Name Description apply On Output , mutate State as necessary and return new Output (or nil ).","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#ignoringoutput","text":"public func ignoringOutput () -> AnyWorkflow < Rendering , Never > Wraps this workflow in a workflow that ignores all outputs. Returns: An AnyWorkflow with the same rendering and no output.","title":"ignoringOutput()"},{"location":"swift/api/Workflow/extensions/RenderContext/","text":"EXTENSION RenderContext \u00b6 extension RenderContext Methods \u00b6 makeSink(of:onEvent:) \u00b6 public func makeSink < Event >( of eventType : Event . Type , onEvent : @ escaping ( Event , inout WorkflowType . State ) -> WorkflowType . Output ?) -> Sink < Event > makeOutputSink() \u00b6 public func makeOutputSink () -> Sink < WorkflowType . Output > Generates a sink that allows sending the Workflow\u2019s output wrapped in an AnyWorkflowAction, allowing bypassing an intermediate action.","title":"RenderContext"},{"location":"swift/api/Workflow/extensions/RenderContext/#rendercontext","text":"extension RenderContext","title":"RenderContext"},{"location":"swift/api/Workflow/extensions/RenderContext/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/RenderContext/#makesinkofonevent","text":"public func makeSink < Event >( of eventType : Event . Type , onEvent : @ escaping ( Event , inout WorkflowType . State ) -> WorkflowType . Output ?) -> Sink < Event >","title":"makeSink(of:onEvent:)"},{"location":"swift/api/Workflow/extensions/RenderContext/#makeoutputsink","text":"public func makeOutputSink () -> Sink < WorkflowType . Output > Generates a sink that allows sending the Workflow\u2019s output wrapped in an AnyWorkflowAction, allowing bypassing an intermediate action.","title":"makeOutputSink()"},{"location":"swift/api/Workflow/extensions/Workflow/","text":"EXTENSION Workflow \u00b6 extension Workflow Methods \u00b6 workflowDidChange(from:state:) \u00b6 public func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Parameters \u00b6 Name Description previousWorkflow The workflow before the update. state The current state. makeInitialState() \u00b6 public func makeInitialState () -> State workflowDidChange(from:state:) \u00b6 public func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Parameters \u00b6 Name Description previousWorkflow The workflow before the update. state The current state. asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Rendering , Output >","title":"Workflow"},{"location":"swift/api/Workflow/extensions/Workflow/#workflow","text":"extension Workflow","title":"Workflow"},{"location":"swift/api/Workflow/extensions/Workflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/Workflow/#workflowdidchangefromstate","text":"public func workflowDidChange ( from previousWorkflow : Self , state : inout State )","title":"workflowDidChange(from:state:)"},{"location":"swift/api/Workflow/extensions/Workflow/#parameters","text":"Name Description previousWorkflow The workflow before the update. state The current state.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/Workflow/#makeinitialstate","text":"public func makeInitialState () -> State","title":"makeInitialState()"},{"location":"swift/api/Workflow/extensions/Workflow/#workflowdidchangefromstate_1","text":"public func workflowDidChange ( from previousWorkflow : Self , state : inout State )","title":"workflowDidChange(from:state:)"},{"location":"swift/api/Workflow/extensions/Workflow/#parameters_1","text":"Name Description previousWorkflow The workflow before the update. state The current state.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/Workflow/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Rendering , Output >","title":"asAnyWorkflow()"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/","text":"EXTENSION WorkflowUpdateDebugInfo.Kind \u00b6 extension WorkflowUpdateDebugInfo . Kind : Codable Methods \u00b6 encode(to:) \u00b6 public func encode ( to encoder : Encoder ) throws Parameters \u00b6 Name Description encoder The encoder to write data to. init(from:) \u00b6 public init ( from decoder : Decoder ) throws Parameters \u00b6 Name Description decoder The decoder to read data from.","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#workflowupdatedebuginfokind","text":"extension WorkflowUpdateDebugInfo . Kind : Codable","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#encodeto","text":"public func encode ( to encoder : Encoder ) throws","title":"encode(to:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#parameters","text":"Name Description encoder The encoder to write data to.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#initfrom","text":"public init ( from decoder : Decoder ) throws","title":"init(from:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#parameters_1","text":"Name Description decoder The decoder to read data from.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/","text":"EXTENSION WorkflowUpdateDebugInfo.Source \u00b6 extension WorkflowUpdateDebugInfo . Source : Codable Methods \u00b6 encode(to:) \u00b6 public func encode ( to encoder : Encoder ) throws Parameters \u00b6 Name Description encoder The encoder to write data to. init(from:) \u00b6 public init ( from decoder : Decoder ) throws Parameters \u00b6 Name Description decoder The decoder to read data from.","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#workflowupdatedebuginfosource","text":"extension WorkflowUpdateDebugInfo . Source : Codable","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#encodeto","text":"public func encode ( to encoder : Encoder ) throws","title":"encode(to:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#parameters","text":"Name Description encoder The encoder to write data to.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#initfrom","text":"public init ( from decoder : Decoder ) throws","title":"init(from:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#parameters_1","text":"Name Description decoder The decoder to read data from.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/","text":"PROTOCOL AnyWorkflowConvertible \u00b6 public protocol AnyWorkflowConvertible Conforming types can be converted into AnyWorkflow values, allowing them to participate in a workflow hierarchy. Methods \u00b6 asAnyWorkflow() \u00b6 func asAnyWorkflow () -> AnyWorkflow < Rendering , Output > Returns an AnyWorkflow representing this value.","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/#anyworkflowconvertible","text":"public protocol AnyWorkflowConvertible Conforming types can be converted into AnyWorkflow values, allowing them to participate in a workflow hierarchy.","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/#asanyworkflow","text":"func asAnyWorkflow () -> AnyWorkflow < Rendering , Output > Returns an AnyWorkflow representing this value.","title":"asAnyWorkflow()"},{"location":"swift/api/Workflow/protocols/Workflow/","text":"PROTOCOL Workflow \u00b6 public protocol Workflow : AnyWorkflowConvertible Defines a node in the workflow tree. Initialization and Updating A workflow node comes into existence after its parent produces an instance of that workflow and uses it during a render pass (see the render method for more details). If this is the first time the parent has rendered a child of this type, a new workflow node is created. The workflow passed in from the parent will be used to invoke initialState() to obtain an initial state. If the parent had previously rendered a child of this type, the existing workflow node will be updated. workflowDidChange(from:state:) will be invoked to allow the workflow to respond to the change. Render After a workflow node has been created, or any time its state changes, a render pass occurs. The render pass takes the workflow that was passed down from the parent along with the current state and generates a value of type Rendering . In a common case, a workflow might render to a screen model for display. func render(state: State, context: RenderContext<Self>) -> MyScreenModel { return MyScreenModel() } Methods \u00b6 makeInitialState() \u00b6 func makeInitialState () -> State This method is invoked once when a workflow node comes into existence. Returns: The initial state for the workflow. workflowDidChange(from:state:) \u00b6 func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Called when a new workflow is passed down from the parent to an existing workflow node. Parameter previousWorkflow: The workflow before the update. Parameter state: The current state. Parameters \u00b6 Name Description previousWorkflow The workflow before the update. state The current state. render(state:context:) \u00b6 func render ( state : State , context : RenderContext < Self >) -> Rendering Called by the internal Workflow infrastructure to \u201crender\u201d the current state into Rendering . A workflow\u2019s Rendering type is commonly a view or screen model. Parameter state: The current state. Parameter context: The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state, then call rendered(in:key:outputMap:) . This will return the child\u2019s Rendering type after creating or updating the nested workflow. Parameters \u00b6 Name Description state The current state. context The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state, then call rendered(in:key:outputMap:) . This will return the child\u2019s Rendering type after creating or updating the nested workflow.","title":"Workflow"},{"location":"swift/api/Workflow/protocols/Workflow/#workflow","text":"public protocol Workflow : AnyWorkflowConvertible Defines a node in the workflow tree. Initialization and Updating A workflow node comes into existence after its parent produces an instance of that workflow and uses it during a render pass (see the render method for more details). If this is the first time the parent has rendered a child of this type, a new workflow node is created. The workflow passed in from the parent will be used to invoke initialState() to obtain an initial state. If the parent had previously rendered a child of this type, the existing workflow node will be updated. workflowDidChange(from:state:) will be invoked to allow the workflow to respond to the change. Render After a workflow node has been created, or any time its state changes, a render pass occurs. The render pass takes the workflow that was passed down from the parent along with the current state and generates a value of type Rendering . In a common case, a workflow might render to a screen model for display. func render(state: State, context: RenderContext<Self>) -> MyScreenModel { return MyScreenModel() }","title":"Workflow"},{"location":"swift/api/Workflow/protocols/Workflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/Workflow/#makeinitialstate","text":"func makeInitialState () -> State This method is invoked once when a workflow node comes into existence. Returns: The initial state for the workflow.","title":"makeInitialState()"},{"location":"swift/api/Workflow/protocols/Workflow/#workflowdidchangefromstate","text":"func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Called when a new workflow is passed down from the parent to an existing workflow node. Parameter previousWorkflow: The workflow before the update. Parameter state: The current state.","title":"workflowDidChange(from:state:)"},{"location":"swift/api/Workflow/protocols/Workflow/#parameters","text":"Name Description previousWorkflow The workflow before the update. state The current state.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/Workflow/#renderstatecontext","text":"func render ( state : State , context : RenderContext < Self >) -> Rendering Called by the internal Workflow infrastructure to \u201crender\u201d the current state into Rendering . A workflow\u2019s Rendering type is commonly a view or screen model. Parameter state: The current state. Parameter context: The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state, then call rendered(in:key:outputMap:) . This will return the child\u2019s Rendering type after creating or updating the nested workflow.","title":"render(state:context:)"},{"location":"swift/api/Workflow/protocols/Workflow/#parameters_1","text":"Name Description state The current state. context The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state, then call rendered(in:key:outputMap:) . This will return the child\u2019s Rendering type after creating or updating the nested workflow.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/WorkflowAction/","text":"PROTOCOL WorkflowAction \u00b6 public protocol WorkflowAction Conforming types represent an action that advances a workflow. When applied, an action emits the next state and / or output for the workflow. Methods \u00b6 apply(toState:) \u00b6 func apply ( toState state : inout WorkflowType . State ) -> WorkflowType . Output ? Applies this action to a given state of the workflow, optionally returning an output event. Parameter state: The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application. Returns: An optional output event for the workflow. If an output event is returned, it will be passed up the workflow hierarchy to this workflow\u2019s parent. Parameters \u00b6 Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"WorkflowAction"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#workflowaction","text":"public protocol WorkflowAction Conforming types represent an action that advances a workflow. When applied, an action emits the next state and / or output for the workflow.","title":"WorkflowAction"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#applytostate","text":"func apply ( toState state : inout WorkflowType . State ) -> WorkflowType . Output ? Applies this action to a given state of the workflow, optionally returning an output event. Parameter state: The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application. Returns: An optional output event for the workflow. If an output event is returned, it will be passed up the workflow hierarchy to this workflow\u2019s parent.","title":"apply(toState:)"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#parameters","text":"Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/","text":"PROTOCOL WorkflowDebugger \u00b6 public protocol WorkflowDebugger Defines a type that receives debug information about a running workflow hierarchy. Methods \u00b6 didEnterInitialState(snapshot:) \u00b6 func didEnterInitialState ( snapshot : WorkflowHierarchyDebugSnapshot ) Called once when the workflow hierarchy initializes. Parameter snapshot: Debug information about the workflow hierarchy. Parameters \u00b6 Name Description snapshot Debug information about the workflow hierarchy. didUpdate(snapshot:updateInfo:) \u00b6 func didUpdate ( snapshot : WorkflowHierarchyDebugSnapshot , updateInfo : WorkflowUpdateDebugInfo ) Called when an update occurs anywhere within the workflow hierarchy. Parameter snapshot: Debug information about the workflow hierarchy after the update. Parameter updateInfo: Information about the update. Parameters \u00b6 Name Description snapshot Debug information about the workflow hierarchy the update. updateInfo Information about the update.","title":"WorkflowDebugger"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#workflowdebugger","text":"public protocol WorkflowDebugger Defines a type that receives debug information about a running workflow hierarchy.","title":"WorkflowDebugger"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#didenterinitialstatesnapshot","text":"func didEnterInitialState ( snapshot : WorkflowHierarchyDebugSnapshot ) Called once when the workflow hierarchy initializes. Parameter snapshot: Debug information about the workflow hierarchy.","title":"didEnterInitialState(snapshot:)"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#parameters","text":"Name Description snapshot Debug information about the workflow hierarchy.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#didupdatesnapshotupdateinfo","text":"func didUpdate ( snapshot : WorkflowHierarchyDebugSnapshot , updateInfo : WorkflowUpdateDebugInfo ) Called when an update occurs anywhere within the workflow hierarchy. Parameter snapshot: Debug information about the workflow hierarchy after the update. Parameter updateInfo: Information about the update.","title":"didUpdate(snapshot:updateInfo:)"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#parameters_1","text":"Name Description snapshot Debug information about the workflow hierarchy the update. updateInfo Information about the update.","title":"Parameters"},{"location":"swift/api/Workflow/structs/AnyWorkflow/","text":"STRUCT AnyWorkflow \u00b6 public struct AnyWorkflow < Rendering , Output > A type-erased wrapper that contains a workflow with the given Rendering and Output types. Properties \u00b6 workflowType \u00b6 public var workflowType : Any . Type The underlying workflow\u2019s implementation type. Methods \u00b6 init(_:) \u00b6 public init < T : Workflow >( _ workflow : T ) where T . Rendering == Rendering , T . Output == Output Initializes a new type-erased wrapper for the given workflow.","title":"AnyWorkflow"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#anyworkflow","text":"public struct AnyWorkflow < Rendering , Output > A type-erased wrapper that contains a workflow with the given Rendering and Output types.","title":"AnyWorkflow"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#workflowtype","text":"public var workflowType : Any . Type The underlying workflow\u2019s implementation type.","title":"workflowType"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#init_","text":"public init < T : Workflow >( _ workflow : T ) where T . Rendering == Rendering , T . Output == Output Initializes a new type-erased wrapper for the given workflow.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/","text":"STRUCT AnyWorkflowAction \u00b6 public struct AnyWorkflowAction < WorkflowType : Workflow >: WorkflowAction A type-erased workflow action. The AnyWorkflowAction type forwards apply to an underlying workflow action, hiding its specific underlying type, or to a closure that implements the apply logic. Methods \u00b6 init(_:) \u00b6 public init < E >( _ base : E ) where E : WorkflowAction , E . WorkflowType == WorkflowType Creates a type-erased workflow action that wraps the given instance. Parameter base: A workflow action to wrap. Parameters \u00b6 Name Description base A workflow action to wrap. init(_:) \u00b6 public init ( _ apply : @ escaping ( inout WorkflowType . State ) -> WorkflowType . Output ?) Creates a type-erased workflow action with the given apply implementation. Parameter apply: the apply function for the resulting action. Parameters \u00b6 Name Description apply the apply function for the resulting action. apply(toState:) \u00b6 public func apply ( toState state : inout WorkflowType . State ) -> WorkflowType . Output ? Parameters \u00b6 Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#anyworkflowaction","text":"public struct AnyWorkflowAction < WorkflowType : Workflow >: WorkflowAction A type-erased workflow action. The AnyWorkflowAction type forwards apply to an underlying workflow action, hiding its specific underlying type, or to a closure that implements the apply logic.","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#init_","text":"public init < E >( _ base : E ) where E : WorkflowAction , E . WorkflowType == WorkflowType Creates a type-erased workflow action that wraps the given instance. Parameter base: A workflow action to wrap.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#parameters","text":"Name Description base A workflow action to wrap.","title":"Parameters"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#init__1","text":"public init ( _ apply : @ escaping ( inout WorkflowType . State ) -> WorkflowType . Output ?) Creates a type-erased workflow action with the given apply implementation. Parameter apply: the apply function for the resulting action.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#parameters_1","text":"Name Description apply the apply function for the resulting action.","title":"Parameters"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#applytostate","text":"public func apply ( toState state : inout WorkflowType . State ) -> WorkflowType . Output ?","title":"apply(toState:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#parameters_2","text":"Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"Parameters"},{"location":"swift/api/Workflow/structs/Sink/","text":"STRUCT Sink \u00b6 public struct Sink < Value > Sink is a type that receives incoming values (commonly events or WorkflowAction ) Use RenderContext.makeSink to create instances. Methods \u00b6 init(_:) \u00b6 public init ( _ onValue : @ escaping ( Value ) -> Void ) Initializes a new sink with the given closure. send(_:) \u00b6 public func send ( _ value : Value ) Sends a new event into the sink. Parameter event: The value to send into the sink. Parameters \u00b6 Name Description event The value to send into the sink. contraMap(_:) \u00b6 public func contraMap < NewValue >( _ transform : @ escaping ( NewValue ) -> Value ) -> Sink < NewValue > Generates a new sink of type NewValue. Given a transform closure, the following code is functionally equivalent: sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type<T> into Type<U> via (T)->U . - contraMap turns Type<T> into Type<U> via (U)->T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API. Parameter transform: An escaping closure that transforms T into Event . Parameters \u00b6 Name Description transform An escaping closure that transforms T into Event .","title":"Sink"},{"location":"swift/api/Workflow/structs/Sink/#sink","text":"public struct Sink < Value > Sink is a type that receives incoming values (commonly events or WorkflowAction ) Use RenderContext.makeSink to create instances.","title":"Sink"},{"location":"swift/api/Workflow/structs/Sink/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/structs/Sink/#init_","text":"public init ( _ onValue : @ escaping ( Value ) -> Void ) Initializes a new sink with the given closure.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/Sink/#send_","text":"public func send ( _ value : Value ) Sends a new event into the sink. Parameter event: The value to send into the sink.","title":"send(_:)"},{"location":"swift/api/Workflow/structs/Sink/#parameters","text":"Name Description event The value to send into the sink.","title":"Parameters"},{"location":"swift/api/Workflow/structs/Sink/#contramap_","text":"public func contraMap < NewValue >( _ transform : @ escaping ( NewValue ) -> Value ) -> Sink < NewValue > Generates a new sink of type NewValue. Given a transform closure, the following code is functionally equivalent: sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type<T> into Type<U> via (T)->U . - contraMap turns Type<T> into Type<U> via (U)->T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API. Parameter transform: An escaping closure that transforms T into Event .","title":"contraMap(_:)"},{"location":"swift/api/Workflow/structs/Sink/#parameters_1","text":"Name Description transform An escaping closure that transforms T into Event .","title":"Parameters"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/","text":"STRUCT WorkflowHierarchyDebugSnapshot.Child \u00b6 public struct Child : Codable , Equatable Properties \u00b6 key \u00b6 public var key : String snapshot \u00b6 public var snapshot : WorkflowHierarchyDebugSnapshot","title":"WorkflowHierarchyDebugSnapshot.Child"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/#workflowhierarchydebugsnapshotchild","text":"public struct Child : Codable , Equatable","title":"WorkflowHierarchyDebugSnapshot.Child"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/#key","text":"public var key : String","title":"key"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot.Child/#snapshot","text":"public var snapshot : WorkflowHierarchyDebugSnapshot","title":"snapshot"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/","text":"STRUCT WorkflowHierarchyDebugSnapshot \u00b6 public struct WorkflowHierarchyDebugSnapshot : Codable , Equatable Properties \u00b6 workflowType \u00b6 public var workflowType : String stateDescription \u00b6 public var stateDescription : String children \u00b6 public var children : [ Child ]","title":"WorkflowHierarchyDebugSnapshot"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#workflowhierarchydebugsnapshot","text":"public struct WorkflowHierarchyDebugSnapshot : Codable , Equatable","title":"WorkflowHierarchyDebugSnapshot"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#workflowtype","text":"public var workflowType : String","title":"workflowType"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#statedescription","text":"public var stateDescription : String","title":"stateDescription"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#children","text":"public var children : [ Child ]","title":"children"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/","text":"STRUCT WorkflowUpdateDebugInfo \u00b6 public struct WorkflowUpdateDebugInfo : Codable , Equatable Properties \u00b6 workflowType \u00b6 public var workflowType : String kind \u00b6 public var kind : Kind","title":"WorkflowUpdateDebugInfo"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#workflowupdatedebuginfo","text":"public struct WorkflowUpdateDebugInfo : Codable , Equatable","title":"WorkflowUpdateDebugInfo"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#workflowtype","text":"public var workflowType : String","title":"workflowType"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#kind","text":"public var kind : Kind","title":"kind"},{"location":"swift/api/WorkflowReactiveSwift/","text":"Reference Documentation \u00b6 Protocols \u00b6 Worker Extensions \u00b6 Signal SignalProducer Worker Typealiases \u00b6 SignalProducerWorkflow.Output SignalProducerWorkflow.Rendering SignalProducerWorkflow.State This file was generated by SourceDocs on 2021-03-10 00:32:05 +0000","title":"WorkflowReactiveSwift"},{"location":"swift/api/WorkflowReactiveSwift/#reference-documentation","text":"","title":"Reference Documentation"},{"location":"swift/api/WorkflowReactiveSwift/#protocols","text":"Worker","title":"Protocols"},{"location":"swift/api/WorkflowReactiveSwift/#extensions","text":"Signal SignalProducer Worker","title":"Extensions"},{"location":"swift/api/WorkflowReactiveSwift/#typealiases","text":"SignalProducerWorkflow.Output SignalProducerWorkflow.Rendering SignalProducerWorkflow.State This file was generated by SourceDocs on 2021-03-10 00:32:05 +0000","title":"Typealiases"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Signal/","text":"EXTENSION Signal \u00b6 extension Signal : AnyWorkflowConvertible where Error == Never Methods \u00b6 asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Void , Value >","title":"Signal"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Signal/#signal","text":"extension Signal : AnyWorkflowConvertible where Error == Never","title":"Signal"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Signal/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Signal/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Void , Value >","title":"asAnyWorkflow()"},{"location":"swift/api/WorkflowReactiveSwift/extensions/SignalProducer/","text":"EXTENSION SignalProducer \u00b6 extension SignalProducer : AnyWorkflowConvertible where Error == Never Methods \u00b6 asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Void , Value >","title":"SignalProducer"},{"location":"swift/api/WorkflowReactiveSwift/extensions/SignalProducer/#signalproducer","text":"extension SignalProducer : AnyWorkflowConvertible where Error == Never","title":"SignalProducer"},{"location":"swift/api/WorkflowReactiveSwift/extensions/SignalProducer/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowReactiveSwift/extensions/SignalProducer/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Void , Value >","title":"asAnyWorkflow()"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/","text":"EXTENSION Worker \u00b6 extension Worker Methods \u00b6 asAnyWorkflow() \u00b6 public func asAnyWorkflow () -> AnyWorkflow < Void , Output > isEquivalent(to:) \u00b6 public func isEquivalent ( to otherWorker : Self ) -> Bool","title":"Worker"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/#worker","text":"extension Worker","title":"Worker"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/#asanyworkflow","text":"public func asAnyWorkflow () -> AnyWorkflow < Void , Output >","title":"asAnyWorkflow()"},{"location":"swift/api/WorkflowReactiveSwift/extensions/Worker/#isequivalentto","text":"public func isEquivalent ( to otherWorker : Self ) -> Bool","title":"isEquivalent(to:)"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/","text":"PROTOCOL Worker \u00b6 public protocol Worker : AnyWorkflowConvertible where Rendering == Void Workers define a unit of asynchronous work. During a render pass, a workflow can ask the context to await the result of a worker. When this occurs, the context checks to see if there is already a running worker of the same type. If there is, and if the workers are \u2018equivalent\u2019, the context leaves the existing worker running. If there is not an existing worker of this type, the context will kick off the new worker (via run ). Methods \u00b6 run() \u00b6 func run () -> SignalProducer < Output , Never > Returns a signal producer to execute the work represented by this worker. isEquivalent(to:) \u00b6 func isEquivalent ( to otherWorker : Self ) -> Bool Returns true if the other worker should be considered equivalent to self . Equivalence should take into account whatever data is meaningful to the task. For example, a worker that loads a user account from a server would not be equivalent to another worker with a different user ID.","title":"Worker"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/#worker","text":"public protocol Worker : AnyWorkflowConvertible where Rendering == Void Workers define a unit of asynchronous work. During a render pass, a workflow can ask the context to await the result of a worker. When this occurs, the context checks to see if there is already a running worker of the same type. If there is, and if the workers are \u2018equivalent\u2019, the context leaves the existing worker running. If there is not an existing worker of this type, the context will kick off the new worker (via run ).","title":"Worker"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/#run","text":"func run () -> SignalProducer < Output , Never > Returns a signal producer to execute the work represented by this worker.","title":"run()"},{"location":"swift/api/WorkflowReactiveSwift/protocols/Worker/#isequivalentto","text":"func isEquivalent ( to otherWorker : Self ) -> Bool Returns true if the other worker should be considered equivalent to self . Equivalence should take into account whatever data is meaningful to the task. For example, a worker that loads a user account from a server would not be equivalent to another worker with a different user ID.","title":"isEquivalent(to:)"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.Output/","text":"TYPEALIAS SignalProducerWorkflow.Output \u00b6 public typealias Output = Value","title":"SignalProducerWorkflow.Output"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.Output/#signalproducerworkflowoutput","text":"public typealias Output = Value","title":"SignalProducerWorkflow.Output"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.Rendering/","text":"TYPEALIAS SignalProducerWorkflow.Rendering \u00b6 public typealias Rendering = Void","title":"SignalProducerWorkflow.Rendering"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.Rendering/#signalproducerworkflowrendering","text":"public typealias Rendering = Void","title":"SignalProducerWorkflow.Rendering"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.State/","text":"TYPEALIAS SignalProducerWorkflow.State \u00b6 public typealias State = Void","title":"SignalProducerWorkflow.State"},{"location":"swift/api/WorkflowReactiveSwift/typealiases/SignalProducerWorkflow.State/#signalproducerworkflowstate","text":"public typealias State = Void","title":"SignalProducerWorkflow.State"},{"location":"swift/api/WorkflowTesting/","text":"Reference Documentation \u00b6 Structs \u00b6 RenderTester RenderTesterResult WorkflowActionTester Extensions \u00b6 RenderTesterResult Workflow WorkflowAction WorkflowActionTester This file was generated by SourceDocs on 2021-03-10 00:31:55 +0000","title":"WorkflowTesting "},{"location":"swift/api/WorkflowTesting/#reference-documentation","text":"","title":"Reference Documentation"},{"location":"swift/api/WorkflowTesting/#structs","text":"RenderTester RenderTesterResult WorkflowActionTester","title":"Structs"},{"location":"swift/api/WorkflowTesting/#extensions","text":"RenderTesterResult Workflow WorkflowAction WorkflowActionTester This file was generated by SourceDocs on 2021-03-10 00:31:55 +0000","title":"Extensions"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/","text":"EXTENSION RenderTesterResult \u00b6 extension RenderTesterResult where WorkflowType . State : Equatable Methods \u00b6 assert(state:file:line:) \u00b6 public func assert ( state expectedState : WorkflowType . State , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Verifies that the resulting state is equal to the given state. assert(output:file:line:) \u00b6 public func assert ( output expectedOutput : WorkflowType . Output , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Verifies that the resulting output is equal to the given output.","title":"RenderTesterResult"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/#rendertesterresult","text":"extension RenderTesterResult where WorkflowType . State : Equatable","title":"RenderTesterResult"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/#assertstatefileline","text":"public func assert ( state expectedState : WorkflowType . State , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Verifies that the resulting state is equal to the given state.","title":"assert(state:file:line:)"},{"location":"swift/api/WorkflowTesting/extensions/RenderTesterResult/#assertoutputfileline","text":"public func assert ( output expectedOutput : WorkflowType . Output , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Verifies that the resulting output is equal to the given output.","title":"assert(output:file:line:)"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/","text":"EXTENSION Workflow \u00b6 extension Workflow Methods \u00b6 renderTester(initialState:) \u00b6 public func renderTester ( initialState : Self . State ) -> RenderTester < Self > Returns a RenderTester with a specified initial state. renderTester() \u00b6 public func renderTester () -> RenderTester < Self > Returns a RenderTester with an initial state provided by self.makeInitialState()","title":"Workflow"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#workflow","text":"extension Workflow","title":"Workflow"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#rendertesterinitialstate","text":"public func renderTester ( initialState : Self . State ) -> RenderTester < Self > Returns a RenderTester with a specified initial state.","title":"renderTester(initialState:)"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#rendertester","text":"public func renderTester () -> RenderTester < Self > Returns a RenderTester with an initial state provided by self.makeInitialState()","title":"renderTester()"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/","text":"EXTENSION WorkflowAction \u00b6 extension WorkflowAction Methods \u00b6 tester(withState:) \u00b6 public static func tester ( withState state : WorkflowType . State ) -> WorkflowActionTester < WorkflowType , Self > Returns a state tester containing self .","title":"WorkflowAction"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/#workflowaction","text":"extension WorkflowAction","title":"WorkflowAction"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/#testerwithstate","text":"public static func tester ( withState state : WorkflowType . State ) -> WorkflowActionTester < WorkflowType , Self > Returns a state tester containing self .","title":"tester(withState:)"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/","text":"EXTENSION WorkflowActionTester \u00b6 extension WorkflowActionTester where WorkflowType . State : Equatable Methods \u00b6 assert(state:file:line:) \u00b6 public func assert ( state expectedState : WorkflowType . State , file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Triggers a test failure if the current state does not match the given expected state Parameters: expectedState: The expected state returns: A tester containing the current state and output. Parameters \u00b6 Name Description expectedState The expected state assert(output:file:line:) \u00b6 public func assert ( output expectedOutput : WorkflowType . Output , file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Triggers a test failure if the produced output does not match the given expected output Parameters: expectedState: The expected output returns: A tester containing the current state and output. Parameters \u00b6 Name Description expectedState The expected output","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#workflowactiontester","text":"extension WorkflowActionTester where WorkflowType . State : Equatable","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#assertstatefileline","text":"public func assert ( state expectedState : WorkflowType . State , file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Triggers a test failure if the current state does not match the given expected state Parameters: expectedState: The expected state returns: A tester containing the current state and output.","title":"assert(state:file:line:)"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#parameters","text":"Name Description expectedState The expected state","title":"Parameters"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#assertoutputfileline","text":"public func assert ( output expectedOutput : WorkflowType . Output , file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Triggers a test failure if the produced output does not match the given expected output Parameters: expectedState: The expected output returns: A tester containing the current state and output.","title":"assert(output:file:line:)"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowActionTester/#parameters_1","text":"Name Description expectedState The expected output","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/","text":"STRUCT RenderTester \u00b6 public struct RenderTester < WorkflowType : Workflow > Testing helper for validating the behavior of calls to render . Usage: expect workflows and side effects then validate with a call to render and the resulting RenderTesterResult . Side-effects may be performed against the rendering to validate the behavior of actions. To directly test actions and their effects, use the WorkflowActionTester . workflow .renderTester(initialState: TestWorkflow.State()) .expect( worker: TestWorker(), producingOutput: TestWorker.Output.success ) .expectWorkflow( type: ChildWorkflow.self, key: \"key\", rendering: \"rendering\", producingOutput: ChildWorkflow.Output.success ) .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) } .assert(state: TestWorkflow.State()) .assert(output: TestWorkflow.Output.finished) Validating the rendering only from the initial state provided by the workflow: workflow .renderTester() .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) } Validate the state was updated from a callback on the rendering: workflow .renderTester() .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) rendering.updateText(\"updated\") } .assert( state: TestWorkflow.State(text: \"updated\") ) Validate an output was received from the workflow. The action() on the rendering will cause an action that will return an output. workflow .renderTester() .render { rendering in rendering.action() } .assert( output: .success ) Validate a worker is running, and simulate the effect of its output: workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .expect( worker: TestWorker(), output: TestWorker.Output.success ) .render { _ in } Validate a child workflow is run, and simulate the effect of its output: workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .expectWorkflow( type: ChildWorkflow.self, rendering: \"rendering\", producingOutput: ChildWorkflow.Output.success ) .render { _ in } Methods \u00b6 expectWorkflow(type:key:producingRendering:producingOutput:file:line:assertions:) \u00b6 public func expectWorkflow < ExpectedWorkflowType : Workflow >( type : ExpectedWorkflowType . Type , key : String = \"\" , producingRendering rendering : ExpectedWorkflowType . Rendering , producingOutput output : ExpectedWorkflowType . Output ? = nil , file : StaticString = #file , line : UInt = #line , assertions : @ escaping ( ExpectedWorkflowType ) -> Void = { _ in } ) -> RenderTester < WorkflowType > Expect the given workflow type in the next rendering. Parameters: type: The type of the expected workflow. key: The key of the expected workflow (if specified). rendering: The rendering result that should be returned when the workflow of this type is rendered. output: An output that should be returned after the workflow of this type is rendered, if any. assertions: Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected. Parameters \u00b6 Name Description type The type of the expected workflow. key The key of the expected workflow (if specified). rendering The rendering result that should be returned when the workflow of this type is rendered. output An output that should be returned after the workflow of this type is rendered, if any. assertions Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected. expectWorkflowIgnoringOutput(type:key:producingRendering:file:line:assertions:) \u00b6 public func expectWorkflowIgnoringOutput < ExpectedWorkflowType : Workflow >( type : ExpectedWorkflowType . Type , key : String = \"\" , producingRendering rendering : ExpectedWorkflowType . Rendering , file : StaticString = #file , line : UInt = #line , assertions : @ escaping ( ExpectedWorkflowType ) -> Void = { _ in } ) -> RenderTester < WorkflowType > Expect the given workflow type in the next rendering, with its output being ignored by a call to ignoringOutput() . Parameters: type: The type of the expected workflow. key: The key of the expected workflow (if specified). rendering: The rendering result that should be returned when the workflow of this type is rendered. assertions: Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected. Parameters \u00b6 Name Description type The type of the expected workflow. key The key of the expected workflow (if specified). rendering The rendering result that should be returned when the workflow of this type is rendered. assertions Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected. expectSideEffect(key:file:line:) \u00b6 public func expectSideEffect ( key : AnyHashable , file : StaticString = #file , line : UInt = #line ) -> RenderTester < WorkflowType > Expect a side-effect for the given key. Parameter key: The key to expect. Parameters \u00b6 Name Description key The key to expect. expectSideEffect(key:producingAction:file:line:) \u00b6 public func expectSideEffect < ActionType >( key : AnyHashable , producingAction action : ActionType , file : StaticString = #file , line : UInt = #line ) -> RenderTester < WorkflowType > where ActionType : WorkflowAction , ActionType . WorkflowType == WorkflowType Expect a side-effect for the given key, and produce the given action when it is requested. Parameters: key: The key to expect. action: The action to produce when this side-effect is requested. Parameters \u00b6 Name Description key The key to expect. action The action to produce when this side-effect is requested. render(file:line:assertions:) \u00b6 public func render ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . Rendering ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Render the workflow under test. At this point, you should have set up all expectations. The given assertions closure will be called with the produced rendering, allowing you to assert its properties or perform actions on it (such as closures that are wired up to a Sink inside the workflow. Parameters: assertions: A closure called with the produced rendering for verification Returns: A RenderTesterResult that can be used to verify expected resulting state or outputs. Parameters \u00b6 Name Description assertions A closure called with the produced rendering for verification","title":"RenderTester"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#rendertester","text":"public struct RenderTester < WorkflowType : Workflow > Testing helper for validating the behavior of calls to render . Usage: expect workflows and side effects then validate with a call to render and the resulting RenderTesterResult . Side-effects may be performed against the rendering to validate the behavior of actions. To directly test actions and their effects, use the WorkflowActionTester . workflow .renderTester(initialState: TestWorkflow.State()) .expect( worker: TestWorker(), producingOutput: TestWorker.Output.success ) .expectWorkflow( type: ChildWorkflow.self, key: \"key\", rendering: \"rendering\", producingOutput: ChildWorkflow.Output.success ) .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) } .assert(state: TestWorkflow.State()) .assert(output: TestWorkflow.Output.finished) Validating the rendering only from the initial state provided by the workflow: workflow .renderTester() .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) } Validate the state was updated from a callback on the rendering: workflow .renderTester() .render { rendering in XCTAssertEqual(\"expected text on rendering\", rendering.text) rendering.updateText(\"updated\") } .assert( state: TestWorkflow.State(text: \"updated\") ) Validate an output was received from the workflow. The action() on the rendering will cause an action that will return an output. workflow .renderTester() .render { rendering in rendering.action() } .assert( output: .success ) Validate a worker is running, and simulate the effect of its output: workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .expect( worker: TestWorker(), output: TestWorker.Output.success ) .render { _ in } Validate a child workflow is run, and simulate the effect of its output: workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .expectWorkflow( type: ChildWorkflow.self, rendering: \"rendering\", producingOutput: ChildWorkflow.Output.success ) .render { _ in }","title":"RenderTester"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#expectworkflowtypekeyproducingrenderingproducingoutputfilelineassertions","text":"public func expectWorkflow < ExpectedWorkflowType : Workflow >( type : ExpectedWorkflowType . Type , key : String = \"\" , producingRendering rendering : ExpectedWorkflowType . Rendering , producingOutput output : ExpectedWorkflowType . Output ? = nil , file : StaticString = #file , line : UInt = #line , assertions : @ escaping ( ExpectedWorkflowType ) -> Void = { _ in } ) -> RenderTester < WorkflowType > Expect the given workflow type in the next rendering. Parameters: type: The type of the expected workflow. key: The key of the expected workflow (if specified). rendering: The rendering result that should be returned when the workflow of this type is rendered. output: An output that should be returned after the workflow of this type is rendered, if any. assertions: Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected.","title":"expectWorkflow(type:key:producingRendering:producingOutput:file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters","text":"Name Description type The type of the expected workflow. key The key of the expected workflow (if specified). rendering The rendering result that should be returned when the workflow of this type is rendered. output An output that should be returned after the workflow of this type is rendered, if any. assertions Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#expectworkflowignoringoutputtypekeyproducingrenderingfilelineassertions","text":"public func expectWorkflowIgnoringOutput < ExpectedWorkflowType : Workflow >( type : ExpectedWorkflowType . Type , key : String = \"\" , producingRendering rendering : ExpectedWorkflowType . Rendering , file : StaticString = #file , line : UInt = #line , assertions : @ escaping ( ExpectedWorkflowType ) -> Void = { _ in } ) -> RenderTester < WorkflowType > Expect the given workflow type in the next rendering, with its output being ignored by a call to ignoringOutput() . Parameters: type: The type of the expected workflow. key: The key of the expected workflow (if specified). rendering: The rendering result that should be returned when the workflow of this type is rendered. assertions: Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected.","title":"expectWorkflowIgnoringOutput(type:key:producingRendering:file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters_1","text":"Name Description type The type of the expected workflow. key The key of the expected workflow (if specified). rendering The rendering result that should be returned when the workflow of this type is rendered. assertions Additional assertions for the given workflow, if any. You may use this to assert the properties of the requested workflow are as expected.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#expectsideeffectkeyfileline","text":"public func expectSideEffect ( key : AnyHashable , file : StaticString = #file , line : UInt = #line ) -> RenderTester < WorkflowType > Expect a side-effect for the given key. Parameter key: The key to expect.","title":"expectSideEffect(key:file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters_2","text":"Name Description key The key to expect.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#expectsideeffectkeyproducingactionfileline","text":"public func expectSideEffect < ActionType >( key : AnyHashable , producingAction action : ActionType , file : StaticString = #file , line : UInt = #line ) -> RenderTester < WorkflowType > where ActionType : WorkflowAction , ActionType . WorkflowType == WorkflowType Expect a side-effect for the given key, and produce the given action when it is requested. Parameters: key: The key to expect. action: The action to produce when this side-effect is requested.","title":"expectSideEffect(key:producingAction:file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters_3","text":"Name Description key The key to expect. action The action to produce when this side-effect is requested.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#renderfilelineassertions","text":"public func render ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . Rendering ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Render the workflow under test. At this point, you should have set up all expectations. The given assertions closure will be called with the produced rendering, allowing you to assert its properties or perform actions on it (such as closures that are wired up to a Sink inside the workflow. Parameters: assertions: A closure called with the produced rendering for verification Returns: A RenderTesterResult that can be used to verify expected resulting state or outputs.","title":"render(file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTester/#parameters_4","text":"Name Description assertions A closure called with the produced rendering for verification","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/","text":"STRUCT RenderTesterResult \u00b6 public struct RenderTesterResult < WorkflowType : Workflow > The result of a RenderTester rendering. Used to verify state, output, and actions that were produced as a result of actions performed during the render (such as child workflow output being produced). Methods \u00b6 verifyState(file:line:assertions:) \u00b6 public func verifyState ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . State ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Allows for assertions against the resulting state. assertNoAction(file:line:) \u00b6 public func assertNoAction ( file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Asserts that no actions were produced verifyAction(type:file:line:assertions:) \u00b6 public func verifyAction < ActionType : WorkflowAction >( type : ActionType . Type = ActionType . self , file : StaticString = #file , line : UInt = #line , assertions : ( ActionType ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > where ActionType . WorkflowType == WorkflowType Allows for assertions agains the resulting action assert(action:file:line:) \u00b6 public func assert < ActionType : WorkflowAction >( action : ActionType , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > where ActionType . WorkflowType == WorkflowType , ActionType : Equatable Asserts that the resulting action is equal to the given action. assertNoOutput(file:line:) \u00b6 public func assertNoOutput ( file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Asserts that no output was produced. verifyOutput(file:line:assertions:) \u00b6 public func verifyOutput ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . Output ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Allows for assertions agains the resulting output","title":"RenderTesterResult"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#rendertesterresult","text":"public struct RenderTesterResult < WorkflowType : Workflow > The result of a RenderTester rendering. Used to verify state, output, and actions that were produced as a result of actions performed during the render (such as child workflow output being produced).","title":"RenderTesterResult"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#verifystatefilelineassertions","text":"public func verifyState ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . State ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Allows for assertions against the resulting state.","title":"verifyState(file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#assertnoactionfileline","text":"public func assertNoAction ( file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Asserts that no actions were produced","title":"assertNoAction(file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#verifyactiontypefilelineassertions","text":"public func verifyAction < ActionType : WorkflowAction >( type : ActionType . Type = ActionType . self , file : StaticString = #file , line : UInt = #line , assertions : ( ActionType ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > where ActionType . WorkflowType == WorkflowType Allows for assertions agains the resulting action","title":"verifyAction(type:file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#assertactionfileline","text":"public func assert < ActionType : WorkflowAction >( action : ActionType , file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > where ActionType . WorkflowType == WorkflowType , ActionType : Equatable Asserts that the resulting action is equal to the given action.","title":"assert(action:file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#assertnooutputfileline","text":"public func assertNoOutput ( file : StaticString = #file , line : UInt = #line ) -> RenderTesterResult < WorkflowType > Asserts that no output was produced.","title":"assertNoOutput(file:line:)"},{"location":"swift/api/WorkflowTesting/structs/RenderTesterResult/#verifyoutputfilelineassertions","text":"public func verifyOutput ( file : StaticString = #file , line : UInt = #line , assertions : ( WorkflowType . Output ) throws -> Void ) rethrows -> RenderTesterResult < WorkflowType > Allows for assertions agains the resulting output","title":"verifyOutput(file:line:assertions:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/","text":"STRUCT WorkflowActionTester \u00b6 public struct WorkflowActionTester < WorkflowType , Action > where Action : WorkflowAction , Action . WorkflowType == WorkflowType Testing helper that chains action sending and state/output assertions to make tests easier to write. MyWorkflow.Action .tester(withState: .firstState) .send(action: .exampleAction) .verifyOutput { output in XCTAssertEqual(.finished, output) } .verifyState { state in XCTAssertEqual(.differentState, state) } Or to assert that an action produces no output: MyWorkflow.Action .tester(withState: .firstState) .send(action: .actionProducingNoOutput) .assertNoOutput() .verifyState { state in XCTAssertEqual(.differentState, state) } If your State or Output are Equatable , you can use the convenience assertion methods: MyWorkflow.Action .tester(withState: .firstState) .send(action: .exampleAction) .assert(output: .finished) .assert(state: .differentState) Methods \u00b6 send(action:) \u00b6 public func send ( action : Action ) -> WorkflowActionTester < WorkflowType , Action > Sends an action to the reducer. parameter action: The action to send. returns: A new state tester containing the state and output (if any) after the update. Parameters \u00b6 Name Description action The action to send. assertNoOutput(file:line:) \u00b6 public func assertNoOutput ( file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Asserts that the action produced no output returns: A tester containing the current state and output. verifyOutput(file:line:_:) \u00b6 public func verifyOutput ( file : StaticString = #file , line : UInt = #line , _ assertions : ( WorkflowType . Output ) throws -> Void ) rethrows -> WorkflowActionTester < WorkflowType , Action > Invokes the given closure (which is intended to contain test assertions) with the produced output. If the previous action produced no output, the triggers a test failure and does not execute the closure. parameter assertions: A closure that accepts a single output value. returns: A tester containing the current state and output. Parameters \u00b6 Name Description assertions A closure that accepts a single output value. verifyState(_:) \u00b6 public func verifyState ( _ assertions : ( WorkflowType . State ) throws -> Void ) rethrows -> WorkflowActionTester < WorkflowType , Action > Invokes the given closure (which is intended to contain test assertions) with the current state. parameter assertions: A closure that accepts a single state value. returns: A tester containing the current state and output. Parameters \u00b6 Name Description assertions A closure that accepts a single state value.","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#workflowactiontester","text":"public struct WorkflowActionTester < WorkflowType , Action > where Action : WorkflowAction , Action . WorkflowType == WorkflowType Testing helper that chains action sending and state/output assertions to make tests easier to write. MyWorkflow.Action .tester(withState: .firstState) .send(action: .exampleAction) .verifyOutput { output in XCTAssertEqual(.finished, output) } .verifyState { state in XCTAssertEqual(.differentState, state) } Or to assert that an action produces no output: MyWorkflow.Action .tester(withState: .firstState) .send(action: .actionProducingNoOutput) .assertNoOutput() .verifyState { state in XCTAssertEqual(.differentState, state) } If your State or Output are Equatable , you can use the convenience assertion methods: MyWorkflow.Action .tester(withState: .firstState) .send(action: .exampleAction) .assert(output: .finished) .assert(state: .differentState)","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#sendaction","text":"public func send ( action : Action ) -> WorkflowActionTester < WorkflowType , Action > Sends an action to the reducer. parameter action: The action to send. returns: A new state tester containing the state and output (if any) after the update.","title":"send(action:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#parameters","text":"Name Description action The action to send.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#assertnooutputfileline","text":"public func assertNoOutput ( file : StaticString = #file , line : UInt = #line ) -> WorkflowActionTester < WorkflowType , Action > Asserts that the action produced no output returns: A tester containing the current state and output.","title":"assertNoOutput(file:line:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#verifyoutputfileline_","text":"public func verifyOutput ( file : StaticString = #file , line : UInt = #line , _ assertions : ( WorkflowType . Output ) throws -> Void ) rethrows -> WorkflowActionTester < WorkflowType , Action > Invokes the given closure (which is intended to contain test assertions) with the produced output. If the previous action produced no output, the triggers a test failure and does not execute the closure. parameter assertions: A closure that accepts a single output value. returns: A tester containing the current state and output.","title":"verifyOutput(file:line:_:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#parameters_1","text":"Name Description assertions A closure that accepts a single output value.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#verifystate_","text":"public func verifyState ( _ assertions : ( WorkflowType . State ) throws -> Void ) rethrows -> WorkflowActionTester < WorkflowType , Action > Invokes the given closure (which is intended to contain test assertions) with the current state. parameter assertions: A closure that accepts a single state value. returns: A tester containing the current state and output.","title":"verifyState(_:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#parameters_2","text":"Name Description assertions A closure that accepts a single state value.","title":"Parameters"},{"location":"swift/api/WorkflowUI/","text":"Reference Documentation \u00b6 Protocols \u00b6 Screen ViewEnvironmentKey Structs \u00b6 AnyScreen ViewControllerDescription ViewEnvironment Classes \u00b6 ContainerViewController DescribedViewController ScreenViewController Extensions \u00b6 Screen ScreenViewController This file was generated by SourceDocs on 2021-03-10 00:31:43 +0000","title":"WorkflowUI "},{"location":"swift/api/WorkflowUI/#reference-documentation","text":"","title":"Reference Documentation"},{"location":"swift/api/WorkflowUI/#protocols","text":"Screen ViewEnvironmentKey","title":"Protocols"},{"location":"swift/api/WorkflowUI/#structs","text":"AnyScreen ViewControllerDescription ViewEnvironment","title":"Structs"},{"location":"swift/api/WorkflowUI/#classes","text":"ContainerViewController DescribedViewController ScreenViewController","title":"Classes"},{"location":"swift/api/WorkflowUI/#extensions","text":"Screen ScreenViewController This file was generated by SourceDocs on 2021-03-10 00:31:43 +0000","title":"Extensions"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/","text":"CLASS ContainerViewController \u00b6 public final class ContainerViewController < ScreenType , Output >: UIViewController where ScreenType : Screen Drives view controllers from a root Workflow. Properties \u00b6 output \u00b6 public var output : Signal < Output , Never > Emits output events from the bound workflow. rootViewEnvironment \u00b6 public var rootViewEnvironment : ViewEnvironment childForStatusBarStyle \u00b6 override public var childForStatusBarStyle : UIViewController ? childForStatusBarHidden \u00b6 override public var childForStatusBarHidden : UIViewController ? childForHomeIndicatorAutoHidden \u00b6 override public var childForHomeIndicatorAutoHidden : UIViewController ? childForScreenEdgesDeferringSystemGestures \u00b6 override public var childForScreenEdgesDeferringSystemGestures : UIViewController ? supportedInterfaceOrientations \u00b6 override public var supportedInterfaceOrientations : UIInterfaceOrientationMask Methods \u00b6 init(workflow:rootViewEnvironment:) \u00b6 public init < W : AnyWorkflowConvertible >( workflow : W , rootViewEnvironment : ViewEnvironment = . empty ) where W . Rendering == ScreenType , W . Output == Output update(workflow:) \u00b6 public func update < W : AnyWorkflowConvertible >( workflow : W ) where W . Rendering == ScreenType , W . Output == Output Updates the root Workflow in this container. init(coder:) \u00b6 public required init ?( coder aDecoder : NSCoder ) viewDidLoad() \u00b6 override public func viewDidLoad () viewDidLayoutSubviews() \u00b6 override public func viewDidLayoutSubviews ()","title":"ContainerViewController"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#containerviewcontroller","text":"public final class ContainerViewController < ScreenType , Output >: UIViewController where ScreenType : Screen Drives view controllers from a root Workflow.","title":"ContainerViewController"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#properties","text":"","title":"Properties"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#output","text":"public var output : Signal < Output , Never > Emits output events from the bound workflow.","title":"output"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#rootviewenvironment","text":"public var rootViewEnvironment : ViewEnvironment","title":"rootViewEnvironment"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforstatusbarstyle","text":"override public var childForStatusBarStyle : UIViewController ?","title":"childForStatusBarStyle"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforstatusbarhidden","text":"override public var childForStatusBarHidden : UIViewController ?","title":"childForStatusBarHidden"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforhomeindicatorautohidden","text":"override public var childForHomeIndicatorAutoHidden : UIViewController ?","title":"childForHomeIndicatorAutoHidden"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforscreenedgesdeferringsystemgestures","text":"override public var childForScreenEdgesDeferringSystemGestures : UIViewController ?","title":"childForScreenEdgesDeferringSystemGestures"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#supportedinterfaceorientations","text":"override public var supportedInterfaceOrientations : UIInterfaceOrientationMask","title":"supportedInterfaceOrientations"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#initworkflowrootviewenvironment","text":"public init < W : AnyWorkflowConvertible >( workflow : W , rootViewEnvironment : ViewEnvironment = . empty ) where W . Rendering == ScreenType , W . Output == Output","title":"init(workflow:rootViewEnvironment:)"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#updateworkflow","text":"public func update < W : AnyWorkflowConvertible >( workflow : W ) where W . Rendering == ScreenType , W . Output == Output Updates the root Workflow in this container.","title":"update(workflow:)"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#initcoder","text":"public required init ?( coder aDecoder : NSCoder )","title":"init(coder:)"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#viewdidload","text":"override public func viewDidLoad ()","title":"viewDidLoad()"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#viewdidlayoutsubviews","text":"override public func viewDidLayoutSubviews ()","title":"viewDidLayoutSubviews()"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/","text":"CLASS DescribedViewController \u00b6 public final class DescribedViewController : UIViewController Properties \u00b6 childForStatusBarStyle \u00b6 override public var childForStatusBarStyle : UIViewController ? childForStatusBarHidden \u00b6 override public var childForStatusBarHidden : UIViewController ? childForHomeIndicatorAutoHidden \u00b6 override public var childForHomeIndicatorAutoHidden : UIViewController ? childForScreenEdgesDeferringSystemGestures \u00b6 override public var childForScreenEdgesDeferringSystemGestures : UIViewController ? supportedInterfaceOrientations \u00b6 override public var supportedInterfaceOrientations : UIInterfaceOrientationMask Methods \u00b6 init(description:) \u00b6 public init ( description : ViewControllerDescription ) init(screen:environment:) \u00b6 public convenience init < S : Screen >( screen : S , environment : ViewEnvironment ) update(description:) \u00b6 public func update ( description : ViewControllerDescription ) update(screen:environment:) \u00b6 public func update < S : Screen >( screen : S , environment : ViewEnvironment ) viewDidLoad() \u00b6 override public func viewDidLoad () viewDidLayoutSubviews() \u00b6 override public func viewDidLayoutSubviews () preferredContentSizeDidChange(forChildContentContainer:) \u00b6 override public func preferredContentSizeDidChange ( forChildContentContainer container : UIContentContainer )","title":"DescribedViewController"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#describedviewcontroller","text":"public final class DescribedViewController : UIViewController","title":"DescribedViewController"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#properties","text":"","title":"Properties"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#childforstatusbarstyle","text":"override public var childForStatusBarStyle : UIViewController ?","title":"childForStatusBarStyle"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#childforstatusbarhidden","text":"override public var childForStatusBarHidden : UIViewController ?","title":"childForStatusBarHidden"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#childforhomeindicatorautohidden","text":"override public var childForHomeIndicatorAutoHidden : UIViewController ?","title":"childForHomeIndicatorAutoHidden"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#childforscreenedgesdeferringsystemgestures","text":"override public var childForScreenEdgesDeferringSystemGestures : UIViewController ?","title":"childForScreenEdgesDeferringSystemGestures"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#supportedinterfaceorientations","text":"override public var supportedInterfaceOrientations : UIInterfaceOrientationMask","title":"supportedInterfaceOrientations"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#initdescription","text":"public init ( description : ViewControllerDescription )","title":"init(description:)"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#initscreenenvironment","text":"public convenience init < S : Screen >( screen : S , environment : ViewEnvironment )","title":"init(screen:environment:)"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#updatedescription","text":"public func update ( description : ViewControllerDescription )","title":"update(description:)"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#updatescreenenvironment","text":"public func update < S : Screen >( screen : S , environment : ViewEnvironment )","title":"update(screen:environment:)"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#viewdidload","text":"override public func viewDidLoad ()","title":"viewDidLoad()"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#viewdidlayoutsubviews","text":"override public func viewDidLayoutSubviews ()","title":"viewDidLayoutSubviews()"},{"location":"swift/api/WorkflowUI/classes/DescribedViewController/#preferredcontentsizedidchangeforchildcontentcontainer","text":"override public func preferredContentSizeDidChange ( forChildContentContainer container : UIContentContainer )","title":"preferredContentSizeDidChange(forChildContentContainer:)"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/","text":"CLASS ScreenViewController \u00b6 open class ScreenViewController < ScreenType : Screen >: UIViewController Generic base class that can be subclassed in order to to define a UI implementation that is powered by the given screen type. Using this base class, a screen can be implemented as: struct MyScreen: Screen { func viewControllerDescription(environment: ViewEnvironment) -> ViewControllerDescription { return MyScreenViewController.description(for: self) } } private class MyScreenViewController: ScreenViewController<MyScreen> { override func screenDidChange(from previousScreen: MyScreen, previousEnvironment: ViewEnvironment) { // \u2026 update views as necessary } } Properties \u00b6 screen \u00b6 public private ( set ) final var screen : ScreenType screenType \u00b6 public final var screenType : Screen . Type environment \u00b6 public private ( set ) final var environment : ViewEnvironment Methods \u00b6 init(screen:environment:) \u00b6 public required init ( screen : ScreenType , environment : ViewEnvironment ) init(coder:) \u00b6 update(screen:environment:) \u00b6 public final func update ( screen : ScreenType , environment : ViewEnvironment ) screenDidChange(from:previousEnvironment:) \u00b6 open func screenDidChange ( from previousScreen : ScreenType , previousEnvironment : ViewEnvironment ) Subclasses should override this method in order to update any relevant UI bits when the screen model changes.","title":"ScreenViewController"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#screenviewcontroller","text":"open class ScreenViewController < ScreenType : Screen >: UIViewController Generic base class that can be subclassed in order to to define a UI implementation that is powered by the given screen type. Using this base class, a screen can be implemented as: struct MyScreen: Screen { func viewControllerDescription(environment: ViewEnvironment) -> ViewControllerDescription { return MyScreenViewController.description(for: self) } } private class MyScreenViewController: ScreenViewController<MyScreen> { override func screenDidChange(from previousScreen: MyScreen, previousEnvironment: ViewEnvironment) { // \u2026 update views as necessary } }","title":"ScreenViewController"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#properties","text":"","title":"Properties"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#screen","text":"public private ( set ) final var screen : ScreenType","title":"screen"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#screentype","text":"public final var screenType : Screen . Type","title":"screenType"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#environment","text":"public private ( set ) final var environment : ViewEnvironment","title":"environment"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#initscreenenvironment","text":"public required init ( screen : ScreenType , environment : ViewEnvironment )","title":"init(screen:environment:)"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#initcoder","text":"","title":"init(coder:)"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#updatescreenenvironment","text":"public final func update ( screen : ScreenType , environment : ViewEnvironment )","title":"update(screen:environment:)"},{"location":"swift/api/WorkflowUI/classes/ScreenViewController/#screendidchangefrompreviousenvironment","text":"open func screenDidChange ( from previousScreen : ScreenType , previousEnvironment : ViewEnvironment ) Subclasses should override this method in order to update any relevant UI bits when the screen model changes.","title":"screenDidChange(from:previousEnvironment:)"},{"location":"swift/api/WorkflowUI/extensions/Screen/","text":"EXTENSION Screen \u00b6 extension Screen Methods \u00b6 asAnyScreen() \u00b6 public func asAnyScreen () -> AnyScreen Wraps the screen in an AnyScreen","title":"Screen"},{"location":"swift/api/WorkflowUI/extensions/Screen/#screen","text":"extension Screen","title":"Screen"},{"location":"swift/api/WorkflowUI/extensions/Screen/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/extensions/Screen/#asanyscreen","text":"public func asAnyScreen () -> AnyScreen Wraps the screen in an AnyScreen","title":"asAnyScreen()"},{"location":"swift/api/WorkflowUI/extensions/ScreenViewController/","text":"EXTENSION ScreenViewController \u00b6 extension ScreenViewController Methods \u00b6 description(for:environment:) \u00b6 public final class func description ( for screen : ScreenType , environment : ViewEnvironment ) -> ViewControllerDescription Convenience to create a view controller description for the given screen value. See the example on the comment for ScreenViewController for usage.","title":"ScreenViewController"},{"location":"swift/api/WorkflowUI/extensions/ScreenViewController/#screenviewcontroller","text":"extension ScreenViewController","title":"ScreenViewController"},{"location":"swift/api/WorkflowUI/extensions/ScreenViewController/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/extensions/ScreenViewController/#descriptionforenvironment","text":"public final class func description ( for screen : ScreenType , environment : ViewEnvironment ) -> ViewControllerDescription Convenience to create a view controller description for the given screen value. See the example on the comment for ScreenViewController for usage.","title":"description(for:environment:)"},{"location":"swift/api/WorkflowUI/protocols/Screen/","text":"PROTOCOL Screen \u00b6 public protocol Screen Screens are the building blocks of an interactive application. Conforming types contain any information needed to populate a screen: data, styling, event handlers, etc. Methods \u00b6 viewControllerDescription(environment:) \u00b6 func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription A view controller description that acts as a recipe to either build or update a previously-built view controller to match this screen.","title":"Screen"},{"location":"swift/api/WorkflowUI/protocols/Screen/#screen","text":"public protocol Screen Screens are the building blocks of an interactive application. Conforming types contain any information needed to populate a screen: data, styling, event handlers, etc.","title":"Screen"},{"location":"swift/api/WorkflowUI/protocols/Screen/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/protocols/Screen/#viewcontrollerdescriptionenvironment","text":"func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription A view controller description that acts as a recipe to either build or update a previously-built view controller to match this screen.","title":"viewControllerDescription(environment:)"},{"location":"swift/api/WorkflowUI/protocols/ViewEnvironmentKey/","text":"PROTOCOL ViewEnvironmentKey \u00b6 public protocol ViewEnvironmentKey A key into the ViewEnvironment. Environment keys are associated with a specific type of value ( Value ) and must declare a default value. Typically the key conforming to ViewEnvironmentKey will be private, and you are encouraged to provide a convenience accessor on ViewEnvironment as in the following example: private enum ThemeKey: ViewEnvironmentKey { typealias Value = Theme var defaultValue: Theme } extension ViewEnvironment { public var theme: Theme { get { self[ThemeKey.self] } set { self[ThemeKey.self] = newValue } } }","title":"ViewEnvironmentKey"},{"location":"swift/api/WorkflowUI/protocols/ViewEnvironmentKey/#viewenvironmentkey","text":"public protocol ViewEnvironmentKey A key into the ViewEnvironment. Environment keys are associated with a specific type of value ( Value ) and must declare a default value. Typically the key conforming to ViewEnvironmentKey will be private, and you are encouraged to provide a convenience accessor on ViewEnvironment as in the following example: private enum ThemeKey: ViewEnvironmentKey { typealias Value = Theme var defaultValue: Theme } extension ViewEnvironment { public var theme: Theme { get { self[ThemeKey.self] } set { self[ThemeKey.self] = newValue } } }","title":"ViewEnvironmentKey"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/","text":"STRUCT AnyScreen \u00b6 public struct AnyScreen : Screen Methods \u00b6 init(_:) \u00b6 public init < T : Screen >( _ screen : T ) viewControllerDescription(environment:) \u00b6 public func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription","title":"AnyScreen"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#anyscreen","text":"public struct AnyScreen : Screen","title":"AnyScreen"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#init_","text":"public init < T : Screen >( _ screen : T )","title":"init(_:)"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#viewcontrollerdescriptionenvironment","text":"public func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription","title":"viewControllerDescription(environment:)"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/","text":"STRUCT ViewControllerDescription \u00b6 public struct ViewControllerDescription A ViewControllerDescription acts as a recipe for building and updating a specific UIViewController. Methods \u00b6 init(type:build:update:) \u00b6 public init < VC : UIViewController >( type : VC . Type = VC . self , build : @ escaping () -> VC , update : @ escaping ( VC ) -> Void ) Constructs a view controller description by providing a closure used to build and update a specific view controller type. Parameters: type: The type of view controller produced by this description. Typically, should should be able to omit this parameter, but in cases where type inference has trouble, it\u2019s offered as an escape hatch. build: Closure that produces a new instance of the view controller update: Closure that updates the given view controller Parameters \u00b6 Name Description type The type of view controller produced by this description. Typically, should should be able to omit this parameter, but in cases where type inference has trouble, it\u2019s offered as an escape hatch. build Closure that produces a new instance of the view controller update Closure that updates the given view controller","title":"ViewControllerDescription"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/#viewcontrollerdescription","text":"public struct ViewControllerDescription A ViewControllerDescription acts as a recipe for building and updating a specific UIViewController.","title":"ViewControllerDescription"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/#inittypebuildupdate","text":"public init < VC : UIViewController >( type : VC . Type = VC . self , build : @ escaping () -> VC , update : @ escaping ( VC ) -> Void ) Constructs a view controller description by providing a closure used to build and update a specific view controller type. Parameters: type: The type of view controller produced by this description. Typically, should should be able to omit this parameter, but in cases where type inference has trouble, it\u2019s offered as an escape hatch. build: Closure that produces a new instance of the view controller update: Closure that updates the given view controller","title":"init(type:build:update:)"},{"location":"swift/api/WorkflowUI/structs/ViewControllerDescription/#parameters","text":"Name Description type The type of view controller produced by this description. Typically, should should be able to omit this parameter, but in cases where type inference has trouble, it\u2019s offered as an escape hatch. build Closure that produces a new instance of the view controller update Closure that updates the given view controller","title":"Parameters"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/","text":"STRUCT ViewEnvironment \u00b6 public struct ViewEnvironment ViewEnvironment acts as a container for values to flow down the view-side of a rendering tree (as opposed to being passed down through Workflows). This will often be used by containers to let their children know in what context they\u2019re appearing (for example, a split screen container may set the environment of its two children according to which position they\u2019re appearing in). Methods \u00b6 setting(key:to:) \u00b6 public func setting < Key >( key : Key . Type , to value : Key . Value ) -> ViewEnvironment where Key : ViewEnvironmentKey Returns a new ViewEnvironment with the given value set for the given environment key. This is provided as a convenience for modifying the environment while passing it down to children screens without the need for an intermediate mutable value. It is functionally equivalent to the subscript setter. setting(keyPath:to:) \u00b6 public func setting < Value >( keyPath : WritableKeyPath < ViewEnvironment , Value >, to value : Value ) -> ViewEnvironment Returns a new ViewEnvironment with the given value set for the given key path. This is provided as a convenience for modifying the environment while passing it down to children screens. The following are functionally equivalent: var newEnvironment = environment newEnvironment.someProperty = 42 and let newEnvironment = environment.setting(\\.someProperty, to: 42)","title":"ViewEnvironment"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/#viewenvironment","text":"public struct ViewEnvironment ViewEnvironment acts as a container for values to flow down the view-side of a rendering tree (as opposed to being passed down through Workflows). This will often be used by containers to let their children know in what context they\u2019re appearing (for example, a split screen container may set the environment of its two children according to which position they\u2019re appearing in).","title":"ViewEnvironment"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/#settingkeyto","text":"public func setting < Key >( key : Key . Type , to value : Key . Value ) -> ViewEnvironment where Key : ViewEnvironmentKey Returns a new ViewEnvironment with the given value set for the given environment key. This is provided as a convenience for modifying the environment while passing it down to children screens without the need for an intermediate mutable value. It is functionally equivalent to the subscript setter.","title":"setting(key:to:)"},{"location":"swift/api/WorkflowUI/structs/ViewEnvironment/#settingkeypathto","text":"public func setting < Value >( keyPath : WritableKeyPath < ViewEnvironment , Value >, to value : Value ) -> ViewEnvironment Returns a new ViewEnvironment with the given value set for the given key path. This is provided as a convenience for modifying the environment while passing it down to children screens. The following are functionally equivalent: var newEnvironment = environment newEnvironment.someProperty = 42 and let newEnvironment = environment.setting(\\.someProperty, to: 42)","title":"setting(keyPath:to:)"},{"location":"tutorial/","text":"Swift \u00b6 Tip For a comprehensive tutorial with code that you can build and follow along with, see the Tutorials in the repo. This section will be restructured soon to incorporate that and Kotlin tutorials. The Workflow infrastructure is split into several modules. Workflow \u00b6 The Workflow library contains the core types that are used to implement state-driven workflows, including the Workflow protocol and related infrastructure. WorkflowUI \u00b6 Contains the basic infrastructure required to build a Workflow-based application that uses UIKit . Workflow for iOS makes extensive use of ReactiveSwift . If you are new to reactive programming, you may want to familiarize yourself with some of the basics. Workflow takes care of a lot of the reactive plumbing in a typical application, but you will have a better time if you understand what the framework is doing. Core Reactive Primitives Basic Operators How does ReactiveSwift relate to RxSwift? Next Steps \u00b6 Tooling Adding Workflow to a Project Building a Workflow Building a View Controller from a Screen Using a Workflow to Show UI","title":"Overview"},{"location":"tutorial/#swift","text":"Tip For a comprehensive tutorial with code that you can build and follow along with, see the Tutorials in the repo. This section will be restructured soon to incorporate that and Kotlin tutorials. The Workflow infrastructure is split into several modules.","title":"Swift"},{"location":"tutorial/#workflow","text":"The Workflow library contains the core types that are used to implement state-driven workflows, including the Workflow protocol and related infrastructure.","title":"Workflow"},{"location":"tutorial/#workflowui","text":"Contains the basic infrastructure required to build a Workflow-based application that uses UIKit . Workflow for iOS makes extensive use of ReactiveSwift . If you are new to reactive programming, you may want to familiarize yourself with some of the basics. Workflow takes care of a lot of the reactive plumbing in a typical application, but you will have a better time if you understand what the framework is doing. Core Reactive Primitives Basic Operators How does ReactiveSwift relate to RxSwift?","title":"WorkflowUI"},{"location":"tutorial/#next-steps","text":"Tooling Adding Workflow to a Project Building a Workflow Building a View Controller from a Screen Using a Workflow to Show UI","title":"Next Steps"},{"location":"tutorial/adding-workflow-to-a-project/","text":"Adding Workflow to a project \u00b6 This document will guide you through the process of adding Workflow to an iOS project. Libraries \u00b6 You\u2019ll need the following four libraries: import Workflow import WorkflowUI import ReactiveSwift The easiest way to integrate these libraries is via Cocoapods. If you are using Cocoapods, you can simply add the dependencies to your .podspec . # MySoftware.podspec Pod :: Spec . new do | s | # ... s . dependency 'Workflow' s . dependency 'WorkflowUI' s . dependency 'ReactiveSwift' # ... end","title":"Adding Workflow to a project"},{"location":"tutorial/adding-workflow-to-a-project/#adding-workflow-to-a-project","text":"This document will guide you through the process of adding Workflow to an iOS project.","title":"Adding Workflow to a project"},{"location":"tutorial/adding-workflow-to-a-project/#libraries","text":"You\u2019ll need the following four libraries: import Workflow import WorkflowUI import ReactiveSwift The easiest way to integrate these libraries is via Cocoapods. If you are using Cocoapods, you can simply add the dependencies to your .podspec . # MySoftware.podspec Pod :: Spec . new do | s | # ... s . dependency 'Workflow' s . dependency 'WorkflowUI' s . dependency 'ReactiveSwift' # ... end","title":"Libraries"},{"location":"tutorial/building-a-view-controller-from-screen/","text":"Building a View Controller from a Screen \u00b6 Now that we have a workflow, we need a way to map our screen to an actual view controller. ScreenViewController \u00b6 The ScreenViewController provides a base class that hides the plumbing of updating a view controller from a view model update. struct DemoScreen : Screen { let title : String let onTap : () -> Void func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription { return DemoScreenViewController . description ( for : self , environment : environment ) } } class DemoScreenViewController : ScreenViewController < DemoScreen > { private let button : UIButton required init ( screen : DemoScreen , environment : ViewEnvironment ) { button = UIButton () super . init ( screen : screen , environment : environment ) update ( screen : screen ) } override func viewDidLoad () { super . viewDidLoad () button . addTarget ( self , action : #selector ( buttonPressed ( sender :)), for : . touchUpInside ) view . addSubview ( button ) } override func viewWillLayoutSubviews () { super . viewWillLayoutSubviews () button . frame = view . bounds } override func screenDidChange ( from previousScreen : DemoScreen , previousEnvironment : ViewEnvironment ) { super . screenDidChange ( from : previousScreen , previousEnvironment : previousEnvironment ) update ( screen : screen ) } private func update ( screen : DemoScreen ) { button . setTitle ( screen . title , for : . normal ) } @objc private func buttonPressed ( sender : UIButton ) { screen . onTap () } } Lifecycle \u00b6 When the view controller is first created, it is given the initial screen value. In the example, we create the button and set the title for it via the update method. The view loads as normal, adding the button the hierarchy and setting up the target:action for the button being pressed. The button is tapped. When the callback is called, we call the onTap closure passed into the screen. The workflow will handle this event, update its state, and a new screen will be rendered. The updated screen is passed to the view controller via the screenDidChange(from previousScreen: previousEnvironment: previousEnvironment:) method. Again, the view controller updates the title of the button based on what was passed in the screen.","title":"Building a View Controller from a Screen"},{"location":"tutorial/building-a-view-controller-from-screen/#building-a-view-controller-from-a-screen","text":"Now that we have a workflow, we need a way to map our screen to an actual view controller.","title":"Building a View Controller from a Screen"},{"location":"tutorial/building-a-view-controller-from-screen/#screenviewcontroller","text":"The ScreenViewController provides a base class that hides the plumbing of updating a view controller from a view model update. struct DemoScreen : Screen { let title : String let onTap : () -> Void func viewControllerDescription ( environment : ViewEnvironment ) -> ViewControllerDescription { return DemoScreenViewController . description ( for : self , environment : environment ) } } class DemoScreenViewController : ScreenViewController < DemoScreen > { private let button : UIButton required init ( screen : DemoScreen , environment : ViewEnvironment ) { button = UIButton () super . init ( screen : screen , environment : environment ) update ( screen : screen ) } override func viewDidLoad () { super . viewDidLoad () button . addTarget ( self , action : #selector ( buttonPressed ( sender :)), for : . touchUpInside ) view . addSubview ( button ) } override func viewWillLayoutSubviews () { super . viewWillLayoutSubviews () button . frame = view . bounds } override func screenDidChange ( from previousScreen : DemoScreen , previousEnvironment : ViewEnvironment ) { super . screenDidChange ( from : previousScreen , previousEnvironment : previousEnvironment ) update ( screen : screen ) } private func update ( screen : DemoScreen ) { button . setTitle ( screen . title , for : . normal ) } @objc private func buttonPressed ( sender : UIButton ) { screen . onTap () } }","title":"ScreenViewController"},{"location":"tutorial/building-a-view-controller-from-screen/#lifecycle","text":"When the view controller is first created, it is given the initial screen value. In the example, we create the button and set the title for it via the update method. The view loads as normal, adding the button the hierarchy and setting up the target:action for the button being pressed. The button is tapped. When the callback is called, we call the onTap closure passed into the screen. The workflow will handle this event, update its state, and a new screen will be rendered. The updated screen is passed to the view controller via the screenDidChange(from previousScreen: previousEnvironment: previousEnvironment:) method. Again, the view controller updates the title of the button based on what was passed in the screen.","title":"Lifecycle"},{"location":"tutorial/building-a-workflow/","text":"Building a Workflow \u00b6 Introduction \u00b6 A simple workflow looks something like this: struct DemoWorkflow : Workflow { var name : String init ( name : String ) { self . name = name } } extension DemoWorkflow { struct State {} func makeInitialState () -> State { return State () } func workflowDidChange ( from previousWorkflow : DemoWorkflow , state : inout State ) { } func render ( state : State , context : RenderContext < DemoWorkflow >) -> String { return \"Hello, \\( name ) \" } } A type conforming to Workflow represents a single node in the workflow tree. It should contain any values that must be provided by its parent (who is generally responsible for creating child workflows). Configuration parameters, strings, network services\u2026 If your workflow needs access to a value or object that it cannot create itself, they should be passed into the workflow\u2019s initializer. Every workflow defines its own State type to contain any data that should persist through subsequent render passes. Render \u00b6 Workflows are only useful when they render a value for use by their parent (or, if they are the root workflow, for display). This type is very commonly a view model, or Screen . The render(state:context:) method has a couple of parameters, so we\u2019ll work through them one by one. func render ( state : State , context : RenderContext < DemoWorkflow >) -> Rendering state \u00b6 Contains a value of type State to provide access to the current state. Any time the state of workflow changes, render is called again to take into account the change in state. context \u00b6 The render context: provides a way for a workflow to defer to nested (child) workflows to generate some or all of its rendered output. We\u2019ll walk through that process later on when we cover composition. allows a workflow to request the execution of asynchronous tasks ( Worker s) generates event handlers for use in constructing view models. In order for us to see the anything in our app, we\u2019ll need to return a Screen that can be turned into a view controller: func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { return DemoScreen ( title : \"A nice title\" ) } Actions, or \u201cThings that advance a workflow\u201d \u00b6 So far we have only covered workflows that perform simple tasks like generate strings or simple screens with no actions. If our workflows take on a complicated roles like generating view models, however, they will inevitably be required to handle events of some kind \u2013 some from UI events such as button taps, others from infrastructure events such as network responses. In conventional UIKit code, it is common to deal with each of those event types differently. The common pattern is to implement a method like handleButtonTap(sender:) . Workflows are more strict about events, however. Workflows require that all events be expressed as \u201cWorkflow Actions.\u201d These actions should be thought of as the entry point to your workflow. If any action of any kind happens (that your workflow cares about), it should be modeled as an action. struct DemoWorkflow : Workflow { /// ... } enum Action : WorkflowAction { typealias WorkflowType = DemoWorkflow case refreshButtonTapped /// UI event case refreshRequestFinished ( RefreshResponse ) /// Network event func apply ( toState state : inout DemoWorkflow . State ) -> DemoWorkflow . Output ? { /// ... } } The Update Cycle \u00b6 Every time a new action is received, it is applied to the current state of the workflow. If your workflow does more than simply render values, the action\u2019s apply is the method where the logic lives. There are two things that the apply(toState:) method is responsible for: Transitioning state (Optionally) emitting an output event Note that the render(state:context:) method is called after every state change, so you can be sure that any state changes will be reflected. Since we have a way of expressing an event from our UI, we can now use the callback on our view model to send that event back to the workflow: func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : \"A nice title\" , onTap : { sink . send ( Action . refreshButtonTapped ) } ) } State \u00b6 Some workflows do not need state at all \u2013 they simply render values based on the values they were initialized with. But for more complicated workflows, state management is critical. For example, a multi-screen flow only functions if we are able to define all of the possible steps (model the state), remember which one we are currently on (persist state), and move to other steps in the future (transition state). To define your workflow\u2019s state, simply implement the associatedtype State via an enum or struct. struct WelcomeFlowWorkflow : Workflow { enum State { case splashScreen case loginFlow case signupFlow } enum Action : WorkflowAction { case back /// ... } /// ... } Note Workflows (and their State ) should always be implemented through value types (structs and enums) due to the way the framework handles state changes. This means that you can never capture references to self , but the consistent flow of data pays dividends \u2013 try this architecture for a while and we are confident that you will see the benefits. Workers, or \u201cAsynchronous work the workflow needs done\u201d \u00b6 A workflow may need to do some amount of asynchronous work (such as a network request, reading from a SQLite database, etc). Workers provide a declarative interface to units of asynchronous work. To do something asynchronously, we define a worker that has an Output type and defines a run method that that returns a Reactive Swift SignalProducer . When this worker is run, the SignalProducer is subscribed to, starting the async task. struct RefreshWorker : Worker { enum Output { case success ( String ) case error ( Error ) } func run () -> SignalProducer < RefreshWorker . Output , Never > { return SignalProducer ( value : . success ( \"We did it!\" )) . delay ( 1.0 , on : QueueScheduler . main ) } func isEquivalent ( to otherWorker : RefreshWorker ) -> Bool { return true } } Because a Worker is a declarative representation of work, it also needs to define an isEquivalent to guarantee that we are not running more than one at the same time. For the simple example above, it is always considered equivalent as we want only one of this type of worker running at a time. In order to start asynchronous work, the workflow requests it in the render method, looking something like: public func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { RefreshWorker () . mapOutput { output -> Action in switch output { case . success ( let result ): return Action . refreshComplete ( result ) case . error ( let error ): return Action . refreshError ( error ) } } . running ( in : context ) } When running(in:) is executed on a worker, the context will do the following: Check if there is already a worker running of the same type: If there is not, or isEquivalent is false, call run on the worker and subscribe to the SignalProducer If there is already a worker running and isEquivalent is true, continue to wait for it to produce an output. When the SignalProducer from the Worker returns an output, it is mapped to an Action and handled the same way as any other action. Output Events \u00b6 The last role of the update cycle is to emit output events. As workflows form a hierarchy, it is common for children to send events up the tree. This may happen when a child workflow finishes or cancels, for example. Workflows can define an output type, which may then be returned by Actions. Composition \u00b6 Composition is the primary tool that we can use to manage complexity in a growing application. Workflows should always be kept small enough to be understandable \u2013 less than 150 lines is a good target. By composing together multiple workflows, complex problems can be broken down into individual pieces that can be quickly understood by other developers (including future you). The context provided to the render(state:context:) method defines the API through which composition is made possible. The Render Context \u00b6 The useful role of children is ultimately to provide rendered values (typically screen models) via their render(state:context:) implementation. To obtain that value from a child workflow, the rendered(with context:key:) method is invoked on the child workflow. When a workflow is rendered with the context, the context will do the following: Check if the child workflow is new or existing: If a workflow with the same type was used during the last render pass, the existing child workflow will be updated with the new workflow. Otherwise, a new child workflow node will be initialized. The child workflow\u2019s render(state:context:) method is called. The rendered value is returned. In practice, this looks something like this: struct ParentWorkflow : Workflow { func render ( state : State , context : RenderContext < ParentWorkflow >) -> String { let childWorkflow = ChildWorkflow ( text : \"Hello, World\" ) return childWorkflow . rendered ( with : context ) } } struct ChildWorkflow : Workflow { var text : String // ... func render ( state : State , context : RenderContext < ChildWorkflow >) -> String { return String ( text . reversed ()) } }","title":"Building a Workflow"},{"location":"tutorial/building-a-workflow/#building-a-workflow","text":"","title":"Building a Workflow"},{"location":"tutorial/building-a-workflow/#introduction","text":"A simple workflow looks something like this: struct DemoWorkflow : Workflow { var name : String init ( name : String ) { self . name = name } } extension DemoWorkflow { struct State {} func makeInitialState () -> State { return State () } func workflowDidChange ( from previousWorkflow : DemoWorkflow , state : inout State ) { } func render ( state : State , context : RenderContext < DemoWorkflow >) -> String { return \"Hello, \\( name ) \" } } A type conforming to Workflow represents a single node in the workflow tree. It should contain any values that must be provided by its parent (who is generally responsible for creating child workflows). Configuration parameters, strings, network services\u2026 If your workflow needs access to a value or object that it cannot create itself, they should be passed into the workflow\u2019s initializer. Every workflow defines its own State type to contain any data that should persist through subsequent render passes.","title":"Introduction"},{"location":"tutorial/building-a-workflow/#render","text":"Workflows are only useful when they render a value for use by their parent (or, if they are the root workflow, for display). This type is very commonly a view model, or Screen . The render(state:context:) method has a couple of parameters, so we\u2019ll work through them one by one. func render ( state : State , context : RenderContext < DemoWorkflow >) -> Rendering","title":"Render"},{"location":"tutorial/building-a-workflow/#state","text":"Contains a value of type State to provide access to the current state. Any time the state of workflow changes, render is called again to take into account the change in state.","title":"state"},{"location":"tutorial/building-a-workflow/#context","text":"The render context: provides a way for a workflow to defer to nested (child) workflows to generate some or all of its rendered output. We\u2019ll walk through that process later on when we cover composition. allows a workflow to request the execution of asynchronous tasks ( Worker s) generates event handlers for use in constructing view models. In order for us to see the anything in our app, we\u2019ll need to return a Screen that can be turned into a view controller: func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { return DemoScreen ( title : \"A nice title\" ) }","title":"context"},{"location":"tutorial/building-a-workflow/#actions-or-things-that-advance-a-workflow","text":"So far we have only covered workflows that perform simple tasks like generate strings or simple screens with no actions. If our workflows take on a complicated roles like generating view models, however, they will inevitably be required to handle events of some kind \u2013 some from UI events such as button taps, others from infrastructure events such as network responses. In conventional UIKit code, it is common to deal with each of those event types differently. The common pattern is to implement a method like handleButtonTap(sender:) . Workflows are more strict about events, however. Workflows require that all events be expressed as \u201cWorkflow Actions.\u201d These actions should be thought of as the entry point to your workflow. If any action of any kind happens (that your workflow cares about), it should be modeled as an action. struct DemoWorkflow : Workflow { /// ... } enum Action : WorkflowAction { typealias WorkflowType = DemoWorkflow case refreshButtonTapped /// UI event case refreshRequestFinished ( RefreshResponse ) /// Network event func apply ( toState state : inout DemoWorkflow . State ) -> DemoWorkflow . Output ? { /// ... } }","title":"Actions, or \u201cThings that advance a workflow\u201d"},{"location":"tutorial/building-a-workflow/#the-update-cycle","text":"Every time a new action is received, it is applied to the current state of the workflow. If your workflow does more than simply render values, the action\u2019s apply is the method where the logic lives. There are two things that the apply(toState:) method is responsible for: Transitioning state (Optionally) emitting an output event Note that the render(state:context:) method is called after every state change, so you can be sure that any state changes will be reflected. Since we have a way of expressing an event from our UI, we can now use the callback on our view model to send that event back to the workflow: func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : \"A nice title\" , onTap : { sink . send ( Action . refreshButtonTapped ) } ) }","title":"The Update Cycle"},{"location":"tutorial/building-a-workflow/#state_1","text":"Some workflows do not need state at all \u2013 they simply render values based on the values they were initialized with. But for more complicated workflows, state management is critical. For example, a multi-screen flow only functions if we are able to define all of the possible steps (model the state), remember which one we are currently on (persist state), and move to other steps in the future (transition state). To define your workflow\u2019s state, simply implement the associatedtype State via an enum or struct. struct WelcomeFlowWorkflow : Workflow { enum State { case splashScreen case loginFlow case signupFlow } enum Action : WorkflowAction { case back /// ... } /// ... } Note Workflows (and their State ) should always be implemented through value types (structs and enums) due to the way the framework handles state changes. This means that you can never capture references to self , but the consistent flow of data pays dividends \u2013 try this architecture for a while and we are confident that you will see the benefits.","title":"State"},{"location":"tutorial/building-a-workflow/#workers-or-asynchronous-work-the-workflow-needs-done","text":"A workflow may need to do some amount of asynchronous work (such as a network request, reading from a SQLite database, etc). Workers provide a declarative interface to units of asynchronous work. To do something asynchronously, we define a worker that has an Output type and defines a run method that that returns a Reactive Swift SignalProducer . When this worker is run, the SignalProducer is subscribed to, starting the async task. struct RefreshWorker : Worker { enum Output { case success ( String ) case error ( Error ) } func run () -> SignalProducer < RefreshWorker . Output , Never > { return SignalProducer ( value : . success ( \"We did it!\" )) . delay ( 1.0 , on : QueueScheduler . main ) } func isEquivalent ( to otherWorker : RefreshWorker ) -> Bool { return true } } Because a Worker is a declarative representation of work, it also needs to define an isEquivalent to guarantee that we are not running more than one at the same time. For the simple example above, it is always considered equivalent as we want only one of this type of worker running at a time. In order to start asynchronous work, the workflow requests it in the render method, looking something like: public func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { RefreshWorker () . mapOutput { output -> Action in switch output { case . success ( let result ): return Action . refreshComplete ( result ) case . error ( let error ): return Action . refreshError ( error ) } } . running ( in : context ) } When running(in:) is executed on a worker, the context will do the following: Check if there is already a worker running of the same type: If there is not, or isEquivalent is false, call run on the worker and subscribe to the SignalProducer If there is already a worker running and isEquivalent is true, continue to wait for it to produce an output. When the SignalProducer from the Worker returns an output, it is mapped to an Action and handled the same way as any other action.","title":"Workers, or \"Asynchronous work the workflow needs done\""},{"location":"tutorial/building-a-workflow/#output-events","text":"The last role of the update cycle is to emit output events. As workflows form a hierarchy, it is common for children to send events up the tree. This may happen when a child workflow finishes or cancels, for example. Workflows can define an output type, which may then be returned by Actions.","title":"Output Events"},{"location":"tutorial/building-a-workflow/#composition","text":"Composition is the primary tool that we can use to manage complexity in a growing application. Workflows should always be kept small enough to be understandable \u2013 less than 150 lines is a good target. By composing together multiple workflows, complex problems can be broken down into individual pieces that can be quickly understood by other developers (including future you). The context provided to the render(state:context:) method defines the API through which composition is made possible.","title":"Composition"},{"location":"tutorial/building-a-workflow/#the-render-context","text":"The useful role of children is ultimately to provide rendered values (typically screen models) via their render(state:context:) implementation. To obtain that value from a child workflow, the rendered(with context:key:) method is invoked on the child workflow. When a workflow is rendered with the context, the context will do the following: Check if the child workflow is new or existing: If a workflow with the same type was used during the last render pass, the existing child workflow will be updated with the new workflow. Otherwise, a new child workflow node will be initialized. The child workflow\u2019s render(state:context:) method is called. The rendered value is returned. In practice, this looks something like this: struct ParentWorkflow : Workflow { func render ( state : State , context : RenderContext < ParentWorkflow >) -> String { let childWorkflow = ChildWorkflow ( text : \"Hello, World\" ) return childWorkflow . rendered ( with : context ) } } struct ChildWorkflow : Workflow { var text : String // ... func render ( state : State , context : RenderContext < ChildWorkflow >) -> String { return String ( text . reversed ()) } }","title":"The Render Context"},{"location":"tutorial/tooling/","text":"Tooling \u00b6 Xcode templates \u00b6 Workflow comes with a set of file templates to simplify the process of building features. After installation, these templates can be found via File > New > New File... in Xcode. Launch terminal and navigate to the Workflow source directory. Run ./Tooling/Templates/install-xcode-templates.sh . Restart Xcode.","title":"Tooling"},{"location":"tutorial/tooling/#tooling","text":"","title":"Tooling"},{"location":"tutorial/tooling/#xcode-templates","text":"Workflow comes with a set of file templates to simplify the process of building features. After installation, these templates can be found via File > New > New File... in Xcode. Launch terminal and navigate to the Workflow source directory. Run ./Tooling/Templates/install-xcode-templates.sh . Restart Xcode.","title":"Xcode templates"},{"location":"tutorial/using-a-workflow-for-ui/","text":"Using a workflow to show UI \u00b6 ContainerViewController \u00b6 In the Workflow architecture, the container acts as the glue between the state-driven world of Workflows and the UI that is ultimately displayed. On iOS, the container is implemented as ContainerViewController . /// Drives view controllers from a root Workflow. public final class ContainerViewController < Output , ScreenType >: UIViewController where ScreenType : Screen { /// Emits output events from the bound workflow. public let output : Signal < Output , Never > public convenience init < W : Workflow >( workflow : W ) where W . Rendering == ScreenType , W . Output == Output } The initializer argument is the workflow that will drive your application. import UIKit import Workflow import WorkflowUI @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { let window = UIWindow ( frame : UIScreen . main . bounds ) let container = ContainerViewController ( workflow : DemoWorkflow () ) window . rootViewController = container self . window = window window . makeKeyAndVisible () return true } } Now, when the ContainerViewController is shown, it will start the workflow and render will be called returning the DemoScreen . The container will use viewControllerDescription to build a DemoScreenViewController and add it to the view hierarchy to display.","title":"Using a Workflow to Show UI"},{"location":"tutorial/using-a-workflow-for-ui/#using-a-workflow-to-show-ui","text":"","title":"Using a workflow to show UI"},{"location":"tutorial/using-a-workflow-for-ui/#containerviewcontroller","text":"In the Workflow architecture, the container acts as the glue between the state-driven world of Workflows and the UI that is ultimately displayed. On iOS, the container is implemented as ContainerViewController . /// Drives view controllers from a root Workflow. public final class ContainerViewController < Output , ScreenType >: UIViewController where ScreenType : Screen { /// Emits output events from the bound workflow. public let output : Signal < Output , Never > public convenience init < W : Workflow >( workflow : W ) where W . Rendering == ScreenType , W . Output == Output } The initializer argument is the workflow that will drive your application. import UIKit import Workflow import WorkflowUI @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { let window = UIWindow ( frame : UIScreen . main . bounds ) let container = ContainerViewController ( workflow : DemoWorkflow () ) window . rootViewController = container self . window = window window . makeKeyAndVisible () return true } } Now, when the ContainerViewController is shown, it will start the workflow and render will be called returning the DemoScreen . The container will use viewControllerDescription to build a DemoScreenViewController and add it to the view hierarchy to display.","title":"ContainerViewController"},{"location":"userguide/comparison/","text":"Comparison with other frameworks \u00b6 Coming soon!","title":"Comparison with other frameworks"},{"location":"userguide/comparison/#comparison-with-other-frameworks","text":"Coming soon!","title":"Comparison with other frameworks"},{"location":"userguide/concepts/","text":"Core Concepts \u00b6 Architectural Concepts \u00b6 Unidirectional Data Flow \u00b6 There is a wealth of information on the web about Unidirectional Data Flow , but it very simply means that there is a single path along which data travel from your business logic to your UI, and events travel to your business logic from your UI, and they always and only travel in one direction along that path. For Workflow, this also implies that the UI is (almost) stateless, and that the interesting state for your app is centralized and not duplicated. In practice, this makes program flow much easier to reason about because anytime something happens in an app, it removes the questions of where the state came from that caused it, which components got which events, and which sequences of cause and effect actually occurred. It makes unit testing easier because state and events are explicit, and always live in the same place and flow through the same APIs, so unit tests only need to test state transitions, for the most part. Declarative vs Imperative \u00b6 Traditionally, most mobile code is \u201cimperative\u201d \u2013 it consists of instructions for how to build and display the UI. These instructions can include control flow like loops. Imperative code is usually stateful, state is usually sprinkled all over the place, and tends to care about instances and identity. When reading imperative code, you almost have to run an interpreter and keep all the pieces of state in your head to figure out what it does. Web UI is traditionally declarative \u2013 it describes what to render, and some aspects of how to render it (style), but doesn\u2019t say how to actually draw it. Declarative code is usually easier to read than imperative code. It describes what it produces, not how to generate it. Declarative code usually cares more about pure values than instance identities. However, since computers still need actual instructions at some point, declarative code requires something else, usually imperative, either a compiler or interpreter, to actually do something with it. Workflow code is written in regular Kotlin or Swift, which are both imperative languages, but the library encourages you to write your logic in a declarative and functional style. The library manages state and wiring up event handling for you, so the only code you need to write is code that is actually interesting for your particular problem. A note about functional programming \u00b6 Kotlin and Swift are not strictly functional programming languages, but both have features that allow you to write functional -style code. Functional code discourages side effects and is generally much easier to test than object-oriented code. Functional and declarative programming go very well together, and Workflow encourages you to write such code. Core Components \u00b6 Workflows \u00b6 The Workflows at the left of the diagram contain all state and business logic for the application. This is where network requests happen, navigation decisions are made, models are saved to or loaded from disk \u2013 if it\u2019s not UI, it\u2019s in this box. For more information, see Workflow Core Concepts . View Models \u00b6 The primary job of the Workflows is to emit an observable stream of view models representing the current state of the application\u2019s UI. You will sometimes hear these view models referred to as \u2018screens\u2019, which is just another way to refer to a view model that contains the data for an entire screen in the app. For more information, see Workflow UI Concepts . Container \u00b6 The container is responsible for plumbing together the two separate halves of the application. It subscribes to the stream of view models that the workflows provide, then implements the logic to update the live UI whenever a new view model is emitted. For more information, see Workflow UI Concepts . UI \u00b6 This is typically conventional platform-specific UI code. One important note is that UI code should never attempt to navigate using system components (navigation controller pushes, modal presentation, etc). In this architecture the workflows are in charge \u2013 any navigation that happens outside of the workflow will be disregarded and stomped on during the next update cycle. For more information, see Workflow UI Concepts . Events \u00b6 In order for the application to actually do anything, the workflow needs to receive events from the UI. When the user interacts with the application by, for example, tapping a button, the workflow receives that event \u2013 which may trigger a simple state transition, or more complex behavior such as a network request. For more information, see Workflow Core Concepts . Info While the core shape of the libraries is shared by Swift and Kotlin implementations, some of the naming and types differ slightly to accommodate each language\u2019s particular type system and naming conventions. Where those differences occur in this document, they are noted in \u201cSwift vs Kotlin\u201d blurbs. See Where Swift and Kotlin Libraries Differ for an overall summary. In general, any time a generic type is referred to as Foo , in source code the Swift associated type is called Foo and the Kotlin type parameter is called FooT .","title":"Core Concepts"},{"location":"userguide/concepts/#core-concepts","text":"","title":"Core Concepts"},{"location":"userguide/concepts/#architectural-concepts","text":"","title":"Architectural Concepts"},{"location":"userguide/concepts/#unidirectional-data-flow","text":"There is a wealth of information on the web about Unidirectional Data Flow , but it very simply means that there is a single path along which data travel from your business logic to your UI, and events travel to your business logic from your UI, and they always and only travel in one direction along that path. For Workflow, this also implies that the UI is (almost) stateless, and that the interesting state for your app is centralized and not duplicated. In practice, this makes program flow much easier to reason about because anytime something happens in an app, it removes the questions of where the state came from that caused it, which components got which events, and which sequences of cause and effect actually occurred. It makes unit testing easier because state and events are explicit, and always live in the same place and flow through the same APIs, so unit tests only need to test state transitions, for the most part.","title":"Unidirectional Data Flow"},{"location":"userguide/concepts/#declarative-vs-imperative","text":"Traditionally, most mobile code is \u201cimperative\u201d \u2013 it consists of instructions for how to build and display the UI. These instructions can include control flow like loops. Imperative code is usually stateful, state is usually sprinkled all over the place, and tends to care about instances and identity. When reading imperative code, you almost have to run an interpreter and keep all the pieces of state in your head to figure out what it does. Web UI is traditionally declarative \u2013 it describes what to render, and some aspects of how to render it (style), but doesn\u2019t say how to actually draw it. Declarative code is usually easier to read than imperative code. It describes what it produces, not how to generate it. Declarative code usually cares more about pure values than instance identities. However, since computers still need actual instructions at some point, declarative code requires something else, usually imperative, either a compiler or interpreter, to actually do something with it. Workflow code is written in regular Kotlin or Swift, which are both imperative languages, but the library encourages you to write your logic in a declarative and functional style. The library manages state and wiring up event handling for you, so the only code you need to write is code that is actually interesting for your particular problem.","title":"Declarative vs Imperative"},{"location":"userguide/concepts/#a-note-about-functional-programming","text":"Kotlin and Swift are not strictly functional programming languages, but both have features that allow you to write functional -style code. Functional code discourages side effects and is generally much easier to test than object-oriented code. Functional and declarative programming go very well together, and Workflow encourages you to write such code.","title":"A note about functional programming"},{"location":"userguide/concepts/#core-components","text":"","title":"Core Components"},{"location":"userguide/concepts/#workflows","text":"The Workflows at the left of the diagram contain all state and business logic for the application. This is where network requests happen, navigation decisions are made, models are saved to or loaded from disk \u2013 if it\u2019s not UI, it\u2019s in this box. For more information, see Workflow Core Concepts .","title":"Workflows"},{"location":"userguide/concepts/#view-models","text":"The primary job of the Workflows is to emit an observable stream of view models representing the current state of the application\u2019s UI. You will sometimes hear these view models referred to as \u2018screens\u2019, which is just another way to refer to a view model that contains the data for an entire screen in the app. For more information, see Workflow UI Concepts .","title":"View Models"},{"location":"userguide/concepts/#container","text":"The container is responsible for plumbing together the two separate halves of the application. It subscribes to the stream of view models that the workflows provide, then implements the logic to update the live UI whenever a new view model is emitted. For more information, see Workflow UI Concepts .","title":"Container"},{"location":"userguide/concepts/#ui","text":"This is typically conventional platform-specific UI code. One important note is that UI code should never attempt to navigate using system components (navigation controller pushes, modal presentation, etc). In this architecture the workflows are in charge \u2013 any navigation that happens outside of the workflow will be disregarded and stomped on during the next update cycle. For more information, see Workflow UI Concepts .","title":"UI"},{"location":"userguide/concepts/#events","text":"In order for the application to actually do anything, the workflow needs to receive events from the UI. When the user interacts with the application by, for example, tapping a button, the workflow receives that event \u2013 which may trigger a simple state transition, or more complex behavior such as a network request. For more information, see Workflow Core Concepts . Info While the core shape of the libraries is shared by Swift and Kotlin implementations, some of the naming and types differ slightly to accommodate each language\u2019s particular type system and naming conventions. Where those differences occur in this document, they are noted in \u201cSwift vs Kotlin\u201d blurbs. See Where Swift and Kotlin Libraries Differ for an overall summary. In general, any time a generic type is referred to as Foo , in source code the Swift associated type is called Foo and the Kotlin type parameter is called FooT .","title":"Events"},{"location":"userguide/core-patterns/","text":"Workflow Core: Patterns/Variations \u00b6 There are a lot associated/generic types in workflow code \u2013 that doesn\u2019t mean you always need to use all of them. Here are some common configurations we\u2019ve seen. Stateless Workflows \u00b6 Remember that workflow state is made up of public and private parts. When a workflow\u2019s state consists entirely of public state (i.e. it\u2019s initializer arguments in Swift or PropsT in Kotlin), it can ignore all the machinery for private state. In Swift, the State type can be Void , and in Kotlin it can be Unit \u2013 such workflows are often referred to as \u201cstateless\u201d, since they have no state of their own. Props-less Workflows \u00b6 Some workflows manage all of their state internally, and have no public state (aka props). In Swift, this just means the workflow implementation has no parameters (although this is rare, see Injecting Dependencies below). In Kotlin, the PropsT type can be Unit . RenderContext has convenience overloads of most of its functions to implicitly pass Unit for these workflows. Outputless Workflows \u00b6 Workflows that only talk to their parent via their Rendering , and never emit any output, are encouraged to indicate that by using the bottom type as their Output type. In addition to documenting the fact that the workflow will never output, using the bottom type also lets the compiler enforce it \u2013 code that tries to emit outputs will not compile. In Swift, the Output type is specified as Never . In Kotlin, use Nothing . Composite Workflows \u00b6 Composition is a powerful tool for working with Workflows. A workflow can often accomplish a lot simply by rendering various children. It may just combine the renderings of multiple children, or use its props to determine which of a set of children to render. Such workflows can often be stateless. Props values v. Injected Dependencies \u00b6 Dependency injection is a technique for making code less coupled and more testable. In short, it\u2019s better for classes/structs to accept their dependencies when they\u2019re created instead of hard-coding them. Workflows typically have dependencies like specific Workers they need to perform some tasks, child workflows to delegate rendering to, or helpers for things like network requests, formatting and logging. Swift \u00b6 A Swift workflow typically receives its dependencies as initializer arguments, just like its input values, and is normally instantiated anew by its parent in each call to the parent\u2019s render method. The factory pattern can be employed to keep knowledge of children\u2019s implementation details from leaking into their parents. Kotlin \u00b6 Kotlin workflows make a more formal distinction between dependencies and props, via the PropsT parameter type on the Kotlin Workflow interface. Dependencies (e.g. a network service) are typically provided as constructor parameters, while props values (e.g. a record locator) are provided by the parent as an argument to the RenderContext.renderChild method. This works seamlessly with DI libraries like Dagger . The careful reader will note that this is technically storing \u201cstate\u201d in the workflow instance \u2013 something that is generally discouraged. However, since this \u201cstate\u201d is never changed, we can make an exception for this case. If a workflow has properties, they should only be used to store injected dependencies or dependencies derived from injected ones (e.g. Worker s created from Observable s). Info This difference between Swift and Kotlin practices is a side effect of Kotlin\u2019s lack of a parallel to Swift\u2019s Self type. Kotlin has no practical way to provide a method like Swift\u2019s Workflow.workflowDidChange , which accepts a strongly typed reference to the instance from the previous run of a parent\u2019s Render method. Kotlin\u2019s alternative, StatefulWorkflow.onPropsChanged , requires the extra PropsT type parameter.","title":"Patterns"},{"location":"userguide/core-patterns/#workflow-core-patternsvariations","text":"There are a lot associated/generic types in workflow code \u2013 that doesn\u2019t mean you always need to use all of them. Here are some common configurations we\u2019ve seen.","title":"Workflow Core: Patterns/Variations"},{"location":"userguide/core-patterns/#stateless-workflows","text":"Remember that workflow state is made up of public and private parts. When a workflow\u2019s state consists entirely of public state (i.e. it\u2019s initializer arguments in Swift or PropsT in Kotlin), it can ignore all the machinery for private state. In Swift, the State type can be Void , and in Kotlin it can be Unit \u2013 such workflows are often referred to as \u201cstateless\u201d, since they have no state of their own.","title":"Stateless Workflows"},{"location":"userguide/core-patterns/#props-less-workflows","text":"Some workflows manage all of their state internally, and have no public state (aka props). In Swift, this just means the workflow implementation has no parameters (although this is rare, see Injecting Dependencies below). In Kotlin, the PropsT type can be Unit . RenderContext has convenience overloads of most of its functions to implicitly pass Unit for these workflows.","title":"Props-less Workflows"},{"location":"userguide/core-patterns/#outputless-workflows","text":"Workflows that only talk to their parent via their Rendering , and never emit any output, are encouraged to indicate that by using the bottom type as their Output type. In addition to documenting the fact that the workflow will never output, using the bottom type also lets the compiler enforce it \u2013 code that tries to emit outputs will not compile. In Swift, the Output type is specified as Never . In Kotlin, use Nothing .","title":"Outputless Workflows"},{"location":"userguide/core-patterns/#composite-workflows","text":"Composition is a powerful tool for working with Workflows. A workflow can often accomplish a lot simply by rendering various children. It may just combine the renderings of multiple children, or use its props to determine which of a set of children to render. Such workflows can often be stateless.","title":"Composite Workflows"},{"location":"userguide/core-patterns/#props-values-v-injected-dependencies","text":"Dependency injection is a technique for making code less coupled and more testable. In short, it\u2019s better for classes/structs to accept their dependencies when they\u2019re created instead of hard-coding them. Workflows typically have dependencies like specific Workers they need to perform some tasks, child workflows to delegate rendering to, or helpers for things like network requests, formatting and logging.","title":"Props values v. Injected Dependencies"},{"location":"userguide/core-patterns/#swift","text":"A Swift workflow typically receives its dependencies as initializer arguments, just like its input values, and is normally instantiated anew by its parent in each call to the parent\u2019s render method. The factory pattern can be employed to keep knowledge of children\u2019s implementation details from leaking into their parents.","title":"Swift"},{"location":"userguide/core-patterns/#kotlin","text":"Kotlin workflows make a more formal distinction between dependencies and props, via the PropsT parameter type on the Kotlin Workflow interface. Dependencies (e.g. a network service) are typically provided as constructor parameters, while props values (e.g. a record locator) are provided by the parent as an argument to the RenderContext.renderChild method. This works seamlessly with DI libraries like Dagger . The careful reader will note that this is technically storing \u201cstate\u201d in the workflow instance \u2013 something that is generally discouraged. However, since this \u201cstate\u201d is never changed, we can make an exception for this case. If a workflow has properties, they should only be used to store injected dependencies or dependencies derived from injected ones (e.g. Worker s created from Observable s). Info This difference between Swift and Kotlin practices is a side effect of Kotlin\u2019s lack of a parallel to Swift\u2019s Self type. Kotlin has no practical way to provide a method like Swift\u2019s Workflow.workflowDidChange , which accepts a strongly typed reference to the instance from the previous run of a parent\u2019s Render method. Kotlin\u2019s alternative, StatefulWorkflow.onPropsChanged , requires the extra PropsT type parameter.","title":"Kotlin"},{"location":"userguide/core-worker/","text":"Workflow Core: Worker \u00b6 The Role of a Worker \u00b6 Worker is a protocol (in Swift) and interface (in Kotlin) that defines an asynchronous task that can be performed by a Workflow . Worker s only emit outputs, they do not have a Rendering type. They are similar to child workflows with Void / Unit rendering types. A workflow can ask the infrastructure to await the result of a worker by passing that worker to the RenderContext.runningWorker method within a call to the render method. A workflow can handle outputs from a Worker . Workers provide a declarative window into the imperative world \u00b6 As nice as it is to write declarative code, real apps need to interact with imperative APIs. Workers allow wrapping imperative APIs so that Workflows can interact with them in a declarative fashion. Instead of making imperative \u201cstart this, do that, now stop\u201d calls, a Workflow can say \u201cI declare that this task should now be running\u201d and let the infrastructure worry about ensuring the task is actually started when necessary, continues running if it was already in flight, and torn down when it\u2019s not needed anymore. Workers can perform side effects \u00b6 Unlike workflows\u2019 render method, which can be called many times and must be idempotent, workers are started and then ran until completion (or cancellation) \u2013 independently of how many times the workflow running them is actually rendered. This means that side effects that should be performed only once when a workflow enters a particular state, for example, should be placed into a Worker that the workflow runs while in that state. Workers are cold reactive streams \u00b6 Workers are effectively simple wrappers around asynchronous streams with explicit equivalence. In Swift, workers are backed by ReactiveSwift SignalProducer s . In Kotlin, they\u2019re backed by Kotlin Flow s . They are also easily derived from Reactive Streams Publishers , including RxJava Observable , Flowable , or Single instances. Worker subscriptions are managed automatically \u00b6 While Workers are backed by reactive streams with library-specific subscription APIs, you never actually subscribe directly to a worker yourself. Instead, a Workflow asks the infrastructure to run a worker, and the infrastructure will take care of initializing and tearing down the subscription as appropriate \u2013 much like how child workflows\u2019 lifetimes are automatically managed by the runtime. This makes it impossible to accidentally leak a subscription to a worker. Workers manage their own internal state \u00b6 Unlike Workflows, which are effectively collections of functions defining state transitions, Workers represent long-running tasks. For example, Workers commonly execute network requests. The worker\u2019s stream will open a socket and, either blocking on a background thread or asynchronously, read from that socket and eventually emit data to the workflow that is running it. Workers define their own equivalence \u00b6 Since Workers represent ongoing tasks, the infrastructure needs to be able to tell when two workers represent the same task (so it doesn\u2019t perform the task twice), or when a worker has changed between render passes such that it needs to be torn down and re-started for the new work. For these reasons, any time a workflow requests that a worker be run in sequential render passes, it is asked to compare itself with its last instance and determine if they are equivalent. In Swift, this is determined by the Worker isEquivalent:to: method. Worker s that conform to Equatable will automatically get an isEquivalent:to: method based on the Equatable implementation. In Kotlin, the Worker interface defines the doesSameWorkAs method which is passed the previous worker. Kotlin: Why don\u2019t Workers use equals ? Worker equivalence is a key part of the Worker API. The default implementation of equals , which just compares object identity, is almost always incorrect for workers. Defining a separate method forces implementers to think about how equivalence is defined. Workers are lifecycle-aware \u00b6 Workers are aware of when they\u2019re started (just like Workflows), but they are also aware of when they are torn down. This makes them handy for managing resources as well.","title":"Worker"},{"location":"userguide/core-worker/#workflow-core-worker","text":"","title":"Workflow Core: Worker"},{"location":"userguide/core-worker/#the-role-of-a-worker","text":"Worker is a protocol (in Swift) and interface (in Kotlin) that defines an asynchronous task that can be performed by a Workflow . Worker s only emit outputs, they do not have a Rendering type. They are similar to child workflows with Void / Unit rendering types. A workflow can ask the infrastructure to await the result of a worker by passing that worker to the RenderContext.runningWorker method within a call to the render method. A workflow can handle outputs from a Worker .","title":"The Role of a Worker"},{"location":"userguide/core-worker/#workers-provide-a-declarative-window-into-the-imperative-world","text":"As nice as it is to write declarative code, real apps need to interact with imperative APIs. Workers allow wrapping imperative APIs so that Workflows can interact with them in a declarative fashion. Instead of making imperative \u201cstart this, do that, now stop\u201d calls, a Workflow can say \u201cI declare that this task should now be running\u201d and let the infrastructure worry about ensuring the task is actually started when necessary, continues running if it was already in flight, and torn down when it\u2019s not needed anymore.","title":"Workers provide a declarative window into the imperative world"},{"location":"userguide/core-worker/#workers-can-perform-side-effects","text":"Unlike workflows\u2019 render method, which can be called many times and must be idempotent, workers are started and then ran until completion (or cancellation) \u2013 independently of how many times the workflow running them is actually rendered. This means that side effects that should be performed only once when a workflow enters a particular state, for example, should be placed into a Worker that the workflow runs while in that state.","title":"Workers can perform side effects"},{"location":"userguide/core-worker/#workers-are-cold-reactive-streams","text":"Workers are effectively simple wrappers around asynchronous streams with explicit equivalence. In Swift, workers are backed by ReactiveSwift SignalProducer s . In Kotlin, they\u2019re backed by Kotlin Flow s . They are also easily derived from Reactive Streams Publishers , including RxJava Observable , Flowable , or Single instances.","title":"Workers are cold reactive streams"},{"location":"userguide/core-worker/#worker-subscriptions-are-managed-automatically","text":"While Workers are backed by reactive streams with library-specific subscription APIs, you never actually subscribe directly to a worker yourself. Instead, a Workflow asks the infrastructure to run a worker, and the infrastructure will take care of initializing and tearing down the subscription as appropriate \u2013 much like how child workflows\u2019 lifetimes are automatically managed by the runtime. This makes it impossible to accidentally leak a subscription to a worker.","title":"Worker subscriptions are managed automatically"},{"location":"userguide/core-worker/#workers-manage-their-own-internal-state","text":"Unlike Workflows, which are effectively collections of functions defining state transitions, Workers represent long-running tasks. For example, Workers commonly execute network requests. The worker\u2019s stream will open a socket and, either blocking on a background thread or asynchronously, read from that socket and eventually emit data to the workflow that is running it.","title":"Workers manage their own internal state"},{"location":"userguide/core-worker/#workers-define-their-own-equivalence","text":"Since Workers represent ongoing tasks, the infrastructure needs to be able to tell when two workers represent the same task (so it doesn\u2019t perform the task twice), or when a worker has changed between render passes such that it needs to be torn down and re-started for the new work. For these reasons, any time a workflow requests that a worker be run in sequential render passes, it is asked to compare itself with its last instance and determine if they are equivalent. In Swift, this is determined by the Worker isEquivalent:to: method. Worker s that conform to Equatable will automatically get an isEquivalent:to: method based on the Equatable implementation. In Kotlin, the Worker interface defines the doesSameWorkAs method which is passed the previous worker. Kotlin: Why don\u2019t Workers use equals ? Worker equivalence is a key part of the Worker API. The default implementation of equals , which just compares object identity, is almost always incorrect for workers. Defining a separate method forces implementers to think about how equivalence is defined.","title":"Workers define their own equivalence"},{"location":"userguide/core-worker/#workers-are-lifecycle-aware","text":"Workers are aware of when they\u2019re started (just like Workflows), but they are also aware of when they are torn down. This makes them handy for managing resources as well.","title":"Workers are lifecycle-aware"},{"location":"userguide/core-workflow/","text":"Workflow Core: Workflow \u00b6 The Role of a Workflow \u00b6 Workflow is a protocol (in Swift) and interface (in Kotlin) that defines the contract for a single node in the workflow hierarchy. Swift public protocol Workflow : AnyWorkflowConvertible { associatedtype State associatedtype Output = Never associatedtype Rendering func makeInitialState () -> State func workflowDidChange ( from previousWorkflow : Self , state : inout State ) func render ( state : State , context : RenderContext < Self >) -> Rendering } Kotlin abstract class StatefulWorkflow < in PropsT , StateT , out OutputT : Any , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > { abstract fun initialState ( props : PropsT , initialSnapshot : Snapshot? ): StateT open fun onPropsChanged ( old : PropsT , new : PropsT , state : StateT ): StateT = state abstract fun render ( props : PropsT , state : StateT , context : RenderContext < StateT , OutputT > ): RenderingT abstract fun snapshotState ( state : StateT ): Snapshot } Swift: What is AnyWorkflowConvertible ? When a protocol has an associated Self type, Swift requires the use of a type-erasing wrapper to store references to instances of that protocol. AnyWorkflow is such a wrapper for Workflow . AnyWorkflowConvertible is a protocol with a single method that returns an AnyWorkflow . It is useful as a base type because it allows instances of Workflow to be used directly by any code that requires the type-erased AnyWorkflow . Kotlin: StatefulWorkflow vs Workflow It is a common practice in Kotlin to divide types into two parts: an interface for public API, and a class for private implementation. The Workflow library defines a Workflow interface, which should be used as the type of properties and parameters by code that needs to refer to a particular Workflow interface. The Workflow interface contains a single method, which simply returns a StatefulWorkflow \u2013 a Workflow can be described as \u201canything that can be expressed as a StatefulWorkflow .\u201d The library also defines two abstract classes which define the contract for workflows and should be subclassed to implement your workflows: StatefulWorkflow should be subclassed to implement Workflows that have private state . StatelessWorkflow should be subclassed to implement Workflows that don\u2019t have any private state. See Stateless Workflows . Workflows have several responsibilities: Workflows have state \u00b6 Once a Workflow has been started, it always operates in the context of some state. This state is divided into two parts: private state, which only the Workflow implementation itself knows about, which is defined by the State type, and properties (or \u201cprops\u201d), which is passed to the Workflow from its parent (more on hierarchical workflows below). Private state \u00b6 Every Workflow implementation defines a State type to maintain any necessary state while the workflow is running. For example, a tic-tac-toe game might have a state like this: Swift struct State { enum Player { case x case o } enum Space { case unfilled filled ( Player ) } // 3 rows * 3 columns = 9 spaces var spaces : [ Space ] = Array ( repeating : . unfilled , count : 9 ) var currentTurn : Player = . x } Kotlin data class State ( // 3 rows * 3 columns = 9 spaces val spaces : List < Space > = List ( 9 ) { Unfilled }, val currentTurn : Player = X ) { enum class Player { X , O } sealed class Space { object Unfilled : Space () data class Filled ( val player : Player ) : Space () } } When the workflow is first started, it is queried for an initial state value. From that point forward, the workflow may advance to a new state as the result of events occurring from various sources (which will be covered below). Stateless Workflows If a workflow does not have any private state, it is often referred to as a \u201cstateless workflow\u201d. A stateless Workflow is simply a Workflow that has a Void or Unit State type. See more below . Props \u00b6 Every Workflow implementation also defines data that is passed into it. The Workflow is not able to modify this state itself, but it may change between render passes. This public state is called Props . In Swift, the props are simply defined as properties of the struct implementing Workflow itself. In Kotlin, the Workflow interface defines a separate PropsT type parameter. (This additional type parameter is necessary due to Kotlin\u2019s lack of the Self type that Swift workflow\u2019s workflowDidChange method relies upon.) Swift TK Kotlin data class Props ( val playerXName : String val playerOName : String ) Workflows are advanced by WorkflowAction s \u00b6 Any time something happens that should advance a workflow \u2013 a UI event, a network response, a child\u2019s output event \u2013 actions are used to perform the update. For example, a workflow may respond to UI events by mapping those events into a type conforming to/implementing WorkflowAction . These types implement the logic to advance a workflow by: Advancing to a new state (Optionally) emitting an output event up the tree. WorkflowAction s are typically defined as enums with associated types (Swift) or sealed classes (Kotlin), and can include data from the event \u2013 for example, the ID of the item in the list that was clicked. Side effects such as logging button clicks to an analytics framework are also typically performed in actions. If you\u2019re familiar with React/Redux, WorkflowAction s are essentially reducers. Workflows can emit output events up the hierarchy to their parent \u00b6 When a workflow is advanced by an action, an optional output event can be sent up the workflow hierarchy. This is the opportunity for a workflow to notify its parent that something has happened (and the parent\u2019s opportunity to respond to that event by dispatching its own action, continuing up the tree as long as output events are emitted). Workflows produce an external representation of their state via Rendering \u00b6 Immediately after starting up, or after a state transition occurs, a workflow will have its render method called. This method is responsible for creating and returning a value of type Rendering . You can think of Rendering as the \u201cexternal published state\u201d of the workflow, and the render function as a map of ( Props + State + childrens\u2019 Rendering s) -> Rendering . While a workflow\u2019s internal state may contain more detailed or comprehensive state, the Rendering (external state) is a type that is useful outside of the workflow. Because a workflow\u2019s render method may be called by infrastructure for a variety of reasons, it\u2019s important to not perform side effects when rendering \u2014 render methods must be idempotent. Event-based side effects should use Actions and state-based side effects should use Workers. When building an interactive application, the Rendering type is commonly (but not always) a view model that will drive the UI layer. Workflows can respond to UI events \u00b6 The RenderContext that is passed into render as the last parameter provides some useful tools to assist in creating the Rendering value. If a workflow is producing a view model, it is common to need an event handler to respond to UI events. The RenderContext has API to create an event handler, called a Sink , that when called will advance the workflow by dispatching an action back to the workflow (for more on actions, see below ). Swift func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : \"A nice title\" , onTap : { sink . send ( Action . refreshButtonTapped ) } } Kotlin TK Workflows form a hierarchy (they may have children) \u00b6 As they produce a Rendering value, it is common for workflows to delegate some portion of that work to a child workflow . This is done via the RenderContext that is passed into the render method. In order to delegate to a child, the parent calls renderChild on the context, with the child workflow as the single argument. The infrastructure will spin up the child workflow (including initializing its initial state) if this is the first time this child has been used, or, if the child was also used on the previous render pass, the existing child will be updated. Either way, render will immediately be called on the child (by the Workflow infrastructure), and the resulting child\u2019s Rendering value will be returned to the parent. This allows a parent to return complex Rendering types (such as a view model representing the entire UI state of an application) without needing to model all of that complexity within a single workflow. Workflow Identity The Workflow infrastructure automatically detects the first time and the last subsequent time you\u2019ve asked to render a child workflow, and will automatically initialize the child and clean it up. In both Swift and Kotlin, this is done using the workflow\u2019s concrete type. Both languages use reflection to do this comparison (e.g. in Kotlin, the workflows\u2019 KClass es are compared). It is an error to render workflows of the same type more than once in the same render pass. Since type is used for workflow identity, the child rendering APIs take an optional string key to differentiate between multiple child workflows of the same type. Workflows can subscribe to external event sources \u00b6 If a workflow needs to respond to some external event source (e.g. push notifications), the workflow can ask the context to listen to those events from within the render method. Swift vs Kotlin In the Swift library, there is a special API for subscribing to hot streams ( Signal in ReactiveSwift). The Kotlin library does not have any special API for subscribing to hot streams (channels), though it does have extension methods to convert ReceiveChannel s , and RxJava Flowable s and Observables , to Worker s . The reason for this discrepancy is simply that we don\u2019t have any uses of channels yet in production, and so we\u2019ve decided to keep the API simpler. If we start using channels in the future, it may make sense to make subscribing to them a first-class API like in Swift. Workflows can perform asynchronous tasks (Workers) \u00b6 Workers are very similar in concept to child workflows. Unlike child workflows, however, workers do not have a Rendering type; they only exist to perform a single asynchronous task before sending zero or more output events back up the tree to their parent. For more information about workers, see the Worker section below. Workflows can be saved to and restored from a snapshot (Kotlin only) \u00b6 On every render pass, each workflow is asked to create a \u201csnapshot\u201d of its state \u2013 a lazily-produced serialization of the workflow\u2019s State as a binary blob. These Snapshot s are aggregated into a single Snapshot for the entire workflow tree and emitted along with the root workflow\u2019s Rendering . When the workflow runtime is started, it can be passed an optional Snapshot to restore the tree from. When non-null, the root workflow\u2019s snapshot is extracted and passed to the root workflow\u2019s initialState . The workflow can choose to either ignore the snapshot or use it to restore its State . On the first render pass, if the root workflow renders any children that were also being rendered when the snapshot was taken, those children\u2019s snapshots are also extracted from the aggregate and used to initialize their states. !!! faq Why don\u2019t Swift Workflows support snapshotting? Snapshotting was built into Kotlin workflows specifically to support Android\u2019s app lifecycle, which requires apps to serialize their current state before being backgrounded so that they can be restored in case the system needs to kill the hosting process. iOS apps don\u2019t have this requirement, so the Swift library doesn\u2019t need to support it.","title":"Workflow"},{"location":"userguide/core-workflow/#workflow-core-workflow","text":"","title":"Workflow Core: Workflow"},{"location":"userguide/core-workflow/#the-role-of-a-workflow","text":"Workflow is a protocol (in Swift) and interface (in Kotlin) that defines the contract for a single node in the workflow hierarchy. Swift public protocol Workflow : AnyWorkflowConvertible { associatedtype State associatedtype Output = Never associatedtype Rendering func makeInitialState () -> State func workflowDidChange ( from previousWorkflow : Self , state : inout State ) func render ( state : State , context : RenderContext < Self >) -> Rendering } Kotlin abstract class StatefulWorkflow < in PropsT , StateT , out OutputT : Any , out RenderingT > : Workflow < PropsT , OutputT , RenderingT > { abstract fun initialState ( props : PropsT , initialSnapshot : Snapshot? ): StateT open fun onPropsChanged ( old : PropsT , new : PropsT , state : StateT ): StateT = state abstract fun render ( props : PropsT , state : StateT , context : RenderContext < StateT , OutputT > ): RenderingT abstract fun snapshotState ( state : StateT ): Snapshot } Swift: What is AnyWorkflowConvertible ? When a protocol has an associated Self type, Swift requires the use of a type-erasing wrapper to store references to instances of that protocol. AnyWorkflow is such a wrapper for Workflow . AnyWorkflowConvertible is a protocol with a single method that returns an AnyWorkflow . It is useful as a base type because it allows instances of Workflow to be used directly by any code that requires the type-erased AnyWorkflow . Kotlin: StatefulWorkflow vs Workflow It is a common practice in Kotlin to divide types into two parts: an interface for public API, and a class for private implementation. The Workflow library defines a Workflow interface, which should be used as the type of properties and parameters by code that needs to refer to a particular Workflow interface. The Workflow interface contains a single method, which simply returns a StatefulWorkflow \u2013 a Workflow can be described as \u201canything that can be expressed as a StatefulWorkflow .\u201d The library also defines two abstract classes which define the contract for workflows and should be subclassed to implement your workflows: StatefulWorkflow should be subclassed to implement Workflows that have private state . StatelessWorkflow should be subclassed to implement Workflows that don\u2019t have any private state. See Stateless Workflows . Workflows have several responsibilities:","title":"The Role of a Workflow"},{"location":"userguide/core-workflow/#workflows-have-state","text":"Once a Workflow has been started, it always operates in the context of some state. This state is divided into two parts: private state, which only the Workflow implementation itself knows about, which is defined by the State type, and properties (or \u201cprops\u201d), which is passed to the Workflow from its parent (more on hierarchical workflows below).","title":"Workflows have state"},{"location":"userguide/core-workflow/#private-state","text":"Every Workflow implementation defines a State type to maintain any necessary state while the workflow is running. For example, a tic-tac-toe game might have a state like this: Swift struct State { enum Player { case x case o } enum Space { case unfilled filled ( Player ) } // 3 rows * 3 columns = 9 spaces var spaces : [ Space ] = Array ( repeating : . unfilled , count : 9 ) var currentTurn : Player = . x } Kotlin data class State ( // 3 rows * 3 columns = 9 spaces val spaces : List < Space > = List ( 9 ) { Unfilled }, val currentTurn : Player = X ) { enum class Player { X , O } sealed class Space { object Unfilled : Space () data class Filled ( val player : Player ) : Space () } } When the workflow is first started, it is queried for an initial state value. From that point forward, the workflow may advance to a new state as the result of events occurring from various sources (which will be covered below). Stateless Workflows If a workflow does not have any private state, it is often referred to as a \u201cstateless workflow\u201d. A stateless Workflow is simply a Workflow that has a Void or Unit State type. See more below .","title":"Private state"},{"location":"userguide/core-workflow/#props","text":"Every Workflow implementation also defines data that is passed into it. The Workflow is not able to modify this state itself, but it may change between render passes. This public state is called Props . In Swift, the props are simply defined as properties of the struct implementing Workflow itself. In Kotlin, the Workflow interface defines a separate PropsT type parameter. (This additional type parameter is necessary due to Kotlin\u2019s lack of the Self type that Swift workflow\u2019s workflowDidChange method relies upon.) Swift TK Kotlin data class Props ( val playerXName : String val playerOName : String )","title":"Props"},{"location":"userguide/core-workflow/#workflows-are-advanced-by-workflowactions","text":"Any time something happens that should advance a workflow \u2013 a UI event, a network response, a child\u2019s output event \u2013 actions are used to perform the update. For example, a workflow may respond to UI events by mapping those events into a type conforming to/implementing WorkflowAction . These types implement the logic to advance a workflow by: Advancing to a new state (Optionally) emitting an output event up the tree. WorkflowAction s are typically defined as enums with associated types (Swift) or sealed classes (Kotlin), and can include data from the event \u2013 for example, the ID of the item in the list that was clicked. Side effects such as logging button clicks to an analytics framework are also typically performed in actions. If you\u2019re familiar with React/Redux, WorkflowAction s are essentially reducers.","title":"Workflows are advanced by WorkflowActions"},{"location":"userguide/core-workflow/#workflows-can-emit-output-events-up-the-hierarchy-to-their-parent","text":"When a workflow is advanced by an action, an optional output event can be sent up the workflow hierarchy. This is the opportunity for a workflow to notify its parent that something has happened (and the parent\u2019s opportunity to respond to that event by dispatching its own action, continuing up the tree as long as output events are emitted).","title":"Workflows can emit output events up the hierarchy to their parent"},{"location":"userguide/core-workflow/#workflows-produce-an-external-representation-of-their-state-via-rendering","text":"Immediately after starting up, or after a state transition occurs, a workflow will have its render method called. This method is responsible for creating and returning a value of type Rendering . You can think of Rendering as the \u201cexternal published state\u201d of the workflow, and the render function as a map of ( Props + State + childrens\u2019 Rendering s) -> Rendering . While a workflow\u2019s internal state may contain more detailed or comprehensive state, the Rendering (external state) is a type that is useful outside of the workflow. Because a workflow\u2019s render method may be called by infrastructure for a variety of reasons, it\u2019s important to not perform side effects when rendering \u2014 render methods must be idempotent. Event-based side effects should use Actions and state-based side effects should use Workers. When building an interactive application, the Rendering type is commonly (but not always) a view model that will drive the UI layer.","title":"Workflows produce an external representation of their state via Rendering"},{"location":"userguide/core-workflow/#workflows-can-respond-to-ui-events","text":"The RenderContext that is passed into render as the last parameter provides some useful tools to assist in creating the Rendering value. If a workflow is producing a view model, it is common to need an event handler to respond to UI events. The RenderContext has API to create an event handler, called a Sink , that when called will advance the workflow by dispatching an action back to the workflow (for more on actions, see below ). Swift func render ( state : State , context : RenderContext < DemoWorkflow >) -> DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : \"A nice title\" , onTap : { sink . send ( Action . refreshButtonTapped ) } } Kotlin TK","title":"Workflows can respond to UI events"},{"location":"userguide/core-workflow/#workflows-form-a-hierarchy-they-may-have-children","text":"As they produce a Rendering value, it is common for workflows to delegate some portion of that work to a child workflow . This is done via the RenderContext that is passed into the render method. In order to delegate to a child, the parent calls renderChild on the context, with the child workflow as the single argument. The infrastructure will spin up the child workflow (including initializing its initial state) if this is the first time this child has been used, or, if the child was also used on the previous render pass, the existing child will be updated. Either way, render will immediately be called on the child (by the Workflow infrastructure), and the resulting child\u2019s Rendering value will be returned to the parent. This allows a parent to return complex Rendering types (such as a view model representing the entire UI state of an application) without needing to model all of that complexity within a single workflow. Workflow Identity The Workflow infrastructure automatically detects the first time and the last subsequent time you\u2019ve asked to render a child workflow, and will automatically initialize the child and clean it up. In both Swift and Kotlin, this is done using the workflow\u2019s concrete type. Both languages use reflection to do this comparison (e.g. in Kotlin, the workflows\u2019 KClass es are compared). It is an error to render workflows of the same type more than once in the same render pass. Since type is used for workflow identity, the child rendering APIs take an optional string key to differentiate between multiple child workflows of the same type.","title":"Workflows form a hierarchy (they may have children)"},{"location":"userguide/core-workflow/#workflows-can-subscribe-to-external-event-sources","text":"If a workflow needs to respond to some external event source (e.g. push notifications), the workflow can ask the context to listen to those events from within the render method. Swift vs Kotlin In the Swift library, there is a special API for subscribing to hot streams ( Signal in ReactiveSwift). The Kotlin library does not have any special API for subscribing to hot streams (channels), though it does have extension methods to convert ReceiveChannel s , and RxJava Flowable s and Observables , to Worker s . The reason for this discrepancy is simply that we don\u2019t have any uses of channels yet in production, and so we\u2019ve decided to keep the API simpler. If we start using channels in the future, it may make sense to make subscribing to them a first-class API like in Swift.","title":"Workflows can subscribe to external event sources"},{"location":"userguide/core-workflow/#workflows-can-perform-asynchronous-tasks-workers","text":"Workers are very similar in concept to child workflows. Unlike child workflows, however, workers do not have a Rendering type; they only exist to perform a single asynchronous task before sending zero or more output events back up the tree to their parent. For more information about workers, see the Worker section below.","title":"Workflows can perform asynchronous tasks (Workers)"},{"location":"userguide/core-workflow/#workflows-can-be-saved-to-and-restored-from-a-snapshot-kotlin-only","text":"On every render pass, each workflow is asked to create a \u201csnapshot\u201d of its state \u2013 a lazily-produced serialization of the workflow\u2019s State as a binary blob. These Snapshot s are aggregated into a single Snapshot for the entire workflow tree and emitted along with the root workflow\u2019s Rendering . When the workflow runtime is started, it can be passed an optional Snapshot to restore the tree from. When non-null, the root workflow\u2019s snapshot is extracted and passed to the root workflow\u2019s initialState . The workflow can choose to either ignore the snapshot or use it to restore its State . On the first render pass, if the root workflow renders any children that were also being rendered when the snapshot was taken, those children\u2019s snapshots are also extracted from the aggregate and used to initialize their states. !!! faq Why don\u2019t Swift Workflows support snapshotting? Snapshotting was built into Kotlin workflows specifically to support Android\u2019s app lifecycle, which requires apps to serialize their current state before being backgrounded so that they can be restored in case the system needs to kill the hosting process. iOS apps don\u2019t have this requirement, so the Swift library doesn\u2019t need to support it.","title":"Workflows can be saved to and restored from a snapshot (Kotlin only)"},{"location":"userguide/implementation/","text":"Implementation Notes \u00b6 Work in progress\u2026 Swift \u00b6 The Render loop \u00b6 Initial pass \u00b6 The root of your workflow hierarchy gets put into a WorkflowHost (if you\u2019re using ContainerViewController this is created for you). As part of its initializer, WorkflowHost creates a WorkflowNode that wraps the given root Workflow (and keeps track of the Workflow \u2018s State ). It then calls render() on the node: // WorkflowHost public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) { self . debugger = debugger self . rootNode = WorkflowNode ( workflow : workflow ) // 1. Create the node self . mutableRendering = MutableProperty ( self . rootNode . render ()) // 2. Call render() WorkflowNode contains a SubtreeManager , whose primary purpose is to manage child workflows (more on this later). When render() gets invoked on the node, it calls render on the SubtreeManager and passes a closure that takes a RenderContext and returns a Rendering for the Workflow associated with the node. // WorkflowNode func render () -> WorkflowType . Rendering { return subtreeManager . render { context in return workflow . render ( state : state , context : context ) } } The SubtreeManager instantiates a RenderContext and invokes the closure that was passed in. This last step generates the Rendering . This Rendering then gets passed back up the call stack until it reaches the WorkflowHost . Composition \u00b6 In cases where a Workflow has child Workflow s, the render sequence is similar. The tutorial goes through this in more detail. Essentially, a Workflow containing child Workflow s calls render(context:key:outputMap:) on each child Workflow and passes in the RenderContext . The context does some bookkeeping for the child Workflow (creating or updating a ChildWorkflow<T> ) and then calls render() . ChildWorkflow<T>.render() calls render() on its WorkflowNode and we recurse back to step 2.","title":"Under the Hood: Implementation Notes"},{"location":"userguide/implementation/#implementation-notes","text":"Work in progress\u2026","title":"Implementation Notes"},{"location":"userguide/implementation/#swift","text":"","title":"Swift"},{"location":"userguide/implementation/#the-render-loop","text":"","title":"The Render loop"},{"location":"userguide/implementation/#initial-pass","text":"The root of your workflow hierarchy gets put into a WorkflowHost (if you\u2019re using ContainerViewController this is created for you). As part of its initializer, WorkflowHost creates a WorkflowNode that wraps the given root Workflow (and keeps track of the Workflow \u2018s State ). It then calls render() on the node: // WorkflowHost public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) { self . debugger = debugger self . rootNode = WorkflowNode ( workflow : workflow ) // 1. Create the node self . mutableRendering = MutableProperty ( self . rootNode . render ()) // 2. Call render() WorkflowNode contains a SubtreeManager , whose primary purpose is to manage child workflows (more on this later). When render() gets invoked on the node, it calls render on the SubtreeManager and passes a closure that takes a RenderContext and returns a Rendering for the Workflow associated with the node. // WorkflowNode func render () -> WorkflowType . Rendering { return subtreeManager . render { context in return workflow . render ( state : state , context : context ) } } The SubtreeManager instantiates a RenderContext and invokes the closure that was passed in. This last step generates the Rendering . This Rendering then gets passed back up the call stack until it reaches the WorkflowHost .","title":"Initial pass"},{"location":"userguide/implementation/#composition","text":"In cases where a Workflow has child Workflow s, the render sequence is similar. The tutorial goes through this in more detail. Essentially, a Workflow containing child Workflow s calls render(context:key:outputMap:) on each child Workflow and passes in the RenderContext . The context does some bookkeeping for the child Workflow (creating or updating a ChildWorkflow<T> ) and then calls render() . ChildWorkflow<T>.render() calls render() on its WorkflowNode and we recurse back to step 2.","title":"Composition"},{"location":"userguide/motivation/","text":"Motivation & Architectural Concepts \u00b6 Coming soon!","title":"Motivation & Architectural Concepts"},{"location":"userguide/motivation/#motivation-architectural-concepts","text":"Coming soon!","title":"Motivation &amp; Architectural Concepts"},{"location":"userguide/testing-concepts/","text":"Workflow Testing \u00b6 Coming soon!","title":"Workflow Testing"},{"location":"userguide/testing-concepts/#workflow-testing","text":"Coming soon!","title":"Workflow Testing"},{"location":"userguide/ui-concepts/","text":"Workflow UI \u00b6 Coming soon!","title":"Workflow UI"},{"location":"userguide/ui-concepts/#workflow-ui","text":"Coming soon!","title":"Workflow UI"}]}